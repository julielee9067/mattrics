
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d10  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3fc  0800a3fc  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3fc  0800a3fc  0001a3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a404  0800a404  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a404  0800a404  0001a404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a408  0800a408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a40c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004558  20000088  0800a494  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200045e0  0800a494  000245e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c47  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372c  00000000  00000000  00038cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  0003d628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a80  00000000  00000000  0003e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017448  00000000  00000000  000561a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084bb3  00000000  00000000  0006d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f219b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005258  00000000  00000000  000f21f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000088 	.word	0x20000088
 8000158:	00000000 	.word	0x00000000
 800015c:	08009e34 	.word	0x08009e34

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000008c 	.word	0x2000008c
 8000178:	08009e34 	.word	0x08009e34

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	6039      	str	r1, [r7, #0]
 800047e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000484:	3301      	adds	r3, #1
 8000486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800048a:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	429a      	cmp	r2, r3
 8000494:	d007      	beq.n	80004a6 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	79f9      	ldrb	r1, [r7, #7]
 800049e:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d013      	beq.n	80004fa <Uart_isr+0x4a>
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	f003 0320 	and.w	r3, r3, #32
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d00e      	beq.n	80004fa <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <Uart_isr+0xac>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ffbe 	bl	8000474 <store_char>
        return;
 80004f8:	e02c      	b.n	8000554 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000500:	2b00      	cmp	r3, #0
 8000502:	d027      	beq.n	8000554 <Uart_isr+0xa4>
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d022      	beq.n	8000554 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <Uart_isr+0xb0>)
 8000510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <Uart_isr+0xb0>)
 8000514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000516:	429a      	cmp	r2, r3
 8000518:	d108      	bne.n	800052c <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000528:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 800052a:	e012      	b.n	8000552 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <Uart_isr+0xb0>)
 800052e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <Uart_isr+0xb0>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <Uart_isr+0xb0>)
 8000538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053a:	3301      	adds	r3, #1
 800053c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000540:	4a07      	ldr	r2, [pc, #28]	; (8000560 <Uart_isr+0xb0>)
 8000542:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	7bba      	ldrb	r2, [r7, #14]
 8000550:	605a      	str	r2, [r3, #4]
    	return;
 8000552:	bf00      	nop
    }
}
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000378 	.word	0x20000378
 8000560:	200000a4 	.word	0x200000a4

08000564 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <SELECT+0x18>)
 800056e:	f002 f859 	bl	8002624 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000572:	2001      	movs	r0, #1
 8000574:	f001 fac2 	bl	8001afc <HAL_Delay>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40020400 	.word	0x40020400

08000580 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2140      	movs	r1, #64	; 0x40
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <DESELECT+0x18>)
 800058a:	f002 f84b 	bl	8002624 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f001 fab4 	bl	8001afc <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a6:	bf00      	nop
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <SPI_TxByte+0x30>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f003 0302 	and.w	r3, r3, #2
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d1f8      	bne.n	80005a8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005b6:	1df9      	adds	r1, r7, #7
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <SPI_TxByte+0x30>)
 80005be:	f004 fc67 	bl	8004e90 <HAL_SPI_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000384 	.word	0x20000384

080005d0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005dc:	bf00      	nop
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <SPI_TxBuffer+0x30>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d1f8      	bne.n	80005de <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	6879      	ldr	r1, [r7, #4]
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <SPI_TxBuffer+0x30>)
 80005f4:	f004 fc4c 	bl	8004e90 <HAL_SPI_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000384 	.word	0x20000384

08000604 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800060a:	23ff      	movs	r3, #255	; 0xff
 800060c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800060e:	bf00      	nop
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <SPI_RxByte+0x34>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	2b02      	cmp	r3, #2
 800061c:	d1f8      	bne.n	8000610 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800061e:	1dba      	adds	r2, r7, #6
 8000620:	1df9      	adds	r1, r7, #7
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <SPI_RxByte+0x34>)
 800062a:	f004 fd6d 	bl	8005108 <HAL_SPI_TransmitReceive>

	return data;
 800062e:	79bb      	ldrb	r3, [r7, #6]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000384 	.word	0x20000384

0800063c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000644:	f7ff ffde 	bl	8000604 <SPI_RxByte>
 8000648:	4603      	mov	r3, r0
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SD_ReadyWait+0x30>)
 8000660:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000664:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000666:	f7ff ffcd 	bl	8000604 <SPI_RxByte>
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2bff      	cmp	r3, #255	; 0xff
 8000672:	d003      	beq.n	800067c <SD_ReadyWait+0x24>
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <SD_ReadyWait+0x30>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1f4      	bne.n	8000666 <SD_ReadyWait+0xe>

	return res;
 800067c:	79fb      	ldrb	r3, [r7, #7]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000037c 	.word	0x2000037c

0800068c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000692:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000696:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000698:	f7ff ff72 	bl	8000580 <DESELECT>
	for(int i = 0; i < 10; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	e005      	b.n	80006ae <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80006a2:	20ff      	movs	r0, #255	; 0xff
 80006a4:	f7ff ff7a 	bl	800059c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b09      	cmp	r3, #9
 80006b2:	ddf6      	ble.n	80006a2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80006b4:	f7ff ff56 	bl	8000564 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80006cc:	2395      	movs	r3, #149	; 0x95
 80006ce:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80006d0:	463b      	mov	r3, r7
 80006d2:	2106      	movs	r1, #6
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff7b 	bl	80005d0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80006da:	e002      	b.n	80006e2 <SD_PowerOn+0x56>
	{
		cnt--;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3b01      	subs	r3, #1
 80006e0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80006e2:	f7ff ff8f 	bl	8000604 <SPI_RxByte>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d002      	beq.n	80006f2 <SD_PowerOn+0x66>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f4      	bne.n	80006dc <SD_PowerOn+0x50>
	}

	DESELECT();
 80006f2:	f7ff ff45 	bl	8000580 <DESELECT>
	SPI_TxByte(0XFF);
 80006f6:	20ff      	movs	r0, #255	; 0xff
 80006f8:	f7ff ff50 	bl	800059c <SPI_TxByte>

	PowerFlag = 1;
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <SD_PowerOn+0x80>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ed 	.word	0x200000ed

08000710 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <SD_PowerOff+0x14>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	200000ed 	.word	0x200000ed

08000728 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <SD_CheckPower+0x10>)
 800072e:	781b      	ldrb	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	200000ed 	.word	0x200000ed

0800073c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SD_RxDataBlock+0x58>)
 8000748:	22c8      	movs	r2, #200	; 0xc8
 800074a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800074c:	f7ff ff5a 	bl	8000604 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d103      	bne.n	8000762 <SD_RxDataBlock+0x26>
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <SD_RxDataBlock+0x58>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f4      	bne.n	800074c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2bfe      	cmp	r3, #254	; 0xfe
 8000766:	d001      	beq.n	800076c <SD_RxDataBlock+0x30>
 8000768:	2300      	movs	r3, #0
 800076a:	e00f      	b.n	800078c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff62 	bl	800063c <SPI_RxBytePtr>
	} while(len--);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	603a      	str	r2, [r7, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f4      	bne.n	800076c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000782:	f7ff ff3f 	bl	8000604 <SPI_RxByte>
	SPI_RxByte();
 8000786:	f7ff ff3d 	bl	8000604 <SPI_RxByte>

	return TRUE;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000037e 	.word	0x2000037e

08000798 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80007a8:	f7ff ff56 	bl	8000658 <SD_ReadyWait>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2bff      	cmp	r3, #255	; 0xff
 80007b0:	d001      	beq.n	80007b6 <SD_TxDataBlock+0x1e>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e02f      	b.n	8000816 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff feef 	bl	800059c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2bfd      	cmp	r3, #253	; 0xfd
 80007c2:	d020      	beq.n	8000806 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff01 	bl	80005d0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80007ce:	f7ff ff19 	bl	8000604 <SPI_RxByte>
		SPI_RxByte();
 80007d2:	f7ff ff17 	bl	8000604 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80007d6:	e00b      	b.n	80007f0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80007d8:	f7ff ff14 	bl	8000604 <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f003 031f 	and.w	r3, r3, #31
 80007e6:	2b05      	cmp	r3, #5
 80007e8:	d006      	beq.n	80007f8 <SD_TxDataBlock+0x60>
			i++;
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	3301      	adds	r3, #1
 80007ee:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80007f0:	7bbb      	ldrb	r3, [r7, #14]
 80007f2:	2b40      	cmp	r3, #64	; 0x40
 80007f4:	d9f0      	bls.n	80007d8 <SD_TxDataBlock+0x40>
 80007f6:	e000      	b.n	80007fa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80007f8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80007fa:	bf00      	nop
 80007fc:	f7ff ff02 	bl	8000604 <SPI_RxByte>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0fa      	beq.n	80007fc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b05      	cmp	r3, #5
 800080e:	d101      	bne.n	8000814 <SD_TxDataBlock+0x7c>
 8000810:	2301      	movs	r3, #1
 8000812:	e000      	b.n	8000816 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b084      	sub	sp, #16
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	6039      	str	r1, [r7, #0]
 8000828:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800082a:	f7ff ff15 	bl	8000658 <SD_ReadyWait>
 800082e:	4603      	mov	r3, r0
 8000830:	2bff      	cmp	r3, #255	; 0xff
 8000832:	d001      	beq.n	8000838 <SD_SendCmd+0x1a>
 8000834:	23ff      	movs	r3, #255	; 0xff
 8000836:	e042      	b.n	80008be <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff feae 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	0e1b      	lsrs	r3, r3, #24
 8000844:	b2db      	uxtb	r3, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fea8 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fea2 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	0a1b      	lsrs	r3, r3, #8
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe9c 	bl	800059c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe97 	bl	800059c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b40      	cmp	r3, #64	; 0x40
 8000872:	d102      	bne.n	800087a <SD_SendCmd+0x5c>
 8000874:	2395      	movs	r3, #149	; 0x95
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e007      	b.n	800088a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b48      	cmp	r3, #72	; 0x48
 800087e:	d102      	bne.n	8000886 <SD_SendCmd+0x68>
 8000880:	2387      	movs	r3, #135	; 0x87
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e001      	b.n	800088a <SD_SendCmd+0x6c>
	else crc = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe85 	bl	800059c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b4c      	cmp	r3, #76	; 0x4c
 8000896:	d101      	bne.n	800089c <SD_SendCmd+0x7e>
 8000898:	f7ff feb4 	bl	8000604 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800089c:	230a      	movs	r3, #10
 800089e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80008a0:	f7ff feb0 	bl	8000604 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80008a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	da05      	bge.n	80008bc <SD_SendCmd+0x9e>
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	73bb      	strb	r3, [r7, #14]
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f1      	bne.n	80008a0 <SD_SendCmd+0x82>

	return res;
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x14>
 80008d8:	2301      	movs	r3, #1
 80008da:	e0d1      	b.n	8000a80 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80008dc:	4b6a      	ldr	r3, [pc, #424]	; (8000a88 <SD_disk_initialize+0x1c0>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <SD_disk_initialize+0x2a>
 80008ea:	4b67      	ldr	r3, [pc, #412]	; (8000a88 <SD_disk_initialize+0x1c0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	e0c6      	b.n	8000a80 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80008f2:	f7ff fecb 	bl	800068c <SD_PowerOn>

	/* slave select */
	SELECT();
 80008f6:	f7ff fe35 	bl	8000564 <SELECT>

	/* check disk type */
	type = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80008fe:	2100      	movs	r1, #0
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	f7ff ff8c 	bl	800081e <SD_SendCmd>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	f040 80a1 	bne.w	8000a50 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000914:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000916:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800091a:	2048      	movs	r0, #72	; 0x48
 800091c:	f7ff ff7f 	bl	800081e <SD_SendCmd>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d155      	bne.n	80009d2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000926:	2300      	movs	r3, #0
 8000928:	73fb      	strb	r3, [r7, #15]
 800092a:	e00c      	b.n	8000946 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800092c:	7bfc      	ldrb	r4, [r7, #15]
 800092e:	f7ff fe69 	bl	8000604 <SPI_RxByte>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	4423      	add	r3, r4
 800093c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3301      	adds	r3, #1
 8000944:	73fb      	strb	r3, [r7, #15]
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b03      	cmp	r3, #3
 800094a:	d9ef      	bls.n	800092c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800094c:	7abb      	ldrb	r3, [r7, #10]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d17e      	bne.n	8000a50 <SD_disk_initialize+0x188>
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	2baa      	cmp	r3, #170	; 0xaa
 8000956:	d17b      	bne.n	8000a50 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000958:	2100      	movs	r1, #0
 800095a:	2077      	movs	r0, #119	; 0x77
 800095c:	f7ff ff5f 	bl	800081e <SD_SendCmd>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d807      	bhi.n	8000976 <SD_disk_initialize+0xae>
 8000966:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800096a:	2069      	movs	r0, #105	; 0x69
 800096c:	f7ff ff57 	bl	800081e <SD_SendCmd>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d004      	beq.n	8000980 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000976:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ec      	bne.n	8000958 <SD_disk_initialize+0x90>
 800097e:	e000      	b.n	8000982 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000980:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000982:	4b42      	ldr	r3, [pc, #264]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d062      	beq.n	8000a50 <SD_disk_initialize+0x188>
 800098a:	2100      	movs	r1, #0
 800098c:	207a      	movs	r0, #122	; 0x7a
 800098e:	f7ff ff46 	bl	800081e <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d15b      	bne.n	8000a50 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e00c      	b.n	80009b8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800099e:	7bfc      	ldrb	r4, [r7, #15]
 80009a0:	f7ff fe30 	bl	8000604 <SPI_RxByte>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	4423      	add	r3, r4
 80009ae:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	3301      	adds	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d9ef      	bls.n	800099e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009be:	7a3b      	ldrb	r3, [r7, #8]
 80009c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <SD_disk_initialize+0x104>
 80009c8:	230c      	movs	r3, #12
 80009ca:	e000      	b.n	80009ce <SD_disk_initialize+0x106>
 80009cc:	2304      	movs	r3, #4
 80009ce:	73bb      	strb	r3, [r7, #14]
 80009d0:	e03e      	b.n	8000a50 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009d2:	2100      	movs	r1, #0
 80009d4:	2077      	movs	r0, #119	; 0x77
 80009d6:	f7ff ff22 	bl	800081e <SD_SendCmd>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d808      	bhi.n	80009f2 <SD_disk_initialize+0x12a>
 80009e0:	2100      	movs	r1, #0
 80009e2:	2069      	movs	r0, #105	; 0x69
 80009e4:	f7ff ff1b 	bl	800081e <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d801      	bhi.n	80009f2 <SD_disk_initialize+0x12a>
 80009ee:	2302      	movs	r3, #2
 80009f0:	e000      	b.n	80009f4 <SD_disk_initialize+0x12c>
 80009f2:	2301      	movs	r3, #1
 80009f4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d10e      	bne.n	8000a1a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80009fc:	2100      	movs	r1, #0
 80009fe:	2077      	movs	r0, #119	; 0x77
 8000a00:	f7ff ff0d 	bl	800081e <SD_SendCmd>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d80e      	bhi.n	8000a28 <SD_disk_initialize+0x160>
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2069      	movs	r0, #105	; 0x69
 8000a0e:	f7ff ff06 	bl	800081e <SD_SendCmd>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d107      	bne.n	8000a28 <SD_disk_initialize+0x160>
 8000a18:	e00c      	b.n	8000a34 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2041      	movs	r0, #65	; 0x41
 8000a1e:	f7ff fefe 	bl	800081e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d004      	beq.n	8000a32 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1e2      	bne.n	80009f6 <SD_disk_initialize+0x12e>
 8000a30:	e000      	b.n	8000a34 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a32:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <SD_disk_initialize+0x1c4>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <SD_disk_initialize+0x184>
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	2050      	movs	r0, #80	; 0x50
 8000a42:	f7ff feec 	bl	800081e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SD_disk_initialize+0x188>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <SD_disk_initialize+0x1c8>)
 8000a52:	7bbb      	ldrb	r3, [r7, #14]
 8000a54:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000a56:	f7ff fd93 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000a5a:	f7ff fdd3 	bl	8000604 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e001      	b.n	8000a7a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a76:	f7ff fe4b 	bl	8000710 <SD_PowerOff>
	}

	return Stat;
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <SD_disk_initialize+0x1c0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b2db      	uxtb	r3, r3
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd90      	pop	{r4, r7, pc}
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	2000037e 	.word	0x2000037e
 8000a90:	200000ec 	.word	0x200000ec

08000a94 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <SD_disk_status+0x14>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e002      	b.n	8000aae <SD_disk_status+0x1a>
	return Stat;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SD_disk_status+0x24>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000000 	.word	0x20000000

08000abc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	4603      	mov	r3, r0
 8000aca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <SD_disk_read+0x1c>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <SD_disk_read+0x20>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	e051      	b.n	8000b80 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <SD_disk_read+0xcc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SD_disk_read+0x32>
 8000aea:	2303      	movs	r3, #3
 8000aec:	e048      	b.n	8000b80 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <SD_disk_read+0xd0>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <SD_disk_read+0x44>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	025b      	lsls	r3, r3, #9
 8000afe:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b00:	f7ff fd30 	bl	8000564 <SELECT>

	if (count == 1)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d111      	bne.n	8000b2e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2051      	movs	r0, #81	; 0x51
 8000b0e:	f7ff fe86 	bl	800081e <SD_SendCmd>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d129      	bne.n	8000b6c <SD_disk_read+0xb0>
 8000b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1c:	68b8      	ldr	r0, [r7, #8]
 8000b1e:	f7ff fe0d 	bl	800073c <SD_RxDataBlock>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d021      	beq.n	8000b6c <SD_disk_read+0xb0>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	e01e      	b.n	8000b6c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2052      	movs	r0, #82	; 0x52
 8000b32:	f7ff fe74 	bl	800081e <SD_SendCmd>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d117      	bne.n	8000b6c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fdfb 	bl	800073c <SD_RxDataBlock>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00a      	beq.n	8000b62 <SD_disk_read+0xa6>
				buff += 512;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1ed      	bne.n	8000b3c <SD_disk_read+0x80>
 8000b60:	e000      	b.n	8000b64 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b62:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b64:	2100      	movs	r1, #0
 8000b66:	204c      	movs	r0, #76	; 0x4c
 8000b68:	f7ff fe59 	bl	800081e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b6c:	f7ff fd08 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000b70:	f7ff fd48 	bl	8000604 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bf14      	ite	ne
 8000b7a:	2301      	movne	r3, #1
 8000b7c:	2300      	moveq	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200000ec 	.word	0x200000ec

08000b90 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <SD_disk_write+0x1c>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d101      	bne.n	8000bb0 <SD_disk_write+0x20>
 8000bac:	2304      	movs	r3, #4
 8000bae:	e06b      	b.n	8000c88 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	; (8000c90 <SD_disk_write+0x100>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SD_disk_write+0x32>
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e062      	b.n	8000c88 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000bc2:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <SD_disk_write+0x100>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SD_disk_write+0x44>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e059      	b.n	8000c88 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <SD_disk_write+0x104>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <SD_disk_write+0x56>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000be6:	f7ff fcbd 	bl	8000564 <SELECT>

	if (count == 1)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d110      	bne.n	8000c12 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	2058      	movs	r0, #88	; 0x58
 8000bf4:	f7ff fe13 	bl	800081e <SD_SendCmd>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d13a      	bne.n	8000c74 <SD_disk_write+0xe4>
 8000bfe:	21fe      	movs	r1, #254	; 0xfe
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	f7ff fdc9 	bl	8000798 <SD_TxDataBlock>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d033      	beq.n	8000c74 <SD_disk_write+0xe4>
			count = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	e030      	b.n	8000c74 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <SD_disk_write+0x104>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2077      	movs	r0, #119	; 0x77
 8000c22:	f7ff fdfc 	bl	800081e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	2057      	movs	r0, #87	; 0x57
 8000c2a:	f7ff fdf8 	bl	800081e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2059      	movs	r0, #89	; 0x59
 8000c32:	f7ff fdf4 	bl	800081e <SD_SendCmd>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11b      	bne.n	8000c74 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c3c:	21fc      	movs	r1, #252	; 0xfc
 8000c3e:	68b8      	ldr	r0, [r7, #8]
 8000c40:	f7ff fdaa 	bl	8000798 <SD_TxDataBlock>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d00a      	beq.n	8000c60 <SD_disk_write+0xd0>
				buff += 512;
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c50:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1ee      	bne.n	8000c3c <SD_disk_write+0xac>
 8000c5e:	e000      	b.n	8000c62 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c60:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c62:	21fd      	movs	r1, #253	; 0xfd
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd97 	bl	8000798 <SD_TxDataBlock>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c74:	f7ff fc84 	bl	8000580 <DESELECT>
	SPI_RxByte();
 8000c78:	f7ff fcc4 	bl	8000604 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	200000ec 	.word	0x200000ec

08000c98 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	603a      	str	r2, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SD_disk_ioctl+0x1e>
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	e115      	b.n	8000ee2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b05      	cmp	r3, #5
 8000cc0:	d124      	bne.n	8000d0c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d012      	beq.n	8000cf0 <SD_disk_ioctl+0x58>
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	dc1a      	bgt.n	8000d04 <SD_disk_ioctl+0x6c>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <SD_disk_ioctl+0x40>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d006      	beq.n	8000ce4 <SD_disk_ioctl+0x4c>
 8000cd6:	e015      	b.n	8000d04 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000cd8:	f7ff fd1a 	bl	8000710 <SD_PowerOff>
			res = RES_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ce2:	e0fc      	b.n	8000ede <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000ce4:	f7ff fcd2 	bl	800068c <SD_PowerOn>
			res = RES_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cee:	e0f6      	b.n	8000ede <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	1c5c      	adds	r4, r3, #1
 8000cf4:	f7ff fd18 	bl	8000728 <SD_CheckPower>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d02:	e0ec      	b.n	8000ede <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000d04:	2304      	movs	r3, #4
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d0a:	e0e8      	b.n	8000ede <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d0c:	4b77      	ldr	r3, [pc, #476]	; (8000eec <SD_disk_ioctl+0x254>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SD_disk_ioctl+0x86>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e0e1      	b.n	8000ee2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000d1e:	f7ff fc21 	bl	8000564 <SELECT>

		switch (ctrl)
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	2b0d      	cmp	r3, #13
 8000d26:	f200 80cb 	bhi.w	8000ec0 <SD_disk_ioctl+0x228>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <SD_disk_ioctl+0x98>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000e2b 	.word	0x08000e2b
 8000d34:	08000d69 	.word	0x08000d69
 8000d38:	08000e1b 	.word	0x08000e1b
 8000d3c:	08000ec1 	.word	0x08000ec1
 8000d40:	08000ec1 	.word	0x08000ec1
 8000d44:	08000ec1 	.word	0x08000ec1
 8000d48:	08000ec1 	.word	0x08000ec1
 8000d4c:	08000ec1 	.word	0x08000ec1
 8000d50:	08000ec1 	.word	0x08000ec1
 8000d54:	08000ec1 	.word	0x08000ec1
 8000d58:	08000ec1 	.word	0x08000ec1
 8000d5c:	08000e3d 	.word	0x08000e3d
 8000d60:	08000e61 	.word	0x08000e61
 8000d64:	08000e85 	.word	0x08000e85
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2049      	movs	r0, #73	; 0x49
 8000d6c:	f7ff fd57 	bl	800081e <SD_SendCmd>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 80a8 	bne.w	8000ec8 <SD_disk_ioctl+0x230>
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fcdc 	bl	800073c <SD_RxDataBlock>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 809e 	beq.w	8000ec8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000d8c:	7b3b      	ldrb	r3, [r7, #12]
 8000d8e:	099b      	lsrs	r3, r3, #6
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d10e      	bne.n	8000db4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d96:	7d7b      	ldrb	r3, [r7, #21]
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	7d3b      	ldrb	r3, [r7, #20]
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000daa:	8bfb      	ldrh	r3, [r7, #30]
 8000dac:	029a      	lsls	r2, r3, #10
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e02e      	b.n	8000e12 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000db4:	7c7b      	ldrb	r3, [r7, #17]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	7dbb      	ldrb	r3, [r7, #22]
 8000dbe:	09db      	lsrs	r3, r3, #7
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	7d7b      	ldrb	r3, [r7, #21]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f003 0306 	and.w	r3, r3, #6
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ddc:	7d3b      	ldrb	r3, [r7, #20]
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	7cfb      	ldrb	r3, [r7, #19]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4413      	add	r3, r2
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	7cbb      	ldrb	r3, [r7, #18]
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e04:	8bfa      	ldrh	r2, [r7, #30]
 8000e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e0a:	3b09      	subs	r3, #9
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000e18:	e056      	b.n	8000ec8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e28:	e055      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e2a:	f7ff fc15 	bl	8000658 <SD_ReadyWait>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d14b      	bne.n	8000ecc <SD_disk_ioctl+0x234>
 8000e34:	2300      	movs	r3, #0
 8000e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e3a:	e047      	b.n	8000ecc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2049      	movs	r0, #73	; 0x49
 8000e40:	f7ff fced 	bl	800081e <SD_SendCmd>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d142      	bne.n	8000ed0 <SD_disk_ioctl+0x238>
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	6a38      	ldr	r0, [r7, #32]
 8000e4e:	f7ff fc75 	bl	800073c <SD_RxDataBlock>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d03b      	beq.n	8000ed0 <SD_disk_ioctl+0x238>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e5e:	e037      	b.n	8000ed0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e60:	2100      	movs	r1, #0
 8000e62:	204a      	movs	r0, #74	; 0x4a
 8000e64:	f7ff fcdb 	bl	800081e <SD_SendCmd>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d132      	bne.n	8000ed4 <SD_disk_ioctl+0x23c>
 8000e6e:	2110      	movs	r1, #16
 8000e70:	6a38      	ldr	r0, [r7, #32]
 8000e72:	f7ff fc63 	bl	800073c <SD_RxDataBlock>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d02b      	beq.n	8000ed4 <SD_disk_ioctl+0x23c>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000e82:	e027      	b.n	8000ed4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e84:	2100      	movs	r1, #0
 8000e86:	207a      	movs	r0, #122	; 0x7a
 8000e88:	f7ff fcc9 	bl	800081e <SD_SendCmd>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d116      	bne.n	8000ec0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000e98:	e00b      	b.n	8000eb2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000e9a:	6a3c      	ldr	r4, [r7, #32]
 8000e9c:	1c63      	adds	r3, r4, #1
 8000e9e:	623b      	str	r3, [r7, #32]
 8000ea0:	f7ff fbb0 	bl	8000604 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eac:	3301      	adds	r3, #1
 8000eae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d9ef      	bls.n	8000e9a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ec6:	e006      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ec8:	bf00      	nop
 8000eca:	e004      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ecc:	bf00      	nop
 8000ece:	e002      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ed0:	bf00      	nop
 8000ed2:	e000      	b.n	8000ed6 <SD_disk_ioctl+0x23e>
			break;
 8000ed4:	bf00      	nop
		}

		DESELECT();
 8000ed6:	f7ff fb53 	bl	8000580 <DESELECT>
		SPI_RxByte();
 8000eda:	f7ff fb93 	bl	8000604 <SPI_RxByte>
	}

	return res;
 8000ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	372c      	adds	r7, #44	; 0x2c
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000000 	.word	0x20000000

08000ef0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000efc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f0c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f10:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00b      	beq.n	8000f30 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f18:	e000      	b.n	8000f1c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f1a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f9      	beq.n	8000f1a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f26:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <_write>:
const char* SSID = "DreamersCottage-5G";
const char* PASSWD = "good4everyone";

// Rewriting printf to debugging console
int _write(int file, char* ptr, int len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
	int data_index;
	for(data_index = 0; data_index < len; data_index++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	e009      	b.n	8000f62 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1c5a      	adds	r2, r3, #1
 8000f52:	60ba      	str	r2, [r7, #8]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ffca 	bl	8000ef0 <ITM_SendChar>
	for(data_index = 0; data_index < len; data_index++)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dbf1      	blt.n	8000f4e <_write+0x12>
	}
	return len;
 8000f6a:	687b      	ldr	r3, [r7, #4]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fd4e 	bl	8001a1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f88d 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f9d1 	bl	800132c <MX_GPIO_Init>
  MX_ADC_Init();
 8000f8a:	f000 f8d9 	bl	8001140 <MX_ADC_Init>
  MX_I2C1_Init();
 8000f8e:	f000 f93f 	bl	8001210 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f92:	f000 f96b 	bl	800126c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000f96:	f000 f99f 	bl	80012d8 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000f9a:	f004 fd57 	bl	8005a4c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4838      	ldr	r0, [pc, #224]	; (8001084 <main+0x110>)
 8000fa4:	f001 fb3e 	bl	8002624 <HAL_GPIO_WritePin>
//  printf("Initialization complete \r\n");

  int init_cnt = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fae:	f102 020c 	add.w	r2, r2, #12
 8000fb2:	6013      	str	r3, [r2, #0]
  while (init_cnt < 4) {
 8000fb4:	e016      	b.n	8000fe4 <main+0x70>
	  init_cnt++;
 8000fb6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000fba:	f103 030c 	add.w	r3, r3, #12
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000fc6:	f102 020c 	add.w	r2, r2, #12
 8000fca:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd2:	482c      	ldr	r0, [pc, #176]	; (8001084 <main+0x110>)
 8000fd4:	f001 fb26 	bl	8002624 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fde:	4829      	ldr	r0, [pc, #164]	; (8001084 <main+0x110>)
 8000fe0:	f001 fb20 	bl	8002624 <HAL_GPIO_WritePin>
  while (init_cnt < 4) {
 8000fe4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000fe8:	f103 030c 	add.w	r3, r3, #12
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	dde1      	ble.n	8000fb6 <main+0x42>
  }

  //ITM_Port32(31) = 2;

//  int voltage_thresh_count = 0;
  int pressure_data[NUM_NODES] = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	3b0c      	subs	r3, #12
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffe:	461a      	mov	r2, r3
 8001000:	2100      	movs	r1, #0
 8001002:	f007 ffaf 	bl	8008f64 <memset>
  int array_cnt = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800100c:	f102 0204 	add.w	r2, r2, #4
 8001010:	6013      	str	r3, [r2, #0]

  HAL_Delay(500);
 8001012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001016:	f000 fd71 	bl	8001afc <HAL_Delay>
  f_mount(&fs, "", 0);
 800101a:	2200      	movs	r2, #0
 800101c:	491a      	ldr	r1, [pc, #104]	; (8001088 <main+0x114>)
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <main+0x118>)
 8001020:	f006 ff4e 	bl	8007ec0 <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001024:	2213      	movs	r2, #19
 8001026:	491a      	ldr	r1, [pc, #104]	; (8001090 <main+0x11c>)
 8001028:	481a      	ldr	r0, [pc, #104]	; (8001094 <main+0x120>)
 800102a:	f006 ff8f 	bl	8007f4c <f_open>
  f_lseek(&fil, f_size(&fil));
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <main+0x120>)
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	4619      	mov	r1, r3
 8001034:	4817      	ldr	r0, [pc, #92]	; (8001094 <main+0x120>)
 8001036:	f007 fb91 	bl	800875c <f_lseek>
  f_puts("Hello from Mattrics\n", &fil);
 800103a:	4916      	ldr	r1, [pc, #88]	; (8001094 <main+0x120>)
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <main+0x124>)
 800103e:	f007 fe27 	bl	8008c90 <f_puts>
  f_close(&fil);
 8001042:	4814      	ldr	r0, [pc, #80]	; (8001094 <main+0x120>)
 8001044:	f007 fb60 	bl	8008708 <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int counter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800104e:	f102 0208 	add.w	r2, r2, #8
 8001052:	6013      	str	r3, [r2, #0]
	while(1)
	{
		printf("%d\n", counter);
 8001054:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001058:	f103 0308 	add.w	r3, r3, #8
 800105c:	6819      	ldr	r1, [r3, #0]
 800105e:	480f      	ldr	r0, [pc, #60]	; (800109c <main+0x128>)
 8001060:	f007 ff88 	bl	8008f74 <iprintf>
		HAL_Delay(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f000 fd48 	bl	8001afc <HAL_Delay>
		counter++;
 800106c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8001070:	f103 0308 	add.w	r3, r3, #8
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 800107c:	f102 0208 	add.w	r2, r2, #8
 8001080:	6013      	str	r3, [r2, #0]
		printf("%d\n", counter);
 8001082:	e7e7      	b.n	8001054 <main+0xe0>
 8001084:	40020800 	.word	0x40020800
 8001088:	08009e8c 	.word	0x08009e8c
 800108c:	200003dc 	.word	0x200003dc
 8001090:	08009e90 	.word	0x08009e90
 8001094:	2000152c 	.word	0x2000152c
 8001098:	08009e9c 	.word	0x08009e9c
 800109c:	08009eb4 	.word	0x08009eb4

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b092      	sub	sp, #72	; 0x48
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2234      	movs	r2, #52	; 0x34
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 ff58 	bl	8008f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	4b1e      	ldr	r3, [pc, #120]	; (800113c <SystemClock_Config+0x9c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <SystemClock_Config+0x9c>)
 80010cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010d2:	2303      	movs	r3, #3
 80010d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010da:	2301      	movs	r3, #1
 80010dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010de:	2310      	movs	r3, #16
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e2:	2302      	movs	r3, #2
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80010ec:	2300      	movs	r3, #0
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80010f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f8b0 	bl	8004260 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001106:	f000 f9d1 	bl	80014ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2303      	movs	r3, #3
 8001110:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2101      	movs	r1, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fbcc 	bl	80048c0 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800112e:	f000 f9bd 	bl	80014ac <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3748      	adds	r7, #72	; 0x48
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <MX_ADC_Init+0xc8>)
 8001152:	4a2e      	ldr	r2, [pc, #184]	; (800120c <MX_ADC_Init+0xcc>)
 8001154:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <MX_ADC_Init+0xc8>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <MX_ADC_Init+0xc8>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001162:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_ADC_Init+0xc8>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_ADC_Init+0xc8>)
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <MX_ADC_Init+0xc8>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_ADC_Init+0xc8>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <MX_ADC_Init+0xc8>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <MX_ADC_Init+0xc8>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <MX_ADC_Init+0xc8>)
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <MX_ADC_Init+0xc8>)
 8001192:	2202      	movs	r2, #2
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <MX_ADC_Init+0xc8>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <MX_ADC_Init+0xc8>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC_Init+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_ADC_Init+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80011b2:	4815      	ldr	r0, [pc, #84]	; (8001208 <MX_ADC_Init+0xc8>)
 80011b4:	f000 fcc4 	bl	8001b40 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC_Init+0x82>
  {
    Error_Handler();
 80011be:	f000 f975 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80011c2:	2303      	movs	r3, #3
 80011c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC_Init+0xc8>)
 80011d4:	f000 fdfa 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 80011de:	f000 f965 	bl	80014ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011e2:	2309      	movs	r3, #9
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <MX_ADC_Init+0xc8>)
 80011f0:	f000 fdec 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80011fa:	f000 f957 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200014d8 	.word	0x200014d8
 800120c:	40012400 	.word	0x40012400

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f001 fa01 	bl	8002654 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 f928 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20001414 	.word	0x20001414
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001272:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <MX_SPI2_Init+0x68>)
 8001274:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800127c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_SPI2_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_SPI2_Init+0x64>)
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012a0:	2210      	movs	r2, #16
 80012a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012b8:	220a      	movs	r2, #10
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_SPI2_Init+0x64>)
 80012be:	f003 fd6b 	bl	8004d98 <HAL_SPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012c8:	f000 f8f0 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000384 	.word	0x20000384
 80012d4:	40003800 	.word	0x40003800

080012d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART3_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART3_UART_Init+0x4c>)
 8001310:	f004 fa6a 	bl	80057e8 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f000 f8c7 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000330 	.word	0x20000330
 8001328:	40004800 	.word	0x40004800

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b55      	ldr	r3, [pc, #340]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a54      	ldr	r2, [pc, #336]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <MX_GPIO_Init+0x16c>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	61d3      	str	r3, [r2, #28]
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a48      	ldr	r2, [pc, #288]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b46      	ldr	r3, [pc, #280]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b43      	ldr	r3, [pc, #268]	; (8001498 <MX_GPIO_Init+0x16c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a42      	ldr	r2, [pc, #264]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_GPIO_Init+0x16c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x16c>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a3c      	ldr	r2, [pc, #240]	; (8001498 <MX_GPIO_Init+0x16c>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_GPIO_Init+0x16c>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 80013ba:	2200      	movs	r2, #0
 80013bc:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 80013c0:	4836      	ldr	r0, [pc, #216]	; (800149c <MX_GPIO_Init+0x170>)
 80013c2:	f001 f92f 	bl	8002624 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 80013c6:	2200      	movs	r2, #0
 80013c8:	f241 01f7 	movw	r1, #4343	; 0x10f7
 80013cc:	4834      	ldr	r0, [pc, #208]	; (80014a0 <MX_GPIO_Init+0x174>)
 80013ce:	f001 f929 	bl	8002624 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80013d2:	2200      	movs	r2, #0
 80013d4:	f641 4165 	movw	r1, #7269	; 0x1c65
 80013d8:	4832      	ldr	r0, [pc, #200]	; (80014a4 <MX_GPIO_Init+0x178>)
 80013da:	f001 f923 	bl	8002624 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2104      	movs	r1, #4
 80013e2:	4831      	ldr	r0, [pc, #196]	; (80014a8 <MX_GPIO_Init+0x17c>)
 80013e4:	f001 f91e 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 80013e8:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 80013ec:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	4826      	ldr	r0, [pc, #152]	; (800149c <MX_GPIO_Init+0x170>)
 8001402:	f000 ff8f 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001406:	f241 03f7 	movw	r3, #4343	; 0x10f7
 800140a:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4820      	ldr	r0, [pc, #128]	; (80014a0 <MX_GPIO_Init+0x174>)
 8001420:	f000 ff80 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001424:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001428:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4819      	ldr	r0, [pc, #100]	; (80014a4 <MX_GPIO_Init+0x178>)
 800143e:	f000 ff71 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8001442:	2340      	movs	r3, #64	; 0x40
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4811      	ldr	r0, [pc, #68]	; (800149c <MX_GPIO_Init+0x170>)
 8001456:	f000 ff65 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 800145a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_GPIO_Init+0x174>)
 8001470:	f000 ff58 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001474:	2304      	movs	r3, #4
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_GPIO_Init+0x17c>)
 800148c:	f000 ff4a 	bl	8002324 <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	; 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020c00 	.word	0x40020c00

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <HAL_MspInit+0x68>)
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	4a17      	ldr	r2, [pc, #92]	; (8001520 <HAL_MspInit+0x68>)
 80014c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014c8:	6253      	str	r3, [r2, #36]	; 0x24
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_MspInit+0x68>)
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x68>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <HAL_MspInit+0x68>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x68>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x68>)
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_MspInit+0x68>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6253      	str	r3, [r2, #36]	; 0x24
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x68>)
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2005      	movs	r0, #5
 800150c:	f000 fe85 	bl	800221a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001510:	2005      	movs	r0, #5
 8001512:	f000 fe9e 	bl	8002252 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a2d      	ldr	r2, [pc, #180]	; (80015f8 <HAL_ADC_MspInit+0xd4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d153      	bne.n	80015ee <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001546:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 800154c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a20      	ldr	r2, [pc, #128]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_ADC_MspInit+0xd8>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 80015a6:	2304      	movs	r3, #4
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <HAL_ADC_MspInit+0xdc>)
 80015ba:	f000 feb3 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_3V3_Pin;
 80015be:	2308      	movs	r3, #8
 80015c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_3V3_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_ADC_MspInit+0xe0>)
 80015d2:	f000 fea7 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <HAL_ADC_MspInit+0xe4>)
 80015ea:	f000 fe9b 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40012400 	.word	0x40012400
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_I2C_MspInit+0x9c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d138      	bne.n	80016a0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001646:	f44f 7340 	mov.w	r3, #768	; 0x300
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001658:	2304      	movs	r3, #4
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <HAL_I2C_MspInit+0xa4>)
 8001664:	f000 fe5e 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 800166e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001672:	6253      	str	r3, [r2, #36]	; 0x24
 8001674:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_I2C_MspInit+0xa0>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	201f      	movs	r0, #31
 8001686:	f000 fdc8 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800168a:	201f      	movs	r0, #31
 800168c:	f000 fde1 	bl	8002252 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2100      	movs	r1, #0
 8001694:	2020      	movs	r0, #32
 8001696:	f000 fdc0 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800169a:	2020      	movs	r0, #32
 800169c:	f000 fdd9 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40005400 	.word	0x40005400
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400

080016b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a1b      	ldr	r2, [pc, #108]	; (8001740 <HAL_SPI_MspInit+0x8c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d130      	bne.n	8001738 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	4a1a      	ldr	r2, [pc, #104]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6253      	str	r3, [r2, #36]	; 0x24
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a14      	ldr	r2, [pc, #80]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_SPI_MspInit+0x90>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001706:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001718:	2305      	movs	r3, #5
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <HAL_SPI_MspInit+0x94>)
 8001724:	f000 fdfe 	bl	8002324 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2024      	movs	r0, #36	; 0x24
 800172e:	f000 fd74 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001732:	2024      	movs	r0, #36	; 0x24
 8001734:	f000 fd8d 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	; 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40003800 	.word	0x40003800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_UART_MspInit+0x8c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d130      	bne.n	80017d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800176e:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_UART_MspInit+0x90>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_UART_MspInit+0x90>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6253      	str	r3, [r2, #36]	; 0x24
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_UART_MspInit+0x90>)
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_UART_MspInit+0x90>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a14      	ldr	r2, [pc, #80]	; (80017dc <HAL_UART_MspInit+0x90>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_UART_MspInit+0x90>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800179e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b0:	2307      	movs	r3, #7
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <HAL_UART_MspInit+0x94>)
 80017bc:	f000 fdb2 	bl	8002324 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2027      	movs	r0, #39	; 0x27
 80017c6:	f000 fd28 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ca:	2027      	movs	r0, #39	; 0x27
 80017cc:	f000 fd41 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40004800 	.word	0x40004800
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020800 	.word	0x40020800

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <SysTick_Handler+0x34>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <SysTick_Handler+0x18>
		Timer1--;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <SysTick_Handler+0x34>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <SysTick_Handler+0x34>)
 800183e:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <SysTick_Handler+0x38>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <SysTick_Handler+0x2c>
		Timer2--;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Handler+0x38>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <SysTick_Handler+0x38>)
 8001852:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f936 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	2000037e 	.word	0x2000037e
 8001860:	2000037c 	.word	0x2000037c

08001864 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <I2C1_EV_IRQHandler+0x10>)
 8001876:	f001 f831 	bl	80028dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20001414 	.word	0x20001414

08001884 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <I2C1_ER_IRQHandler+0x10>)
 800188a:	f001 f998 	bl	8002bbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20001414 	.word	0x20001414

08001898 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <SPI2_IRQHandler+0x10>)
 800189e:	f003 fdd5 	bl	800544c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000384 	.word	0x20000384

080018ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USART3_IRQHandler+0x10>)
 80018b2:	f7fe fdfd 	bl	80004b0 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000330 	.word	0x20000330

080018c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e00a      	b.n	80018e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018d2:	f3af 8000 	nop.w
 80018d6:	4601      	mov	r1, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	b2ca      	uxtb	r2, r1
 80018e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbf0      	blt.n	80018d2 <_read+0x12>
	}

return len;
 80018f0:	687b      	ldr	r3, [r7, #4]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	return -1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001920:	605a      	str	r2, [r3, #4]
	return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <_isatty>:

int _isatty(int file)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
	return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
	return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
	...

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f007 fac0 	bl	8008f10 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20008000 	.word	0x20008000
 80019bc:	00000800 	.word	0x00000800
 80019c0:	200000f0 	.word	0x200000f0
 80019c4:	200045e0 	.word	0x200045e0

080019c8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019fa:	f7ff ffe5 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019fe:	f007 fa8d 	bl	8008f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a02:	f7ff fab7 	bl	8000f74 <main>
  bx lr
 8001a06:	4770      	bx	lr
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001a10:	0800a40c 	.word	0x0800a40c
  ldr r2, =_sbss
 8001a14:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001a18:	200045e0 	.word	0x200045e0

08001a1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC1_IRQHandler>

08001a1e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a28:	2003      	movs	r0, #3
 8001a2a:	f000 fbeb 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a2e:	200f      	movs	r0, #15
 8001a30:	f000 f80e 	bl	8001a50 <HAL_InitTick>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	e001      	b.n	8001a44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a40:	f7ff fd3a 	bl	80014b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_InitTick+0x68>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d022      	beq.n	8001aaa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a64:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_InitTick+0x6c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <HAL_InitTick+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fbf8 	bl	800226e <HAL_SYSTICK_Config>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10f      	bne.n	8001aa4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b0f      	cmp	r3, #15
 8001a88:	d809      	bhi.n	8001a9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	f000 fbc2 	bl	800221a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <HAL_InitTick+0x70>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e007      	b.n	8001aae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000000c 	.word	0x2000000c
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_IncTick+0x20>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_IncTick+0x1c>)
 8001ad4:	6013      	str	r3, [r2, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2000255c 	.word	0x2000255c
 8001ae4:	2000000c 	.word	0x2000000c

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_GetTick+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	2000255c 	.word	0x2000255c

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff fff0 	bl	8001ae8 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d004      	beq.n	8001b20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_Delay+0x40>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b20:	bf00      	nop
 8001b22:	f7ff ffe1 	bl	8001ae8 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d8f7      	bhi.n	8001b22 <HAL_Delay+0x26>
  {
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	2000000c 	.word	0x2000000c

08001b40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	; 0x38
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e127      	b.n	8001db0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7c:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_ADC_Init+0x278>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a8d      	ldr	r2, [pc, #564]	; (8001db8 <HAL_ADC_Init+0x278>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_ADC_Init+0x278>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fcc5 	bl	8001524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 80ff 	bne.w	8001da6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb0:	f023 0302 	bic.w	r3, r3, #2
 8001bb4:	f043 0202 	orr.w	r2, r3, #2
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001bbc:	4b7f      	ldr	r3, [pc, #508]	; (8001dbc <HAL_ADC_Init+0x27c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	497c      	ldr	r1, [pc, #496]	; (8001dbc <HAL_ADC_Init+0x27c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001bd6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bde:	4619      	mov	r1, r3
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	fa93 f3a3 	rbit	r3, r3
 8001bec:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001bfa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001c22:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	4313      	orrs	r3, r2
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d007      	beq.n	8001c42 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b40      	cmp	r3, #64	; 0x40
 8001c4e:	d04f      	beq.n	8001cf0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c56:	4313      	orrs	r3, r2
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c62:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6912      	ldr	r2, [r2, #16]
 8001c68:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c6c:	d003      	beq.n	8001c76 <HAL_ADC_Init+0x136>
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6912      	ldr	r2, [r2, #16]
 8001c72:	2a01      	cmp	r2, #1
 8001c74:	d102      	bne.n	8001c7c <HAL_ADC_Init+0x13c>
 8001c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c7a:	e000      	b.n	8001c7e <HAL_ADC_Init+0x13e>
 8001c7c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001c7e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c82:	4313      	orrs	r3, r2
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d125      	bne.n	8001cdc <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d114      	bne.n	8001cc4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001ca4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	fa92 f2a2 	rbit	r2, r2
 8001cac:	617a      	str	r2, [r7, #20]
  return result;
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	fab2 f282 	clz	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cc2:	e00b      	b.n	8001cdc <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd4:	f043 0201 	orr.w	r2, r3, #1
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_ADC_Init+0x280>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cec:	430b      	orrs	r3, r1
 8001cee:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <HAL_ADC_Init+0x284>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_Init+0x1d6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d119      	bne.n	8001d4a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001d2a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	60fa      	str	r2, [r7, #12]
  return result;
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	fa03 f202 	lsl.w	r2, r3, r2
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
 8001d48:	e007      	b.n	8001d5a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_ADC_Init+0x288>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d10b      	bne.n	8001d82 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f023 0303 	bic.w	r3, r3, #3
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d80:	e014      	b.n	8001dac <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	f023 0312 	bic.w	r3, r3, #18
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001da4:	e002      	b.n	8001dac <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3738      	adds	r7, #56	; 0x38
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40012700 	.word	0x40012700
 8001dc0:	fcfc16ff 	.word	0xfcfc16ff
 8001dc4:	c0fff18d 	.word	0xc0fff18d
 8001dc8:	bf80fffe 	.word	0xbf80fffe

08001dcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x20>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e134      	b.n	8002056 <HAL_ADC_ConfigChannel+0x28a>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d81c      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4019      	ands	r1, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b05      	subs	r3, #5
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
 8001e34:	e07e      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d81c      	bhi.n	8001e78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b23      	subs	r3, #35	; 0x23
 8001e50:	221f      	movs	r2, #31
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b23      	subs	r3, #35	; 0x23
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e76:	e05d      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d81c      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	3b41      	subs	r3, #65	; 0x41
 8001e92:	221f      	movs	r2, #31
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4019      	ands	r1, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	6818      	ldr	r0, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b41      	subs	r3, #65	; 0x41
 8001eac:	fa00 f203 	lsl.w	r2, r0, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001eb8:	e03c      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b18      	cmp	r3, #24
 8001ec0:	d81c      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b5f      	subs	r3, #95	; 0x5f
 8001ed4:	221f      	movs	r2, #31
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	4019      	ands	r1, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b5f      	subs	r3, #95	; 0x5f
 8001eee:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8001efa:	e01b      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b7d      	subs	r3, #125	; 0x7d
 8001f0e:	221f      	movs	r2, #31
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4019      	ands	r1, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	3b7d      	subs	r3, #125	; 0x7d
 8001f28:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d81a      	bhi.n	8001f72 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6959      	ldr	r1, [r3, #20]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4613      	mov	r3, r2
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	4019      	ands	r1, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6898      	ldr	r0, [r3, #8]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
 8001f70:	e042      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b13      	cmp	r3, #19
 8001f78:	d81c      	bhi.n	8001fb4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6919      	ldr	r1, [r3, #16]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	3b1e      	subs	r3, #30
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4019      	ands	r1, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	6898      	ldr	r0, [r3, #8]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1e      	subs	r3, #30
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	611a      	str	r2, [r3, #16]
 8001fb2:	e021      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b1a      	cmp	r3, #26
 8001fba:	d81c      	bhi.n	8001ff6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b3c      	subs	r3, #60	; 0x3c
 8001fce:	2207      	movs	r2, #7
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4019      	ands	r1, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	6898      	ldr	r0, [r3, #8]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b3c      	subs	r3, #60	; 0x3c
 8001fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001ff6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d003      	beq.n	8002008 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002004:	2b11      	cmp	r3, #17
 8002006:	d121      	bne.n	800204c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <HAL_ADC_ConfigChannel+0x294>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d11b      	bne.n	800204c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002014:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_ADC_ConfigChannel+0x294>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a11      	ldr	r2, [pc, #68]	; (8002060 <HAL_ADC_ConfigChannel+0x294>)
 800201a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800201e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b10      	cmp	r3, #16
 8002026:	d111      	bne.n	800204c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_ADC_ConfigChannel+0x298>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_ADC_ConfigChannel+0x29c>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0c9a      	lsrs	r2, r3, #18
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800203e:	e002      	b.n	8002046 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	3b01      	subs	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40012700 	.word	0x40012700
 8002064:	20000004 	.word	0x20000004
 8002068:	431bde83 	.word	0x431bde83

0800206c <__NVIC_SetPriorityGrouping>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4906      	ldr	r1, [pc, #24]	; (8002104 <__NVIC_EnableIRQ+0x34>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <SysTick_Config>:
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff90 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff2d 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff42 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff90 	bl	800215c <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5f 	bl	8002108 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff35 	bl	80020d0 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d005      	beq.n	80022aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e029      	b.n	80022fe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020e 	bic.w	r2, r2, #14
 80022b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 021c 	and.w	r2, r3, #28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
    }
  }
  return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002316:	b2db      	uxtb	r3, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800233a:	e154      	b.n	80025e6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8146 	beq.w	80025e0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002368:	2b02      	cmp	r3, #2
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 0201 	and.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d017      	beq.n	800240a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d123      	bne.n	800245e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002422:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	6939      	ldr	r1, [r7, #16]
 800245a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0203 	and.w	r2, r3, #3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a0 	beq.w	80025e0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a57      	ldr	r2, [pc, #348]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	4b55      	ldr	r3, [pc, #340]	; (8002604 <HAL_GPIO_Init+0x2e0>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80024b8:	4a53      	ldr	r2, [pc, #332]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4013      	ands	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4b      	ldr	r2, [pc, #300]	; (800260c <HAL_GPIO_Init+0x2e8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d019      	beq.n	8002518 <HAL_GPIO_Init+0x1f4>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	; (8002610 <HAL_GPIO_Init+0x2ec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x1f0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a49      	ldr	r2, [pc, #292]	; (8002614 <HAL_GPIO_Init+0x2f0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1ec>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a48      	ldr	r2, [pc, #288]	; (8002618 <HAL_GPIO_Init+0x2f4>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1e8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a47      	ldr	r2, [pc, #284]	; (800261c <HAL_GPIO_Init+0x2f8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1e4>
 8002504:	2304      	movs	r3, #4
 8002506:	e008      	b.n	800251a <HAL_GPIO_Init+0x1f6>
 8002508:	2305      	movs	r3, #5
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x1f6>
 800250c:	2303      	movs	r3, #3
 800250e:	e004      	b.n	800251a <HAL_GPIO_Init+0x1f6>
 8002510:	2302      	movs	r3, #2
 8002512:	e002      	b.n	800251a <HAL_GPIO_Init+0x1f6>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_GPIO_Init+0x1f6>
 8002518:	2300      	movs	r3, #0
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	f002 0203 	and.w	r2, r2, #3
 8002520:	0092      	lsls	r2, r2, #2
 8002522:	4093      	lsls	r3, r2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800252a:	4937      	ldr	r1, [pc, #220]	; (8002608 <HAL_GPIO_Init+0x2e4>)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002538:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43db      	mvns	r3, r3
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800255c:	4a30      	ldr	r2, [pc, #192]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002586:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	43db      	mvns	r3, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4013      	ands	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43db      	mvns	r3, r3
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025da:	4a11      	ldr	r2, [pc, #68]	; (8002620 <HAL_GPIO_Init+0x2fc>)
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3301      	adds	r3, #1
 80025e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f47f aea3 	bne.w	800233c <HAL_GPIO_Init+0x18>
  }
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40010000 	.word	0x40010000
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002640:	e003      	b.n	800264a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e12b      	b.n	80028be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe ffc6 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b8:	f002 fae6 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <HAL_I2C_Init+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <HAL_I2C_Init+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_I2C_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e006      	b.n	80026e6 <HAL_I2C_Init+0x92>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <HAL_I2C_Init+0x27c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e7      	b.n	80028be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a78      	ldr	r2, [pc, #480]	; (80028d4 <HAL_I2C_Init+0x280>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_I2C_Init+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d802      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	e009      	b.n	800273c <HAL_I2C_Init+0xe8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_I2C_Init+0x284>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_I2C_Init+0x274>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d819      	bhi.n	8002790 <HAL_I2C_Init+0x13c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e59      	subs	r1, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_Init+0x138>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	e051      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 800278c:	2304      	movs	r3, #4
 800278e:	e04f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_I2C_Init+0x168>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e012      	b.n	80027e2 <HAL_I2C_Init+0x18e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x196>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <HAL_I2C_Init+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e58      	subs	r0, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6911      	ldr	r1, [r2, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	001e847f 	.word	0x001e847f
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028fc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b10      	cmp	r3, #16
 800290a:	d003      	beq.n	8002914 <HAL_I2C_EV_IRQHandler+0x38>
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	f040 80c1 	bne.w	8002a96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <HAL_I2C_EV_IRQHandler+0x6e>
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002934:	d003      	beq.n	800293e <HAL_I2C_EV_IRQHandler+0x62>
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800293c:	d101      	bne.n	8002942 <HAL_I2C_EV_IRQHandler+0x66>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_I2C_EV_IRQHandler+0x68>
 8002942:	2300      	movs	r3, #0
 8002944:	2b01      	cmp	r3, #1
 8002946:	f000 8132 	beq.w	8002bae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00c      	beq.n	800296e <HAL_I2C_EV_IRQHandler+0x92>
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	0a5b      	lsrs	r3, r3, #9
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d006      	beq.n	800296e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f001 fc63 	bl	800422c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fd6f 	bl	800344a <I2C_Master_SB>
 800296c:	e092      	b.n	8002a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0xb2>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	0a5b      	lsrs	r3, r3, #9
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fde4 	bl	8003554 <I2C_Master_ADD10>
 800298c:	e082      	b.n	8002a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0xd2>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	0a5b      	lsrs	r3, r3, #9
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fdfd 	bl	80035a6 <I2C_Master_ADDR>
 80029ac:	e072      	b.n	8002a94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	089b      	lsrs	r3, r3, #2
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d03b      	beq.n	8002a32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029c8:	f000 80f3 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	09db      	lsrs	r3, r3, #7
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00f      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x11c>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d103      	bne.n	80029f8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f9e9 	bl	8002dc8 <I2C_MasterTransmit_TXE>
 80029f6:	e04d      	b.n	8002a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80d6 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	0a5b      	lsrs	r3, r3, #9
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80cf 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	2b21      	cmp	r3, #33	; 0x21
 8002a18:	d103      	bne.n	8002a22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa70 	bl	8002f00 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a20:	e0c7      	b.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	f040 80c4 	bne.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fade 	bl	8002fec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a30:	e0bf      	b.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a40:	f000 80b7 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	099b      	lsrs	r3, r3, #6
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00f      	beq.n	8002a70 <HAL_I2C_EV_IRQHandler+0x194>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_I2C_EV_IRQHandler+0x194>
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fb53 	bl	8003114 <I2C_MasterReceive_RXNE>
 8002a6e:	e011      	b.n	8002a94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 809a 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	0a5b      	lsrs	r3, r3, #9
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8093 	beq.w	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fbf2 	bl	8003276 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	e08e      	b.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002a94:	e08d      	b.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	e007      	b.n	8002ab8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x20e>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	0a5b      	lsrs	r3, r3, #9
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00c      	beq.n	8002aea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002ae0:	69b9      	ldr	r1, [r7, #24]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 ffab 	bl	8003a3e <I2C_Slave_ADDR>
 8002ae8:	e066      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x22e>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	0a5b      	lsrs	r3, r3, #9
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 ffe6 	bl	8003ad4 <I2C_Slave_STOPF>
 8002b08:	e056      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b0a:	7bbb      	ldrb	r3, [r7, #14]
 8002b0c:	2b21      	cmp	r3, #33	; 0x21
 8002b0e:	d002      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x23a>
 8002b10:	7bbb      	ldrb	r3, [r7, #14]
 8002b12:	2b29      	cmp	r3, #41	; 0x29
 8002b14:	d125      	bne.n	8002b62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	09db      	lsrs	r3, r3, #7
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00f      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x266>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	0a9b      	lsrs	r3, r3, #10
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0x266>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fec3 	bl	80038c6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b40:	e039      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d033      	beq.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	0a5b      	lsrs	r3, r3, #9
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02d      	beq.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fef0 	bl	8003940 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b60:	e029      	b.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00f      	beq.n	8002b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	0a9b      	lsrs	r3, r3, #10
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fefa 	bl	8003980 <I2C_SlaveReceive_RXNE>
 8002b8c:	e014      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 ff28 	bl	80039fc <I2C_SlaveReceive_BTF>
 8002bac:	e004      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bb6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002be0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00e      	beq.n	8002c0c <HAL_I2C_ER_IRQHandler+0x4e>
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	0a5b      	lsrs	r3, r3, #9
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00e      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x78>
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002c34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	0a9b      	lsrs	r3, r3, #10
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d03f      	beq.n	8002cc2 <HAL_I2C_ER_IRQHandler+0x104>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d039      	beq.n	8002cc2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002c4e:	7efb      	ldrb	r3, [r7, #27]
 8002c50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002c68:	7ebb      	ldrb	r3, [r7, #26]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d112      	bne.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd6>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd6>
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b21      	cmp	r3, #33	; 0x21
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b29      	cmp	r3, #41	; 0x29
 8002c7e:	d005      	beq.n	8002c8c <HAL_I2C_ER_IRQHandler+0xce>
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b28      	cmp	r3, #40	; 0x28
 8002c84:	d106      	bne.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b21      	cmp	r3, #33	; 0x21
 8002c8a:	d103      	bne.n	8002c94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f001 f851 	bl	8003d34 <I2C_Slave_AF>
 8002c92:	e016      	b.n	8002cc2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f043 0304 	orr.w	r3, r3, #4
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002ca6:	7efb      	ldrb	r3, [r7, #27]
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d002      	beq.n	8002cb2 <HAL_I2C_ER_IRQHandler+0xf4>
 8002cac:	7efb      	ldrb	r3, [r7, #27]
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	0adb      	lsrs	r3, r3, #11
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <HAL_I2C_ER_IRQHandler+0x12e>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002cea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f001 f888 	bl	8003e14 <I2C_ITError>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
 8002d60:	4613      	mov	r3, r2
 8002d62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr

08002d80 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d150      	bne.n	8002e90 <I2C_MasterTransmit_TXE+0xc8>
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b21      	cmp	r3, #33	; 0x21
 8002df2:	d14d      	bne.n	8002e90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d01d      	beq.n	8002e36 <I2C_MasterTransmit_TXE+0x6e>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d01a      	beq.n	8002e36 <I2C_MasterTransmit_TXE+0x6e>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e06:	d016      	beq.n	8002e36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2211      	movs	r2, #17
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ff6c 	bl	8002d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e34:	e060      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d107      	bne.n	8002e80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff ff81 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e7e:	e03b      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff3f 	bl	8002d0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e8e:	e033      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b21      	cmp	r3, #33	; 0x21
 8002e94:	d005      	beq.n	8002ea2 <I2C_MasterTransmit_TXE+0xda>
 8002e96:	7bbb      	ldrb	r3, [r7, #14]
 8002e98:	2b40      	cmp	r3, #64	; 0x40
 8002e9a:	d12d      	bne.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b22      	cmp	r3, #34	; 0x22
 8002ea0:	d12a      	bne.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ebc:	e01c      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b40      	cmp	r3, #64	; 0x40
 8002ec8:	d103      	bne.n	8002ed2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f88e 	bl	8002fec <I2C_MemoryTransmit_TXE_BTF>
}
 8002ed0:	e012      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002ef6:	e7ff      	b.n	8002ef8 <I2C_MasterTransmit_TXE+0x130>
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b21      	cmp	r3, #33	; 0x21
 8002f18:	d164      	bne.n	8002fe4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002f48:	e04c      	b.n	8002fe4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d01d      	beq.n	8002f8c <I2C_MasterTransmit_BTF+0x8c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d01a      	beq.n	8002f8c <I2C_MasterTransmit_BTF+0x8c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f5c:	d016      	beq.n	8002f8c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f6c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2211      	movs	r2, #17
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff fec1 	bl	8002d0c <HAL_I2C_MasterTxCpltCallback>
}
 8002f8a:	e02b      	b.n	8002fe4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f9a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002faa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d107      	bne.n	8002fd6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff fed6 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
}
 8002fd4:	e006      	b.n	8002fe4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fe94 	bl	8002d0c <HAL_I2C_MasterTxCpltCallback>
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11d      	bne.n	8003040 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10b      	bne.n	8003024 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003022:	e073      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	b29b      	uxth	r3, r3
 800302a:	121b      	asrs	r3, r3, #8
 800302c:	b2da      	uxtb	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800303e:	e065      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10b      	bne.n	8003060 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304c:	b2da      	uxtb	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800305e:	e055      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003064:	2b02      	cmp	r3, #2
 8003066:	d151      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b22      	cmp	r3, #34	; 0x22
 800306c:	d10d      	bne.n	800308a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003088:	e040      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b21      	cmp	r3, #33	; 0x21
 8003098:	d112      	bne.n	80030c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030be:	e025      	b.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d120      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b21      	cmp	r3, #33	; 0x21
 80030ce:	d11d      	bne.n	800310c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fe3a 	bl	8002d80 <HAL_I2C_MemTxCpltCallback>
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b22      	cmp	r3, #34	; 0x22
 8003126:	f040 80a2 	bne.w	800326e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d921      	bls.n	800317c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	1c5a      	adds	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b03      	cmp	r3, #3
 8003166:	f040 8082 	bne.w	800326e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800317a:	e078      	b.n	800326e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	2b02      	cmp	r3, #2
 8003182:	d074      	beq.n	800326e <I2C_MasterReceive_RXNE+0x15a>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d002      	beq.n	8003190 <I2C_MasterReceive_RXNE+0x7c>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d16e      	bne.n	800326e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f001 f819 	bl	80041c8 <I2C_WaitOnSTOPRequestThroughIT>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d142      	bne.n	8003222 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d10a      	bne.n	800320c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fdc4 	bl	8002d92 <HAL_I2C_MemRxCpltCallback>
}
 800320a:	e030      	b.n	800326e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2212      	movs	r2, #18
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fd7f 	bl	8002d1e <HAL_I2C_MasterRxCpltCallback>
}
 8003220:	e025      	b.n	800326e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003230:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fd9b 	bl	8002da4 <HAL_I2C_ErrorCallback>
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b04      	cmp	r3, #4
 800328c:	d11b      	bne.n	80032c6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032c4:	e0bd      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d129      	bne.n	8003324 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032de:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00a      	beq.n	80032fc <I2C_MasterReceive_BTF+0x86>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d007      	beq.n	80032fc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003322:	e08e      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d176      	bne.n	800341c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d002      	beq.n	800333a <I2C_MasterReceive_BTF+0xc4>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d108      	bne.n	800334c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e019      	b.n	8003380 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <I2C_MasterReceive_BTF+0xe2>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d108      	bne.n	800336a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e00a      	b.n	8003380 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b10      	cmp	r3, #16
 800336e:	d007      	beq.n	8003380 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691a      	ldr	r2, [r3, #16]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d10a      	bne.n	8003406 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fcc7 	bl	8002d92 <HAL_I2C_MemRxCpltCallback>
}
 8003404:	e01d      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2212      	movs	r2, #18
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fc82 	bl	8002d1e <HAL_I2C_MasterRxCpltCallback>
}
 800341a:	e012      	b.n	8003442 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b01      	subs	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d117      	bne.n	800348e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003476:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003478:	e067      	b.n	800354a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	611a      	str	r2, [r3, #16]
}
 800348c:	e05d      	b.n	800354a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003496:	d133      	bne.n	8003500 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b21      	cmp	r3, #33	; 0x21
 80034a2:	d109      	bne.n	80034b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b4:	611a      	str	r2, [r3, #16]
 80034b6:	e008      	b.n	80034ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <I2C_Master_SB+0x92>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d108      	bne.n	80034ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d032      	beq.n	800354a <I2C_Master_SB+0x100>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02d      	beq.n	800354a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fc:	605a      	str	r2, [r3, #4]
}
 80034fe:	e024      	b.n	800354a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10e      	bne.n	8003526 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	b29b      	uxth	r3, r3
 800350e:	11db      	asrs	r3, r3, #7
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 0306 	and.w	r3, r3, #6
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f063 030f 	orn	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	611a      	str	r2, [r3, #16]
}
 8003524:	e011      	b.n	800354a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10d      	bne.n	800354a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	b29b      	uxth	r3, r3
 8003534:	11db      	asrs	r3, r3, #7
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 0306 	and.w	r3, r3, #6
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f063 030e 	orn	r3, r3, #14
 8003542:	b2da      	uxtb	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	611a      	str	r2, [r3, #16]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr

08003554 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	b2da      	uxtb	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <I2C_Master_ADD10+0x26>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <I2C_Master_ADD10+0x48>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
  }
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b091      	sub	sp, #68	; 0x44
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b22      	cmp	r3, #34	; 0x22
 80035ce:	f040 8169 	bne.w	80038a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <I2C_Master_ADDR+0x54>
 80035da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10b      	bne.n	80035fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e2:	2300      	movs	r3, #0
 80035e4:	633b      	str	r3, [r7, #48]	; 0x30
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	633b      	str	r3, [r7, #48]	; 0x30
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	e160      	b.n	80038bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <I2C_Master_ADDR+0x98>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800360a:	d118      	bne.n	800363e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360c:	2300      	movs	r3, #0
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003620:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003630:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	651a      	str	r2, [r3, #80]	; 0x50
 800363c:	e13e      	b.n	80038bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e115      	b.n	800389c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	f040 808a 	bne.w	8003790 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003682:	d137      	bne.n	80036f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003692:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d113      	bne.n	80036cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	e0e7      	b.n	800389c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036cc:	2300      	movs	r3, #0
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	623b      	str	r3, [r7, #32]
 80036e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e0d3      	b.n	800389c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d02e      	beq.n	8003758 <I2C_Master_ADDR+0x1b2>
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d02b      	beq.n	8003758 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	2b12      	cmp	r3, #18
 8003704:	d102      	bne.n	800370c <I2C_Master_ADDR+0x166>
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b01      	cmp	r3, #1
 800370a:	d125      	bne.n	8003758 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00e      	beq.n	8003730 <I2C_Master_ADDR+0x18a>
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	2b02      	cmp	r3, #2
 8003716:	d00b      	beq.n	8003730 <I2C_Master_ADDR+0x18a>
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2b10      	cmp	r3, #16
 800371c:	d008      	beq.n	8003730 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	e007      	b.n	8003740 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800373e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	e0a1      	b.n	800389c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003768:	2300      	movs	r3, #0
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	61bb      	str	r3, [r7, #24]
 800377c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e085      	b.n	800389c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d14d      	bne.n	8003836 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	2b04      	cmp	r3, #4
 800379e:	d016      	beq.n	80037ce <I2C_Master_ADDR+0x228>
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d013      	beq.n	80037ce <I2C_Master_ADDR+0x228>
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d010      	beq.n	80037ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e007      	b.n	80037de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ec:	d117      	bne.n	800381e <I2C_Master_ADDR+0x278>
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f4:	d00b      	beq.n	800380e <I2C_Master_ADDR+0x268>
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d008      	beq.n	800380e <I2C_Master_ADDR+0x268>
 80037fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fe:	2b08      	cmp	r3, #8
 8003800:	d005      	beq.n	800380e <I2C_Master_ADDR+0x268>
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	2b10      	cmp	r3, #16
 8003806:	d002      	beq.n	800380e <I2C_Master_ADDR+0x268>
 8003808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380a:	2b20      	cmp	r3, #32
 800380c:	d107      	bne.n	800381e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800381c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	e032      	b.n	800389c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003844:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d117      	bne.n	8003886 <I2C_Master_ADDR+0x2e0>
 8003856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800385c:	d00b      	beq.n	8003876 <I2C_Master_ADDR+0x2d0>
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	2b01      	cmp	r3, #1
 8003862:	d008      	beq.n	8003876 <I2C_Master_ADDR+0x2d0>
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	2b08      	cmp	r3, #8
 8003868:	d005      	beq.n	8003876 <I2C_Master_ADDR+0x2d0>
 800386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386c:	2b10      	cmp	r3, #16
 800386e:	d002      	beq.n	8003876 <I2C_Master_ADDR+0x2d0>
 8003870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003872:	2b20      	cmp	r3, #32
 8003874:	d107      	bne.n	8003886 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003884:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003886:	2300      	movs	r3, #0
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038a2:	e00b      	b.n	80038bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
}
 80038ba:	e7ff      	b.n	80038bc <I2C_Master_ADDR+0x316>
 80038bc:	bf00      	nop
 80038be:	3744      	adds	r7, #68	; 0x44
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02b      	beq.n	8003938 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d114      	bne.n	8003938 <I2C_SlaveTransmit_TXE+0x72>
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	2b29      	cmp	r3, #41	; 0x29
 8003912:	d111      	bne.n	8003938 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2221      	movs	r2, #33	; 0x21
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2228      	movs	r2, #40	; 0x28
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff f9fc 	bl	8002d30 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d011      	beq.n	8003976 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	781a      	ldrb	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d02c      	beq.n	80039f4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d114      	bne.n	80039f4 <I2C_SlaveReceive_RXNE+0x74>
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	2b2a      	cmp	r3, #42	; 0x2a
 80039ce:	d111      	bne.n	80039f4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2222      	movs	r2, #34	; 0x22
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2228      	movs	r2, #40	; 0x28
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff f9a7 	bl	8002d42 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d012      	beq.n	8003a34 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a58:	2b28      	cmp	r3, #40	; 0x28
 8003a5a:	d127      	bne.n	8003aac <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	089b      	lsrs	r3, r3, #2
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	09db      	lsrs	r3, r3, #7
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	81bb      	strh	r3, [r7, #12]
 8003a8e:	e002      	b.n	8003a96 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003a9e:	89ba      	ldrh	r2, [r7, #12]
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff f955 	bl	8002d54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003aaa:	e00e      	b.n	8003aca <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003af4:	2300      	movs	r3, #0
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b30:	d172      	bne.n	8003c18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b22      	cmp	r3, #34	; 0x22
 8003b36:	d002      	beq.n	8003b3e <I2C_Slave_STOPF+0x6a>
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b3c:	d135      	bne.n	8003baa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fbc6 	bl	8002308 <HAL_DMA_GetState>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d049      	beq.n	8003c16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <I2C_Slave_STOPF+0x258>)
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fb79 	bl	8002286 <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03d      	beq.n	8003c16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ba8:	e035      	b.n	8003c16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0204 	orr.w	r2, r3, #4
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fb90 	bl	8002308 <HAL_DMA_GetState>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d014      	beq.n	8003c18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <I2C_Slave_STOPF+0x258>)
 8003bf4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fb43 	bl	8002286 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d008      	beq.n	8003c18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c10:	4610      	mov	r0, r2
 8003c12:	4798      	blx	r3
 8003c14:	e000      	b.n	8003c18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d03e      	beq.n	8003ca0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d112      	bne.n	8003c56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d112      	bne.n	8003c8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8b3 	bl	8003e14 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cae:	e039      	b.n	8003d24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d109      	bne.n	8003cca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2228      	movs	r2, #40	; 0x28
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff f83c 	bl	8002d42 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b28      	cmp	r3, #40	; 0x28
 8003cd4:	d111      	bne.n	8003cfa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <I2C_Slave_STOPF+0x25c>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff f83b 	bl	8002d6e <HAL_I2C_ListenCpltCallback>
}
 8003cf8:	e014      	b.n	8003d24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	2b22      	cmp	r3, #34	; 0x22
 8003d00:	d002      	beq.n	8003d08 <I2C_Slave_STOPF+0x234>
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b22      	cmp	r3, #34	; 0x22
 8003d06:	d10d      	bne.n	8003d24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff f80f 	bl	8002d42 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	08004079 	.word	0x08004079
 8003d30:	ffff0000 	.word	0xffff0000

08003d34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d002      	beq.n	8003d56 <I2C_Slave_AF+0x22>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d129      	bne.n	8003daa <I2C_Slave_AF+0x76>
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b28      	cmp	r3, #40	; 0x28
 8003d5a:	d126      	bne.n	8003daa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <I2C_Slave_AF+0xdc>)
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe ffe3 	bl	8002d6e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003da8:	e02e      	b.n	8003e08 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b21      	cmp	r3, #33	; 0x21
 8003dae:	d126      	bne.n	8003dfe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <I2C_Slave_AF+0xdc>)
 8003db4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2221      	movs	r2, #33	; 0x21
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003de4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe ff9a 	bl	8002d30 <HAL_I2C_SlaveTxCpltCallback>
}
 8003dfc:	e004      	b.n	8003e08 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e06:	615a      	str	r2, [r3, #20]
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	ffff0000 	.word	0xffff0000

08003e14 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e22:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e2a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e2c:	7bbb      	ldrb	r3, [r7, #14]
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d002      	beq.n	8003e38 <I2C_ITError+0x24>
 8003e32:	7bbb      	ldrb	r3, [r7, #14]
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d10a      	bne.n	8003e4e <I2C_ITError+0x3a>
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b22      	cmp	r3, #34	; 0x22
 8003e3c:	d107      	bne.n	8003e4e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e54:	2b28      	cmp	r3, #40	; 0x28
 8003e56:	d107      	bne.n	8003e68 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2228      	movs	r2, #40	; 0x28
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e66:	e015      	b.n	8003e94 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e76:	d00a      	beq.n	8003e8e <I2C_ITError+0x7a>
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b60      	cmp	r3, #96	; 0x60
 8003e7c:	d007      	beq.n	8003e8e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea2:	d162      	bne.n	8003f6a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d020      	beq.n	8003f04 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	4a6a      	ldr	r2, [pc, #424]	; (8004070 <I2C_ITError+0x25c>)
 8003ec8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f9d9 	bl	8002286 <HAL_DMA_Abort_IT>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 8089 	beq.w	8003fee <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003efe:	4610      	mov	r0, r2
 8003f00:	4798      	blx	r3
 8003f02:	e074      	b.n	8003fee <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	4a59      	ldr	r2, [pc, #356]	; (8004070 <I2C_ITError+0x25c>)
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe f9b8 	bl	8002286 <HAL_DMA_Abort_IT>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d068      	beq.n	8003fee <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d10b      	bne.n	8003f42 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f64:	4610      	mov	r0, r2
 8003f66:	4798      	blx	r3
 8003f68:	e041      	b.n	8003fee <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b60      	cmp	r3, #96	; 0x60
 8003f74:	d125      	bne.n	8003fc2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8e:	2b40      	cmp	r3, #64	; 0x40
 8003f90:	d10b      	bne.n	8003faa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fe fefb 	bl	8002db6 <HAL_I2C_AbortCpltCallback>
 8003fc0:	e015      	b.n	8003fee <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d10b      	bne.n	8003fe8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fe fedb 	bl	8002da4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10e      	bne.n	800401c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d113      	bne.n	8004068 <I2C_ITError+0x254>
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	2b28      	cmp	r3, #40	; 0x28
 8004044:	d110      	bne.n	8004068 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <I2C_ITError+0x260>)
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fe fe83 	bl	8002d6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	08004079 	.word	0x08004079
 8004074:	ffff0000 	.word	0xffff0000

08004078 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004090:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004092:	4b4b      	ldr	r3, [pc, #300]	; (80041c0 <I2C_DMAAbort+0x148>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	08db      	lsrs	r3, r3, #3
 8004098:	4a4a      	ldr	r2, [pc, #296]	; (80041c4 <I2C_DMAAbort+0x14c>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a1a      	lsrs	r2, r3, #8
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	00da      	lsls	r2, r3, #3
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80040be:	e00a      	b.n	80040d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d4:	d0ea      	beq.n	80040ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	2200      	movs	r2, #0
 800411a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	2200      	movs	r2, #0
 800412a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b60      	cmp	r3, #96	; 0x60
 8004146:	d10e      	bne.n	8004166 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f7fe fe29 	bl	8002db6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004164:	e027      	b.n	80041b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800416c:	2b28      	cmp	r3, #40	; 0x28
 800416e:	d117      	bne.n	80041a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2228      	movs	r2, #40	; 0x28
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800419e:	e007      	b.n	80041b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80041b0:	6978      	ldr	r0, [r7, #20]
 80041b2:	f7fe fdf7 	bl	8002da4 <HAL_I2C_ErrorCallback>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000004 	.word	0x20000004
 80041c4:	14f8b589 	.word	0x14f8b589

080041c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	4a13      	ldr	r2, [pc, #76]	; (8004228 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	0a1a      	lsrs	r2, r3, #8
 80041e2:	4613      	mov	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d107      	bne.n	8004206 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e008      	b.n	8004218 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	d0e9      	beq.n	80041ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000004 	.word	0x20000004
 8004228:	14f8b589 	.word	0x14f8b589

0800422c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800423c:	d103      	bne.n	8004246 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004244:	e007      	b.n	8004256 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800424e:	d102      	bne.n	8004256 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2208      	movs	r2, #8
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e31d      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004272:	4b94      	ldr	r3, [pc, #592]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800427c:	4b91      	ldr	r3, [pc, #580]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d07b      	beq.n	800438a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d006      	beq.n	80042a6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b0c      	cmp	r3, #12
 800429c:	d10f      	bne.n	80042be <HAL_RCC_OscConfig+0x5e>
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d10b      	bne.n	80042be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a6:	4b87      	ldr	r3, [pc, #540]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d06a      	beq.n	8004388 <HAL_RCC_OscConfig+0x128>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d166      	bne.n	8004388 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e2f7      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_OscConfig+0x74>
 80042c6:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a7e      	ldr	r2, [pc, #504]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e02d      	b.n	8004330 <HAL_RCC_OscConfig+0xd0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10c      	bne.n	80042f6 <HAL_RCC_OscConfig+0x96>
 80042dc:	4b79      	ldr	r3, [pc, #484]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a78      	ldr	r2, [pc, #480]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b76      	ldr	r3, [pc, #472]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a75      	ldr	r2, [pc, #468]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	e01c      	b.n	8004330 <HAL_RCC_OscConfig+0xd0>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0xb8>
 80042fe:	4b71      	ldr	r3, [pc, #452]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a70      	ldr	r2, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b6e      	ldr	r3, [pc, #440]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6d      	ldr	r2, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xd0>
 8004318:	4b6a      	ldr	r3, [pc, #424]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a69      	ldr	r2, [pc, #420]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a66      	ldr	r2, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fd fbd6 	bl	8001ae8 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004340:	f7fd fbd2 	bl	8001ae8 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	; 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e2ad      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004352:	4b5c      	ldr	r3, [pc, #368]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xe0>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd fbc2 	bl	8001ae8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fd fbbe 	bl	8001ae8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e299      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x108>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d05a      	beq.n	800444c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d005      	beq.n	80043a8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d119      	bne.n	80043d6 <HAL_RCC_OscConfig+0x176>
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a8:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_OscConfig+0x160>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e276      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c0:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	493d      	ldr	r1, [pc, #244]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d4:	e03a      	b.n	800444c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d020      	beq.n	8004420 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043de:	4b3a      	ldr	r3, [pc, #232]	; (80044c8 <HAL_RCC_OscConfig+0x268>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fd fb80 	bl	8001ae8 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fd fb7c 	bl	8001ae8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e257      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fe:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	492a      	ldr	r1, [pc, #168]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
 800441e:	e015      	b.n	800444c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004420:	4b29      	ldr	r3, [pc, #164]	; (80044c8 <HAL_RCC_OscConfig+0x268>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004426:	f7fd fb5f 	bl	8001ae8 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800442e:	f7fd fb5b 	bl	8001ae8 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e236      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004440:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80b8 	beq.w	80045ca <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d170      	bne.n	8004542 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004460:	4b18      	ldr	r3, [pc, #96]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_OscConfig+0x218>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e21a      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004484:	429a      	cmp	r2, r3
 8004486:	d921      	bls.n	80044cc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fc23 	bl	8004cd8 <RCC_SetFlashLatencyFromMSIRange>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e208      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4906      	ldr	r1, [pc, #24]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	4901      	ldr	r1, [pc, #4]	; (80044c4 <HAL_RCC_OscConfig+0x264>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
 80044c2:	e020      	b.n	8004506 <HAL_RCC_OscConfig+0x2a6>
 80044c4:	40023800 	.word	0x40023800
 80044c8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044cc:	4ba4      	ldr	r3, [pc, #656]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	49a1      	ldr	r1, [pc, #644]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044de:	4ba0      	ldr	r3, [pc, #640]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	499c      	ldr	r1, [pc, #624]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fbee 	bl	8004cd8 <RCC_SetFlashLatencyFromMSIRange>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e1d3      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	0b5b      	lsrs	r3, r3, #13
 800450c:	3301      	adds	r3, #1
 800450e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004516:	4a92      	ldr	r2, [pc, #584]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	0912      	lsrs	r2, r2, #4
 800451c:	f002 020f 	and.w	r2, r2, #15
 8004520:	4990      	ldr	r1, [pc, #576]	; (8004764 <HAL_RCC_OscConfig+0x504>)
 8004522:	5c8a      	ldrb	r2, [r1, r2]
 8004524:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004526:	4a90      	ldr	r2, [pc, #576]	; (8004768 <HAL_RCC_OscConfig+0x508>)
 8004528:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800452a:	4b90      	ldr	r3, [pc, #576]	; (800476c <HAL_RCC_OscConfig+0x50c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7fd fa8e 	bl	8001a50 <HAL_InitTick>
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d045      	beq.n	80045ca <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	e1b5      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d029      	beq.n	800459e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800454a:	4b89      	ldr	r3, [pc, #548]	; (8004770 <HAL_RCC_OscConfig+0x510>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd faca 	bl	8001ae8 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004558:	f7fd fac6 	bl	8001ae8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1a1      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800456a:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004576:	4b7a      	ldr	r3, [pc, #488]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4977      	ldr	r1, [pc, #476]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004588:	4b75      	ldr	r3, [pc, #468]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	061b      	lsls	r3, r3, #24
 8004596:	4972      	ldr	r1, [pc, #456]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	e015      	b.n	80045ca <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800459e:	4b74      	ldr	r3, [pc, #464]	; (8004770 <HAL_RCC_OscConfig+0x510>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd faa0 	bl	8001ae8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045ac:	f7fd fa9c 	bl	8001ae8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e177      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80045be:	4b68      	ldr	r3, [pc, #416]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d030      	beq.n	8004638 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045de:	4b65      	ldr	r3, [pc, #404]	; (8004774 <HAL_RCC_OscConfig+0x514>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fd fa80 	bl	8001ae8 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045ec:	f7fd fa7c 	bl	8001ae8 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e157      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045fe:	4b58      	ldr	r3, [pc, #352]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0f0      	beq.n	80045ec <HAL_RCC_OscConfig+0x38c>
 800460a:	e015      	b.n	8004638 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <HAL_RCC_OscConfig+0x514>)
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004612:	f7fd fa69 	bl	8001ae8 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461a:	f7fd fa65 	bl	8001ae8 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e140      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80b5 	beq.w	80047b0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	4b42      	ldr	r3, [pc, #264]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	4a41      	ldr	r2, [pc, #260]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004660:	6253      	str	r3, [r2, #36]	; 0x24
 8004662:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x518>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <HAL_RCC_OscConfig+0x518>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <HAL_RCC_OscConfig+0x518>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fd fa2d 	bl	8001ae8 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fd fa29 	bl	8001ae8 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b64      	cmp	r3, #100	; 0x64
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e104      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x518>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x466>
 80046b8:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6353      	str	r3, [r2, #52]	; 0x34
 80046c4:	e02d      	b.n	8004722 <HAL_RCC_OscConfig+0x4c2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x488>
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	4a23      	ldr	r2, [pc, #140]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d8:	6353      	str	r3, [r2, #52]	; 0x34
 80046da:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e4:	6353      	str	r3, [r2, #52]	; 0x34
 80046e6:	e01c      	b.n	8004722 <HAL_RCC_OscConfig+0x4c2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d10c      	bne.n	800470a <HAL_RCC_OscConfig+0x4aa>
 80046f0:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f4:	4a1a      	ldr	r2, [pc, #104]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046fa:	6353      	str	r3, [r2, #52]	; 0x34
 80046fc:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 80046fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004706:	6353      	str	r3, [r2, #52]	; 0x34
 8004708:	e00b      	b.n	8004722 <HAL_RCC_OscConfig+0x4c2>
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004714:	6353      	str	r3, [r2, #52]	; 0x34
 8004716:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800471c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004720:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd f9dd 	bl	8001ae8 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fd f9d9 	bl	8001ae8 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0b2      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_OscConfig+0x500>)
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0ee      	beq.n	8004732 <HAL_RCC_OscConfig+0x4d2>
 8004754:	e023      	b.n	800479e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004756:	f7fd f9c7 	bl	8001ae8 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800475c:	e019      	b.n	8004792 <HAL_RCC_OscConfig+0x532>
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	08009f0c 	.word	0x08009f0c
 8004768:	20000004 	.word	0x20000004
 800476c:	20000008 	.word	0x20000008
 8004770:	42470020 	.word	0x42470020
 8004774:	42470680 	.word	0x42470680
 8004778:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fd f9b4 	bl	8001ae8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	; 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e08d      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004792:	4b49      	ldr	r3, [pc, #292]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ee      	bne.n	800477c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800479e:	7ffb      	ldrb	r3, [r7, #31]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	4a43      	ldr	r2, [pc, #268]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d056      	beq.n	800486c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d13b      	bne.n	800483e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <HAL_RCC_OscConfig+0x65c>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047cc:	f7fd f98c 	bl	8001ae8 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d4:	f7fd f988 	bl	8001ae8 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e063      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047e6:	4b34      	ldr	r3, [pc, #208]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4319      	orrs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	430b      	orrs	r3, r1
 800480a:	492b      	ldr	r1, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004810:	4b2a      	ldr	r3, [pc, #168]	; (80048bc <HAL_RCC_OscConfig+0x65c>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fd f967 	bl	8001ae8 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481e:	f7fd f963 	bl	8001ae8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e03e      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x5be>
 800483c:	e036      	b.n	80048ac <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483e:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <HAL_RCC_OscConfig+0x65c>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fd f950 	bl	8001ae8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800484c:	f7fd f94c 	bl	8001ae8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e027      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x5ec>
 800486a:	e01f      	b.n	80048ac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e01a      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <HAL_RCC_OscConfig+0x658>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	429a      	cmp	r2, r3
 800488a:	d10d      	bne.n	80048a8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d106      	bne.n	80048a8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470060 	.word	0x42470060

080048c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e11a      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d4:	4b8f      	ldr	r3, [pc, #572]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d919      	bls.n	8004916 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d105      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x34>
 80048e8:	4b8a      	ldr	r3, [pc, #552]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a89      	ldr	r2, [pc, #548]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	4b87      	ldr	r3, [pc, #540]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 0201 	bic.w	r2, r3, #1
 80048fc:	4985      	ldr	r1, [pc, #532]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004904:	4b83      	ldr	r3, [pc, #524]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d001      	beq.n	8004916 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0f9      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d008      	beq.n	8004934 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004922:	4b7d      	ldr	r3, [pc, #500]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	497a      	ldr	r1, [pc, #488]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004930:	4313      	orrs	r3, r2
 8004932:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 808e 	beq.w	8004a5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800494a:	4b73      	ldr	r3, [pc, #460]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d121      	bne.n	800499a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e0d7      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e0cb      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800497a:	4b67      	ldr	r3, [pc, #412]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0bf      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800498a:	4b63      	ldr	r3, [pc, #396]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0b7      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b5f      	ldr	r3, [pc, #380]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	495c      	ldr	r1, [pc, #368]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049ac:	f7fd f89c 	bl	8001ae8 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d112      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ba:	e00a      	b.n	80049d2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049bc:	f7fd f894 	bl	8001ae8 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e09b      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d2:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d1ee      	bne.n	80049bc <HAL_RCC_ClockConfig+0xfc>
 80049de:	e03e      	b.n	8004a5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d112      	bne.n	8004a0e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ea:	f7fd f87d 	bl	8001ae8 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e084      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a00:	4b45      	ldr	r3, [pc, #276]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d1ee      	bne.n	80049ea <HAL_RCC_ClockConfig+0x12a>
 8004a0c:	e027      	b.n	8004a5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d11d      	bne.n	8004a52 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd f866 	bl	8001ae8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e06d      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d1ee      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x158>
 8004a3a:	e010      	b.n	8004a5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3c:	f7fd f854 	bl	8001ae8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e05b      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a52:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1ee      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d219      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x1be>
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a78:	f043 0304 	orr.w	r3, r3, #4
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	4923      	ldr	r1, [pc, #140]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <HAL_RCC_ClockConfig+0x254>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e034      	b.n	8004b0a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b1a      	ldr	r3, [pc, #104]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4917      	ldr	r1, [pc, #92]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490f      	ldr	r1, [pc, #60]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f823 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <HAL_RCC_ClockConfig+0x258>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490b      	ldr	r1, [pc, #44]	; (8004b1c <HAL_RCC_ClockConfig+0x25c>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a0a      	ldr	r2, [pc, #40]	; (8004b20 <HAL_RCC_ClockConfig+0x260>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x264>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fc ffa6 	bl	8001a50 <HAL_InitTick>
 8004b04:	4603      	mov	r3, r0
 8004b06:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b08:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	08009f0c 	.word	0x08009f0c
 8004b20:	20000004 	.word	0x20000004
 8004b24:	20000008 	.word	0x20000008

08004b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b2e:	4b4d      	ldr	r3, [pc, #308]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d00c      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0x30>
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d87c      	bhi.n	8004c3c <HAL_RCC_GetSysClockFreq+0x114>
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x24>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d003      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0x2a>
 8004b4a:	e077      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b46      	ldr	r3, [pc, #280]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b4e:	613b      	str	r3, [r7, #16]
      break;
 8004b50:	e082      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b54:	613b      	str	r3, [r7, #16]
      break;
 8004b56:	e07f      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	0c9b      	lsrs	r3, r3, #18
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	4a43      	ldr	r2, [pc, #268]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x148>)
 8004b62:	5cd3      	ldrb	r3, [r2, r3]
 8004b64:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0d9b      	lsrs	r3, r3, #22
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b3c      	ldr	r3, [pc, #240]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d01a      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	461a      	mov	r2, r3
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	4939      	ldr	r1, [pc, #228]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b88:	fb01 f003 	mul.w	r0, r1, r3
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	fb01 f102 	mul.w	r1, r1, r2
 8004b92:	1844      	adds	r4, r0, r1
 8004b94:	4935      	ldr	r1, [pc, #212]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b96:	fba2 0101 	umull	r0, r1, r2, r1
 8004b9a:	1863      	adds	r3, r4, r1
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	f7fb fae9 	bl	800017c <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4613      	mov	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e040      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	461c      	mov	r4, r3
 8004bb8:	f04f 0500 	mov.w	r5, #0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	014b      	lsls	r3, r1, #5
 8004bca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bce:	0142      	lsls	r2, r0, #5
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	1b00      	subs	r0, r0, r4
 8004bd6:	eb61 0105 	sbc.w	r1, r1, r5
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004be8:	0182      	lsls	r2, r0, #6
 8004bea:	1a12      	subs	r2, r2, r0
 8004bec:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf0:	f04f 0000 	mov.w	r0, #0
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	00d9      	lsls	r1, r3, #3
 8004bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bfe:	00d0      	lsls	r0, r2, #3
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	1912      	adds	r2, r2, r4
 8004c06:	eb45 0303 	adc.w	r3, r5, r3
 8004c0a:	f04f 0000 	mov.w	r0, #0
 8004c0e:	f04f 0100 	mov.w	r1, #0
 8004c12:	0299      	lsls	r1, r3, #10
 8004c14:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c18:	0290      	lsls	r0, r2, #10
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	461a      	mov	r2, r3
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	f7fb faa7 	bl	800017c <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4613      	mov	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	613b      	str	r3, [r7, #16]
      break;
 8004c3a:	e00d      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c3c:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0b5b      	lsrs	r3, r3, #13
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
      break;
 8004c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c58:	693b      	ldr	r3, [r7, #16]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bdb0      	pop	{r4, r5, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	01312d00 	.word	0x01312d00
 8004c70:	08009f00 	.word	0x08009f00

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b02      	ldr	r3, [pc, #8]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	20000004 	.word	0x20000004

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c8c:	f7ff fff2 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	08009f1c 	.word	0x08009f1c

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb4:	f7ff ffde 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0adb      	lsrs	r3, r3, #11
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4903      	ldr	r1, [pc, #12]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	08009f1c 	.word	0x08009f1c

08004cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ce4:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d12c      	bne.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004cfc:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	e016      	b.n	8004d36 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d08:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	4a1f      	ldr	r2, [pc, #124]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6253      	str	r3, [r2, #36]	; 0x24
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004d20:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d28:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d34:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004d3c:	d105      	bne.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d44:	d101      	bne.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d46:	2301      	movs	r3, #1
 8004d48:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004d50:	4b10      	ldr	r3, [pc, #64]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0f      	ldr	r2, [pc, #60]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d56:	f043 0304 	orr.w	r3, r3, #4
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 0201 	bic.w	r2, r3, #1
 8004d64:	490b      	ldr	r1, [pc, #44]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d001      	beq.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40007000 	.word	0x40007000
 8004d94:	40023c00 	.word	0x40023c00

08004d98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e06e      	b.n	8004e88 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d108      	bne.n	8004dc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	d009      	beq.n	8004dd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
 8004dc2:	e005      	b.n	8004dd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fc62 	bl	80016b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e54:	ea42 0103 	orr.w	r1, r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	0c1a      	lsrs	r2, r3, #16
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f002 0204 	and.w	r2, r2, #4
 8004e76:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_SPI_Transmit+0x22>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e126      	b.n	8005100 <HAL_SPI_Transmit+0x270>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eba:	f7fc fe15 	bl	8001ae8 <HAL_GetTick>
 8004ebe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ec0:	88fb      	ldrh	r3, [r7, #6]
 8004ec2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ed4:	e10b      	b.n	80050ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Transmit+0x52>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ee6:	e102      	b.n	80050ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2203      	movs	r2, #3
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d10f      	bne.n	8004f50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d007      	beq.n	8004f6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f76:	d14b      	bne.n	8005010 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SPI_Transmit+0xf6>
 8004f80:	8afb      	ldrh	r3, [r7, #22]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d13e      	bne.n	8005004 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	881a      	ldrh	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004faa:	e02b      	b.n	8005004 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d112      	bne.n	8004fe0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	881a      	ldrh	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fca:	1c9a      	adds	r2, r3, #2
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fde:	e011      	b.n	8005004 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fe0:	f7fc fd82 	bl	8001ae8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d803      	bhi.n	8004ff8 <HAL_SPI_Transmit+0x168>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d102      	bne.n	8004ffe <HAL_SPI_Transmit+0x16e>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005002:	e074      	b.n	80050ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ce      	bne.n	8004fac <HAL_SPI_Transmit+0x11c>
 800500e:	e04c      	b.n	80050aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x18e>
 8005018:	8afb      	ldrh	r3, [r7, #22]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d140      	bne.n	80050a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	330c      	adds	r3, #12
 8005028:	7812      	ldrb	r2, [r2, #0]
 800502a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005044:	e02c      	b.n	80050a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d113      	bne.n	800507c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	7812      	ldrb	r2, [r2, #0]
 8005060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	86da      	strh	r2, [r3, #54]	; 0x36
 800507a:	e011      	b.n	80050a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507c:	f7fc fd34 	bl	8001ae8 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d803      	bhi.n	8005094 <HAL_SPI_Transmit+0x204>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d102      	bne.n	800509a <HAL_SPI_Transmit+0x20a>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800509e:	e026      	b.n	80050ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1cd      	bne.n	8005046 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fb58 	bl	8005764 <SPI_EndRxTxTransaction>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e000      	b.n	80050ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80050ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	; 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005116:	2301      	movs	r3, #1
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_SPI_TransmitReceive+0x26>
 800512a:	2302      	movs	r3, #2
 800512c:	e18a      	b.n	8005444 <HAL_SPI_TransmitReceive+0x33c>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005136:	f7fc fcd7 	bl	8001ae8 <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800514c:	887b      	ldrh	r3, [r7, #2]
 800514e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005154:	2b01      	cmp	r3, #1
 8005156:	d00f      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x70>
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515e:	d107      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d103      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x68>
 8005168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800516c:	2b04      	cmp	r3, #4
 800516e:	d003      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005170:	2302      	movs	r3, #2
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005176:	e15b      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_SPI_TransmitReceive+0x82>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_SPI_TransmitReceive+0x82>
 8005184:	887b      	ldrh	r3, [r7, #2]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005190:	e14e      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b04      	cmp	r3, #4
 800519c:	d003      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2205      	movs	r2, #5
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	887a      	ldrh	r2, [r7, #2]
 80051bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	887a      	ldrh	r2, [r7, #2]
 80051c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d007      	beq.n	80051fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005202:	d178      	bne.n	80052f6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d002      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x10a>
 800520c:	8b7b      	ldrh	r3, [r7, #26]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d166      	bne.n	80052e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005236:	e053      	b.n	80052e0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d11b      	bne.n	800527e <HAL_SPI_TransmitReceive+0x176>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800524a:	b29b      	uxth	r3, r3
 800524c:	2b00      	cmp	r3, #0
 800524e:	d016      	beq.n	800527e <HAL_SPI_TransmitReceive+0x176>
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d113      	bne.n	800527e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	881a      	ldrh	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	1c9a      	adds	r2, r3, #2
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	d119      	bne.n	80052c0 <HAL_SPI_TransmitReceive+0x1b8>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d014      	beq.n	80052c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	b292      	uxth	r2, r2
 80052a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80052c0:	f7fc fc12 	bl	8001ae8 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d807      	bhi.n	80052e0 <HAL_SPI_TransmitReceive+0x1d8>
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d003      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052de:	e0a7      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1a6      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x130>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1a1      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x130>
 80052f4:	e07c      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_SPI_TransmitReceive+0x1fc>
 80052fe:	8b7b      	ldrh	r3, [r7, #26]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d16b      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532a:	e057      	b.n	80053dc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d11c      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x26c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d017      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x26c>
 8005344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005346:	2b01      	cmp	r3, #1
 8005348:	d114      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	330c      	adds	r3, #12
 8005354:	7812      	ldrb	r2, [r2, #0]
 8005356:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b01      	cmp	r3, #1
 8005380:	d119      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x2ae>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d014      	beq.n	80053b6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053b2:	2301      	movs	r3, #1
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053b6:	f7fc fb97 	bl	8001ae8 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d803      	bhi.n	80053ce <HAL_SPI_TransmitReceive+0x2c6>
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d102      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x2cc>
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053da:	e029      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1a2      	bne.n	800532c <HAL_SPI_TransmitReceive+0x224>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d19d      	bne.n	800532c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f9b5 	bl	8005764 <SPI_EndRxTxTransaction>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d006      	beq.n	800540e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2220      	movs	r2, #32
 800540a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800540c:	e010      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	617b      	str	r3, [r7, #20]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	e000      	b.n	8005430 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800542e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005440:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005444:	4618      	mov	r0, r3
 8005446:	3730      	adds	r7, #48	; 0x30
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10f      	bne.n	8005490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d004      	beq.n	8005490 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	4798      	blx	r3
    return;
 800548e:	e0be      	b.n	800560e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_SPI_IRQHandler+0x66>
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	09db      	lsrs	r3, r3, #7
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
    return;
 80054b0:	e0ad      	b.n	800560e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_SPI_IRQHandler+0x80>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80a1 	beq.w	800560e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 809a 	beq.w	800560e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d023      	beq.n	800552e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d011      	beq.n	8005516 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	f043 0204 	orr.w	r2, r3, #4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	e00b      	b.n	800552e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	693b      	ldr	r3, [r7, #16]
        return;
 800552c:	e06f      	b.n	800560e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	2b00      	cmp	r3, #0
 800556a:	d04f      	beq.n	800560c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <HAL_SPI_IRQHandler+0x14c>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d034      	beq.n	8005602 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0203 	bic.w	r2, r2, #3
 80055a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_SPI_IRQHandler+0x1c8>)
 80055b6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fc fe62 	bl	8002286 <HAL_DMA_Abort_IT>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d016      	beq.n	800560a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e0:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <HAL_SPI_IRQHandler+0x1c8>)
 80055e2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fc fe4c 	bl	8002286 <HAL_DMA_Abort_IT>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005600:	e003      	b.n	800560a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f808 	bl	8005618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005608:	e000      	b.n	800560c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800560a:	bf00      	nop
    return;
 800560c:	bf00      	nop
  }
}
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	0800562b 	.word	0x0800562b

08005618 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ffe7 	bl	8005618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005664:	f7fc fa40 	bl	8001ae8 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4413      	add	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005674:	f7fc fa38 	bl	8001ae8 <HAL_GetTick>
 8005678:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800567a:	4b39      	ldr	r3, [pc, #228]	; (8005760 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	015b      	lsls	r3, r3, #5
 8005680:	0d1b      	lsrs	r3, r3, #20
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800568a:	e054      	b.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d050      	beq.n	8005736 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005694:	f7fc fa28 	bl	8001ae8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d902      	bls.n	80056aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d13d      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c2:	d111      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056cc:	d004      	beq.n	80056d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d6:	d107      	bne.n	80056e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f0:	d10f      	bne.n	8005712 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005710:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e017      	b.n	8005756 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3b01      	subs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	429a      	cmp	r2, r3
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	429a      	cmp	r2, r3
 8005752:	d19b      	bne.n	800568c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000004 	.word	0x20000004

08005764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af02      	add	r7, sp, #8
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <SPI_EndRxTxTransaction+0x7c>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <SPI_EndRxTxTransaction+0x80>)
 8005776:	fba2 2303 	umull	r2, r3, r2, r3
 800577a:	0d5b      	lsrs	r3, r3, #21
 800577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578e:	d112      	bne.n	80057b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff ff5a 	bl	8005654 <SPI_WaitFlagStateUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e00f      	b.n	80057d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3b01      	subs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d0f2      	beq.n	80057b6 <SPI_EndRxTxTransaction+0x52>
 80057d0:	e000      	b.n	80057d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80057d2:	bf00      	nop
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000004 	.word	0x20000004
 80057e4:	165e9f81 	.word	0x165e9f81

080057e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e03f      	b.n	800587a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d106      	bne.n	8005814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7fb ff9c 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	; 0x24
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800582a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f829 	bl	8005884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80058c4:	f023 030c 	bic.w	r3, r3, #12
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	430b      	orrs	r3, r1
 80058d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a55      	ldr	r2, [pc, #340]	; (8005a44 <UART_SetConfig+0x1c0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d103      	bne.n	80058fa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058f2:	f7ff f9dd 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	e002      	b.n	8005900 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058fa:	f7ff f9c5 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 80058fe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005908:	d14c      	bne.n	80059a4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009a      	lsls	r2, r3, #2
 8005914:	441a      	add	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	4a49      	ldr	r2, [pc, #292]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	0119      	lsls	r1, r3, #4
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	009a      	lsls	r2, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005940:	4b41      	ldr	r3, [pc, #260]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005942:	fba3 0302 	umull	r0, r3, r3, r2
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	2064      	movs	r0, #100	; 0x64
 800594a:	fb00 f303 	mul.w	r3, r0, r3
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	00db      	lsls	r3, r3, #3
 8005952:	3332      	adds	r3, #50	; 0x32
 8005954:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	095b      	lsrs	r3, r3, #5
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005962:	4419      	add	r1, r3
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009a      	lsls	r2, r3, #2
 800596e:	441a      	add	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	fbb2 f2f3 	udiv	r2, r2, r3
 800597a:	4b33      	ldr	r3, [pc, #204]	; (8005a48 <UART_SetConfig+0x1c4>)
 800597c:	fba3 0302 	umull	r0, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2064      	movs	r0, #100	; 0x64
 8005984:	fb00 f303 	mul.w	r3, r0, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a2e      	ldr	r2, [pc, #184]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 0207 	and.w	r2, r3, #7
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	440a      	add	r2, r1
 80059a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a2:	e04a      	b.n	8005a3a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009a      	lsls	r2, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ba:	4a23      	ldr	r2, [pc, #140]	; (8005a48 <UART_SetConfig+0x1c4>)
 80059bc:	fba2 2303 	umull	r2, r3, r2, r3
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	0119      	lsls	r1, r3, #4
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009a      	lsls	r2, r3, #2
 80059ce:	441a      	add	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <UART_SetConfig+0x1c4>)
 80059dc:	fba3 0302 	umull	r0, r3, r3, r2
 80059e0:	095b      	lsrs	r3, r3, #5
 80059e2:	2064      	movs	r0, #100	; 0x64
 80059e4:	fb00 f303 	mul.w	r3, r0, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	3332      	adds	r3, #50	; 0x32
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <UART_SetConfig+0x1c4>)
 80059f0:	fba2 2303 	umull	r2, r3, r2, r3
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fa:	4419      	add	r1, r3
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009a      	lsls	r2, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a12:	4b0d      	ldr	r3, [pc, #52]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005a14:	fba3 0302 	umull	r0, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	2064      	movs	r0, #100	; 0x64
 8005a1c:	fb00 f303 	mul.w	r3, r0, r3
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	3332      	adds	r3, #50	; 0x32
 8005a26:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <UART_SetConfig+0x1c4>)
 8005a28:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	f003 020f 	and.w	r2, r3, #15
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	440a      	add	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]
}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	40013800 	.word	0x40013800
 8005a48:	51eb851f 	.word	0x51eb851f

08005a4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <MX_FATFS_Init+0x18>)
 8005a52:	4805      	ldr	r0, [pc, #20]	; (8005a68 <MX_FATFS_Init+0x1c>)
 8005a54:	f003 f98a 	bl	8008d6c <FATFS_LinkDriver>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <MX_FATFS_Init+0x20>)
 8005a5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20002560 	.word	0x20002560
 8005a68:	20000010 	.word	0x20000010
 8005a6c:	20002564 	.word	0x20002564

08005a70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fa ff1c 	bl	80008c8 <SD_disk_initialize>
 8005a90:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fff4 	bl	8000a94 <SD_disk_status>
 8005aac:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005ac6:	7bf8      	ldrb	r0, [r7, #15]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	f7fa fff5 	bl	8000abc <SD_disk_read>
 8005ad2:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005aec:	7bf8      	ldrb	r0, [r7, #15]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	f7fb f84c 	bl	8000b90 <SD_disk_write>
 8005af8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	4603      	mov	r3, r0
 8005b0a:	603a      	str	r2, [r7, #0]
 8005b0c:	71fb      	strb	r3, [r7, #7]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005b12:	79b9      	ldrb	r1, [r7, #6]
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fb f8bd 	bl	8000c98 <SD_disk_ioctl>
 8005b1e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <disk_status+0x30>)
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	79fa      	ldrb	r2, [r7, #7]
 8005b40:	4905      	ldr	r1, [pc, #20]	; (8005b58 <disk_status+0x30>)
 8005b42:	440a      	add	r2, r1
 8005b44:	7a12      	ldrb	r2, [r2, #8]
 8005b46:	4610      	mov	r0, r2
 8005b48:	4798      	blx	r3
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2000031c 	.word	0x2000031c

08005b5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <disk_initialize+0x48>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d111      	bne.n	8005b98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b74:	79fb      	ldrb	r3, [r7, #7]
 8005b76:	4a0b      	ldr	r2, [pc, #44]	; (8005ba4 <disk_initialize+0x48>)
 8005b78:	2101      	movs	r1, #1
 8005b7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <disk_initialize+0x48>)
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	79fa      	ldrb	r2, [r7, #7]
 8005b8a:	4906      	ldr	r1, [pc, #24]	; (8005ba4 <disk_initialize+0x48>)
 8005b8c:	440a      	add	r2, r1
 8005b8e:	7a12      	ldrb	r2, [r2, #8]
 8005b90:	4610      	mov	r0, r2
 8005b92:	4798      	blx	r3
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000031c 	.word	0x2000031c

08005ba8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <disk_read+0x3c>)
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	689c      	ldr	r4, [r3, #8]
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <disk_read+0x3c>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	7a18      	ldrb	r0, [r3, #8]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	47a0      	blx	r4
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd90      	pop	{r4, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2000031c 	.word	0x2000031c

08005be8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <disk_write+0x3c>)
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68dc      	ldr	r4, [r3, #12]
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <disk_write+0x3c>)
 8005c08:	4413      	add	r3, r2
 8005c0a:	7a18      	ldrb	r0, [r3, #8]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	47a0      	blx	r4
 8005c14:	4603      	mov	r3, r0
 8005c16:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	bf00      	nop
 8005c24:	2000031c 	.word	0x2000031c

08005c28 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	603a      	str	r2, [r7, #0]
 8005c32:	71fb      	strb	r3, [r7, #7]
 8005c34:	460b      	mov	r3, r1
 8005c36:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <disk_ioctl+0x38>)
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	79fa      	ldrb	r2, [r7, #7]
 8005c46:	4906      	ldr	r1, [pc, #24]	; (8005c60 <disk_ioctl+0x38>)
 8005c48:	440a      	add	r2, r1
 8005c4a:	7a10      	ldrb	r0, [r2, #8]
 8005c4c:	79b9      	ldrb	r1, [r7, #6]
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	4798      	blx	r3
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	2000031c 	.word	0x2000031c

08005c64 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	b21a      	sxth	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b21b      	sxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b21b      	sxth	r3, r3
 8005c84:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c86:	89fb      	ldrh	r3, [r7, #14]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr

08005c92 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3303      	adds	r3, #3
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	3202      	adds	r2, #2
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	3201      	adds	r2, #1
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	7812      	ldrb	r2, [r2, #0]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
	return rv;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	887a      	ldrh	r2, [r7, #2]
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	887b      	ldrh	r3, [r7, #2]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	607a      	str	r2, [r7, #4]
 8005cfa:	887a      	ldrh	r2, [r7, #2]
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr

08005d0a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	0a1b      	lsrs	r3, r3, #8
 8005d36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr

08005d60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	1c53      	adds	r3, r2, #1
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	6179      	str	r1, [r7, #20]
 8005d86:	7812      	ldrb	r2, [r2, #0]
 8005d88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	607b      	str	r3, [r7, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f1      	bne.n	8005d7a <mem_cpy+0x1a>
	}
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	617a      	str	r2, [r7, #20]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1f3      	bne.n	8005db0 <mem_set+0x10>
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	; 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	61fa      	str	r2, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	61ba      	str	r2, [r7, #24]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	1acb      	subs	r3, r1, r3
 8005e00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <mem_cmp+0x40>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0eb      	beq.n	8005dec <mem_cmp+0x18>

	return r;
 8005e14:	697b      	ldr	r3, [r7, #20]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3724      	adds	r7, #36	; 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e2a:	e002      	b.n	8005e32 <chk_chr+0x12>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <chk_chr+0x26>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d1f2      	bne.n	8005e2c <chk_chr+0xc>
	return *str;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	781b      	ldrb	r3, [r3, #0]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bc80      	pop	{r7}
 8005e52:	4770      	bx	lr

08005e54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e5e:	2300      	movs	r3, #0
 8005e60:	60bb      	str	r3, [r7, #8]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e029      	b.n	8005ebc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e68:	4a26      	ldr	r2, [pc, #152]	; (8005f04 <chk_lock+0xb0>)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4413      	add	r3, r2
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d01d      	beq.n	8005eb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e76:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <chk_lock+0xb0>)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d116      	bne.n	8005eb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005e88:	4a1e      	ldr	r2, [pc, #120]	; (8005f04 <chk_lock+0xb0>)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	4413      	add	r3, r2
 8005e90:	3304      	adds	r3, #4
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d10c      	bne.n	8005eb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005e9c:	4a19      	ldr	r2, [pc, #100]	; (8005f04 <chk_lock+0xb0>)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d102      	bne.n	8005eb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005eb0:	e007      	b.n	8005ec2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d9d2      	bls.n	8005e68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d109      	bne.n	8005edc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <chk_lock+0x80>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d101      	bne.n	8005ed8 <chk_lock+0x84>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e010      	b.n	8005efa <chk_lock+0xa6>
 8005ed8:	2312      	movs	r3, #18
 8005eda:	e00e      	b.n	8005efa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <chk_lock+0xa0>
 8005ee2:	4a08      	ldr	r2, [pc, #32]	; (8005f04 <chk_lock+0xb0>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	4413      	add	r3, r2
 8005eea:	330c      	adds	r3, #12
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef2:	d101      	bne.n	8005ef8 <chk_lock+0xa4>
 8005ef4:	2310      	movs	r3, #16
 8005ef6:	e000      	b.n	8005efa <chk_lock+0xa6>
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	200000fc 	.word	0x200000fc

08005f08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	e002      	b.n	8005f1a <enq_lock+0x12>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3301      	adds	r3, #1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d806      	bhi.n	8005f2e <enq_lock+0x26>
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <enq_lock+0x3c>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	4413      	add	r3, r2
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f2      	bne.n	8005f14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	bf14      	ite	ne
 8005f34:	2301      	movne	r3, #1
 8005f36:	2300      	moveq	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr
 8005f44:	200000fc 	.word	0x200000fc

08005f48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e01f      	b.n	8005f98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f58:	4a41      	ldr	r2, [pc, #260]	; (8006060 <inc_lock+0x118>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	4413      	add	r3, r2
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d113      	bne.n	8005f92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f6a:	4a3d      	ldr	r2, [pc, #244]	; (8006060 <inc_lock+0x118>)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	3304      	adds	r3, #4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d109      	bne.n	8005f92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005f7e:	4a38      	ldr	r2, [pc, #224]	; (8006060 <inc_lock+0x118>)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	4413      	add	r3, r2
 8005f86:	3308      	adds	r3, #8
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d006      	beq.n	8005fa0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3301      	adds	r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d9dc      	bls.n	8005f58 <inc_lock+0x10>
 8005f9e:	e000      	b.n	8005fa2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fa0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d132      	bne.n	800600e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	e002      	b.n	8005fb4 <inc_lock+0x6c>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d806      	bhi.n	8005fc8 <inc_lock+0x80>
 8005fba:	4a29      	ldr	r2, [pc, #164]	; (8006060 <inc_lock+0x118>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	4413      	add	r3, r2
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1f2      	bne.n	8005fae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d101      	bne.n	8005fd2 <inc_lock+0x8a>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e040      	b.n	8006054 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4922      	ldr	r1, [pc, #136]	; (8006060 <inc_lock+0x118>)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	440b      	add	r3, r1
 8005fde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	491e      	ldr	r1, [pc, #120]	; (8006060 <inc_lock+0x118>)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	440b      	add	r3, r1
 8005fec:	3304      	adds	r3, #4
 8005fee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695a      	ldr	r2, [r3, #20]
 8005ff4:	491a      	ldr	r1, [pc, #104]	; (8006060 <inc_lock+0x118>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006000:	4a17      	ldr	r2, [pc, #92]	; (8006060 <inc_lock+0x118>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4413      	add	r3, r2
 8006008:	330c      	adds	r3, #12
 800600a:	2200      	movs	r2, #0
 800600c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <inc_lock+0xe0>
 8006014:	4a12      	ldr	r2, [pc, #72]	; (8006060 <inc_lock+0x118>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4413      	add	r3, r2
 800601c:	330c      	adds	r3, #12
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <inc_lock+0xe0>
 8006024:	2300      	movs	r3, #0
 8006026:	e015      	b.n	8006054 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d108      	bne.n	8006040 <inc_lock+0xf8>
 800602e:	4a0c      	ldr	r2, [pc, #48]	; (8006060 <inc_lock+0x118>)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	4413      	add	r3, r2
 8006036:	330c      	adds	r3, #12
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	e001      	b.n	8006044 <inc_lock+0xfc>
 8006040:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006044:	4906      	ldr	r1, [pc, #24]	; (8006060 <inc_lock+0x118>)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	440b      	add	r3, r1
 800604c:	330c      	adds	r3, #12
 800604e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	200000fc 	.word	0x200000fc

08006064 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3b01      	subs	r3, #1
 8006070:	607b      	str	r3, [r7, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d825      	bhi.n	80060c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8006078:	4a16      	ldr	r2, [pc, #88]	; (80060d4 <dec_lock+0x70>)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	4413      	add	r3, r2
 8006080:	330c      	adds	r3, #12
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608c:	d101      	bne.n	8006092 <dec_lock+0x2e>
 800608e:	2300      	movs	r3, #0
 8006090:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006092:	89fb      	ldrh	r3, [r7, #14]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <dec_lock+0x3a>
 8006098:	89fb      	ldrh	r3, [r7, #14]
 800609a:	3b01      	subs	r3, #1
 800609c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800609e:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <dec_lock+0x70>)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	330c      	adds	r3, #12
 80060a8:	89fa      	ldrh	r2, [r7, #14]
 80060aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <dec_lock+0x5a>
 80060b2:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <dec_lock+0x70>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	4413      	add	r3, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	737b      	strb	r3, [r7, #13]
 80060c2:	e001      	b.n	80060c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060c4:	2302      	movs	r3, #2
 80060c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr
 80060d4:	200000fc 	.word	0x200000fc

080060d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e010      	b.n	8006108 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80060e6:	4a0d      	ldr	r2, [pc, #52]	; (800611c <clear_lock+0x44>)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	4413      	add	r3, r2
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d105      	bne.n	8006102 <clear_lock+0x2a>
 80060f6:	4a09      	ldr	r2, [pc, #36]	; (800611c <clear_lock+0x44>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3301      	adds	r3, #1
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d9eb      	bls.n	80060e6 <clear_lock+0xe>
	}
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	200000fc 	.word	0x200000fc

08006120 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	78db      	ldrb	r3, [r3, #3]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d034      	beq.n	800619e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	7858      	ldrb	r0, [r3, #1]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006144:	2301      	movs	r3, #1
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	f7ff fd4e 	bl	8005be8 <disk_write>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006152:	2301      	movs	r3, #1
 8006154:	73fb      	strb	r3, [r7, #15]
 8006156:	e022      	b.n	800619e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	429a      	cmp	r2, r3
 800616c:	d217      	bcs.n	800619e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	789b      	ldrb	r3, [r3, #2]
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	e010      	b.n	8006198 <sync_window+0x78>
					wsect += fs->fsize;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7858      	ldrb	r0, [r3, #1]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800618a:	2301      	movs	r3, #1
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	f7ff fd2b 	bl	8005be8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3b01      	subs	r3, #1
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d8eb      	bhi.n	8006176 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3718      	adds	r7, #24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d01b      	beq.n	80061f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ffad 	bl	8006120 <sync_window>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d113      	bne.n	80061f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	7858      	ldrb	r0, [r3, #1]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80061da:	2301      	movs	r3, #1
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	f7ff fce3 	bl	8005ba8 <disk_read>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff ff87 	bl	8006120 <sync_window>
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d159      	bne.n	80062d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b03      	cmp	r3, #3
 8006222:	d149      	bne.n	80062b8 <sync_fs+0xb4>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	791b      	ldrb	r3, [r3, #4]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d145      	bne.n	80062b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	899b      	ldrh	r3, [r3, #12]
 8006236:	461a      	mov	r2, r3
 8006238:	2100      	movs	r1, #0
 800623a:	f7ff fdb1 	bl	8005da0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	3338      	adds	r3, #56	; 0x38
 8006242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006246:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fd43 	bl	8005cd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3338      	adds	r3, #56	; 0x38
 8006254:	4921      	ldr	r1, [pc, #132]	; (80062dc <sync_fs+0xd8>)
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fd57 	bl	8005d0a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3338      	adds	r3, #56	; 0x38
 8006260:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006264:	491e      	ldr	r1, [pc, #120]	; (80062e0 <sync_fs+0xdc>)
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fd4f 	bl	8005d0a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3338      	adds	r3, #56	; 0x38
 8006270:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7ff fd45 	bl	8005d0a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3338      	adds	r3, #56	; 0x38
 8006284:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4619      	mov	r1, r3
 800628e:	4610      	mov	r0, r2
 8006290:	f7ff fd3b 	bl	8005d0a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7858      	ldrb	r0, [r3, #1]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ac:	2301      	movs	r3, #1
 80062ae:	f7ff fc9b 	bl	8005be8 <disk_write>
			fs->fsi_flag = 0;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2200      	movs	r2, #0
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fcb1 	bl	8005c28 <disk_ioctl>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <sync_fs+0xcc>
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	41615252 	.word	0x41615252
 80062e0:	61417272 	.word	0x61417272

080062e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3b02      	subs	r3, #2
 80062f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	3b02      	subs	r3, #2
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d301      	bcc.n	8006304 <clust2sect+0x20>
 8006300:	2300      	movs	r3, #0
 8006302:	e008      	b.n	8006316 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	895b      	ldrh	r3, [r3, #10]
 8006308:	461a      	mov	r2, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	fb03 f202 	mul.w	r2, r3, r2
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006314:	4413      	add	r3, r2
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d904      	bls.n	8006340 <get_fat+0x20>
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d302      	bcc.n	8006346 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006340:	2301      	movs	r3, #1
 8006342:	617b      	str	r3, [r7, #20]
 8006344:	e0bb      	b.n	80064be <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006346:	f04f 33ff 	mov.w	r3, #4294967295
 800634a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b03      	cmp	r3, #3
 8006352:	f000 8083 	beq.w	800645c <get_fat+0x13c>
 8006356:	2b03      	cmp	r3, #3
 8006358:	f300 80a7 	bgt.w	80064aa <get_fat+0x18a>
 800635c:	2b01      	cmp	r3, #1
 800635e:	d002      	beq.n	8006366 <get_fat+0x46>
 8006360:	2b02      	cmp	r3, #2
 8006362:	d056      	beq.n	8006412 <get_fat+0xf2>
 8006364:	e0a1      	b.n	80064aa <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	899b      	ldrh	r3, [r3, #12]
 800637c:	4619      	mov	r1, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	fbb3 f3f1 	udiv	r3, r3, r1
 8006384:	4413      	add	r3, r2
 8006386:	4619      	mov	r1, r3
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f7ff ff0d 	bl	80061a8 <move_window>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f040 808d 	bne.w	80064b0 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	60fa      	str	r2, [r7, #12]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	8992      	ldrh	r2, [r2, #12]
 80063a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063a4:	fb02 f201 	mul.w	r2, r2, r1
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4413      	add	r3, r2
 80063ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063b2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	899b      	ldrh	r3, [r3, #12]
 80063bc:	4619      	mov	r1, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80063c4:	4413      	add	r3, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	6938      	ldr	r0, [r7, #16]
 80063ca:	f7ff feed 	bl	80061a8 <move_window>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d16f      	bne.n	80064b4 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	899b      	ldrh	r3, [r3, #12]
 80063d8:	461a      	mov	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80063e0:	fb02 f201 	mul.w	r2, r2, r1
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	461a      	mov	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d002      	beq.n	8006408 <get_fat+0xe8>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	e002      	b.n	800640e <get_fat+0xee>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640e:	617b      	str	r3, [r7, #20]
			break;
 8006410:	e055      	b.n	80064be <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	899b      	ldrh	r3, [r3, #12]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	b29b      	uxth	r3, r3
 800641e:	4619      	mov	r1, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	fbb3 f3f1 	udiv	r3, r3, r1
 8006426:	4413      	add	r3, r2
 8006428:	4619      	mov	r1, r3
 800642a:	6938      	ldr	r0, [r7, #16]
 800642c:	f7ff febc 	bl	80061a8 <move_window>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d140      	bne.n	80064b8 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	8992      	ldrh	r2, [r2, #12]
 8006444:	fbb3 f0f2 	udiv	r0, r3, r2
 8006448:	fb02 f200 	mul.w	r2, r2, r0
 800644c:	1a9b      	subs	r3, r3, r2
 800644e:	440b      	add	r3, r1
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fc07 	bl	8005c64 <ld_word>
 8006456:	4603      	mov	r3, r0
 8006458:	617b      	str	r3, [r7, #20]
			break;
 800645a:	e030      	b.n	80064be <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	899b      	ldrh	r3, [r3, #12]
 8006464:	089b      	lsrs	r3, r3, #2
 8006466:	b29b      	uxth	r3, r3
 8006468:	4619      	mov	r1, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006470:	4413      	add	r3, r2
 8006472:	4619      	mov	r1, r3
 8006474:	6938      	ldr	r0, [r7, #16]
 8006476:	f7ff fe97 	bl	80061a8 <move_window>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11d      	bne.n	80064bc <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	8992      	ldrh	r2, [r2, #12]
 800648e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006492:	fb02 f200 	mul.w	r2, r2, r0
 8006496:	1a9b      	subs	r3, r3, r2
 8006498:	440b      	add	r3, r1
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fbf9 	bl	8005c92 <ld_dword>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80064a6:	617b      	str	r3, [r7, #20]
			break;
 80064a8:	e009      	b.n	80064be <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80064aa:	2301      	movs	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e006      	b.n	80064be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b0:	bf00      	nop
 80064b2:	e004      	b.n	80064be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064b4:	bf00      	nop
 80064b6:	e002      	b.n	80064be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064bc:	bf00      	nop
		}
	}

	return val;
 80064be:	697b      	ldr	r3, [r7, #20]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80064c8:	b590      	push	{r4, r7, lr}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80064d4:	2302      	movs	r3, #2
 80064d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	f240 8102 	bls.w	80066e4 <put_fat+0x21c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	f080 80fc 	bcs.w	80066e4 <put_fat+0x21c>
		switch (fs->fs_type) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b03      	cmp	r3, #3
 80064f2:	f000 80b6 	beq.w	8006662 <put_fat+0x19a>
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	f300 80fd 	bgt.w	80066f6 <put_fat+0x22e>
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d003      	beq.n	8006508 <put_fat+0x40>
 8006500:	2b02      	cmp	r3, #2
 8006502:	f000 8083 	beq.w	800660c <put_fat+0x144>
 8006506:	e0f6      	b.n	80066f6 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	61bb      	str	r3, [r7, #24]
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4413      	add	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	899b      	ldrh	r3, [r3, #12]
 800651e:	4619      	mov	r1, r3
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	fbb3 f3f1 	udiv	r3, r3, r1
 8006526:	4413      	add	r3, r2
 8006528:	4619      	mov	r1, r3
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff fe3c 	bl	80061a8 <move_window>
 8006530:	4603      	mov	r3, r0
 8006532:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006534:	7ffb      	ldrb	r3, [r7, #31]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 80d6 	bne.w	80066e8 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	61ba      	str	r2, [r7, #24]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	8992      	ldrh	r2, [r2, #12]
 800654c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006550:	fb02 f200 	mul.w	r2, r2, r0
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	440b      	add	r3, r1
 8006558:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00d      	beq.n	8006580 <put_fat+0xb8>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	f003 030f 	and.w	r3, r3, #15
 800656e:	b25a      	sxtb	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	011b      	lsls	r3, r3, #4
 8006576:	b25b      	sxtb	r3, r3
 8006578:	4313      	orrs	r3, r2
 800657a:	b25b      	sxtb	r3, r3
 800657c:	b2db      	uxtb	r3, r3
 800657e:	e001      	b.n	8006584 <put_fat+0xbc>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2201      	movs	r2, #1
 800658c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	899b      	ldrh	r3, [r3, #12]
 8006596:	4619      	mov	r1, r3
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	fbb3 f3f1 	udiv	r3, r3, r1
 800659e:	4413      	add	r3, r2
 80065a0:	4619      	mov	r1, r3
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fe00 	bl	80061a8 <move_window>
 80065a8:	4603      	mov	r3, r0
 80065aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065ac:	7ffb      	ldrb	r3, [r7, #31]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f040 809c 	bne.w	80066ec <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	899b      	ldrh	r3, [r3, #12]
 80065be:	461a      	mov	r2, r3
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80065c6:	fb02 f200 	mul.w	r2, r2, r0
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	440b      	add	r3, r1
 80065ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <put_fat+0x11a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e00e      	b.n	8006600 <put_fat+0x138>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f023 030f 	bic.w	r3, r3, #15
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0a1b      	lsrs	r3, r3, #8
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	4313      	orrs	r3, r2
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	70da      	strb	r2, [r3, #3]
			break;
 800660a:	e074      	b.n	80066f6 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	899b      	ldrh	r3, [r3, #12]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	b29b      	uxth	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006620:	4413      	add	r3, r2
 8006622:	4619      	mov	r1, r3
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fdbf 	bl	80061a8 <move_window>
 800662a:	4603      	mov	r3, r0
 800662c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800662e:	7ffb      	ldrb	r3, [r7, #31]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d15d      	bne.n	80066f0 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	8992      	ldrh	r2, [r2, #12]
 8006642:	fbb3 f0f2 	udiv	r0, r3, r2
 8006646:	fb02 f200 	mul.w	r2, r2, r0
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	440b      	add	r3, r1
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	b292      	uxth	r2, r2
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fb3e 	bl	8005cd6 <st_word>
			fs->wflag = 1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	70da      	strb	r2, [r3, #3]
			break;
 8006660:	e049      	b.n	80066f6 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	899b      	ldrh	r3, [r3, #12]
 800666a:	089b      	lsrs	r3, r3, #2
 800666c:	b29b      	uxth	r3, r3
 800666e:	4619      	mov	r1, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	fbb3 f3f1 	udiv	r3, r3, r1
 8006676:	4413      	add	r3, r2
 8006678:	4619      	mov	r1, r3
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fd94 	bl	80061a8 <move_window>
 8006680:	4603      	mov	r3, r0
 8006682:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006684:	7ffb      	ldrb	r3, [r7, #31]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d134      	bne.n	80066f4 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	8992      	ldrh	r2, [r2, #12]
 800669e:	fbb3 f0f2 	udiv	r0, r3, r2
 80066a2:	fb02 f200 	mul.w	r2, r2, r0
 80066a6:	1a9b      	subs	r3, r3, r2
 80066a8:	440b      	add	r3, r1
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff faf1 	bl	8005c92 <ld_dword>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066b6:	4323      	orrs	r3, r4
 80066b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	8992      	ldrh	r2, [r2, #12]
 80066c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80066cc:	fb02 f200 	mul.w	r2, r2, r0
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	440b      	add	r3, r1
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff fb17 	bl	8005d0a <st_dword>
			fs->wflag = 1;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	70da      	strb	r2, [r3, #3]
			break;
 80066e2:	e008      	b.n	80066f6 <put_fat+0x22e>
		}
	}
 80066e4:	bf00      	nop
 80066e6:	e006      	b.n	80066f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <put_fat+0x22e>
			if (res != FR_OK) break;
 80066f4:	bf00      	nop
	return res;
 80066f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3724      	adds	r7, #36	; 0x24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}

08006700 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d904      	bls.n	8006726 <remove_chain+0x26>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	d301      	bcc.n	800672a <remove_chain+0x2a>
 8006726:	2302      	movs	r3, #2
 8006728:	e04b      	b.n	80067c2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00c      	beq.n	800674a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	69b8      	ldr	r0, [r7, #24]
 8006738:	f7ff fec6 	bl	80064c8 <put_fat>
 800673c:	4603      	mov	r3, r0
 800673e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006740:	7ffb      	ldrb	r3, [r7, #31]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <remove_chain+0x4a>
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	e03b      	b.n	80067c2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800674a:	68b9      	ldr	r1, [r7, #8]
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff fde7 	bl	8006320 <get_fat>
 8006752:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d031      	beq.n	80067be <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <remove_chain+0x64>
 8006760:	2302      	movs	r3, #2
 8006762:	e02e      	b.n	80067c2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	d101      	bne.n	8006770 <remove_chain+0x70>
 800676c:	2301      	movs	r3, #1
 800676e:	e028      	b.n	80067c2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006770:	2200      	movs	r2, #0
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	69b8      	ldr	r0, [r7, #24]
 8006776:	f7ff fea7 	bl	80064c8 <put_fat>
 800677a:	4603      	mov	r3, r0
 800677c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <remove_chain+0x88>
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	e01c      	b.n	80067c2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	3b02      	subs	r3, #2
 8006792:	429a      	cmp	r2, r3
 8006794:	d20b      	bcs.n	80067ae <remove_chain+0xae>
			fs->free_clst++;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	791b      	ldrb	r3, [r3, #4]
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d3c6      	bcc.n	800674a <remove_chain+0x4a>
 80067bc:	e000      	b.n	80067c0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067be:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3720      	adds	r7, #32
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b088      	sub	sp, #32
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10d      	bne.n	80067fc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <create_chain+0x2c>
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d31b      	bcc.n	800682e <create_chain+0x64>
 80067f6:	2301      	movs	r3, #1
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	e018      	b.n	800682e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fd8e 	bl	8006320 <get_fat>
 8006804:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d801      	bhi.n	8006810 <create_chain+0x46>
 800680c:	2301      	movs	r3, #1
 800680e:	e070      	b.n	80068f2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d101      	bne.n	800681c <create_chain+0x52>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	e06a      	b.n	80068f2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	429a      	cmp	r2, r3
 8006824:	d201      	bcs.n	800682a <create_chain+0x60>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	e063      	b.n	80068f2 <create_chain+0x128>
		scl = clst;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3301      	adds	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	429a      	cmp	r2, r3
 8006840:	d307      	bcc.n	8006852 <create_chain+0x88>
				ncl = 2;
 8006842:	2302      	movs	r3, #2
 8006844:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	429a      	cmp	r2, r3
 800684c:	d901      	bls.n	8006852 <create_chain+0x88>
 800684e:	2300      	movs	r3, #0
 8006850:	e04f      	b.n	80068f2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006852:	69f9      	ldr	r1, [r7, #28]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f7ff fd63 	bl	8006320 <get_fat>
 800685a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00e      	beq.n	8006880 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d003      	beq.n	8006870 <create_chain+0xa6>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686e:	d101      	bne.n	8006874 <create_chain+0xaa>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	e03e      	b.n	80068f2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	429a      	cmp	r2, r3
 800687a:	d1da      	bne.n	8006832 <create_chain+0x68>
 800687c:	2300      	movs	r3, #0
 800687e:	e038      	b.n	80068f2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006880:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006882:	f04f 32ff 	mov.w	r2, #4294967295
 8006886:	69f9      	ldr	r1, [r7, #28]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7ff fe1d 	bl	80064c8 <put_fat>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <create_chain+0xe2>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d006      	beq.n	80068ac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6938      	ldr	r0, [r7, #16]
 80068a4:	f7ff fe10 	bl	80064c8 <put_fat>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d116      	bne.n	80068e0 <create_chain+0x116>
		fs->last_clst = ncl;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	699a      	ldr	r2, [r3, #24]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	3b02      	subs	r3, #2
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d804      	bhi.n	80068d0 <create_chain+0x106>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	1e5a      	subs	r2, r3, #1
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	791b      	ldrb	r3, [r3, #4]
 80068d4:	f043 0301 	orr.w	r3, r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	711a      	strb	r2, [r3, #4]
 80068de:	e007      	b.n	80068f0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d102      	bne.n	80068ec <create_chain+0x122>
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ea:	e000      	b.n	80068ee <create_chain+0x124>
 80068ec:	2301      	movs	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80068f0:	69fb      	ldr	r3, [r7, #28]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	3304      	adds	r3, #4
 8006910:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	899b      	ldrh	r3, [r3, #12]
 8006916:	461a      	mov	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	fbb3 f3f2 	udiv	r3, r3, r2
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	8952      	ldrh	r2, [r2, #10]
 8006922:	fbb3 f3f2 	udiv	r3, r3, r2
 8006926:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1d1a      	adds	r2, r3, #4
 800692c:	613a      	str	r2, [r7, #16]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <clmt_clust+0x42>
 8006938:	2300      	movs	r3, #0
 800693a:	e010      	b.n	800695e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	d307      	bcc.n	8006954 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3304      	adds	r3, #4
 8006950:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006952:	e7e9      	b.n	8006928 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006954:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	4413      	add	r3, r2
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800697e:	d204      	bcs.n	800698a <dir_sdi+0x22>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <dir_sdi+0x26>
		return FR_INT_ERR;
 800698a:	2302      	movs	r3, #2
 800698c:	e071      	b.n	8006a72 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <dir_sdi+0x46>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d902      	bls.n	80069ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10c      	bne.n	80069ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	8912      	ldrh	r2, [r2, #8]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d301      	bcc.n	80069c4 <dir_sdi+0x5c>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e056      	b.n	8006a72 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	61da      	str	r2, [r3, #28]
 80069cc:	e02d      	b.n	8006a2a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	895b      	ldrh	r3, [r3, #10]
 80069d2:	461a      	mov	r2, r3
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	899b      	ldrh	r3, [r3, #12]
 80069d8:	fb03 f302 	mul.w	r3, r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069de:	e019      	b.n	8006a14 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6979      	ldr	r1, [r7, #20]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff fc9b 	bl	8006320 <get_fat>
 80069ea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d101      	bne.n	80069f8 <dir_sdi+0x90>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e03c      	b.n	8006a72 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d904      	bls.n	8006a08 <dir_sdi+0xa0>
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d301      	bcc.n	8006a0c <dir_sdi+0xa4>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e032      	b.n	8006a72 <dir_sdi+0x10a>
			ofs -= csz;
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d2e1      	bcs.n	80069e0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006a1c:	6979      	ldr	r1, [r7, #20]
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	f7ff fc60 	bl	80062e4 <clust2sect>
 8006a24:	4602      	mov	r2, r0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <dir_sdi+0xd4>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e01a      	b.n	8006a72 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	899b      	ldrh	r3, [r3, #12]
 8006a44:	4619      	mov	r1, r3
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	899b      	ldrh	r3, [r3, #12]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a64:	fb02 f200 	mul.w	r2, r2, r0
 8006a68:	1a9b      	subs	r3, r3, r2
 8006a6a:	18ca      	adds	r2, r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	3320      	adds	r3, #32
 8006a90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <dir_next+0x28>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d301      	bcc.n	8006aa6 <dir_next+0x2c>
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	e0bb      	b.n	8006c1e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	899b      	ldrh	r3, [r3, #12]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ab2:	fb02 f201 	mul.w	r2, r2, r1
 8006ab6:	1a9b      	subs	r3, r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f040 809d 	bne.w	8006bf8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10b      	bne.n	8006ae8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	8912      	ldrh	r2, [r2, #8]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f0c0 808d 	bcc.w	8006bf8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	61da      	str	r2, [r3, #28]
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	e09a      	b.n	8006c1e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	899b      	ldrh	r3, [r3, #12]
 8006aec:	461a      	mov	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	8952      	ldrh	r2, [r2, #10]
 8006af8:	3a01      	subs	r2, #1
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d17b      	bne.n	8006bf8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f7ff fc09 	bl	8006320 <get_fat>
 8006b0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d801      	bhi.n	8006b1a <dir_next+0xa0>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e081      	b.n	8006c1e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b20:	d101      	bne.n	8006b26 <dir_next+0xac>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e07b      	b.n	8006c1e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d359      	bcc.n	8006be4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	61da      	str	r2, [r3, #28]
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	e06e      	b.n	8006c1e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7ff fe3e 	bl	80067ca <create_chain>
 8006b4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <dir_next+0xe0>
 8006b56:	2307      	movs	r3, #7
 8006b58:	e061      	b.n	8006c1e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <dir_next+0xea>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e05c      	b.n	8006c1e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6a:	d101      	bne.n	8006b70 <dir_next+0xf6>
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e056      	b.n	8006c1e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff fad5 	bl	8006120 <sync_window>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <dir_next+0x106>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e04e      	b.n	8006c1e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	899b      	ldrh	r3, [r3, #12]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	f7ff f907 	bl	8005da0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b92:	2300      	movs	r3, #0
 8006b94:	613b      	str	r3, [r7, #16]
 8006b96:	6979      	ldr	r1, [r7, #20]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fba3 	bl	80062e4 <clust2sect>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	635a      	str	r2, [r3, #52]	; 0x34
 8006ba4:	e012      	b.n	8006bcc <dir_next+0x152>
						fs->wflag = 1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f7ff fab7 	bl	8006120 <sync_window>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <dir_next+0x142>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e030      	b.n	8006c1e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	895b      	ldrh	r3, [r3, #10]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d3e6      	bcc.n	8006ba6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fb79 	bl	80062e4 <clust2sect>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	899b      	ldrh	r3, [r3, #12]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c10:	fb02 f200 	mul.w	r2, r2, r0
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	18ca      	adds	r2, r1, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b086      	sub	sp, #24
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c36:	2100      	movs	r1, #0
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fe95 	bl	8006968 <dir_sdi>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d12b      	bne.n	8006ca0 <dir_alloc+0x7a>
		n = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	4619      	mov	r1, r3
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff faa8 	bl	80061a8 <move_window>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11d      	bne.n	8006c9e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2be5      	cmp	r3, #229	; 0xe5
 8006c6a:	d004      	beq.n	8006c76 <dir_alloc+0x50>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d102      	bne.n	8006c8a <dir_alloc+0x64>
 8006c84:	e00c      	b.n	8006ca0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c86:	2300      	movs	r3, #0
 8006c88:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff fef4 	bl	8006a7a <dir_next>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0d7      	beq.n	8006c4c <dir_alloc+0x26>
 8006c9c:	e000      	b.n	8006ca0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c9e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d101      	bne.n	8006caa <dir_alloc+0x84>
 8006ca6:	2307      	movs	r3, #7
 8006ca8:	75fb      	strb	r3, [r7, #23]
	return res;
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	331a      	adds	r3, #26
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe ffce 	bl	8005c64 <ld_word>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d109      	bne.n	8006ce8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	3314      	adds	r3, #20
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe ffc3 	bl	8005c64 <ld_word>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	041b      	lsls	r3, r3, #16
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	331a      	adds	r3, #26
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	b292      	uxth	r2, r2
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fe ffe4 	bl	8005cd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d109      	bne.n	8006d2a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f103 0214 	add.w	r2, r3, #20
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	4610      	mov	r0, r2
 8006d26:	f7fe ffd6 	bl	8005cd6 <st_word>
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	331a      	adds	r3, #26
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ff8e 	bl	8005c64 <ld_word>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <cmp_lfn+0x1e>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e059      	b.n	8006e06 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d68:	2301      	movs	r3, #1
 8006d6a:	81fb      	strh	r3, [r7, #14]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	e033      	b.n	8006dda <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006d72:	4a27      	ldr	r2, [pc, #156]	; (8006e10 <cmp_lfn+0xdc>)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	4413      	add	r3, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe ff6f 	bl	8005c64 <ld_word>
 8006d86:	4603      	mov	r3, r0
 8006d88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01a      	beq.n	8006dc6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2bfe      	cmp	r3, #254	; 0xfe
 8006d94:	d812      	bhi.n	8006dbc <cmp_lfn+0x88>
 8006d96:	89bb      	ldrh	r3, [r7, #12]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 f831 	bl	8008e00 <ff_wtoupper>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461c      	mov	r4, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	617a      	str	r2, [r7, #20]
 8006da8:	005b      	lsls	r3, r3, #1
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 f825 	bl	8008e00 <ff_wtoupper>
 8006db6:	4603      	mov	r3, r0
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d001      	beq.n	8006dc0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e022      	b.n	8006e06 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006dc0:	89bb      	ldrh	r3, [r7, #12]
 8006dc2:	81fb      	strh	r3, [r7, #14]
 8006dc4:	e006      	b.n	8006dd4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006dc6:	89bb      	ldrh	r3, [r7, #12]
 8006dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d001      	beq.n	8006dd4 <cmp_lfn+0xa0>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e018      	b.n	8006e06 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d9c8      	bls.n	8006d72 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <cmp_lfn+0xd0>
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <cmp_lfn+0xd0>
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	005b      	lsls	r3, r3, #1
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d001      	beq.n	8006e04 <cmp_lfn+0xd0>
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e04:	2301      	movs	r3, #1
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd90      	pop	{r4, r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	08009fa4 	.word	0x08009fa4

08006e14 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	460b      	mov	r3, r1
 8006e24:	71fb      	strb	r3, [r7, #7]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	330d      	adds	r3, #13
 8006e2e:	79ba      	ldrb	r2, [r7, #6]
 8006e30:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	330b      	adds	r3, #11
 8006e36:	220f      	movs	r2, #15
 8006e38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	2200      	movs	r2, #0
 8006e40:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	331a      	adds	r3, #26
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe ff44 	bl	8005cd6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	1e5a      	subs	r2, r3, #1
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	82fb      	strh	r3, [r7, #22]
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006e66:	8afb      	ldrh	r3, [r7, #22]
 8006e68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d007      	beq.n	8006e80 <put_lfn+0x6c>
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	005b      	lsls	r3, r3, #1
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006e80:	4a17      	ldr	r2, [pc, #92]	; (8006ee0 <put_lfn+0xcc>)
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	4413      	add	r3, r2
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	8afa      	ldrh	r2, [r7, #22]
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fe ff1f 	bl	8005cd6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006e98:	8afb      	ldrh	r3, [r7, #22]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d102      	bne.n	8006ea4 <put_lfn+0x90>
 8006e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ea2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	61bb      	str	r3, [r7, #24]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d9da      	bls.n	8006e66 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006eb0:	8afb      	ldrh	r3, [r7, #22]
 8006eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d006      	beq.n	8006ec8 <put_lfn+0xb4>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d103      	bne.n	8006ed0 <put_lfn+0xbc>
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ece:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	79fa      	ldrb	r2, [r7, #7]
 8006ed4:	701a      	strb	r2, [r3, #0]
}
 8006ed6:	bf00      	nop
 8006ed8:	3720      	adds	r7, #32
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	08009fa4 	.word	0x08009fa4

08006ee4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08c      	sub	sp, #48	; 0x30
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006ef2:	220b      	movs	r2, #11
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7fe ff32 	bl	8005d60 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d92b      	bls.n	8006f5a <gen_numname+0x76>
		sr = seq;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f06:	e022      	b.n	8006f4e <gen_numname+0x6a>
			wc = *lfn++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	1c9a      	adds	r2, r3, #2
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006f12:	2300      	movs	r3, #0
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f16:	e017      	b.n	8006f48 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005a      	lsls	r2, r3, #1
 8006f1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	4413      	add	r3, r2
 8006f24:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <gen_numname+0x5e>
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f3c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f40:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	3301      	adds	r3, #1
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	2b0f      	cmp	r3, #15
 8006f4c:	d9e4      	bls.n	8006f18 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1d8      	bne.n	8006f08 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	3330      	adds	r3, #48	; 0x30
 8006f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f72:	2b39      	cmp	r3, #57	; 0x39
 8006f74:	d904      	bls.n	8006f80 <gen_numname+0x9c>
 8006f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f7a:	3307      	adds	r3, #7
 8006f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f90:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	091b      	lsrs	r3, r3, #4
 8006f98:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1de      	bne.n	8006f5e <gen_numname+0x7a>
	ns[i] = '~';
 8006fa0:	f107 0214 	add.w	r2, r7, #20
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	4413      	add	r3, r2
 8006fa8:	227e      	movs	r2, #126	; 0x7e
 8006faa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006fac:	2300      	movs	r3, #0
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	e002      	b.n	8006fb8 <gen_numname+0xd4>
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d205      	bcs.n	8006fcc <gen_numname+0xe8>
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	4413      	add	r3, r2
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d1f2      	bne.n	8006fb2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fce:	2b07      	cmp	r3, #7
 8006fd0:	d808      	bhi.n	8006fe4 <gen_numname+0x100>
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fdc:	4413      	add	r3, r2
 8006fde:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006fe2:	e000      	b.n	8006fe6 <gen_numname+0x102>
 8006fe4:	2120      	movs	r1, #32
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	627a      	str	r2, [r7, #36]	; 0x24
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	460a      	mov	r2, r1
 8006ff2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	2b07      	cmp	r3, #7
 8006ff8:	d9e8      	bls.n	8006fcc <gen_numname+0xe8>
}
 8006ffa:	bf00      	nop
 8006ffc:	bf00      	nop
 8006ffe:	3730      	adds	r7, #48	; 0x30
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007010:	230b      	movs	r3, #11
 8007012:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	b2da      	uxtb	r2, r3
 8007018:	0852      	lsrs	r2, r2, #1
 800701a:	01db      	lsls	r3, r3, #7
 800701c:	4313      	orrs	r3, r2
 800701e:	b2da      	uxtb	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	1c59      	adds	r1, r3, #1
 8007024:	6079      	str	r1, [r7, #4]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	4413      	add	r3, r2
 800702a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3b01      	subs	r3, #1
 8007030:	60bb      	str	r3, [r7, #8]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1ed      	bne.n	8007014 <sum_sfn+0x10>
	return sum;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	bc80      	pop	{r7}
 8007042:	4770      	bx	lr

08007044 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff fc87 	bl	8006968 <dir_sdi>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <dir_find+0x24>
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	e0a9      	b.n	80071bc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007068:	23ff      	movs	r3, #255	; 0xff
 800706a:	753b      	strb	r3, [r7, #20]
 800706c:	7d3b      	ldrb	r3, [r7, #20]
 800706e:	757b      	strb	r3, [r7, #21]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	4619      	mov	r1, r3
 800707e:	6938      	ldr	r0, [r7, #16]
 8007080:	f7ff f892 	bl	80061a8 <move_window>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 8090 	bne.w	80071b0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007098:	7dbb      	ldrb	r3, [r7, #22]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d102      	bne.n	80070a4 <dir_find+0x60>
 800709e:	2304      	movs	r3, #4
 80070a0:	75fb      	strb	r3, [r7, #23]
 80070a2:	e08a      	b.n	80071ba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	330b      	adds	r3, #11
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7bfa      	ldrb	r2, [r7, #15]
 80070b6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	2be5      	cmp	r3, #229	; 0xe5
 80070bc:	d007      	beq.n	80070ce <dir_find+0x8a>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <dir_find+0x98>
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d006      	beq.n	80070dc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80070ce:	23ff      	movs	r3, #255	; 0xff
 80070d0:	757b      	strb	r3, [r7, #21]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f04f 32ff 	mov.w	r2, #4294967295
 80070d8:	631a      	str	r2, [r3, #48]	; 0x30
 80070da:	e05e      	b.n	800719a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	2b0f      	cmp	r3, #15
 80070e0:	d136      	bne.n	8007150 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d154      	bne.n	800719a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80070f0:	7dbb      	ldrb	r3, [r7, #22]
 80070f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00d      	beq.n	8007116 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	7b5b      	ldrb	r3, [r3, #13]
 8007100:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007102:	7dbb      	ldrb	r3, [r7, #22]
 8007104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007108:	75bb      	strb	r3, [r7, #22]
 800710a:	7dbb      	ldrb	r3, [r7, #22]
 800710c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007116:	7dba      	ldrb	r2, [r7, #22]
 8007118:	7d7b      	ldrb	r3, [r7, #21]
 800711a:	429a      	cmp	r2, r3
 800711c:	d115      	bne.n	800714a <dir_find+0x106>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	330d      	adds	r3, #13
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	7d3a      	ldrb	r2, [r7, #20]
 8007128:	429a      	cmp	r2, r3
 800712a:	d10e      	bne.n	800714a <dir_find+0x106>
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	691a      	ldr	r2, [r3, #16]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	4619      	mov	r1, r3
 8007136:	4610      	mov	r0, r2
 8007138:	f7ff fdfc 	bl	8006d34 <cmp_lfn>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d003      	beq.n	800714a <dir_find+0x106>
 8007142:	7d7b      	ldrb	r3, [r7, #21]
 8007144:	3b01      	subs	r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	e000      	b.n	800714c <dir_find+0x108>
 800714a:	23ff      	movs	r3, #255	; 0xff
 800714c:	757b      	strb	r3, [r7, #21]
 800714e:	e024      	b.n	800719a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007150:	7d7b      	ldrb	r3, [r7, #21]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <dir_find+0x126>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff ff52 	bl	8007004 <sum_sfn>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	7d3b      	ldrb	r3, [r7, #20]
 8007166:	4293      	cmp	r3, r2
 8007168:	d024      	beq.n	80071b4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <dir_find+0x14a>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a18      	ldr	r0, [r3, #32]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3324      	adds	r3, #36	; 0x24
 8007180:	220b      	movs	r2, #11
 8007182:	4619      	mov	r1, r3
 8007184:	f7fe fe26 	bl	8005dd4 <mem_cmp>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d014      	beq.n	80071b8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800718e:	23ff      	movs	r3, #255	; 0xff
 8007190:	757b      	strb	r3, [r7, #21]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800719a:	2100      	movs	r1, #0
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff fc6c 	bl	8006a7a <dir_next>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f43f af65 	beq.w	8007078 <dir_find+0x34>
 80071ae:	e004      	b.n	80071ba <dir_find+0x176>
		if (res != FR_OK) break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80071b8:	bf00      	nop

	return res;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08c      	sub	sp, #48	; 0x30
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <dir_register+0x20>
 80071e0:	2306      	movs	r3, #6
 80071e2:	e0e0      	b.n	80073a6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
 80071e8:	e002      	b.n	80071f0 <dir_register+0x2c>
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	3301      	adds	r3, #1
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f4      	bne.n	80071ea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007206:	f107 030c 	add.w	r3, r7, #12
 800720a:	220c      	movs	r2, #12
 800720c:	4618      	mov	r0, r3
 800720e:	f7fe fda7 	bl	8005d60 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d032      	beq.n	8007282 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2240      	movs	r2, #64	; 0x40
 8007220:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007224:	2301      	movs	r3, #1
 8007226:	62bb      	str	r3, [r7, #40]	; 0x28
 8007228:	e016      	b.n	8007258 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	691a      	ldr	r2, [r3, #16]
 8007234:	f107 010c 	add.w	r1, r7, #12
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	f7ff fe53 	bl	8006ee4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff ff00 	bl	8007044 <dir_find>
 8007244:	4603      	mov	r3, r0
 8007246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800724a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800724e:	2b00      	cmp	r3, #0
 8007250:	d106      	bne.n	8007260 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	3301      	adds	r3, #1
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	2b63      	cmp	r3, #99	; 0x63
 800725c:	d9e5      	bls.n	800722a <dir_register+0x66>
 800725e:	e000      	b.n	8007262 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007260:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	2b64      	cmp	r3, #100	; 0x64
 8007266:	d101      	bne.n	800726c <dir_register+0xa8>
 8007268:	2307      	movs	r3, #7
 800726a:	e09c      	b.n	80073a6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800726c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007270:	2b04      	cmp	r3, #4
 8007272:	d002      	beq.n	800727a <dir_register+0xb6>
 8007274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007278:	e095      	b.n	80073a6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800727a:	7dfa      	ldrb	r2, [r7, #23]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <dir_register+0xd8>
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	330c      	adds	r3, #12
 8007290:	4a47      	ldr	r2, [pc, #284]	; (80073b0 <dir_register+0x1ec>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	3301      	adds	r3, #1
 800729a:	e000      	b.n	800729e <dir_register+0xda>
 800729c:	2301      	movs	r3, #1
 800729e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80072a0:	6a39      	ldr	r1, [r7, #32]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f7ff fcbf 	bl	8006c26 <dir_alloc>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80072ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d148      	bne.n	8007348 <dir_register+0x184>
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d042      	beq.n	8007348 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	695a      	ldr	r2, [r3, #20]
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	015b      	lsls	r3, r3, #5
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	4619      	mov	r1, r3
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fb4a 	bl	8006968 <dir_sdi>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80072da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d132      	bne.n	8007348 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3324      	adds	r3, #36	; 0x24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fe8c 	bl	8007004 <sum_sfn>
 80072ec:	4603      	mov	r3, r0
 80072ee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4619      	mov	r1, r3
 80072f6:	69f8      	ldr	r0, [r7, #28]
 80072f8:	f7fe ff56 	bl	80061a8 <move_window>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d11d      	bne.n	8007346 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	6918      	ldr	r0, [r3, #16]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a19      	ldr	r1, [r3, #32]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	7efb      	ldrb	r3, [r7, #27]
 8007318:	f7ff fd7c 	bl	8006e14 <put_lfn>
				fs->wflag = 1;
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2201      	movs	r2, #1
 8007320:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007322:	2100      	movs	r1, #0
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff fba8 	bl	8006a7a <dir_next>
 800732a:	4603      	mov	r3, r0
 800732c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007334:	2b00      	cmp	r3, #0
 8007336:	d107      	bne.n	8007348 <dir_register+0x184>
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	3b01      	subs	r3, #1
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1d5      	bne.n	80072f0 <dir_register+0x12c>
 8007344:	e000      	b.n	8007348 <dir_register+0x184>
				if (res != FR_OK) break;
 8007346:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800734c:	2b00      	cmp	r3, #0
 800734e:	d128      	bne.n	80073a2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4619      	mov	r1, r3
 8007356:	69f8      	ldr	r0, [r7, #28]
 8007358:	f7fe ff26 	bl	80061a8 <move_window>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007366:	2b00      	cmp	r3, #0
 8007368:	d11b      	bne.n	80073a2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	2220      	movs	r2, #32
 8007370:	2100      	movs	r1, #0
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fd14 	bl	8005da0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a18      	ldr	r0, [r3, #32]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3324      	adds	r3, #36	; 0x24
 8007380:	220b      	movs	r2, #11
 8007382:	4619      	mov	r1, r3
 8007384:	f7fe fcec 	bl	8005d60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	330c      	adds	r3, #12
 8007394:	f002 0218 	and.w	r2, r2, #24
 8007398:	b2d2      	uxtb	r2, r2
 800739a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2201      	movs	r2, #1
 80073a0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80073a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3730      	adds	r7, #48	; 0x30
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	4ec4ec4f 	.word	0x4ec4ec4f

080073b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	61ba      	str	r2, [r7, #24]
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4413      	add	r3, r2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80073e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073e4:	2b1f      	cmp	r3, #31
 80073e6:	d940      	bls.n	800746a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80073e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073ea:	2b2f      	cmp	r3, #47	; 0x2f
 80073ec:	d006      	beq.n	80073fc <create_name+0x48>
 80073ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f0:	2b5c      	cmp	r3, #92	; 0x5c
 80073f2:	d110      	bne.n	8007416 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80073f4:	e002      	b.n	80073fc <create_name+0x48>
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	3301      	adds	r3, #1
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	4413      	add	r3, r2
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	2b2f      	cmp	r3, #47	; 0x2f
 8007406:	d0f6      	beq.n	80073f6 <create_name+0x42>
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	4413      	add	r3, r2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b5c      	cmp	r3, #92	; 0x5c
 8007412:	d0f0      	beq.n	80073f6 <create_name+0x42>
			break;
 8007414:	e02a      	b.n	800746c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2bfe      	cmp	r3, #254	; 0xfe
 800741a:	d901      	bls.n	8007420 <create_name+0x6c>
 800741c:	2306      	movs	r3, #6
 800741e:	e177      	b.n	8007710 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007422:	b2db      	uxtb	r3, r3
 8007424:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007428:	2101      	movs	r1, #1
 800742a:	4618      	mov	r0, r3
 800742c:	f001 fcae 	bl	8008d8c <ff_convert>
 8007430:	4603      	mov	r3, r0
 8007432:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <create_name+0x8a>
 800743a:	2306      	movs	r3, #6
 800743c:	e168      	b.n	8007710 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800743e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007440:	2b7f      	cmp	r3, #127	; 0x7f
 8007442:	d809      	bhi.n	8007458 <create_name+0xa4>
 8007444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007446:	4619      	mov	r1, r3
 8007448:	48b3      	ldr	r0, [pc, #716]	; (8007718 <create_name+0x364>)
 800744a:	f7fe fce9 	bl	8005e20 <chk_chr>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <create_name+0xa4>
 8007454:	2306      	movs	r3, #6
 8007456:	e15b      	b.n	8007710 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	617a      	str	r2, [r7, #20]
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007466:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007468:	e7b4      	b.n	80073d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800746a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	441a      	add	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007476:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007478:	2b1f      	cmp	r3, #31
 800747a:	d801      	bhi.n	8007480 <create_name+0xcc>
 800747c:	2304      	movs	r3, #4
 800747e:	e000      	b.n	8007482 <create_name+0xce>
 8007480:	2300      	movs	r3, #0
 8007482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007486:	e011      	b.n	80074ac <create_name+0xf8>
		w = lfn[di - 1];
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800748e:	3b01      	subs	r3, #1
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800749a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800749c:	2b20      	cmp	r3, #32
 800749e:	d002      	beq.n	80074a6 <create_name+0xf2>
 80074a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074a2:	2b2e      	cmp	r3, #46	; 0x2e
 80074a4:	d106      	bne.n	80074b4 <create_name+0x100>
		di--;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	3b01      	subs	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1ea      	bne.n	8007488 <create_name+0xd4>
 80074b2:	e000      	b.n	80074b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80074b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	005b      	lsls	r3, r3, #1
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <create_name+0x118>
 80074c8:	2306      	movs	r3, #6
 80074ca:	e121      	b.n	8007710 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	220b      	movs	r2, #11
 80074d2:	2120      	movs	r1, #32
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7fe fc63 	bl	8005da0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80074da:	2300      	movs	r3, #0
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e002      	b.n	80074e6 <create_name+0x132>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	3301      	adds	r3, #1
 80074e4:	61bb      	str	r3, [r7, #24]
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d0f5      	beq.n	80074e0 <create_name+0x12c>
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007500:	d0ee      	beq.n	80074e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d009      	beq.n	800751c <create_name+0x168>
 8007508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800750c:	f043 0303 	orr.w	r3, r3, #3
 8007510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007514:	e002      	b.n	800751c <create_name+0x168>
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	3b01      	subs	r3, #1
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <create_name+0x182>
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007528:	3b01      	subs	r3, #1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	2b2e      	cmp	r3, #46	; 0x2e
 8007534:	d1ef      	bne.n	8007516 <create_name+0x162>

	i = b = 0; ni = 8;
 8007536:	2300      	movs	r3, #0
 8007538:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800753c:	2300      	movs	r3, #0
 800753e:	623b      	str	r3, [r7, #32]
 8007540:	2308      	movs	r3, #8
 8007542:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	1c5a      	adds	r2, r3, #1
 8007548:	61ba      	str	r2, [r7, #24]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8090 	beq.w	800767c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800755c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800755e:	2b20      	cmp	r3, #32
 8007560:	d006      	beq.n	8007570 <create_name+0x1bc>
 8007562:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007564:	2b2e      	cmp	r3, #46	; 0x2e
 8007566:	d10a      	bne.n	800757e <create_name+0x1ca>
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	d006      	beq.n	800757e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007574:	f043 0303 	orr.w	r3, r3, #3
 8007578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800757c:	e07d      	b.n	800767a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800757e:	6a3a      	ldr	r2, [r7, #32]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	429a      	cmp	r2, r3
 8007584:	d203      	bcs.n	800758e <create_name+0x1da>
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	429a      	cmp	r2, r3
 800758c:	d123      	bne.n	80075d6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b0b      	cmp	r3, #11
 8007592:	d106      	bne.n	80075a2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007598:	f043 0303 	orr.w	r3, r3, #3
 800759c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80075a0:	e06f      	b.n	8007682 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d005      	beq.n	80075b6 <create_name+0x202>
 80075aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ae:	f043 0303 	orr.w	r3, r3, #3
 80075b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d860      	bhi.n	8007680 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	2308      	movs	r3, #8
 80075c4:	623b      	str	r3, [r7, #32]
 80075c6:	230b      	movs	r3, #11
 80075c8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80075ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80075d4:	e051      	b.n	800767a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80075d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d8:	2b7f      	cmp	r3, #127	; 0x7f
 80075da:	d914      	bls.n	8007606 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80075dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fbd3 	bl	8008d8c <ff_convert>
 80075e6:	4603      	mov	r3, r0
 80075e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80075ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d004      	beq.n	80075fa <create_name+0x246>
 80075f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075f2:	3b80      	subs	r3, #128	; 0x80
 80075f4:	4a49      	ldr	r2, [pc, #292]	; (800771c <create_name+0x368>)
 80075f6:	5cd3      	ldrb	r3, [r2, r3]
 80075f8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80075fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075fe:	f043 0302 	orr.w	r3, r3, #2
 8007602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <create_name+0x268>
 800760c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800760e:	4619      	mov	r1, r3
 8007610:	4843      	ldr	r0, [pc, #268]	; (8007720 <create_name+0x36c>)
 8007612:	f7fe fc05 	bl	8005e20 <chk_chr>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800761c:	235f      	movs	r3, #95	; 0x5f
 800761e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007624:	f043 0303 	orr.w	r3, r3, #3
 8007628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800762c:	e01b      	b.n	8007666 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800762e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d909      	bls.n	8007648 <create_name+0x294>
 8007634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007636:	2b5a      	cmp	r3, #90	; 0x5a
 8007638:	d806      	bhi.n	8007648 <create_name+0x294>
					b |= 2;
 800763a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800763e:	f043 0302 	orr.w	r3, r3, #2
 8007642:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007646:	e00e      	b.n	8007666 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800764a:	2b60      	cmp	r3, #96	; 0x60
 800764c:	d90b      	bls.n	8007666 <create_name+0x2b2>
 800764e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007650:	2b7a      	cmp	r3, #122	; 0x7a
 8007652:	d808      	bhi.n	8007666 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007654:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007658:	f043 0301 	orr.w	r3, r3, #1
 800765c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007660:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007662:	3b20      	subs	r3, #32
 8007664:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	1c5a      	adds	r2, r3, #1
 800766a:	623a      	str	r2, [r7, #32]
 800766c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800766e:	b2d1      	uxtb	r1, r2
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	4413      	add	r3, r2
 8007674:	460a      	mov	r2, r1
 8007676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800767a:	e763      	b.n	8007544 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007680:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007688:	2be5      	cmp	r3, #229	; 0xe5
 800768a:	d103      	bne.n	8007694 <create_name+0x2e0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2205      	movs	r2, #5
 8007690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b08      	cmp	r3, #8
 8007698:	d104      	bne.n	80076a4 <create_name+0x2f0>
 800769a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80076a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b0c      	cmp	r3, #12
 80076ae:	d005      	beq.n	80076bc <create_name+0x308>
 80076b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d105      	bne.n	80076c8 <create_name+0x314>
 80076bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c0:	f043 0302 	orr.w	r3, r3, #2
 80076c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80076c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d117      	bne.n	8007704 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80076d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d105      	bne.n	80076ec <create_name+0x338>
 80076e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e4:	f043 0310 	orr.w	r3, r3, #16
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80076ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076f0:	f003 030c 	and.w	r3, r3, #12
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d105      	bne.n	8007704 <create_name+0x350>
 80076f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800770a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800770e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007710:	4618      	mov	r0, r3
 8007712:	3728      	adds	r7, #40	; 0x28
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	08009eb8 	.word	0x08009eb8
 800771c:	08009f24 	.word	0x08009f24
 8007720:	08009ec4 	.word	0x08009ec4

08007724 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007738:	e002      	b.n	8007740 <follow_path+0x1c>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b2f      	cmp	r3, #47	; 0x2f
 8007746:	d0f8      	beq.n	800773a <follow_path+0x16>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	2b5c      	cmp	r3, #92	; 0x5c
 800774e:	d0f4      	beq.n	800773a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	2200      	movs	r2, #0
 8007754:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b1f      	cmp	r3, #31
 800775c:	d80a      	bhi.n	8007774 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2280      	movs	r2, #128	; 0x80
 8007762:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007766:	2100      	movs	r1, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7ff f8fd 	bl	8006968 <dir_sdi>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]
 8007772:	e048      	b.n	8007806 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007774:	463b      	mov	r3, r7
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff fe1b 	bl	80073b4 <create_name>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d139      	bne.n	80077fc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff fc5b 	bl	8007044 <dir_find>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007798:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b04      	cmp	r3, #4
 80077a4:	d12c      	bne.n	8007800 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d127      	bne.n	8007800 <follow_path+0xdc>
 80077b0:	2305      	movs	r3, #5
 80077b2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077b4:	e024      	b.n	8007800 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d121      	bne.n	8007804 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	799b      	ldrb	r3, [r3, #6]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80077cc:	2305      	movs	r3, #5
 80077ce:	75fb      	strb	r3, [r7, #23]
 80077d0:	e019      	b.n	8007806 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	8992      	ldrh	r2, [r2, #12]
 80077e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80077e4:	fb02 f200 	mul.w	r2, r2, r0
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	440b      	add	r3, r1
 80077ec:	4619      	mov	r1, r3
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff fa60 	bl	8006cb4 <ld_clust>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077fa:	e7bb      	b.n	8007774 <follow_path+0x50>
			if (res != FR_OK) break;
 80077fc:	bf00      	nop
 80077fe:	e002      	b.n	8007806 <follow_path+0xe2>
				break;
 8007800:	bf00      	nop
 8007802:	e000      	b.n	8007806 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007804:	bf00      	nop
			}
		}
	}

	return res;
 8007806:	7dfb      	ldrb	r3, [r7, #23]
}
 8007808:	4618      	mov	r0, r3
 800780a:	3718      	adds	r7, #24
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007818:	f04f 33ff 	mov.w	r3, #4294967295
 800781c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d031      	beq.n	800788a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	e002      	b.n	8007834 <get_ldnumber+0x24>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3301      	adds	r3, #1
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b1f      	cmp	r3, #31
 800783a:	d903      	bls.n	8007844 <get_ldnumber+0x34>
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b3a      	cmp	r3, #58	; 0x3a
 8007842:	d1f4      	bne.n	800782e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b3a      	cmp	r3, #58	; 0x3a
 800784a:	d11c      	bne.n	8007886 <get_ldnumber+0x76>
			tp = *path;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	60fa      	str	r2, [r7, #12]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	3b30      	subs	r3, #48	; 0x30
 800785c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2b09      	cmp	r3, #9
 8007862:	d80e      	bhi.n	8007882 <get_ldnumber+0x72>
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	429a      	cmp	r2, r3
 800786a:	d10a      	bne.n	8007882 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <get_ldnumber+0x72>
					vol = (int)i;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	3301      	adds	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	e002      	b.n	800788c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800788a:	693b      	ldr	r3, [r7, #16]
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	bc80      	pop	{r7}
 8007894:	4770      	bx	lr
	...

08007898 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	70da      	strb	r2, [r3, #3]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f04f 32ff 	mov.w	r2, #4294967295
 80078ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe fc78 	bl	80061a8 <move_window>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <check_fs+0x2a>
 80078be:	2304      	movs	r3, #4
 80078c0:	e038      	b.n	8007934 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3338      	adds	r3, #56	; 0x38
 80078c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe f9ca 	bl	8005c64 <ld_word>
 80078d0:	4603      	mov	r3, r0
 80078d2:	461a      	mov	r2, r3
 80078d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078d8:	429a      	cmp	r2, r3
 80078da:	d001      	beq.n	80078e0 <check_fs+0x48>
 80078dc:	2303      	movs	r3, #3
 80078de:	e029      	b.n	8007934 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078e6:	2be9      	cmp	r3, #233	; 0xe9
 80078e8:	d009      	beq.n	80078fe <check_fs+0x66>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078f0:	2beb      	cmp	r3, #235	; 0xeb
 80078f2:	d11e      	bne.n	8007932 <check_fs+0x9a>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80078fa:	2b90      	cmp	r3, #144	; 0x90
 80078fc:	d119      	bne.n	8007932 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3338      	adds	r3, #56	; 0x38
 8007902:	3336      	adds	r3, #54	; 0x36
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe f9c4 	bl	8005c92 <ld_dword>
 800790a:	4603      	mov	r3, r0
 800790c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007910:	4a0a      	ldr	r2, [pc, #40]	; (800793c <check_fs+0xa4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d101      	bne.n	800791a <check_fs+0x82>
 8007916:	2300      	movs	r3, #0
 8007918:	e00c      	b.n	8007934 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3338      	adds	r3, #56	; 0x38
 800791e:	3352      	adds	r3, #82	; 0x52
 8007920:	4618      	mov	r0, r3
 8007922:	f7fe f9b6 	bl	8005c92 <ld_dword>
 8007926:	4603      	mov	r3, r0
 8007928:	4a05      	ldr	r2, [pc, #20]	; (8007940 <check_fs+0xa8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d101      	bne.n	8007932 <check_fs+0x9a>
 800792e:	2300      	movs	r3, #0
 8007930:	e000      	b.n	8007934 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007932:	2302      	movs	r3, #2
}
 8007934:	4618      	mov	r0, r3
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	00544146 	.word	0x00544146
 8007940:	33544146 	.word	0x33544146

08007944 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b096      	sub	sp, #88	; 0x58
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff ff59 	bl	8007810 <get_ldnumber>
 800795e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	da01      	bge.n	800796a <find_volume+0x26>
 8007966:	230b      	movs	r3, #11
 8007968:	e268      	b.n	8007e3c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800796a:	4ab0      	ldr	r2, [pc, #704]	; (8007c2c <find_volume+0x2e8>)
 800796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007972:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <find_volume+0x3a>
 800797a:	230c      	movs	r3, #12
 800797c:	e25e      	b.n	8007e3c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007982:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d01a      	beq.n	80079ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	4618      	mov	r0, r3
 800799a:	f7fe f8c5 	bl	8005b28 <disk_status>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10c      	bne.n	80079ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079b0:	79fb      	ldrb	r3, [r7, #7]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d007      	beq.n	80079c6 <find_volume+0x82>
 80079b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079c2:	230a      	movs	r3, #10
 80079c4:	e23a      	b.n	8007e3c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80079c6:	2300      	movs	r3, #0
 80079c8:	e238      	b.n	8007e3c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	2200      	movs	r2, #0
 80079ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079da:	785b      	ldrb	r3, [r3, #1]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe f8bd 	bl	8005b5c <disk_initialize>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80079f4:	2303      	movs	r3, #3
 80079f6:	e221      	b.n	8007e3c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <find_volume+0xca>
 80079fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a0a:	230a      	movs	r3, #10
 8007a0c:	e216      	b.n	8007e3c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a10:	7858      	ldrb	r0, [r3, #1]
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	330c      	adds	r3, #12
 8007a16:	461a      	mov	r2, r3
 8007a18:	2102      	movs	r1, #2
 8007a1a:	f7fe f905 	bl	8005c28 <disk_ioctl>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <find_volume+0xe4>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e209      	b.n	8007e3c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2a:	899b      	ldrh	r3, [r3, #12]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a30:	d80d      	bhi.n	8007a4e <find_volume+0x10a>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	899b      	ldrh	r3, [r3, #12]
 8007a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3a:	d308      	bcc.n	8007a4e <find_volume+0x10a>
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	899b      	ldrh	r3, [r3, #12]
 8007a40:	461a      	mov	r2, r3
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	899b      	ldrh	r3, [r3, #12]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <find_volume+0x10e>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e1f4      	b.n	8007e3c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a52:	2300      	movs	r3, #0
 8007a54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a5a:	f7ff ff1d 	bl	8007898 <check_fs>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d14b      	bne.n	8007b04 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a70:	e01f      	b.n	8007ab2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a74:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a80:	4413      	add	r3, r2
 8007a82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	3304      	adds	r3, #4
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d006      	beq.n	8007a9c <find_volume+0x158>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	3308      	adds	r3, #8
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fe f8fd 	bl	8005c92 <ld_dword>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	e000      	b.n	8007a9e <find_volume+0x15a>
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aae:	3301      	adds	r3, #1
 8007ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	d9dc      	bls.n	8007a72 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ab8:	2300      	movs	r3, #0
 8007aba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <find_volume+0x184>
 8007ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ad6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <find_volume+0x1a6>
 8007ade:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ae0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae2:	f7ff fed9 	bl	8007898 <check_fs>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	e000      	b.n	8007aec <find_volume+0x1a8>
 8007aea:	2303      	movs	r3, #3
 8007aec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007af0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d905      	bls.n	8007b04 <find_volume+0x1c0>
 8007af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007afa:	3301      	adds	r3, #1
 8007afc:	643b      	str	r3, [r7, #64]	; 0x40
 8007afe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d9e1      	bls.n	8007ac8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d101      	bne.n	8007b10 <find_volume+0x1cc>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e195      	b.n	8007e3c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d901      	bls.n	8007b1c <find_volume+0x1d8>
 8007b18:	230d      	movs	r3, #13
 8007b1a:	e18f      	b.n	8007e3c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	3338      	adds	r3, #56	; 0x38
 8007b20:	330b      	adds	r3, #11
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe f89e 	bl	8005c64 <ld_word>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	899b      	ldrh	r3, [r3, #12]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d001      	beq.n	8007b38 <find_volume+0x1f4>
 8007b34:	230d      	movs	r3, #13
 8007b36:	e181      	b.n	8007e3c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	3338      	adds	r3, #56	; 0x38
 8007b3c:	3316      	adds	r3, #22
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe f890 	bl	8005c64 <ld_word>
 8007b44:	4603      	mov	r3, r0
 8007b46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <find_volume+0x218>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	3338      	adds	r3, #56	; 0x38
 8007b52:	3324      	adds	r3, #36	; 0x24
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe f89c 	bl	8005c92 <ld_dword>
 8007b5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b60:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	789b      	ldrb	r3, [r3, #2]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d005      	beq.n	8007b80 <find_volume+0x23c>
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	789b      	ldrb	r3, [r3, #2]
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d001      	beq.n	8007b80 <find_volume+0x23c>
 8007b7c:	230d      	movs	r3, #13
 8007b7e:	e15d      	b.n	8007e3c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	789b      	ldrb	r3, [r3, #2]
 8007b84:	461a      	mov	r2, r3
 8007b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	895b      	ldrh	r3, [r3, #10]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <find_volume+0x270>
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	895b      	ldrh	r3, [r3, #10]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	895b      	ldrh	r3, [r3, #10]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4013      	ands	r3, r2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <find_volume+0x274>
 8007bb4:	230d      	movs	r3, #13
 8007bb6:	e141      	b.n	8007e3c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	3338      	adds	r3, #56	; 0x38
 8007bbc:	3311      	adds	r3, #17
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe f850 	bl	8005c64 <ld_word>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	891b      	ldrh	r3, [r3, #8]
 8007bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd2:	8992      	ldrh	r2, [r2, #12]
 8007bd4:	0952      	lsrs	r2, r2, #5
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bdc:	fb02 f201 	mul.w	r2, r2, r1
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <find_volume+0x2a8>
 8007be8:	230d      	movs	r3, #13
 8007bea:	e127      	b.n	8007e3c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	3338      	adds	r3, #56	; 0x38
 8007bf0:	3313      	adds	r3, #19
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe f836 	bl	8005c64 <ld_word>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <find_volume+0x2cc>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	3338      	adds	r3, #56	; 0x38
 8007c06:	3320      	adds	r3, #32
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fe f842 	bl	8005c92 <ld_dword>
 8007c0e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	3338      	adds	r3, #56	; 0x38
 8007c14:	330e      	adds	r3, #14
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe f824 	bl	8005c64 <ld_word>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <find_volume+0x2ec>
 8007c26:	230d      	movs	r3, #13
 8007c28:	e108      	b.n	8007e3c <find_volume+0x4f8>
 8007c2a:	bf00      	nop
 8007c2c:	200000f4 	.word	0x200000f4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c34:	4413      	add	r3, r2
 8007c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c38:	8911      	ldrh	r1, [r2, #8]
 8007c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3c:	8992      	ldrh	r2, [r2, #12]
 8007c3e:	0952      	lsrs	r2, r2, #5
 8007c40:	b292      	uxth	r2, r2
 8007c42:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c46:	b292      	uxth	r2, r2
 8007c48:	4413      	add	r3, r2
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d201      	bcs.n	8007c58 <find_volume+0x314>
 8007c54:	230d      	movs	r3, #13
 8007c56:	e0f1      	b.n	8007e3c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c60:	8952      	ldrh	r2, [r2, #10]
 8007c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <find_volume+0x32e>
 8007c6e:	230d      	movs	r3, #13
 8007c70:	e0e4      	b.n	8007e3c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8007c72:	2303      	movs	r3, #3
 8007c74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d802      	bhi.n	8007c88 <find_volume+0x344>
 8007c82:	2302      	movs	r3, #2
 8007c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d802      	bhi.n	8007c98 <find_volume+0x354>
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	1c9a      	adds	r2, r3, #2
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ca6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007caa:	441a      	add	r2, r3
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007cb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	441a      	add	r2, r3
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007cba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d11e      	bne.n	8007d00 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	3338      	adds	r3, #56	; 0x38
 8007cc6:	332a      	adds	r3, #42	; 0x2a
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fd ffcb 	bl	8005c64 <ld_word>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <find_volume+0x394>
 8007cd4:	230d      	movs	r3, #13
 8007cd6:	e0b1      	b.n	8007e3c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cda:	891b      	ldrh	r3, [r3, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <find_volume+0x3a0>
 8007ce0:	230d      	movs	r3, #13
 8007ce2:	e0ab      	b.n	8007e3c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	3338      	adds	r3, #56	; 0x38
 8007ce8:	332c      	adds	r3, #44	; 0x2c
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd ffd1 	bl	8005c92 <ld_dword>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cfe:	e01f      	b.n	8007d40 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	891b      	ldrh	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <find_volume+0x3c8>
 8007d08:	230d      	movs	r3, #13
 8007d0a:	e097      	b.n	8007e3c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d12:	441a      	add	r2, r3
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d103      	bne.n	8007d28 <find_volume+0x3e4>
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	e00a      	b.n	8007d3e <find_volume+0x3fa>
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	69da      	ldr	r2, [r3, #28]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	4413      	add	r3, r2
 8007d32:	085a      	lsrs	r2, r3, #1
 8007d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d3e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d42:	6a1a      	ldr	r2, [r3, #32]
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	899b      	ldrh	r3, [r3, #12]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d4c:	440b      	add	r3, r1
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d52:	8989      	ldrh	r1, [r1, #12]
 8007d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d201      	bcs.n	8007d60 <find_volume+0x41c>
 8007d5c:	230d      	movs	r3, #13
 8007d5e:	e06d      	b.n	8007e3c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295
 8007d66:	619a      	str	r2, [r3, #24]
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	699a      	ldr	r2, [r3, #24]
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	2280      	movs	r2, #128	; 0x80
 8007d74:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d149      	bne.n	8007e12 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d80:	3338      	adds	r3, #56	; 0x38
 8007d82:	3330      	adds	r3, #48	; 0x30
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7fd ff6d 	bl	8005c64 <ld_word>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d140      	bne.n	8007e12 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d92:	3301      	adds	r3, #1
 8007d94:	4619      	mov	r1, r3
 8007d96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d98:	f7fe fa06 	bl	80061a8 <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d137      	bne.n	8007e12 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	2200      	movs	r2, #0
 8007da6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	3338      	adds	r3, #56	; 0x38
 8007dac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fd ff57 	bl	8005c64 <ld_word>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461a      	mov	r2, r3
 8007dba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d127      	bne.n	8007e12 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	3338      	adds	r3, #56	; 0x38
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fd ff63 	bl	8005c92 <ld_dword>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	4a1d      	ldr	r2, [pc, #116]	; (8007e44 <find_volume+0x500>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d11e      	bne.n	8007e12 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	3338      	adds	r3, #56	; 0x38
 8007dd8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fd ff58 	bl	8005c92 <ld_dword>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <find_volume+0x504>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d113      	bne.n	8007e12 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	3338      	adds	r3, #56	; 0x38
 8007dee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd ff4d 	bl	8005c92 <ld_dword>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	3338      	adds	r3, #56	; 0x38
 8007e02:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fd ff43 	bl	8005c92 <ld_dword>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007e18:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <find_volume+0x508>)
 8007e1c:	881b      	ldrh	r3, [r3, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <find_volume+0x508>)
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <find_volume+0x508>)
 8007e28:	881a      	ldrh	r2, [r3, #0]
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	4a07      	ldr	r2, [pc, #28]	; (8007e50 <find_volume+0x50c>)
 8007e32:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e36:	f7fe f94f 	bl	80060d8 <clear_lock>
#endif
	return FR_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3758      	adds	r7, #88	; 0x58
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	41615252 	.word	0x41615252
 8007e48:	61417272 	.word	0x61417272
 8007e4c:	200000f8 	.word	0x200000f8
 8007e50:	2000011c 	.word	0x2000011c

08007e54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e5e:	2309      	movs	r3, #9
 8007e60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <validate+0x4e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d018      	beq.n	8007ea2 <validate+0x4e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d013      	beq.n	8007ea2 <validate+0x4e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	889a      	ldrh	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	88db      	ldrh	r3, [r3, #6]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d10c      	bne.n	8007ea2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	785b      	ldrb	r3, [r3, #1]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fd fe4a 	bl	8005b28 <disk_status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <validate+0x4e>
			res = FR_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <validate+0x5a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	e000      	b.n	8007eb0 <validate+0x5c>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	6013      	str	r3, [r2, #0]
	return res;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
	...

08007ec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007ed2:	f107 0310 	add.w	r3, r7, #16
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fc9a 	bl	8007810 <get_ldnumber>
 8007edc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da01      	bge.n	8007ee8 <f_mount+0x28>
 8007ee4:	230b      	movs	r3, #11
 8007ee6:	e02b      	b.n	8007f40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ee8:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <f_mount+0x88>)
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007ef8:	69b8      	ldr	r0, [r7, #24]
 8007efa:	f7fe f8ed 	bl	80060d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	490d      	ldr	r1, [pc, #52]	; (8007f48 <f_mount+0x88>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <f_mount+0x66>
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <f_mount+0x6a>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e00a      	b.n	8007f40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007f2a:	f107 010c 	add.w	r1, r7, #12
 8007f2e:	f107 0308 	add.w	r3, r7, #8
 8007f32:	2200      	movs	r2, #0
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff fd05 	bl	8007944 <find_volume>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3720      	adds	r7, #32
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	200000f4 	.word	0x200000f4

08007f4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b09a      	sub	sp, #104	; 0x68
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <f_open+0x18>
 8007f60:	2309      	movs	r3, #9
 8007f62:	e1bb      	b.n	80082dc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007f64:	79fb      	ldrb	r3, [r7, #7]
 8007f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f6a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f6c:	79fa      	ldrb	r2, [r7, #7]
 8007f6e:	f107 0114 	add.w	r1, r7, #20
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fce4 	bl	8007944 <find_volume>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 819f 	bne.w	80082ca <f_open+0x37e>
		dj.obj.fs = fs;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f107 0318 	add.w	r3, r7, #24
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fbc3 	bl	8007724 <follow_path>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007fa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11a      	bne.n	8007fe2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007fac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da03      	bge.n	8007fbe <f_open+0x72>
				res = FR_INVALID_NAME;
 8007fb6:	2306      	movs	r3, #6
 8007fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007fbc:	e011      	b.n	8007fe2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	bf14      	ite	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	2300      	moveq	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f107 0318 	add.w	r3, r7, #24
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fd ff3c 	bl	8005e54 <chk_lock>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	f003 031c 	and.w	r3, r3, #28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d07f      	beq.n	80080ec <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007fec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d10e      	bne.n	800801a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ffc:	f7fd ff84 	bl	8005f08 <enq_lock>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d006      	beq.n	8008014 <f_open+0xc8>
 8008006:	f107 0318 	add.w	r3, r7, #24
 800800a:	4618      	mov	r0, r3
 800800c:	f7ff f8da 	bl	80071c4 <dir_register>
 8008010:	4603      	mov	r3, r0
 8008012:	e000      	b.n	8008016 <f_open+0xca>
 8008014:	2312      	movs	r3, #18
 8008016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	f043 0308 	orr.w	r3, r3, #8
 8008020:	71fb      	strb	r3, [r7, #7]
 8008022:	e010      	b.n	8008046 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008024:	7fbb      	ldrb	r3, [r7, #30]
 8008026:	f003 0311 	and.w	r3, r3, #17
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <f_open+0xea>
					res = FR_DENIED;
 800802e:	2307      	movs	r3, #7
 8008030:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008034:	e007      	b.n	8008046 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <f_open+0xfa>
 8008040:	2308      	movs	r3, #8
 8008042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008046:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800804a:	2b00      	cmp	r3, #0
 800804c:	d168      	bne.n	8008120 <f_open+0x1d4>
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	2b00      	cmp	r3, #0
 8008056:	d063      	beq.n	8008120 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008058:	f7fd fd0a 	bl	8005a70 <get_fattime>
 800805c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	330e      	adds	r3, #14
 8008062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008064:	4618      	mov	r0, r3
 8008066:	f7fd fe50 	bl	8005d0a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	3316      	adds	r3, #22
 800806e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008070:	4618      	mov	r0, r3
 8008072:	f7fd fe4a 	bl	8005d0a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	330b      	adds	r3, #11
 800807a:	2220      	movs	r2, #32
 800807c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fe15 	bl	8006cb4 <ld_clust>
 800808a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008090:	2200      	movs	r2, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fe2d 	bl	8006cf2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809a:	331c      	adds	r3, #28
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fd fe33 	bl	8005d0a <st_dword>
					fs->wflag = 1;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2201      	movs	r2, #1
 80080a8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80080aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d037      	beq.n	8008120 <f_open+0x1d4>
						dw = fs->winsect;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80080b6:	f107 0318 	add.w	r3, r7, #24
 80080ba:	2200      	movs	r2, #0
 80080bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fb1e 	bl	8006700 <remove_chain>
 80080c4:	4603      	mov	r3, r0
 80080c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80080ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d126      	bne.n	8008120 <f_open+0x1d4>
							res = move_window(fs, dw);
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe f866 	bl	80061a8 <move_window>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080e6:	3a01      	subs	r2, #1
 80080e8:	615a      	str	r2, [r3, #20]
 80080ea:	e019      	b.n	8008120 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80080ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d115      	bne.n	8008120 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80080f4:	7fbb      	ldrb	r3, [r7, #30]
 80080f6:	f003 0310 	and.w	r3, r3, #16
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <f_open+0x1ba>
					res = FR_NO_FILE;
 80080fe:	2304      	movs	r3, #4
 8008100:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008104:	e00c      	b.n	8008120 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008106:	79fb      	ldrb	r3, [r7, #7]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d007      	beq.n	8008120 <f_open+0x1d4>
 8008110:	7fbb      	ldrb	r3, [r7, #30]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d002      	beq.n	8008120 <f_open+0x1d4>
						res = FR_DENIED;
 800811a:	2307      	movs	r3, #7
 800811c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008124:	2b00      	cmp	r3, #0
 8008126:	d128      	bne.n	800817a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008138:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	f023 0301 	bic.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	bf14      	ite	ne
 8008152:	2301      	movne	r3, #1
 8008154:	2300      	moveq	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	f107 0318 	add.w	r3, r7, #24
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fd fef1 	bl	8005f48 <inc_lock>
 8008166:	4602      	mov	r2, r0
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <f_open+0x22e>
 8008174:	2302      	movs	r3, #2
 8008176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800817a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800817e:	2b00      	cmp	r3, #0
 8008180:	f040 80a3 	bne.w	80082ca <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fd92 	bl	8006cb4 <ld_clust>
 8008190:	4602      	mov	r2, r0
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	331c      	adds	r3, #28
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd fd79 	bl	8005c92 <ld_dword>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	88da      	ldrh	r2, [r3, #6]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	79fa      	ldrb	r2, [r7, #7]
 80081be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3330      	adds	r3, #48	; 0x30
 80081d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081da:	2100      	movs	r1, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fd fddf 	bl	8005da0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	f003 0320 	and.w	r3, r3, #32
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d06e      	beq.n	80082ca <f_open+0x37e>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d06a      	beq.n	80082ca <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	461a      	mov	r2, r3
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	899b      	ldrh	r3, [r3, #12]
 8008206:	fb03 f302 	mul.w	r3, r3, r2
 800820a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008218:	e016      	b.n	8008248 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe f87e 	bl	8006320 <get_fat>
 8008224:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008228:	2b01      	cmp	r3, #1
 800822a:	d802      	bhi.n	8008232 <f_open+0x2e6>
 800822c:	2302      	movs	r3, #2
 800822e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d102      	bne.n	8008240 <f_open+0x2f4>
 800823a:	2301      	movs	r3, #1
 800823c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008240:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008248:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800824c:	2b00      	cmp	r3, #0
 800824e:	d103      	bne.n	8008258 <f_open+0x30c>
 8008250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008254:	429a      	cmp	r2, r3
 8008256:	d8e0      	bhi.n	800821a <f_open+0x2ce>
				}
				fp->clust = clst;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800825c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800825e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008262:	2b00      	cmp	r3, #0
 8008264:	d131      	bne.n	80082ca <f_open+0x37e>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	899b      	ldrh	r3, [r3, #12]
 800826a:	461a      	mov	r2, r3
 800826c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800826e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008272:	fb02 f201 	mul.w	r2, r2, r1
 8008276:	1a9b      	subs	r3, r3, r2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d026      	beq.n	80082ca <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe f82f 	bl	80062e4 <clust2sect>
 8008286:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <f_open+0x34a>
						res = FR_INT_ERR;
 800828e:	2302      	movs	r3, #2
 8008290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008294:	e019      	b.n	80082ca <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	899b      	ldrh	r3, [r3, #12]
 800829a:	461a      	mov	r2, r3
 800829c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800829e:	fbb3 f2f2 	udiv	r2, r3, r2
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	441a      	add	r2, r3
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	7858      	ldrb	r0, [r3, #1]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1a      	ldr	r2, [r3, #32]
 80082b8:	2301      	movs	r3, #1
 80082ba:	f7fd fc75 	bl	8005ba8 <disk_read>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <f_open+0x37e>
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <f_open+0x38c>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3768      	adds	r7, #104	; 0x68
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08c      	sub	sp, #48	; 0x30
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f107 0210 	add.w	r2, r7, #16
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff fda5 	bl	8007e54 <validate>
 800830a:	4603      	mov	r3, r0
 800830c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008314:	2b00      	cmp	r3, #0
 8008316:	d107      	bne.n	8008328 <f_write+0x44>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	7d5b      	ldrb	r3, [r3, #21]
 800831c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <f_write+0x4a>
 8008328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800832c:	e16a      	b.n	8008604 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	7d1b      	ldrb	r3, [r3, #20]
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <f_write+0x5a>
 800833a:	2307      	movs	r3, #7
 800833c:	e162      	b.n	8008604 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	441a      	add	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	429a      	cmp	r2, r3
 800834c:	f080 814c 	bcs.w	80085e8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	43db      	mvns	r3, r3
 8008356:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008358:	e146      	b.n	80085e8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	8992      	ldrh	r2, [r2, #12]
 8008362:	fbb3 f1f2 	udiv	r1, r3, r2
 8008366:	fb02 f201 	mul.w	r2, r2, r1
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 80f1 	bne.w	8008554 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	8992      	ldrh	r2, [r2, #12]
 800837a:	fbb3 f3f2 	udiv	r3, r3, r2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	8952      	ldrh	r2, [r2, #10]
 8008382:	3a01      	subs	r2, #1
 8008384:	4013      	ands	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d143      	bne.n	8008416 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10c      	bne.n	80083b0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d11a      	bne.n	80083d8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2100      	movs	r1, #0
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fe fa0f 	bl	80067ca <create_chain>
 80083ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80083ae:	e013      	b.n	80083d8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4619      	mov	r1, r3
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7fe fa9b 	bl	80068fa <clmt_clust>
 80083c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80083c6:	e007      	b.n	80083d8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	4619      	mov	r1, r3
 80083d0:	4610      	mov	r0, r2
 80083d2:	f7fe f9fa 	bl	80067ca <create_chain>
 80083d6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 8109 	beq.w	80085f2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80083e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d104      	bne.n	80083f0 <f_write+0x10c>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2202      	movs	r2, #2
 80083ea:	755a      	strb	r2, [r3, #21]
 80083ec:	2302      	movs	r3, #2
 80083ee:	e109      	b.n	8008604 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d104      	bne.n	8008402 <f_write+0x11e>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	755a      	strb	r2, [r3, #21]
 80083fe:	2301      	movs	r3, #1
 8008400:	e100      	b.n	8008604 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008406:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d102      	bne.n	8008416 <f_write+0x132>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008414:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	7d1b      	ldrb	r3, [r3, #20]
 800841a:	b25b      	sxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	da18      	bge.n	8008452 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	7858      	ldrb	r0, [r3, #1]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1a      	ldr	r2, [r3, #32]
 800842e:	2301      	movs	r3, #1
 8008430:	f7fd fbda 	bl	8005be8 <disk_write>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <f_write+0x160>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	755a      	strb	r2, [r3, #21]
 8008440:	2301      	movs	r3, #1
 8008442:	e0df      	b.n	8008604 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	7d1b      	ldrb	r3, [r3, #20]
 8008448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844c:	b2da      	uxtb	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fd ff42 	bl	80062e4 <clust2sect>
 8008460:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <f_write+0x18e>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2202      	movs	r2, #2
 800846c:	755a      	strb	r2, [r3, #21]
 800846e:	2302      	movs	r3, #2
 8008470:	e0c8      	b.n	8008604 <f_write+0x320>
			sect += csect;
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	4413      	add	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	899b      	ldrh	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	fbb3 f3f2 	udiv	r3, r3, r2
 8008486:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d043      	beq.n	8008516 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	4413      	add	r3, r2
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	8952      	ldrh	r2, [r2, #10]
 8008498:	4293      	cmp	r3, r2
 800849a:	d905      	bls.n	80084a8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	895b      	ldrh	r3, [r3, #10]
 80084a0:	461a      	mov	r2, r3
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	7858      	ldrb	r0, [r3, #1]
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	69f9      	ldr	r1, [r7, #28]
 80084b2:	f7fd fb99 	bl	8005be8 <disk_write>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <f_write+0x1e2>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	755a      	strb	r2, [r3, #21]
 80084c2:	2301      	movs	r3, #1
 80084c4:	e09e      	b.n	8008604 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1a      	ldr	r2, [r3, #32]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	6a3a      	ldr	r2, [r7, #32]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d918      	bls.n	8008506 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1a      	ldr	r2, [r3, #32]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	8992      	ldrh	r2, [r2, #12]
 80084e6:	fb02 f303 	mul.w	r3, r2, r3
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	18d1      	adds	r1, r2, r3
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	899b      	ldrh	r3, [r3, #12]
 80084f2:	461a      	mov	r2, r3
 80084f4:	f7fd fc34 	bl	8005d60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	7d1b      	ldrb	r3, [r3, #20]
 80084fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008500:	b2da      	uxtb	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	899b      	ldrh	r3, [r3, #12]
 800850a:	461a      	mov	r2, r3
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008514:	e04b      	b.n	80085ae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	429a      	cmp	r2, r3
 800851e:	d016      	beq.n	800854e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008528:	429a      	cmp	r2, r3
 800852a:	d210      	bcs.n	800854e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	7858      	ldrb	r0, [r3, #1]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008536:	2301      	movs	r3, #1
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	f7fd fb35 	bl	8005ba8 <disk_read>
 800853e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008540:	2b00      	cmp	r3, #0
 8008542:	d004      	beq.n	800854e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	755a      	strb	r2, [r3, #21]
 800854a:	2301      	movs	r3, #1
 800854c:	e05a      	b.n	8008604 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	899b      	ldrh	r3, [r3, #12]
 8008558:	4618      	mov	r0, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	8992      	ldrh	r2, [r2, #12]
 8008562:	fbb3 f1f2 	udiv	r1, r3, r2
 8008566:	fb02 f201 	mul.w	r2, r2, r1
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	1ac3      	subs	r3, r0, r3
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	429a      	cmp	r2, r3
 8008576:	d901      	bls.n	800857c <f_write+0x298>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	8992      	ldrh	r2, [r2, #12]
 800858a:	fbb3 f0f2 	udiv	r0, r3, r2
 800858e:	fb02 f200 	mul.w	r2, r2, r0
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	440b      	add	r3, r1
 8008596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008598:	69f9      	ldr	r1, [r7, #28]
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fbe0 	bl	8005d60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	4413      	add	r3, r2
 80085b4:	61fb      	str	r3, [r7, #28]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	441a      	add	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	619a      	str	r2, [r3, #24]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	bf38      	it	cc
 80085ce:	461a      	movcc	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	60da      	str	r2, [r3, #12]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	441a      	add	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f47f aeb5 	bne.w	800835a <f_write+0x76>
 80085f0:	e000      	b.n	80085f4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80085f2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7d1b      	ldrb	r3, [r3, #20]
 80085f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3730      	adds	r7, #48	; 0x30
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f107 0208 	add.w	r2, r7, #8
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fc19 	bl	8007e54 <validate>
 8008622:	4603      	mov	r3, r0
 8008624:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d168      	bne.n	80086fe <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	7d1b      	ldrb	r3, [r3, #20]
 8008630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008634:	2b00      	cmp	r3, #0
 8008636:	d062      	beq.n	80086fe <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	7d1b      	ldrb	r3, [r3, #20]
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da15      	bge.n	800866e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	7858      	ldrb	r0, [r3, #1]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1a      	ldr	r2, [r3, #32]
 8008650:	2301      	movs	r3, #1
 8008652:	f7fd fac9 	bl	8005be8 <disk_write>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <f_sync+0x54>
 800865c:	2301      	movs	r3, #1
 800865e:	e04f      	b.n	8008700 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	7d1b      	ldrb	r3, [r3, #20]
 8008664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008668:	b2da      	uxtb	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800866e:	f7fd f9ff 	bl	8005a70 <get_fattime>
 8008672:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fd fd93 	bl	80061a8 <move_window>
 8008682:	4603      	mov	r3, r0
 8008684:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d138      	bne.n	80086fe <f_sync+0xf2>
					dir = fp->dir_ptr;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	330b      	adds	r3, #11
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	330b      	adds	r3, #11
 800869c:	f042 0220 	orr.w	r2, r2, #32
 80086a0:	b2d2      	uxtb	r2, r2
 80086a2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	461a      	mov	r2, r3
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	f7fe fb1f 	bl	8006cf2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f103 021c 	add.w	r2, r3, #28
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fd fb22 	bl	8005d0a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3316      	adds	r3, #22
 80086ca:	6939      	ldr	r1, [r7, #16]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fd fb1c 	bl	8005d0a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3312      	adds	r3, #18
 80086d6:	2100      	movs	r1, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fafc 	bl	8005cd6 <st_word>
					fs->wflag = 1;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2201      	movs	r2, #1
 80086e2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fd fd8c 	bl	8006204 <sync_fs>
 80086ec:	4603      	mov	r3, r0
 80086ee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7d1b      	ldrb	r3, [r3, #20]
 80086f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7ff ff7b 	bl	800860c <f_sync>
 8008716:	4603      	mov	r3, r0
 8008718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d118      	bne.n	8008752 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f107 0208 	add.w	r2, r7, #8
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7ff fb93 	bl	8007e54 <validate>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10c      	bne.n	8008752 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	4618      	mov	r0, r3
 800873e:	f7fd fc91 	bl	8006064 <dec_lock>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d102      	bne.n	8008752 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b090      	sub	sp, #64	; 0x40
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f107 0208 	add.w	r2, r7, #8
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7ff fb70 	bl	8007e54 <validate>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800877a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800877e:	2b00      	cmp	r3, #0
 8008780:	d103      	bne.n	800878a <f_lseek+0x2e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7d5b      	ldrb	r3, [r3, #21]
 8008786:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800878a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <f_lseek+0x3c>
 8008792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008796:	e201      	b.n	8008b9c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	2b00      	cmp	r3, #0
 800879e:	f000 80d9 	beq.w	8008954 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d15a      	bne.n	8008860 <f_lseek+0x104>
			tbl = fp->cltbl;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	1d1a      	adds	r2, r3, #4
 80087b4:	627a      	str	r2, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	2302      	movs	r3, #2
 80087bc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d03a      	beq.n	8008840 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	2300      	movs	r3, #0
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	3302      	adds	r3, #2
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	3301      	adds	r3, #1
 80087e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fd fd9a 	bl	8006320 <get_fat>
 80087ec:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d804      	bhi.n	80087fe <f_lseek+0xa2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	755a      	strb	r2, [r3, #21]
 80087fa:	2302      	movs	r3, #2
 80087fc:	e1ce      	b.n	8008b9c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d104      	bne.n	8008810 <f_lseek+0xb4>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	755a      	strb	r2, [r3, #21]
 800880c:	2301      	movs	r3, #1
 800880e:	e1c5      	b.n	8008b9c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008816:	429a      	cmp	r2, r3
 8008818:	d0de      	beq.n	80087d8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800881a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d809      	bhi.n	8008836 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	1d1a      	adds	r2, r3, #4
 8008826:	627a      	str	r2, [r7, #36]	; 0x24
 8008828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	627a      	str	r2, [r7, #36]	; 0x24
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883c:	429a      	cmp	r2, r3
 800883e:	d3c4      	bcc.n	80087ca <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008846:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	d803      	bhi.n	8008858 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e19f      	b.n	8008b98 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008858:	2311      	movs	r3, #17
 800885a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800885e:	e19b      	b.n	8008b98 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d902      	bls.n	8008870 <f_lseek+0x114>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 818d 	beq.w	8008b98 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	3b01      	subs	r3, #1
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7fe f838 	bl	80068fa <clmt_clust>
 800888a:	4602      	mov	r2, r0
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f7fd fd23 	bl	80062e4 <clust2sect>
 800889e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d104      	bne.n	80088b0 <f_lseek+0x154>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	755a      	strb	r2, [r3, #21]
 80088ac:	2302      	movs	r3, #2
 80088ae:	e175      	b.n	8008b9c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	8992      	ldrh	r2, [r2, #12]
 80088b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	8952      	ldrh	r2, [r2, #10]
 80088c0:	3a01      	subs	r2, #1
 80088c2:	4013      	ands	r3, r2
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4413      	add	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	8992      	ldrh	r2, [r2, #12]
 80088d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d6:	fb02 f201 	mul.w	r2, r2, r1
 80088da:	1a9b      	subs	r3, r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 815b 	beq.w	8008b98 <f_lseek+0x43c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	f000 8155 	beq.w	8008b98 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	7d1b      	ldrb	r3, [r3, #20]
 80088f2:	b25b      	sxtb	r3, r3
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da18      	bge.n	800892a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	7858      	ldrb	r0, [r3, #1]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1a      	ldr	r2, [r3, #32]
 8008906:	2301      	movs	r3, #1
 8008908:	f7fd f96e 	bl	8005be8 <disk_write>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <f_lseek+0x1c0>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	755a      	strb	r2, [r3, #21]
 8008918:	2301      	movs	r3, #1
 800891a:	e13f      	b.n	8008b9c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7d1b      	ldrb	r3, [r3, #20]
 8008920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008924:	b2da      	uxtb	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	7858      	ldrb	r0, [r3, #1]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008934:	2301      	movs	r3, #1
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	f7fd f936 	bl	8005ba8 <disk_read>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <f_lseek+0x1f0>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	755a      	strb	r2, [r3, #21]
 8008948:	2301      	movs	r3, #1
 800894a:	e127      	b.n	8008b9c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	621a      	str	r2, [r3, #32]
 8008952:	e121      	b.n	8008b98 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	683a      	ldr	r2, [r7, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d908      	bls.n	8008970 <f_lseek+0x214>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	7d1b      	ldrb	r3, [r3, #20]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	637b      	str	r3, [r7, #52]	; 0x34
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800897e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80b5 	beq.w	8008af2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	895b      	ldrh	r3, [r3, #10]
 800898c:	461a      	mov	r2, r3
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	fb03 f302 	mul.w	r3, r3, r2
 8008996:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d01b      	beq.n	80089d6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	1e5a      	subs	r2, r3, #1
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	1e59      	subs	r1, r3, #1
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d30f      	bcc.n	80089d6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	1e5a      	subs	r2, r3, #1
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	425b      	negs	r3, r3
 80089be:	401a      	ands	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80089d4:	e022      	b.n	8008a1c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80089dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d119      	bne.n	8008a16 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2100      	movs	r1, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fd feef 	bl	80067ca <create_chain>
 80089ec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d104      	bne.n	80089fe <f_lseek+0x2a2>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	755a      	strb	r2, [r3, #21]
 80089fa:	2302      	movs	r3, #2
 80089fc:	e0ce      	b.n	8008b9c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d104      	bne.n	8008a10 <f_lseek+0x2b4>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	755a      	strb	r2, [r3, #21]
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e0c5      	b.n	8008b9c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a14:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a1a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d067      	beq.n	8008af2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008a22:	e03a      	b.n	8008a9a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699a      	ldr	r2, [r3, #24]
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	441a      	add	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7d1b      	ldrb	r3, [r3, #20]
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00b      	beq.n	8008a5c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fd febe 	bl	80067ca <create_chain>
 8008a4e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d108      	bne.n	8008a68 <f_lseek+0x30c>
							ofs = 0; break;
 8008a56:	2300      	movs	r3, #0
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	e022      	b.n	8008aa2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fd fc5d 	bl	8006320 <get_fat>
 8008a66:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d104      	bne.n	8008a7a <f_lseek+0x31e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	755a      	strb	r2, [r3, #21]
 8008a76:	2301      	movs	r3, #1
 8008a78:	e090      	b.n	8008b9c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d904      	bls.n	8008a8a <f_lseek+0x32e>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d304      	bcc.n	8008a94 <f_lseek+0x338>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	755a      	strb	r2, [r3, #21]
 8008a90:	2302      	movs	r3, #2
 8008a92:	e083      	b.n	8008b9c <f_lseek+0x440>
					fp->clust = clst;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a98:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d8c0      	bhi.n	8008a24 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	441a      	add	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	899b      	ldrh	r3, [r3, #12]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8008aba:	fb02 f201 	mul.w	r2, r2, r1
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d016      	beq.n	8008af2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd fc0b 	bl	80062e4 <clust2sect>
 8008ace:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <f_lseek+0x384>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	755a      	strb	r2, [r3, #21]
 8008adc:	2302      	movs	r3, #2
 8008ade:	e05d      	b.n	8008b9c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	899b      	ldrh	r3, [r3, #12]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008aee:	4413      	add	r3, r2
 8008af0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d90a      	bls.n	8008b14 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7d1b      	ldrb	r3, [r3, #20]
 8008b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	8992      	ldrh	r2, [r2, #12]
 8008b1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b20:	fb02 f201 	mul.w	r2, r2, r1
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d036      	beq.n	8008b98 <f_lseek+0x43c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d031      	beq.n	8008b98 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	7d1b      	ldrb	r3, [r3, #20]
 8008b38:	b25b      	sxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	da18      	bge.n	8008b70 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	7858      	ldrb	r0, [r3, #1]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1a      	ldr	r2, [r3, #32]
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f7fd f84b 	bl	8005be8 <disk_write>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <f_lseek+0x406>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	755a      	strb	r2, [r3, #21]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e01c      	b.n	8008b9c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7d1b      	ldrb	r3, [r3, #20]
 8008b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	7858      	ldrb	r0, [r3, #1]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7e:	f7fd f813 	bl	8005ba8 <disk_read>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <f_lseek+0x436>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	755a      	strb	r2, [r3, #21]
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e004      	b.n	8008b9c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b96:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3740      	adds	r7, #64	; 0x40
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	2b0a      	cmp	r3, #10
 8008bb4:	d103      	bne.n	8008bbe <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008bb6:	210d      	movs	r1, #13
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fff3 	bl	8008ba4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	db25      	blt.n	8008c16 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	60fa      	str	r2, [r7, #12]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	78fa      	ldrb	r2, [r7, #3]
 8008bd6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b3c      	cmp	r3, #60	; 0x3c
 8008bdc:	dd12      	ble.n	8008c04 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f103 010c 	add.w	r1, r3, #12
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f107 0308 	add.w	r3, r7, #8
 8008bee:	f7ff fb79 	bl	80082e4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d101      	bne.n	8008bfe <putc_bfd+0x5a>
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	e001      	b.n	8008c02 <putc_bfd+0x5e>
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	609a      	str	r2, [r3, #8]
 8008c14:	e000      	b.n	8008c18 <putc_bfd+0x74>
	if (i < 0) return;
 8008c16:	bf00      	nop
}
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	db16      	blt.n	8008c5c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f103 010c 	add.w	r1, r3, #12
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	f7ff fb4f 	bl	80082e4 <f_write>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d107      	bne.n	8008c5c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d102      	bne.n	8008c5c <putc_flush+0x3e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	e001      	b.n	8008c60 <putc_flush+0x42>
	return EOF;
 8008c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	605a      	str	r2, [r3, #4]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	609a      	str	r2, [r3, #8]
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b096      	sub	sp, #88	; 0x58
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008c9a:	f107 030c 	add.w	r3, r7, #12
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff ffe1 	bl	8008c68 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008ca6:	e009      	b.n	8008cbc <f_puts+0x2c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	f107 030c 	add.w	r3, r7, #12
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff ff74 	bl	8008ba4 <putc_bfd>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1f1      	bne.n	8008ca8 <f_puts+0x18>
	return putc_flush(&pb);
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff ffa8 	bl	8008c1e <putc_flush>
 8008cce:	4603      	mov	r3, r0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3758      	adds	r7, #88	; 0x58
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cee:	4b1e      	ldr	r3, [pc, #120]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008cf0:	7a5b      	ldrb	r3, [r3, #9]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d131      	bne.n	8008d5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cf8:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008cfa:	7a5b      	ldrb	r3, [r3, #9]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4b19      	ldr	r3, [pc, #100]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d02:	2100      	movs	r1, #0
 8008d04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d06:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d08:	7a5b      	ldrb	r3, [r3, #9]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d18:	7a5b      	ldrb	r3, [r3, #9]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	4b12      	ldr	r3, [pc, #72]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d20:	4413      	add	r3, r2
 8008d22:	79fa      	ldrb	r2, [r7, #7]
 8008d24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d26:	4b10      	ldr	r3, [pc, #64]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d28:	7a5b      	ldrb	r3, [r3, #9]
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	b2d1      	uxtb	r1, r2
 8008d30:	4a0d      	ldr	r2, [pc, #52]	; (8008d68 <FATFS_LinkDriverEx+0x90>)
 8008d32:	7251      	strb	r1, [r2, #9]
 8008d34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d36:	7dbb      	ldrb	r3, [r7, #22]
 8008d38:	3330      	adds	r3, #48	; 0x30
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3301      	adds	r3, #1
 8008d44:	223a      	movs	r2, #58	; 0x3a
 8008d46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	3302      	adds	r3, #2
 8008d4c:	222f      	movs	r2, #47	; 0x2f
 8008d4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3303      	adds	r3, #3
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr
 8008d68:	2000031c 	.word	0x2000031c

08008d6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d76:	2200      	movs	r2, #0
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ffac 	bl	8008cd8 <FATFS_LinkDriverEx>
 8008d80:	4603      	mov	r3, r0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	6039      	str	r1, [r7, #0]
 8008d96:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008d98:	88fb      	ldrh	r3, [r7, #6]
 8008d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008d9c:	d802      	bhi.n	8008da4 <ff_convert+0x18>
		c = chr;
 8008d9e:	88fb      	ldrh	r3, [r7, #6]
 8008da0:	81fb      	strh	r3, [r7, #14]
 8008da2:	e025      	b.n	8008df0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008daa:	88fb      	ldrh	r3, [r7, #6]
 8008dac:	2bff      	cmp	r3, #255	; 0xff
 8008dae:	d805      	bhi.n	8008dbc <ff_convert+0x30>
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	3b80      	subs	r3, #128	; 0x80
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <ff_convert+0x70>)
 8008db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dba:	e000      	b.n	8008dbe <ff_convert+0x32>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	81fb      	strh	r3, [r7, #14]
 8008dc0:	e016      	b.n	8008df0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	81fb      	strh	r3, [r7, #14]
 8008dc6:	e009      	b.n	8008ddc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008dc8:	89fb      	ldrh	r3, [r7, #14]
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <ff_convert+0x70>)
 8008dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dd0:	88fa      	ldrh	r2, [r7, #6]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d006      	beq.n	8008de4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008dd6:	89fb      	ldrh	r3, [r7, #14]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	81fb      	strh	r3, [r7, #14]
 8008ddc:	89fb      	ldrh	r3, [r7, #14]
 8008dde:	2b7f      	cmp	r3, #127	; 0x7f
 8008de0:	d9f2      	bls.n	8008dc8 <ff_convert+0x3c>
 8008de2:	e000      	b.n	8008de6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008de4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008de6:	89fb      	ldrh	r3, [r7, #14]
 8008de8:	3380      	adds	r3, #128	; 0x80
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008df0:	89fb      	ldrh	r3, [r7, #14]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr
 8008dfc:	08009fb4 	.word	0x08009fb4

08008e00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e10:	d201      	bcs.n	8008e16 <ff_wtoupper+0x16>
 8008e12:	4b3d      	ldr	r3, [pc, #244]	; (8008f08 <ff_wtoupper+0x108>)
 8008e14:	e000      	b.n	8008e18 <ff_wtoupper+0x18>
 8008e16:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <ff_wtoupper+0x10c>)
 8008e18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	1c9a      	adds	r2, r3, #2
 8008e1e:	617a      	str	r2, [r7, #20]
 8008e20:	881b      	ldrh	r3, [r3, #0]
 8008e22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008e24:	8a7b      	ldrh	r3, [r7, #18]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d068      	beq.n	8008efc <ff_wtoupper+0xfc>
 8008e2a:	88fa      	ldrh	r2, [r7, #6]
 8008e2c:	8a7b      	ldrh	r3, [r7, #18]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d364      	bcc.n	8008efc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	1c9a      	adds	r2, r3, #2
 8008e36:	617a      	str	r2, [r7, #20]
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	823b      	strh	r3, [r7, #16]
 8008e3c:	8a3b      	ldrh	r3, [r7, #16]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	81fb      	strh	r3, [r7, #14]
 8008e42:	8a3b      	ldrh	r3, [r7, #16]
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008e48:	88fa      	ldrh	r2, [r7, #6]
 8008e4a:	8a79      	ldrh	r1, [r7, #18]
 8008e4c:	8a3b      	ldrh	r3, [r7, #16]
 8008e4e:	440b      	add	r3, r1
 8008e50:	429a      	cmp	r2, r3
 8008e52:	da49      	bge.n	8008ee8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008e54:	89fb      	ldrh	r3, [r7, #14]
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d84f      	bhi.n	8008efa <ff_wtoupper+0xfa>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <ff_wtoupper+0x60>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e85 	.word	0x08008e85
 8008e64:	08008e97 	.word	0x08008e97
 8008e68:	08008ead 	.word	0x08008ead
 8008e6c:	08008eb5 	.word	0x08008eb5
 8008e70:	08008ebd 	.word	0x08008ebd
 8008e74:	08008ec5 	.word	0x08008ec5
 8008e78:	08008ecd 	.word	0x08008ecd
 8008e7c:	08008ed5 	.word	0x08008ed5
 8008e80:	08008edd 	.word	0x08008edd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008e84:	88fa      	ldrh	r2, [r7, #6]
 8008e86:	8a7b      	ldrh	r3, [r7, #18]
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	005b      	lsls	r3, r3, #1
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	4413      	add	r3, r2
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	80fb      	strh	r3, [r7, #6]
 8008e94:	e027      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	8a7b      	ldrh	r3, [r7, #18]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	88fa      	ldrh	r2, [r7, #6]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	80fb      	strh	r3, [r7, #6]
 8008eaa:	e01c      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008eac:	88fb      	ldrh	r3, [r7, #6]
 8008eae:	3b10      	subs	r3, #16
 8008eb0:	80fb      	strh	r3, [r7, #6]
 8008eb2:	e018      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	3b20      	subs	r3, #32
 8008eb8:	80fb      	strh	r3, [r7, #6]
 8008eba:	e014      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008ebc:	88fb      	ldrh	r3, [r7, #6]
 8008ebe:	3b30      	subs	r3, #48	; 0x30
 8008ec0:	80fb      	strh	r3, [r7, #6]
 8008ec2:	e010      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	3b1a      	subs	r3, #26
 8008ec8:	80fb      	strh	r3, [r7, #6]
 8008eca:	e00c      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	80fb      	strh	r3, [r7, #6]
 8008ed2:	e008      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	3b50      	subs	r3, #80	; 0x50
 8008ed8:	80fb      	strh	r3, [r7, #6]
 8008eda:	e004      	b.n	8008ee6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008edc:	88fb      	ldrh	r3, [r7, #6]
 8008ede:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008ee2:	80fb      	strh	r3, [r7, #6]
 8008ee4:	bf00      	nop
			}
			break;
 8008ee6:	e008      	b.n	8008efa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008ee8:	89fb      	ldrh	r3, [r7, #14]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d195      	bne.n	8008e1a <ff_wtoupper+0x1a>
 8008eee:	8a3b      	ldrh	r3, [r7, #16]
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008ef8:	e78f      	b.n	8008e1a <ff_wtoupper+0x1a>
			break;
 8008efa:	bf00      	nop
	}

	return chr;
 8008efc:	88fb      	ldrh	r3, [r7, #6]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bc80      	pop	{r7}
 8008f06:	4770      	bx	lr
 8008f08:	0800a0b4 	.word	0x0800a0b4
 8008f0c:	0800a2a8 	.word	0x0800a2a8

08008f10 <__errno>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <__errno+0x8>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20000024 	.word	0x20000024

08008f1c <__libc_init_array>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	2600      	movs	r6, #0
 8008f20:	4d0c      	ldr	r5, [pc, #48]	; (8008f54 <__libc_init_array+0x38>)
 8008f22:	4c0d      	ldr	r4, [pc, #52]	; (8008f58 <__libc_init_array+0x3c>)
 8008f24:	1b64      	subs	r4, r4, r5
 8008f26:	10a4      	asrs	r4, r4, #2
 8008f28:	42a6      	cmp	r6, r4
 8008f2a:	d109      	bne.n	8008f40 <__libc_init_array+0x24>
 8008f2c:	f000 ff82 	bl	8009e34 <_init>
 8008f30:	2600      	movs	r6, #0
 8008f32:	4d0a      	ldr	r5, [pc, #40]	; (8008f5c <__libc_init_array+0x40>)
 8008f34:	4c0a      	ldr	r4, [pc, #40]	; (8008f60 <__libc_init_array+0x44>)
 8008f36:	1b64      	subs	r4, r4, r5
 8008f38:	10a4      	asrs	r4, r4, #2
 8008f3a:	42a6      	cmp	r6, r4
 8008f3c:	d105      	bne.n	8008f4a <__libc_init_array+0x2e>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f44:	4798      	blx	r3
 8008f46:	3601      	adds	r6, #1
 8008f48:	e7ee      	b.n	8008f28 <__libc_init_array+0xc>
 8008f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4e:	4798      	blx	r3
 8008f50:	3601      	adds	r6, #1
 8008f52:	e7f2      	b.n	8008f3a <__libc_init_array+0x1e>
 8008f54:	0800a404 	.word	0x0800a404
 8008f58:	0800a404 	.word	0x0800a404
 8008f5c:	0800a404 	.word	0x0800a404
 8008f60:	0800a408 	.word	0x0800a408

08008f64 <memset>:
 8008f64:	4603      	mov	r3, r0
 8008f66:	4402      	add	r2, r0
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d100      	bne.n	8008f6e <memset+0xa>
 8008f6c:	4770      	bx	lr
 8008f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f72:	e7f9      	b.n	8008f68 <memset+0x4>

08008f74 <iprintf>:
 8008f74:	b40f      	push	{r0, r1, r2, r3}
 8008f76:	4b0a      	ldr	r3, [pc, #40]	; (8008fa0 <iprintf+0x2c>)
 8008f78:	b513      	push	{r0, r1, r4, lr}
 8008f7a:	681c      	ldr	r4, [r3, #0]
 8008f7c:	b124      	cbz	r4, 8008f88 <iprintf+0x14>
 8008f7e:	69a3      	ldr	r3, [r4, #24]
 8008f80:	b913      	cbnz	r3, 8008f88 <iprintf+0x14>
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f866 	bl	8009054 <__sinit>
 8008f88:	ab05      	add	r3, sp, #20
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	9a04      	ldr	r2, [sp, #16]
 8008f8e:	68a1      	ldr	r1, [r4, #8]
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	f000 f981 	bl	8009298 <_vfiprintf_r>
 8008f96:	b002      	add	sp, #8
 8008f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f9c:	b004      	add	sp, #16
 8008f9e:	4770      	bx	lr
 8008fa0:	20000024 	.word	0x20000024

08008fa4 <std>:
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	b510      	push	{r4, lr}
 8008fa8:	4604      	mov	r4, r0
 8008faa:	e9c0 3300 	strd	r3, r3, [r0]
 8008fae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb2:	6083      	str	r3, [r0, #8]
 8008fb4:	8181      	strh	r1, [r0, #12]
 8008fb6:	6643      	str	r3, [r0, #100]	; 0x64
 8008fb8:	81c2      	strh	r2, [r0, #14]
 8008fba:	6183      	str	r3, [r0, #24]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	305c      	adds	r0, #92	; 0x5c
 8008fc2:	f7ff ffcf 	bl	8008f64 <memset>
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <std+0x38>)
 8008fc8:	6224      	str	r4, [r4, #32]
 8008fca:	6263      	str	r3, [r4, #36]	; 0x24
 8008fcc:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <std+0x3c>)
 8008fce:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <std+0x40>)
 8008fd2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd4:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <std+0x44>)
 8008fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8008fd8:	bd10      	pop	{r4, pc}
 8008fda:	bf00      	nop
 8008fdc:	08009845 	.word	0x08009845
 8008fe0:	08009867 	.word	0x08009867
 8008fe4:	0800989f 	.word	0x0800989f
 8008fe8:	080098c3 	.word	0x080098c3

08008fec <_cleanup_r>:
 8008fec:	4901      	ldr	r1, [pc, #4]	; (8008ff4 <_cleanup_r+0x8>)
 8008fee:	f000 b8af 	b.w	8009150 <_fwalk_reent>
 8008ff2:	bf00      	nop
 8008ff4:	08009b9d 	.word	0x08009b9d

08008ff8 <__sfmoreglue>:
 8008ff8:	b570      	push	{r4, r5, r6, lr}
 8008ffa:	2568      	movs	r5, #104	; 0x68
 8008ffc:	1e4a      	subs	r2, r1, #1
 8008ffe:	4355      	muls	r5, r2
 8009000:	460e      	mov	r6, r1
 8009002:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009006:	f000 f8c5 	bl	8009194 <_malloc_r>
 800900a:	4604      	mov	r4, r0
 800900c:	b140      	cbz	r0, 8009020 <__sfmoreglue+0x28>
 800900e:	2100      	movs	r1, #0
 8009010:	e9c0 1600 	strd	r1, r6, [r0]
 8009014:	300c      	adds	r0, #12
 8009016:	60a0      	str	r0, [r4, #8]
 8009018:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800901c:	f7ff ffa2 	bl	8008f64 <memset>
 8009020:	4620      	mov	r0, r4
 8009022:	bd70      	pop	{r4, r5, r6, pc}

08009024 <__sfp_lock_acquire>:
 8009024:	4801      	ldr	r0, [pc, #4]	; (800902c <__sfp_lock_acquire+0x8>)
 8009026:	f000 b8b3 	b.w	8009190 <__retarget_lock_acquire_recursive>
 800902a:	bf00      	nop
 800902c:	200045d8 	.word	0x200045d8

08009030 <__sfp_lock_release>:
 8009030:	4801      	ldr	r0, [pc, #4]	; (8009038 <__sfp_lock_release+0x8>)
 8009032:	f000 b8ae 	b.w	8009192 <__retarget_lock_release_recursive>
 8009036:	bf00      	nop
 8009038:	200045d8 	.word	0x200045d8

0800903c <__sinit_lock_acquire>:
 800903c:	4801      	ldr	r0, [pc, #4]	; (8009044 <__sinit_lock_acquire+0x8>)
 800903e:	f000 b8a7 	b.w	8009190 <__retarget_lock_acquire_recursive>
 8009042:	bf00      	nop
 8009044:	200045d3 	.word	0x200045d3

08009048 <__sinit_lock_release>:
 8009048:	4801      	ldr	r0, [pc, #4]	; (8009050 <__sinit_lock_release+0x8>)
 800904a:	f000 b8a2 	b.w	8009192 <__retarget_lock_release_recursive>
 800904e:	bf00      	nop
 8009050:	200045d3 	.word	0x200045d3

08009054 <__sinit>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4604      	mov	r4, r0
 8009058:	f7ff fff0 	bl	800903c <__sinit_lock_acquire>
 800905c:	69a3      	ldr	r3, [r4, #24]
 800905e:	b11b      	cbz	r3, 8009068 <__sinit+0x14>
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009064:	f7ff bff0 	b.w	8009048 <__sinit_lock_release>
 8009068:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800906c:	6523      	str	r3, [r4, #80]	; 0x50
 800906e:	4b13      	ldr	r3, [pc, #76]	; (80090bc <__sinit+0x68>)
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <__sinit+0x6c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	62a2      	str	r2, [r4, #40]	; 0x28
 8009076:	42a3      	cmp	r3, r4
 8009078:	bf08      	it	eq
 800907a:	2301      	moveq	r3, #1
 800907c:	4620      	mov	r0, r4
 800907e:	bf08      	it	eq
 8009080:	61a3      	streq	r3, [r4, #24]
 8009082:	f000 f81f 	bl	80090c4 <__sfp>
 8009086:	6060      	str	r0, [r4, #4]
 8009088:	4620      	mov	r0, r4
 800908a:	f000 f81b 	bl	80090c4 <__sfp>
 800908e:	60a0      	str	r0, [r4, #8]
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f817 	bl	80090c4 <__sfp>
 8009096:	2200      	movs	r2, #0
 8009098:	2104      	movs	r1, #4
 800909a:	60e0      	str	r0, [r4, #12]
 800909c:	6860      	ldr	r0, [r4, #4]
 800909e:	f7ff ff81 	bl	8008fa4 <std>
 80090a2:	2201      	movs	r2, #1
 80090a4:	2109      	movs	r1, #9
 80090a6:	68a0      	ldr	r0, [r4, #8]
 80090a8:	f7ff ff7c 	bl	8008fa4 <std>
 80090ac:	2202      	movs	r2, #2
 80090ae:	2112      	movs	r1, #18
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	f7ff ff77 	bl	8008fa4 <std>
 80090b6:	2301      	movs	r3, #1
 80090b8:	61a3      	str	r3, [r4, #24]
 80090ba:	e7d1      	b.n	8009060 <__sinit+0xc>
 80090bc:	0800a364 	.word	0x0800a364
 80090c0:	08008fed 	.word	0x08008fed

080090c4 <__sfp>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	4607      	mov	r7, r0
 80090c8:	f7ff ffac 	bl	8009024 <__sfp_lock_acquire>
 80090cc:	4b1e      	ldr	r3, [pc, #120]	; (8009148 <__sfp+0x84>)
 80090ce:	681e      	ldr	r6, [r3, #0]
 80090d0:	69b3      	ldr	r3, [r6, #24]
 80090d2:	b913      	cbnz	r3, 80090da <__sfp+0x16>
 80090d4:	4630      	mov	r0, r6
 80090d6:	f7ff ffbd 	bl	8009054 <__sinit>
 80090da:	3648      	adds	r6, #72	; 0x48
 80090dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	d503      	bpl.n	80090ec <__sfp+0x28>
 80090e4:	6833      	ldr	r3, [r6, #0]
 80090e6:	b30b      	cbz	r3, 800912c <__sfp+0x68>
 80090e8:	6836      	ldr	r6, [r6, #0]
 80090ea:	e7f7      	b.n	80090dc <__sfp+0x18>
 80090ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090f0:	b9d5      	cbnz	r5, 8009128 <__sfp+0x64>
 80090f2:	4b16      	ldr	r3, [pc, #88]	; (800914c <__sfp+0x88>)
 80090f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090f8:	60e3      	str	r3, [r4, #12]
 80090fa:	6665      	str	r5, [r4, #100]	; 0x64
 80090fc:	f000 f847 	bl	800918e <__retarget_lock_init_recursive>
 8009100:	f7ff ff96 	bl	8009030 <__sfp_lock_release>
 8009104:	2208      	movs	r2, #8
 8009106:	4629      	mov	r1, r5
 8009108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800910c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	61a5      	str	r5, [r4, #24]
 8009114:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009118:	f7ff ff24 	bl	8008f64 <memset>
 800911c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009120:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009124:	4620      	mov	r0, r4
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	3468      	adds	r4, #104	; 0x68
 800912a:	e7d9      	b.n	80090e0 <__sfp+0x1c>
 800912c:	2104      	movs	r1, #4
 800912e:	4638      	mov	r0, r7
 8009130:	f7ff ff62 	bl	8008ff8 <__sfmoreglue>
 8009134:	4604      	mov	r4, r0
 8009136:	6030      	str	r0, [r6, #0]
 8009138:	2800      	cmp	r0, #0
 800913a:	d1d5      	bne.n	80090e8 <__sfp+0x24>
 800913c:	f7ff ff78 	bl	8009030 <__sfp_lock_release>
 8009140:	230c      	movs	r3, #12
 8009142:	603b      	str	r3, [r7, #0]
 8009144:	e7ee      	b.n	8009124 <__sfp+0x60>
 8009146:	bf00      	nop
 8009148:	0800a364 	.word	0x0800a364
 800914c:	ffff0001 	.word	0xffff0001

08009150 <_fwalk_reent>:
 8009150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009154:	4606      	mov	r6, r0
 8009156:	4688      	mov	r8, r1
 8009158:	2700      	movs	r7, #0
 800915a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800915e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009162:	f1b9 0901 	subs.w	r9, r9, #1
 8009166:	d505      	bpl.n	8009174 <_fwalk_reent+0x24>
 8009168:	6824      	ldr	r4, [r4, #0]
 800916a:	2c00      	cmp	r4, #0
 800916c:	d1f7      	bne.n	800915e <_fwalk_reent+0xe>
 800916e:	4638      	mov	r0, r7
 8009170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d907      	bls.n	800918a <_fwalk_reent+0x3a>
 800917a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800917e:	3301      	adds	r3, #1
 8009180:	d003      	beq.n	800918a <_fwalk_reent+0x3a>
 8009182:	4629      	mov	r1, r5
 8009184:	4630      	mov	r0, r6
 8009186:	47c0      	blx	r8
 8009188:	4307      	orrs	r7, r0
 800918a:	3568      	adds	r5, #104	; 0x68
 800918c:	e7e9      	b.n	8009162 <_fwalk_reent+0x12>

0800918e <__retarget_lock_init_recursive>:
 800918e:	4770      	bx	lr

08009190 <__retarget_lock_acquire_recursive>:
 8009190:	4770      	bx	lr

08009192 <__retarget_lock_release_recursive>:
 8009192:	4770      	bx	lr

08009194 <_malloc_r>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	1ccd      	adds	r5, r1, #3
 8009198:	f025 0503 	bic.w	r5, r5, #3
 800919c:	3508      	adds	r5, #8
 800919e:	2d0c      	cmp	r5, #12
 80091a0:	bf38      	it	cc
 80091a2:	250c      	movcc	r5, #12
 80091a4:	2d00      	cmp	r5, #0
 80091a6:	4606      	mov	r6, r0
 80091a8:	db01      	blt.n	80091ae <_malloc_r+0x1a>
 80091aa:	42a9      	cmp	r1, r5
 80091ac:	d903      	bls.n	80091b6 <_malloc_r+0x22>
 80091ae:	230c      	movs	r3, #12
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	2000      	movs	r0, #0
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b6:	f000 fdb1 	bl	8009d1c <__malloc_lock>
 80091ba:	4921      	ldr	r1, [pc, #132]	; (8009240 <_malloc_r+0xac>)
 80091bc:	680a      	ldr	r2, [r1, #0]
 80091be:	4614      	mov	r4, r2
 80091c0:	b99c      	cbnz	r4, 80091ea <_malloc_r+0x56>
 80091c2:	4f20      	ldr	r7, [pc, #128]	; (8009244 <_malloc_r+0xb0>)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	b923      	cbnz	r3, 80091d2 <_malloc_r+0x3e>
 80091c8:	4621      	mov	r1, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	f000 fb2a 	bl	8009824 <_sbrk_r>
 80091d0:	6038      	str	r0, [r7, #0]
 80091d2:	4629      	mov	r1, r5
 80091d4:	4630      	mov	r0, r6
 80091d6:	f000 fb25 	bl	8009824 <_sbrk_r>
 80091da:	1c43      	adds	r3, r0, #1
 80091dc:	d123      	bne.n	8009226 <_malloc_r+0x92>
 80091de:	230c      	movs	r3, #12
 80091e0:	4630      	mov	r0, r6
 80091e2:	6033      	str	r3, [r6, #0]
 80091e4:	f000 fda0 	bl	8009d28 <__malloc_unlock>
 80091e8:	e7e3      	b.n	80091b2 <_malloc_r+0x1e>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	1b5b      	subs	r3, r3, r5
 80091ee:	d417      	bmi.n	8009220 <_malloc_r+0x8c>
 80091f0:	2b0b      	cmp	r3, #11
 80091f2:	d903      	bls.n	80091fc <_malloc_r+0x68>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	441c      	add	r4, r3
 80091f8:	6025      	str	r5, [r4, #0]
 80091fa:	e004      	b.n	8009206 <_malloc_r+0x72>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	42a2      	cmp	r2, r4
 8009200:	bf0c      	ite	eq
 8009202:	600b      	streq	r3, [r1, #0]
 8009204:	6053      	strne	r3, [r2, #4]
 8009206:	4630      	mov	r0, r6
 8009208:	f000 fd8e 	bl	8009d28 <__malloc_unlock>
 800920c:	f104 000b 	add.w	r0, r4, #11
 8009210:	1d23      	adds	r3, r4, #4
 8009212:	f020 0007 	bic.w	r0, r0, #7
 8009216:	1ac2      	subs	r2, r0, r3
 8009218:	d0cc      	beq.n	80091b4 <_malloc_r+0x20>
 800921a:	1a1b      	subs	r3, r3, r0
 800921c:	50a3      	str	r3, [r4, r2]
 800921e:	e7c9      	b.n	80091b4 <_malloc_r+0x20>
 8009220:	4622      	mov	r2, r4
 8009222:	6864      	ldr	r4, [r4, #4]
 8009224:	e7cc      	b.n	80091c0 <_malloc_r+0x2c>
 8009226:	1cc4      	adds	r4, r0, #3
 8009228:	f024 0403 	bic.w	r4, r4, #3
 800922c:	42a0      	cmp	r0, r4
 800922e:	d0e3      	beq.n	80091f8 <_malloc_r+0x64>
 8009230:	1a21      	subs	r1, r4, r0
 8009232:	4630      	mov	r0, r6
 8009234:	f000 faf6 	bl	8009824 <_sbrk_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d1dd      	bne.n	80091f8 <_malloc_r+0x64>
 800923c:	e7cf      	b.n	80091de <_malloc_r+0x4a>
 800923e:	bf00      	nop
 8009240:	20000328 	.word	0x20000328
 8009244:	2000032c 	.word	0x2000032c

08009248 <__sfputc_r>:
 8009248:	6893      	ldr	r3, [r2, #8]
 800924a:	b410      	push	{r4}
 800924c:	3b01      	subs	r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	6093      	str	r3, [r2, #8]
 8009252:	da07      	bge.n	8009264 <__sfputc_r+0x1c>
 8009254:	6994      	ldr	r4, [r2, #24]
 8009256:	42a3      	cmp	r3, r4
 8009258:	db01      	blt.n	800925e <__sfputc_r+0x16>
 800925a:	290a      	cmp	r1, #10
 800925c:	d102      	bne.n	8009264 <__sfputc_r+0x1c>
 800925e:	bc10      	pop	{r4}
 8009260:	f000 bb34 	b.w	80098cc <__swbuf_r>
 8009264:	6813      	ldr	r3, [r2, #0]
 8009266:	1c58      	adds	r0, r3, #1
 8009268:	6010      	str	r0, [r2, #0]
 800926a:	7019      	strb	r1, [r3, #0]
 800926c:	4608      	mov	r0, r1
 800926e:	bc10      	pop	{r4}
 8009270:	4770      	bx	lr

08009272 <__sfputs_r>:
 8009272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	460f      	mov	r7, r1
 8009278:	4614      	mov	r4, r2
 800927a:	18d5      	adds	r5, r2, r3
 800927c:	42ac      	cmp	r4, r5
 800927e:	d101      	bne.n	8009284 <__sfputs_r+0x12>
 8009280:	2000      	movs	r0, #0
 8009282:	e007      	b.n	8009294 <__sfputs_r+0x22>
 8009284:	463a      	mov	r2, r7
 8009286:	4630      	mov	r0, r6
 8009288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928c:	f7ff ffdc 	bl	8009248 <__sfputc_r>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d1f3      	bne.n	800927c <__sfputs_r+0xa>
 8009294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009298 <_vfiprintf_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	460d      	mov	r5, r1
 800929e:	4614      	mov	r4, r2
 80092a0:	4698      	mov	r8, r3
 80092a2:	4606      	mov	r6, r0
 80092a4:	b09d      	sub	sp, #116	; 0x74
 80092a6:	b118      	cbz	r0, 80092b0 <_vfiprintf_r+0x18>
 80092a8:	6983      	ldr	r3, [r0, #24]
 80092aa:	b90b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x18>
 80092ac:	f7ff fed2 	bl	8009054 <__sinit>
 80092b0:	4b89      	ldr	r3, [pc, #548]	; (80094d8 <_vfiprintf_r+0x240>)
 80092b2:	429d      	cmp	r5, r3
 80092b4:	d11b      	bne.n	80092ee <_vfiprintf_r+0x56>
 80092b6:	6875      	ldr	r5, [r6, #4]
 80092b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ba:	07d9      	lsls	r1, r3, #31
 80092bc:	d405      	bmi.n	80092ca <_vfiprintf_r+0x32>
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	059a      	lsls	r2, r3, #22
 80092c2:	d402      	bmi.n	80092ca <_vfiprintf_r+0x32>
 80092c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c6:	f7ff ff63 	bl	8009190 <__retarget_lock_acquire_recursive>
 80092ca:	89ab      	ldrh	r3, [r5, #12]
 80092cc:	071b      	lsls	r3, r3, #28
 80092ce:	d501      	bpl.n	80092d4 <_vfiprintf_r+0x3c>
 80092d0:	692b      	ldr	r3, [r5, #16]
 80092d2:	b9eb      	cbnz	r3, 8009310 <_vfiprintf_r+0x78>
 80092d4:	4629      	mov	r1, r5
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 fb5c 	bl	8009994 <__swsetup_r>
 80092dc:	b1c0      	cbz	r0, 8009310 <_vfiprintf_r+0x78>
 80092de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e0:	07dc      	lsls	r4, r3, #31
 80092e2:	d50e      	bpl.n	8009302 <_vfiprintf_r+0x6a>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	b01d      	add	sp, #116	; 0x74
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	4b7b      	ldr	r3, [pc, #492]	; (80094dc <_vfiprintf_r+0x244>)
 80092f0:	429d      	cmp	r5, r3
 80092f2:	d101      	bne.n	80092f8 <_vfiprintf_r+0x60>
 80092f4:	68b5      	ldr	r5, [r6, #8]
 80092f6:	e7df      	b.n	80092b8 <_vfiprintf_r+0x20>
 80092f8:	4b79      	ldr	r3, [pc, #484]	; (80094e0 <_vfiprintf_r+0x248>)
 80092fa:	429d      	cmp	r5, r3
 80092fc:	bf08      	it	eq
 80092fe:	68f5      	ldreq	r5, [r6, #12]
 8009300:	e7da      	b.n	80092b8 <_vfiprintf_r+0x20>
 8009302:	89ab      	ldrh	r3, [r5, #12]
 8009304:	0598      	lsls	r0, r3, #22
 8009306:	d4ed      	bmi.n	80092e4 <_vfiprintf_r+0x4c>
 8009308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800930a:	f7ff ff42 	bl	8009192 <__retarget_lock_release_recursive>
 800930e:	e7e9      	b.n	80092e4 <_vfiprintf_r+0x4c>
 8009310:	2300      	movs	r3, #0
 8009312:	9309      	str	r3, [sp, #36]	; 0x24
 8009314:	2320      	movs	r3, #32
 8009316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800931a:	2330      	movs	r3, #48	; 0x30
 800931c:	f04f 0901 	mov.w	r9, #1
 8009320:	f8cd 800c 	str.w	r8, [sp, #12]
 8009324:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80094e4 <_vfiprintf_r+0x24c>
 8009328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800932c:	4623      	mov	r3, r4
 800932e:	469a      	mov	sl, r3
 8009330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009334:	b10a      	cbz	r2, 800933a <_vfiprintf_r+0xa2>
 8009336:	2a25      	cmp	r2, #37	; 0x25
 8009338:	d1f9      	bne.n	800932e <_vfiprintf_r+0x96>
 800933a:	ebba 0b04 	subs.w	fp, sl, r4
 800933e:	d00b      	beq.n	8009358 <_vfiprintf_r+0xc0>
 8009340:	465b      	mov	r3, fp
 8009342:	4622      	mov	r2, r4
 8009344:	4629      	mov	r1, r5
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff ff93 	bl	8009272 <__sfputs_r>
 800934c:	3001      	adds	r0, #1
 800934e:	f000 80aa 	beq.w	80094a6 <_vfiprintf_r+0x20e>
 8009352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009354:	445a      	add	r2, fp
 8009356:	9209      	str	r2, [sp, #36]	; 0x24
 8009358:	f89a 3000 	ldrb.w	r3, [sl]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80a2 	beq.w	80094a6 <_vfiprintf_r+0x20e>
 8009362:	2300      	movs	r3, #0
 8009364:	f04f 32ff 	mov.w	r2, #4294967295
 8009368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800936c:	f10a 0a01 	add.w	sl, sl, #1
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	9307      	str	r3, [sp, #28]
 8009374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009378:	931a      	str	r3, [sp, #104]	; 0x68
 800937a:	4654      	mov	r4, sl
 800937c:	2205      	movs	r2, #5
 800937e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009382:	4858      	ldr	r0, [pc, #352]	; (80094e4 <_vfiprintf_r+0x24c>)
 8009384:	f000 fcbc 	bl	8009d00 <memchr>
 8009388:	9a04      	ldr	r2, [sp, #16]
 800938a:	b9d8      	cbnz	r0, 80093c4 <_vfiprintf_r+0x12c>
 800938c:	06d1      	lsls	r1, r2, #27
 800938e:	bf44      	itt	mi
 8009390:	2320      	movmi	r3, #32
 8009392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009396:	0713      	lsls	r3, r2, #28
 8009398:	bf44      	itt	mi
 800939a:	232b      	movmi	r3, #43	; 0x2b
 800939c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a0:	f89a 3000 	ldrb.w	r3, [sl]
 80093a4:	2b2a      	cmp	r3, #42	; 0x2a
 80093a6:	d015      	beq.n	80093d4 <_vfiprintf_r+0x13c>
 80093a8:	4654      	mov	r4, sl
 80093aa:	2000      	movs	r0, #0
 80093ac:	f04f 0c0a 	mov.w	ip, #10
 80093b0:	9a07      	ldr	r2, [sp, #28]
 80093b2:	4621      	mov	r1, r4
 80093b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093b8:	3b30      	subs	r3, #48	; 0x30
 80093ba:	2b09      	cmp	r3, #9
 80093bc:	d94e      	bls.n	800945c <_vfiprintf_r+0x1c4>
 80093be:	b1b0      	cbz	r0, 80093ee <_vfiprintf_r+0x156>
 80093c0:	9207      	str	r2, [sp, #28]
 80093c2:	e014      	b.n	80093ee <_vfiprintf_r+0x156>
 80093c4:	eba0 0308 	sub.w	r3, r0, r8
 80093c8:	fa09 f303 	lsl.w	r3, r9, r3
 80093cc:	4313      	orrs	r3, r2
 80093ce:	46a2      	mov	sl, r4
 80093d0:	9304      	str	r3, [sp, #16]
 80093d2:	e7d2      	b.n	800937a <_vfiprintf_r+0xe2>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	1d19      	adds	r1, r3, #4
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	9103      	str	r1, [sp, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bfbb      	ittet	lt
 80093e0:	425b      	neglt	r3, r3
 80093e2:	f042 0202 	orrlt.w	r2, r2, #2
 80093e6:	9307      	strge	r3, [sp, #28]
 80093e8:	9307      	strlt	r3, [sp, #28]
 80093ea:	bfb8      	it	lt
 80093ec:	9204      	strlt	r2, [sp, #16]
 80093ee:	7823      	ldrb	r3, [r4, #0]
 80093f0:	2b2e      	cmp	r3, #46	; 0x2e
 80093f2:	d10c      	bne.n	800940e <_vfiprintf_r+0x176>
 80093f4:	7863      	ldrb	r3, [r4, #1]
 80093f6:	2b2a      	cmp	r3, #42	; 0x2a
 80093f8:	d135      	bne.n	8009466 <_vfiprintf_r+0x1ce>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	3402      	adds	r4, #2
 80093fe:	1d1a      	adds	r2, r3, #4
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	9203      	str	r2, [sp, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfb8      	it	lt
 8009408:	f04f 33ff 	movlt.w	r3, #4294967295
 800940c:	9305      	str	r3, [sp, #20]
 800940e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094f4 <_vfiprintf_r+0x25c>
 8009412:	2203      	movs	r2, #3
 8009414:	4650      	mov	r0, sl
 8009416:	7821      	ldrb	r1, [r4, #0]
 8009418:	f000 fc72 	bl	8009d00 <memchr>
 800941c:	b140      	cbz	r0, 8009430 <_vfiprintf_r+0x198>
 800941e:	2340      	movs	r3, #64	; 0x40
 8009420:	eba0 000a 	sub.w	r0, r0, sl
 8009424:	fa03 f000 	lsl.w	r0, r3, r0
 8009428:	9b04      	ldr	r3, [sp, #16]
 800942a:	3401      	adds	r4, #1
 800942c:	4303      	orrs	r3, r0
 800942e:	9304      	str	r3, [sp, #16]
 8009430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009434:	2206      	movs	r2, #6
 8009436:	482c      	ldr	r0, [pc, #176]	; (80094e8 <_vfiprintf_r+0x250>)
 8009438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800943c:	f000 fc60 	bl	8009d00 <memchr>
 8009440:	2800      	cmp	r0, #0
 8009442:	d03f      	beq.n	80094c4 <_vfiprintf_r+0x22c>
 8009444:	4b29      	ldr	r3, [pc, #164]	; (80094ec <_vfiprintf_r+0x254>)
 8009446:	bb1b      	cbnz	r3, 8009490 <_vfiprintf_r+0x1f8>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	3307      	adds	r3, #7
 800944c:	f023 0307 	bic.w	r3, r3, #7
 8009450:	3308      	adds	r3, #8
 8009452:	9303      	str	r3, [sp, #12]
 8009454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009456:	443b      	add	r3, r7
 8009458:	9309      	str	r3, [sp, #36]	; 0x24
 800945a:	e767      	b.n	800932c <_vfiprintf_r+0x94>
 800945c:	460c      	mov	r4, r1
 800945e:	2001      	movs	r0, #1
 8009460:	fb0c 3202 	mla	r2, ip, r2, r3
 8009464:	e7a5      	b.n	80093b2 <_vfiprintf_r+0x11a>
 8009466:	2300      	movs	r3, #0
 8009468:	f04f 0c0a 	mov.w	ip, #10
 800946c:	4619      	mov	r1, r3
 800946e:	3401      	adds	r4, #1
 8009470:	9305      	str	r3, [sp, #20]
 8009472:	4620      	mov	r0, r4
 8009474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009478:	3a30      	subs	r2, #48	; 0x30
 800947a:	2a09      	cmp	r2, #9
 800947c:	d903      	bls.n	8009486 <_vfiprintf_r+0x1ee>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d0c5      	beq.n	800940e <_vfiprintf_r+0x176>
 8009482:	9105      	str	r1, [sp, #20]
 8009484:	e7c3      	b.n	800940e <_vfiprintf_r+0x176>
 8009486:	4604      	mov	r4, r0
 8009488:	2301      	movs	r3, #1
 800948a:	fb0c 2101 	mla	r1, ip, r1, r2
 800948e:	e7f0      	b.n	8009472 <_vfiprintf_r+0x1da>
 8009490:	ab03      	add	r3, sp, #12
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	462a      	mov	r2, r5
 8009496:	4630      	mov	r0, r6
 8009498:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <_vfiprintf_r+0x258>)
 800949a:	a904      	add	r1, sp, #16
 800949c:	f3af 8000 	nop.w
 80094a0:	4607      	mov	r7, r0
 80094a2:	1c78      	adds	r0, r7, #1
 80094a4:	d1d6      	bne.n	8009454 <_vfiprintf_r+0x1bc>
 80094a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a8:	07d9      	lsls	r1, r3, #31
 80094aa:	d405      	bmi.n	80094b8 <_vfiprintf_r+0x220>
 80094ac:	89ab      	ldrh	r3, [r5, #12]
 80094ae:	059a      	lsls	r2, r3, #22
 80094b0:	d402      	bmi.n	80094b8 <_vfiprintf_r+0x220>
 80094b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094b4:	f7ff fe6d 	bl	8009192 <__retarget_lock_release_recursive>
 80094b8:	89ab      	ldrh	r3, [r5, #12]
 80094ba:	065b      	lsls	r3, r3, #25
 80094bc:	f53f af12 	bmi.w	80092e4 <_vfiprintf_r+0x4c>
 80094c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094c2:	e711      	b.n	80092e8 <_vfiprintf_r+0x50>
 80094c4:	ab03      	add	r3, sp, #12
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	462a      	mov	r2, r5
 80094ca:	4630      	mov	r0, r6
 80094cc:	4b08      	ldr	r3, [pc, #32]	; (80094f0 <_vfiprintf_r+0x258>)
 80094ce:	a904      	add	r1, sp, #16
 80094d0:	f000 f882 	bl	80095d8 <_printf_i>
 80094d4:	e7e4      	b.n	80094a0 <_vfiprintf_r+0x208>
 80094d6:	bf00      	nop
 80094d8:	0800a388 	.word	0x0800a388
 80094dc:	0800a3a8 	.word	0x0800a3a8
 80094e0:	0800a368 	.word	0x0800a368
 80094e4:	0800a3c8 	.word	0x0800a3c8
 80094e8:	0800a3d2 	.word	0x0800a3d2
 80094ec:	00000000 	.word	0x00000000
 80094f0:	08009273 	.word	0x08009273
 80094f4:	0800a3ce 	.word	0x0800a3ce

080094f8 <_printf_common>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	4616      	mov	r6, r2
 80094fe:	4699      	mov	r9, r3
 8009500:	688a      	ldr	r2, [r1, #8]
 8009502:	690b      	ldr	r3, [r1, #16]
 8009504:	4607      	mov	r7, r0
 8009506:	4293      	cmp	r3, r2
 8009508:	bfb8      	it	lt
 800950a:	4613      	movlt	r3, r2
 800950c:	6033      	str	r3, [r6, #0]
 800950e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009512:	460c      	mov	r4, r1
 8009514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009518:	b10a      	cbz	r2, 800951e <_printf_common+0x26>
 800951a:	3301      	adds	r3, #1
 800951c:	6033      	str	r3, [r6, #0]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	0699      	lsls	r1, r3, #26
 8009522:	bf42      	ittt	mi
 8009524:	6833      	ldrmi	r3, [r6, #0]
 8009526:	3302      	addmi	r3, #2
 8009528:	6033      	strmi	r3, [r6, #0]
 800952a:	6825      	ldr	r5, [r4, #0]
 800952c:	f015 0506 	ands.w	r5, r5, #6
 8009530:	d106      	bne.n	8009540 <_printf_common+0x48>
 8009532:	f104 0a19 	add.w	sl, r4, #25
 8009536:	68e3      	ldr	r3, [r4, #12]
 8009538:	6832      	ldr	r2, [r6, #0]
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	42ab      	cmp	r3, r5
 800953e:	dc28      	bgt.n	8009592 <_printf_common+0x9a>
 8009540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009544:	1e13      	subs	r3, r2, #0
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	bf18      	it	ne
 800954a:	2301      	movne	r3, #1
 800954c:	0692      	lsls	r2, r2, #26
 800954e:	d42d      	bmi.n	80095ac <_printf_common+0xb4>
 8009550:	4649      	mov	r1, r9
 8009552:	4638      	mov	r0, r7
 8009554:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009558:	47c0      	blx	r8
 800955a:	3001      	adds	r0, #1
 800955c:	d020      	beq.n	80095a0 <_printf_common+0xa8>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	68e5      	ldr	r5, [r4, #12]
 8009562:	f003 0306 	and.w	r3, r3, #6
 8009566:	2b04      	cmp	r3, #4
 8009568:	bf18      	it	ne
 800956a:	2500      	movne	r5, #0
 800956c:	6832      	ldr	r2, [r6, #0]
 800956e:	f04f 0600 	mov.w	r6, #0
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	bf08      	it	eq
 8009576:	1aad      	subeq	r5, r5, r2
 8009578:	6922      	ldr	r2, [r4, #16]
 800957a:	bf08      	it	eq
 800957c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009580:	4293      	cmp	r3, r2
 8009582:	bfc4      	itt	gt
 8009584:	1a9b      	subgt	r3, r3, r2
 8009586:	18ed      	addgt	r5, r5, r3
 8009588:	341a      	adds	r4, #26
 800958a:	42b5      	cmp	r5, r6
 800958c:	d11a      	bne.n	80095c4 <_printf_common+0xcc>
 800958e:	2000      	movs	r0, #0
 8009590:	e008      	b.n	80095a4 <_printf_common+0xac>
 8009592:	2301      	movs	r3, #1
 8009594:	4652      	mov	r2, sl
 8009596:	4649      	mov	r1, r9
 8009598:	4638      	mov	r0, r7
 800959a:	47c0      	blx	r8
 800959c:	3001      	adds	r0, #1
 800959e:	d103      	bne.n	80095a8 <_printf_common+0xb0>
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	3501      	adds	r5, #1
 80095aa:	e7c4      	b.n	8009536 <_printf_common+0x3e>
 80095ac:	2030      	movs	r0, #48	; 0x30
 80095ae:	18e1      	adds	r1, r4, r3
 80095b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095ba:	4422      	add	r2, r4
 80095bc:	3302      	adds	r3, #2
 80095be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095c2:	e7c5      	b.n	8009550 <_printf_common+0x58>
 80095c4:	2301      	movs	r3, #1
 80095c6:	4622      	mov	r2, r4
 80095c8:	4649      	mov	r1, r9
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d0e6      	beq.n	80095a0 <_printf_common+0xa8>
 80095d2:	3601      	adds	r6, #1
 80095d4:	e7d9      	b.n	800958a <_printf_common+0x92>
	...

080095d8 <_printf_i>:
 80095d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095dc:	460c      	mov	r4, r1
 80095de:	7e27      	ldrb	r7, [r4, #24]
 80095e0:	4691      	mov	r9, r2
 80095e2:	2f78      	cmp	r7, #120	; 0x78
 80095e4:	4680      	mov	r8, r0
 80095e6:	469a      	mov	sl, r3
 80095e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095ee:	d807      	bhi.n	8009600 <_printf_i+0x28>
 80095f0:	2f62      	cmp	r7, #98	; 0x62
 80095f2:	d80a      	bhi.n	800960a <_printf_i+0x32>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	f000 80d9 	beq.w	80097ac <_printf_i+0x1d4>
 80095fa:	2f58      	cmp	r7, #88	; 0x58
 80095fc:	f000 80a4 	beq.w	8009748 <_printf_i+0x170>
 8009600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009604:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009608:	e03a      	b.n	8009680 <_printf_i+0xa8>
 800960a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800960e:	2b15      	cmp	r3, #21
 8009610:	d8f6      	bhi.n	8009600 <_printf_i+0x28>
 8009612:	a001      	add	r0, pc, #4	; (adr r0, 8009618 <_printf_i+0x40>)
 8009614:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009618:	08009671 	.word	0x08009671
 800961c:	08009685 	.word	0x08009685
 8009620:	08009601 	.word	0x08009601
 8009624:	08009601 	.word	0x08009601
 8009628:	08009601 	.word	0x08009601
 800962c:	08009601 	.word	0x08009601
 8009630:	08009685 	.word	0x08009685
 8009634:	08009601 	.word	0x08009601
 8009638:	08009601 	.word	0x08009601
 800963c:	08009601 	.word	0x08009601
 8009640:	08009601 	.word	0x08009601
 8009644:	08009793 	.word	0x08009793
 8009648:	080096b5 	.word	0x080096b5
 800964c:	08009775 	.word	0x08009775
 8009650:	08009601 	.word	0x08009601
 8009654:	08009601 	.word	0x08009601
 8009658:	080097b5 	.word	0x080097b5
 800965c:	08009601 	.word	0x08009601
 8009660:	080096b5 	.word	0x080096b5
 8009664:	08009601 	.word	0x08009601
 8009668:	08009601 	.word	0x08009601
 800966c:	0800977d 	.word	0x0800977d
 8009670:	680b      	ldr	r3, [r1, #0]
 8009672:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	600a      	str	r2, [r1, #0]
 800967c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009680:	2301      	movs	r3, #1
 8009682:	e0a4      	b.n	80097ce <_printf_i+0x1f6>
 8009684:	6825      	ldr	r5, [r4, #0]
 8009686:	6808      	ldr	r0, [r1, #0]
 8009688:	062e      	lsls	r6, r5, #24
 800968a:	f100 0304 	add.w	r3, r0, #4
 800968e:	d50a      	bpl.n	80096a6 <_printf_i+0xce>
 8009690:	6805      	ldr	r5, [r0, #0]
 8009692:	600b      	str	r3, [r1, #0]
 8009694:	2d00      	cmp	r5, #0
 8009696:	da03      	bge.n	80096a0 <_printf_i+0xc8>
 8009698:	232d      	movs	r3, #45	; 0x2d
 800969a:	426d      	negs	r5, r5
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	230a      	movs	r3, #10
 80096a2:	485e      	ldr	r0, [pc, #376]	; (800981c <_printf_i+0x244>)
 80096a4:	e019      	b.n	80096da <_printf_i+0x102>
 80096a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80096aa:	6805      	ldr	r5, [r0, #0]
 80096ac:	600b      	str	r3, [r1, #0]
 80096ae:	bf18      	it	ne
 80096b0:	b22d      	sxthne	r5, r5
 80096b2:	e7ef      	b.n	8009694 <_printf_i+0xbc>
 80096b4:	680b      	ldr	r3, [r1, #0]
 80096b6:	6825      	ldr	r5, [r4, #0]
 80096b8:	1d18      	adds	r0, r3, #4
 80096ba:	6008      	str	r0, [r1, #0]
 80096bc:	0628      	lsls	r0, r5, #24
 80096be:	d501      	bpl.n	80096c4 <_printf_i+0xec>
 80096c0:	681d      	ldr	r5, [r3, #0]
 80096c2:	e002      	b.n	80096ca <_printf_i+0xf2>
 80096c4:	0669      	lsls	r1, r5, #25
 80096c6:	d5fb      	bpl.n	80096c0 <_printf_i+0xe8>
 80096c8:	881d      	ldrh	r5, [r3, #0]
 80096ca:	2f6f      	cmp	r7, #111	; 0x6f
 80096cc:	bf0c      	ite	eq
 80096ce:	2308      	moveq	r3, #8
 80096d0:	230a      	movne	r3, #10
 80096d2:	4852      	ldr	r0, [pc, #328]	; (800981c <_printf_i+0x244>)
 80096d4:	2100      	movs	r1, #0
 80096d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096da:	6866      	ldr	r6, [r4, #4]
 80096dc:	2e00      	cmp	r6, #0
 80096de:	bfa8      	it	ge
 80096e0:	6821      	ldrge	r1, [r4, #0]
 80096e2:	60a6      	str	r6, [r4, #8]
 80096e4:	bfa4      	itt	ge
 80096e6:	f021 0104 	bicge.w	r1, r1, #4
 80096ea:	6021      	strge	r1, [r4, #0]
 80096ec:	b90d      	cbnz	r5, 80096f2 <_printf_i+0x11a>
 80096ee:	2e00      	cmp	r6, #0
 80096f0:	d04d      	beq.n	800978e <_printf_i+0x1b6>
 80096f2:	4616      	mov	r6, r2
 80096f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80096f8:	fb03 5711 	mls	r7, r3, r1, r5
 80096fc:	5dc7      	ldrb	r7, [r0, r7]
 80096fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009702:	462f      	mov	r7, r5
 8009704:	42bb      	cmp	r3, r7
 8009706:	460d      	mov	r5, r1
 8009708:	d9f4      	bls.n	80096f4 <_printf_i+0x11c>
 800970a:	2b08      	cmp	r3, #8
 800970c:	d10b      	bne.n	8009726 <_printf_i+0x14e>
 800970e:	6823      	ldr	r3, [r4, #0]
 8009710:	07df      	lsls	r7, r3, #31
 8009712:	d508      	bpl.n	8009726 <_printf_i+0x14e>
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	6861      	ldr	r1, [r4, #4]
 8009718:	4299      	cmp	r1, r3
 800971a:	bfde      	ittt	le
 800971c:	2330      	movle	r3, #48	; 0x30
 800971e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009722:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009726:	1b92      	subs	r2, r2, r6
 8009728:	6122      	str	r2, [r4, #16]
 800972a:	464b      	mov	r3, r9
 800972c:	4621      	mov	r1, r4
 800972e:	4640      	mov	r0, r8
 8009730:	f8cd a000 	str.w	sl, [sp]
 8009734:	aa03      	add	r2, sp, #12
 8009736:	f7ff fedf 	bl	80094f8 <_printf_common>
 800973a:	3001      	adds	r0, #1
 800973c:	d14c      	bne.n	80097d8 <_printf_i+0x200>
 800973e:	f04f 30ff 	mov.w	r0, #4294967295
 8009742:	b004      	add	sp, #16
 8009744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009748:	4834      	ldr	r0, [pc, #208]	; (800981c <_printf_i+0x244>)
 800974a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800974e:	680e      	ldr	r6, [r1, #0]
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	f856 5b04 	ldr.w	r5, [r6], #4
 8009756:	061f      	lsls	r7, r3, #24
 8009758:	600e      	str	r6, [r1, #0]
 800975a:	d514      	bpl.n	8009786 <_printf_i+0x1ae>
 800975c:	07d9      	lsls	r1, r3, #31
 800975e:	bf44      	itt	mi
 8009760:	f043 0320 	orrmi.w	r3, r3, #32
 8009764:	6023      	strmi	r3, [r4, #0]
 8009766:	b91d      	cbnz	r5, 8009770 <_printf_i+0x198>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	f023 0320 	bic.w	r3, r3, #32
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	2310      	movs	r3, #16
 8009772:	e7af      	b.n	80096d4 <_printf_i+0xfc>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	f043 0320 	orr.w	r3, r3, #32
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	2378      	movs	r3, #120	; 0x78
 800977e:	4828      	ldr	r0, [pc, #160]	; (8009820 <_printf_i+0x248>)
 8009780:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009784:	e7e3      	b.n	800974e <_printf_i+0x176>
 8009786:	065e      	lsls	r6, r3, #25
 8009788:	bf48      	it	mi
 800978a:	b2ad      	uxthmi	r5, r5
 800978c:	e7e6      	b.n	800975c <_printf_i+0x184>
 800978e:	4616      	mov	r6, r2
 8009790:	e7bb      	b.n	800970a <_printf_i+0x132>
 8009792:	680b      	ldr	r3, [r1, #0]
 8009794:	6826      	ldr	r6, [r4, #0]
 8009796:	1d1d      	adds	r5, r3, #4
 8009798:	6960      	ldr	r0, [r4, #20]
 800979a:	600d      	str	r5, [r1, #0]
 800979c:	0635      	lsls	r5, r6, #24
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	d501      	bpl.n	80097a6 <_printf_i+0x1ce>
 80097a2:	6018      	str	r0, [r3, #0]
 80097a4:	e002      	b.n	80097ac <_printf_i+0x1d4>
 80097a6:	0671      	lsls	r1, r6, #25
 80097a8:	d5fb      	bpl.n	80097a2 <_printf_i+0x1ca>
 80097aa:	8018      	strh	r0, [r3, #0]
 80097ac:	2300      	movs	r3, #0
 80097ae:	4616      	mov	r6, r2
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	e7ba      	b.n	800972a <_printf_i+0x152>
 80097b4:	680b      	ldr	r3, [r1, #0]
 80097b6:	1d1a      	adds	r2, r3, #4
 80097b8:	600a      	str	r2, [r1, #0]
 80097ba:	681e      	ldr	r6, [r3, #0]
 80097bc:	2100      	movs	r1, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	6862      	ldr	r2, [r4, #4]
 80097c2:	f000 fa9d 	bl	8009d00 <memchr>
 80097c6:	b108      	cbz	r0, 80097cc <_printf_i+0x1f4>
 80097c8:	1b80      	subs	r0, r0, r6
 80097ca:	6060      	str	r0, [r4, #4]
 80097cc:	6863      	ldr	r3, [r4, #4]
 80097ce:	6123      	str	r3, [r4, #16]
 80097d0:	2300      	movs	r3, #0
 80097d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097d6:	e7a8      	b.n	800972a <_printf_i+0x152>
 80097d8:	4632      	mov	r2, r6
 80097da:	4649      	mov	r1, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	6923      	ldr	r3, [r4, #16]
 80097e0:	47d0      	blx	sl
 80097e2:	3001      	adds	r0, #1
 80097e4:	d0ab      	beq.n	800973e <_printf_i+0x166>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	079b      	lsls	r3, r3, #30
 80097ea:	d413      	bmi.n	8009814 <_printf_i+0x23c>
 80097ec:	68e0      	ldr	r0, [r4, #12]
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	4298      	cmp	r0, r3
 80097f2:	bfb8      	it	lt
 80097f4:	4618      	movlt	r0, r3
 80097f6:	e7a4      	b.n	8009742 <_printf_i+0x16a>
 80097f8:	2301      	movs	r3, #1
 80097fa:	4632      	mov	r2, r6
 80097fc:	4649      	mov	r1, r9
 80097fe:	4640      	mov	r0, r8
 8009800:	47d0      	blx	sl
 8009802:	3001      	adds	r0, #1
 8009804:	d09b      	beq.n	800973e <_printf_i+0x166>
 8009806:	3501      	adds	r5, #1
 8009808:	68e3      	ldr	r3, [r4, #12]
 800980a:	9903      	ldr	r1, [sp, #12]
 800980c:	1a5b      	subs	r3, r3, r1
 800980e:	42ab      	cmp	r3, r5
 8009810:	dcf2      	bgt.n	80097f8 <_printf_i+0x220>
 8009812:	e7eb      	b.n	80097ec <_printf_i+0x214>
 8009814:	2500      	movs	r5, #0
 8009816:	f104 0619 	add.w	r6, r4, #25
 800981a:	e7f5      	b.n	8009808 <_printf_i+0x230>
 800981c:	0800a3d9 	.word	0x0800a3d9
 8009820:	0800a3ea 	.word	0x0800a3ea

08009824 <_sbrk_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	2300      	movs	r3, #0
 8009828:	4d05      	ldr	r5, [pc, #20]	; (8009840 <_sbrk_r+0x1c>)
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 f894 	bl	800195c <_sbrk>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_sbrk_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_sbrk_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	200045dc 	.word	0x200045dc

08009844 <__sread>:
 8009844:	b510      	push	{r4, lr}
 8009846:	460c      	mov	r4, r1
 8009848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984c:	f000 fabe 	bl	8009dcc <_read_r>
 8009850:	2800      	cmp	r0, #0
 8009852:	bfab      	itete	ge
 8009854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009856:	89a3      	ldrhlt	r3, [r4, #12]
 8009858:	181b      	addge	r3, r3, r0
 800985a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800985e:	bfac      	ite	ge
 8009860:	6563      	strge	r3, [r4, #84]	; 0x54
 8009862:	81a3      	strhlt	r3, [r4, #12]
 8009864:	bd10      	pop	{r4, pc}

08009866 <__swrite>:
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	461f      	mov	r7, r3
 800986c:	898b      	ldrh	r3, [r1, #12]
 800986e:	4605      	mov	r5, r0
 8009870:	05db      	lsls	r3, r3, #23
 8009872:	460c      	mov	r4, r1
 8009874:	4616      	mov	r6, r2
 8009876:	d505      	bpl.n	8009884 <__swrite+0x1e>
 8009878:	2302      	movs	r3, #2
 800987a:	2200      	movs	r2, #0
 800987c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009880:	f000 f9c8 	bl	8009c14 <_lseek_r>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	4632      	mov	r2, r6
 8009888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	4628      	mov	r0, r5
 8009890:	463b      	mov	r3, r7
 8009892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800989a:	f000 b869 	b.w	8009970 <_write_r>

0800989e <__sseek>:
 800989e:	b510      	push	{r4, lr}
 80098a0:	460c      	mov	r4, r1
 80098a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a6:	f000 f9b5 	bl	8009c14 <_lseek_r>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	bf15      	itete	ne
 80098b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ba:	81a3      	strheq	r3, [r4, #12]
 80098bc:	bf18      	it	ne
 80098be:	81a3      	strhne	r3, [r4, #12]
 80098c0:	bd10      	pop	{r4, pc}

080098c2 <__sclose>:
 80098c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c6:	f000 b8d3 	b.w	8009a70 <_close_r>
	...

080098cc <__swbuf_r>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	460e      	mov	r6, r1
 80098d0:	4614      	mov	r4, r2
 80098d2:	4605      	mov	r5, r0
 80098d4:	b118      	cbz	r0, 80098de <__swbuf_r+0x12>
 80098d6:	6983      	ldr	r3, [r0, #24]
 80098d8:	b90b      	cbnz	r3, 80098de <__swbuf_r+0x12>
 80098da:	f7ff fbbb 	bl	8009054 <__sinit>
 80098de:	4b21      	ldr	r3, [pc, #132]	; (8009964 <__swbuf_r+0x98>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	d12b      	bne.n	800993c <__swbuf_r+0x70>
 80098e4:	686c      	ldr	r4, [r5, #4]
 80098e6:	69a3      	ldr	r3, [r4, #24]
 80098e8:	60a3      	str	r3, [r4, #8]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	071a      	lsls	r2, r3, #28
 80098ee:	d52f      	bpl.n	8009950 <__swbuf_r+0x84>
 80098f0:	6923      	ldr	r3, [r4, #16]
 80098f2:	b36b      	cbz	r3, 8009950 <__swbuf_r+0x84>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	6820      	ldr	r0, [r4, #0]
 80098f8:	b2f6      	uxtb	r6, r6
 80098fa:	1ac0      	subs	r0, r0, r3
 80098fc:	6963      	ldr	r3, [r4, #20]
 80098fe:	4637      	mov	r7, r6
 8009900:	4283      	cmp	r3, r0
 8009902:	dc04      	bgt.n	800990e <__swbuf_r+0x42>
 8009904:	4621      	mov	r1, r4
 8009906:	4628      	mov	r0, r5
 8009908:	f000 f948 	bl	8009b9c <_fflush_r>
 800990c:	bb30      	cbnz	r0, 800995c <__swbuf_r+0x90>
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	3001      	adds	r0, #1
 8009912:	3b01      	subs	r3, #1
 8009914:	60a3      	str	r3, [r4, #8]
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	6022      	str	r2, [r4, #0]
 800991c:	701e      	strb	r6, [r3, #0]
 800991e:	6963      	ldr	r3, [r4, #20]
 8009920:	4283      	cmp	r3, r0
 8009922:	d004      	beq.n	800992e <__swbuf_r+0x62>
 8009924:	89a3      	ldrh	r3, [r4, #12]
 8009926:	07db      	lsls	r3, r3, #31
 8009928:	d506      	bpl.n	8009938 <__swbuf_r+0x6c>
 800992a:	2e0a      	cmp	r6, #10
 800992c:	d104      	bne.n	8009938 <__swbuf_r+0x6c>
 800992e:	4621      	mov	r1, r4
 8009930:	4628      	mov	r0, r5
 8009932:	f000 f933 	bl	8009b9c <_fflush_r>
 8009936:	b988      	cbnz	r0, 800995c <__swbuf_r+0x90>
 8009938:	4638      	mov	r0, r7
 800993a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993c:	4b0a      	ldr	r3, [pc, #40]	; (8009968 <__swbuf_r+0x9c>)
 800993e:	429c      	cmp	r4, r3
 8009940:	d101      	bne.n	8009946 <__swbuf_r+0x7a>
 8009942:	68ac      	ldr	r4, [r5, #8]
 8009944:	e7cf      	b.n	80098e6 <__swbuf_r+0x1a>
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <__swbuf_r+0xa0>)
 8009948:	429c      	cmp	r4, r3
 800994a:	bf08      	it	eq
 800994c:	68ec      	ldreq	r4, [r5, #12]
 800994e:	e7ca      	b.n	80098e6 <__swbuf_r+0x1a>
 8009950:	4621      	mov	r1, r4
 8009952:	4628      	mov	r0, r5
 8009954:	f000 f81e 	bl	8009994 <__swsetup_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	d0cb      	beq.n	80098f4 <__swbuf_r+0x28>
 800995c:	f04f 37ff 	mov.w	r7, #4294967295
 8009960:	e7ea      	b.n	8009938 <__swbuf_r+0x6c>
 8009962:	bf00      	nop
 8009964:	0800a388 	.word	0x0800a388
 8009968:	0800a3a8 	.word	0x0800a3a8
 800996c:	0800a368 	.word	0x0800a368

08009970 <_write_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	4611      	mov	r1, r2
 8009978:	2200      	movs	r2, #0
 800997a:	4d05      	ldr	r5, [pc, #20]	; (8009990 <_write_r+0x20>)
 800997c:	602a      	str	r2, [r5, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	f7f7 fadc 	bl	8000f3c <_write>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_write_r+0x1e>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_write_r+0x1e>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	200045dc 	.word	0x200045dc

08009994 <__swsetup_r>:
 8009994:	4b32      	ldr	r3, [pc, #200]	; (8009a60 <__swsetup_r+0xcc>)
 8009996:	b570      	push	{r4, r5, r6, lr}
 8009998:	681d      	ldr	r5, [r3, #0]
 800999a:	4606      	mov	r6, r0
 800999c:	460c      	mov	r4, r1
 800999e:	b125      	cbz	r5, 80099aa <__swsetup_r+0x16>
 80099a0:	69ab      	ldr	r3, [r5, #24]
 80099a2:	b913      	cbnz	r3, 80099aa <__swsetup_r+0x16>
 80099a4:	4628      	mov	r0, r5
 80099a6:	f7ff fb55 	bl	8009054 <__sinit>
 80099aa:	4b2e      	ldr	r3, [pc, #184]	; (8009a64 <__swsetup_r+0xd0>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d10f      	bne.n	80099d0 <__swsetup_r+0x3c>
 80099b0:	686c      	ldr	r4, [r5, #4]
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099b8:	0719      	lsls	r1, r3, #28
 80099ba:	d42c      	bmi.n	8009a16 <__swsetup_r+0x82>
 80099bc:	06dd      	lsls	r5, r3, #27
 80099be:	d411      	bmi.n	80099e4 <__swsetup_r+0x50>
 80099c0:	2309      	movs	r3, #9
 80099c2:	6033      	str	r3, [r6, #0]
 80099c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	e03e      	b.n	8009a4e <__swsetup_r+0xba>
 80099d0:	4b25      	ldr	r3, [pc, #148]	; (8009a68 <__swsetup_r+0xd4>)
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d101      	bne.n	80099da <__swsetup_r+0x46>
 80099d6:	68ac      	ldr	r4, [r5, #8]
 80099d8:	e7eb      	b.n	80099b2 <__swsetup_r+0x1e>
 80099da:	4b24      	ldr	r3, [pc, #144]	; (8009a6c <__swsetup_r+0xd8>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	bf08      	it	eq
 80099e0:	68ec      	ldreq	r4, [r5, #12]
 80099e2:	e7e6      	b.n	80099b2 <__swsetup_r+0x1e>
 80099e4:	0758      	lsls	r0, r3, #29
 80099e6:	d512      	bpl.n	8009a0e <__swsetup_r+0x7a>
 80099e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099ea:	b141      	cbz	r1, 80099fe <__swsetup_r+0x6a>
 80099ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099f0:	4299      	cmp	r1, r3
 80099f2:	d002      	beq.n	80099fa <__swsetup_r+0x66>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 f99d 	bl	8009d34 <_free_r>
 80099fa:	2300      	movs	r3, #0
 80099fc:	6363      	str	r3, [r4, #52]	; 0x34
 80099fe:	89a3      	ldrh	r3, [r4, #12]
 8009a00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a04:	81a3      	strh	r3, [r4, #12]
 8009a06:	2300      	movs	r3, #0
 8009a08:	6063      	str	r3, [r4, #4]
 8009a0a:	6923      	ldr	r3, [r4, #16]
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0308 	orr.w	r3, r3, #8
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	6923      	ldr	r3, [r4, #16]
 8009a18:	b94b      	cbnz	r3, 8009a2e <__swsetup_r+0x9a>
 8009a1a:	89a3      	ldrh	r3, [r4, #12]
 8009a1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a24:	d003      	beq.n	8009a2e <__swsetup_r+0x9a>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f000 f929 	bl	8009c80 <__smakebuf_r>
 8009a2e:	89a0      	ldrh	r0, [r4, #12]
 8009a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a34:	f010 0301 	ands.w	r3, r0, #1
 8009a38:	d00a      	beq.n	8009a50 <__swsetup_r+0xbc>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	60a3      	str	r3, [r4, #8]
 8009a3e:	6963      	ldr	r3, [r4, #20]
 8009a40:	425b      	negs	r3, r3
 8009a42:	61a3      	str	r3, [r4, #24]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	b943      	cbnz	r3, 8009a5a <__swsetup_r+0xc6>
 8009a48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a4c:	d1ba      	bne.n	80099c4 <__swsetup_r+0x30>
 8009a4e:	bd70      	pop	{r4, r5, r6, pc}
 8009a50:	0781      	lsls	r1, r0, #30
 8009a52:	bf58      	it	pl
 8009a54:	6963      	ldrpl	r3, [r4, #20]
 8009a56:	60a3      	str	r3, [r4, #8]
 8009a58:	e7f4      	b.n	8009a44 <__swsetup_r+0xb0>
 8009a5a:	2000      	movs	r0, #0
 8009a5c:	e7f7      	b.n	8009a4e <__swsetup_r+0xba>
 8009a5e:	bf00      	nop
 8009a60:	20000024 	.word	0x20000024
 8009a64:	0800a388 	.word	0x0800a388
 8009a68:	0800a3a8 	.word	0x0800a3a8
 8009a6c:	0800a368 	.word	0x0800a368

08009a70 <_close_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	2300      	movs	r3, #0
 8009a74:	4d05      	ldr	r5, [pc, #20]	; (8009a8c <_close_r+0x1c>)
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f7 ff3d 	bl	80018fa <_close>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_close_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_close_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200045dc 	.word	0x200045dc

08009a90 <__sflush_r>:
 8009a90:	898a      	ldrh	r2, [r1, #12]
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	4605      	mov	r5, r0
 8009a98:	0710      	lsls	r0, r2, #28
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	d458      	bmi.n	8009b50 <__sflush_r+0xc0>
 8009a9e:	684b      	ldr	r3, [r1, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dc05      	bgt.n	8009ab0 <__sflush_r+0x20>
 8009aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dc02      	bgt.n	8009ab0 <__sflush_r+0x20>
 8009aaa:	2000      	movs	r0, #0
 8009aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	d0f9      	beq.n	8009aaa <__sflush_r+0x1a>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009abc:	682f      	ldr	r7, [r5, #0]
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	d032      	beq.n	8009b28 <__sflush_r+0x98>
 8009ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	075a      	lsls	r2, r3, #29
 8009ac8:	d505      	bpl.n	8009ad6 <__sflush_r+0x46>
 8009aca:	6863      	ldr	r3, [r4, #4]
 8009acc:	1ac0      	subs	r0, r0, r3
 8009ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ad0:	b10b      	cbz	r3, 8009ad6 <__sflush_r+0x46>
 8009ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ad4:	1ac0      	subs	r0, r0, r3
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	4602      	mov	r2, r0
 8009ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009adc:	4628      	mov	r0, r5
 8009ade:	6a21      	ldr	r1, [r4, #32]
 8009ae0:	47b0      	blx	r6
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	d106      	bne.n	8009af6 <__sflush_r+0x66>
 8009ae8:	6829      	ldr	r1, [r5, #0]
 8009aea:	291d      	cmp	r1, #29
 8009aec:	d82c      	bhi.n	8009b48 <__sflush_r+0xb8>
 8009aee:	4a2a      	ldr	r2, [pc, #168]	; (8009b98 <__sflush_r+0x108>)
 8009af0:	40ca      	lsrs	r2, r1
 8009af2:	07d6      	lsls	r6, r2, #31
 8009af4:	d528      	bpl.n	8009b48 <__sflush_r+0xb8>
 8009af6:	2200      	movs	r2, #0
 8009af8:	6062      	str	r2, [r4, #4]
 8009afa:	6922      	ldr	r2, [r4, #16]
 8009afc:	04d9      	lsls	r1, r3, #19
 8009afe:	6022      	str	r2, [r4, #0]
 8009b00:	d504      	bpl.n	8009b0c <__sflush_r+0x7c>
 8009b02:	1c42      	adds	r2, r0, #1
 8009b04:	d101      	bne.n	8009b0a <__sflush_r+0x7a>
 8009b06:	682b      	ldr	r3, [r5, #0]
 8009b08:	b903      	cbnz	r3, 8009b0c <__sflush_r+0x7c>
 8009b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b0e:	602f      	str	r7, [r5, #0]
 8009b10:	2900      	cmp	r1, #0
 8009b12:	d0ca      	beq.n	8009aaa <__sflush_r+0x1a>
 8009b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b18:	4299      	cmp	r1, r3
 8009b1a:	d002      	beq.n	8009b22 <__sflush_r+0x92>
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f000 f909 	bl	8009d34 <_free_r>
 8009b22:	2000      	movs	r0, #0
 8009b24:	6360      	str	r0, [r4, #52]	; 0x34
 8009b26:	e7c1      	b.n	8009aac <__sflush_r+0x1c>
 8009b28:	6a21      	ldr	r1, [r4, #32]
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b0      	blx	r6
 8009b30:	1c41      	adds	r1, r0, #1
 8009b32:	d1c7      	bne.n	8009ac4 <__sflush_r+0x34>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d0c4      	beq.n	8009ac4 <__sflush_r+0x34>
 8009b3a:	2b1d      	cmp	r3, #29
 8009b3c:	d001      	beq.n	8009b42 <__sflush_r+0xb2>
 8009b3e:	2b16      	cmp	r3, #22
 8009b40:	d101      	bne.n	8009b46 <__sflush_r+0xb6>
 8009b42:	602f      	str	r7, [r5, #0]
 8009b44:	e7b1      	b.n	8009aaa <__sflush_r+0x1a>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b4c:	81a3      	strh	r3, [r4, #12]
 8009b4e:	e7ad      	b.n	8009aac <__sflush_r+0x1c>
 8009b50:	690f      	ldr	r7, [r1, #16]
 8009b52:	2f00      	cmp	r7, #0
 8009b54:	d0a9      	beq.n	8009aaa <__sflush_r+0x1a>
 8009b56:	0793      	lsls	r3, r2, #30
 8009b58:	bf18      	it	ne
 8009b5a:	2300      	movne	r3, #0
 8009b5c:	680e      	ldr	r6, [r1, #0]
 8009b5e:	bf08      	it	eq
 8009b60:	694b      	ldreq	r3, [r1, #20]
 8009b62:	eba6 0807 	sub.w	r8, r6, r7
 8009b66:	600f      	str	r7, [r1, #0]
 8009b68:	608b      	str	r3, [r1, #8]
 8009b6a:	f1b8 0f00 	cmp.w	r8, #0
 8009b6e:	dd9c      	ble.n	8009aaa <__sflush_r+0x1a>
 8009b70:	4643      	mov	r3, r8
 8009b72:	463a      	mov	r2, r7
 8009b74:	4628      	mov	r0, r5
 8009b76:	6a21      	ldr	r1, [r4, #32]
 8009b78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b7a:	47b0      	blx	r6
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	dc06      	bgt.n	8009b8e <__sflush_r+0xfe>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	e78e      	b.n	8009aac <__sflush_r+0x1c>
 8009b8e:	4407      	add	r7, r0
 8009b90:	eba8 0800 	sub.w	r8, r8, r0
 8009b94:	e7e9      	b.n	8009b6a <__sflush_r+0xda>
 8009b96:	bf00      	nop
 8009b98:	20400001 	.word	0x20400001

08009b9c <_fflush_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	690b      	ldr	r3, [r1, #16]
 8009ba0:	4605      	mov	r5, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	b913      	cbnz	r3, 8009bac <_fflush_r+0x10>
 8009ba6:	2500      	movs	r5, #0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	bd38      	pop	{r3, r4, r5, pc}
 8009bac:	b118      	cbz	r0, 8009bb6 <_fflush_r+0x1a>
 8009bae:	6983      	ldr	r3, [r0, #24]
 8009bb0:	b90b      	cbnz	r3, 8009bb6 <_fflush_r+0x1a>
 8009bb2:	f7ff fa4f 	bl	8009054 <__sinit>
 8009bb6:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <_fflush_r+0x6c>)
 8009bb8:	429c      	cmp	r4, r3
 8009bba:	d11b      	bne.n	8009bf4 <_fflush_r+0x58>
 8009bbc:	686c      	ldr	r4, [r5, #4]
 8009bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0ef      	beq.n	8009ba6 <_fflush_r+0xa>
 8009bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bc8:	07d0      	lsls	r0, r2, #31
 8009bca:	d404      	bmi.n	8009bd6 <_fflush_r+0x3a>
 8009bcc:	0599      	lsls	r1, r3, #22
 8009bce:	d402      	bmi.n	8009bd6 <_fflush_r+0x3a>
 8009bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd2:	f7ff fadd 	bl	8009190 <__retarget_lock_acquire_recursive>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	4621      	mov	r1, r4
 8009bda:	f7ff ff59 	bl	8009a90 <__sflush_r>
 8009bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009be0:	4605      	mov	r5, r0
 8009be2:	07da      	lsls	r2, r3, #31
 8009be4:	d4e0      	bmi.n	8009ba8 <_fflush_r+0xc>
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	059b      	lsls	r3, r3, #22
 8009bea:	d4dd      	bmi.n	8009ba8 <_fflush_r+0xc>
 8009bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bee:	f7ff fad0 	bl	8009192 <__retarget_lock_release_recursive>
 8009bf2:	e7d9      	b.n	8009ba8 <_fflush_r+0xc>
 8009bf4:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <_fflush_r+0x70>)
 8009bf6:	429c      	cmp	r4, r3
 8009bf8:	d101      	bne.n	8009bfe <_fflush_r+0x62>
 8009bfa:	68ac      	ldr	r4, [r5, #8]
 8009bfc:	e7df      	b.n	8009bbe <_fflush_r+0x22>
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <_fflush_r+0x74>)
 8009c00:	429c      	cmp	r4, r3
 8009c02:	bf08      	it	eq
 8009c04:	68ec      	ldreq	r4, [r5, #12]
 8009c06:	e7da      	b.n	8009bbe <_fflush_r+0x22>
 8009c08:	0800a388 	.word	0x0800a388
 8009c0c:	0800a3a8 	.word	0x0800a3a8
 8009c10:	0800a368 	.word	0x0800a368

08009c14 <_lseek_r>:
 8009c14:	b538      	push	{r3, r4, r5, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	4d05      	ldr	r5, [pc, #20]	; (8009c34 <_lseek_r+0x20>)
 8009c20:	602a      	str	r2, [r5, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f7f7 fe8d 	bl	8001942 <_lseek>
 8009c28:	1c43      	adds	r3, r0, #1
 8009c2a:	d102      	bne.n	8009c32 <_lseek_r+0x1e>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b103      	cbz	r3, 8009c32 <_lseek_r+0x1e>
 8009c30:	6023      	str	r3, [r4, #0]
 8009c32:	bd38      	pop	{r3, r4, r5, pc}
 8009c34:	200045dc 	.word	0x200045dc

08009c38 <__swhatbuf_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460e      	mov	r6, r1
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	4614      	mov	r4, r2
 8009c42:	2900      	cmp	r1, #0
 8009c44:	461d      	mov	r5, r3
 8009c46:	b096      	sub	sp, #88	; 0x58
 8009c48:	da07      	bge.n	8009c5a <__swhatbuf_r+0x22>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	89b3      	ldrh	r3, [r6, #12]
 8009c50:	061a      	lsls	r2, r3, #24
 8009c52:	d410      	bmi.n	8009c76 <__swhatbuf_r+0x3e>
 8009c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c58:	e00e      	b.n	8009c78 <__swhatbuf_r+0x40>
 8009c5a:	466a      	mov	r2, sp
 8009c5c:	f000 f8c8 	bl	8009df0 <_fstat_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	dbf2      	blt.n	8009c4a <__swhatbuf_r+0x12>
 8009c64:	9a01      	ldr	r2, [sp, #4]
 8009c66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c6e:	425a      	negs	r2, r3
 8009c70:	415a      	adcs	r2, r3
 8009c72:	602a      	str	r2, [r5, #0]
 8009c74:	e7ee      	b.n	8009c54 <__swhatbuf_r+0x1c>
 8009c76:	2340      	movs	r3, #64	; 0x40
 8009c78:	2000      	movs	r0, #0
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	b016      	add	sp, #88	; 0x58
 8009c7e:	bd70      	pop	{r4, r5, r6, pc}

08009c80 <__smakebuf_r>:
 8009c80:	898b      	ldrh	r3, [r1, #12]
 8009c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c84:	079d      	lsls	r5, r3, #30
 8009c86:	4606      	mov	r6, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	d507      	bpl.n	8009c9c <__smakebuf_r+0x1c>
 8009c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c90:	6023      	str	r3, [r4, #0]
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	2301      	movs	r3, #1
 8009c96:	6163      	str	r3, [r4, #20]
 8009c98:	b002      	add	sp, #8
 8009c9a:	bd70      	pop	{r4, r5, r6, pc}
 8009c9c:	466a      	mov	r2, sp
 8009c9e:	ab01      	add	r3, sp, #4
 8009ca0:	f7ff ffca 	bl	8009c38 <__swhatbuf_r>
 8009ca4:	9900      	ldr	r1, [sp, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff fa73 	bl	8009194 <_malloc_r>
 8009cae:	b948      	cbnz	r0, 8009cc4 <__smakebuf_r+0x44>
 8009cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d4ef      	bmi.n	8009c98 <__smakebuf_r+0x18>
 8009cb8:	f023 0303 	bic.w	r3, r3, #3
 8009cbc:	f043 0302 	orr.w	r3, r3, #2
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7e3      	b.n	8009c8c <__smakebuf_r+0xc>
 8009cc4:	4b0d      	ldr	r3, [pc, #52]	; (8009cfc <__smakebuf_r+0x7c>)
 8009cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	6020      	str	r0, [r4, #0]
 8009ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	9b00      	ldr	r3, [sp, #0]
 8009cd4:	6120      	str	r0, [r4, #16]
 8009cd6:	6163      	str	r3, [r4, #20]
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	b15b      	cbz	r3, 8009cf4 <__smakebuf_r+0x74>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce2:	f000 f897 	bl	8009e14 <_isatty_r>
 8009ce6:	b128      	cbz	r0, 8009cf4 <__smakebuf_r+0x74>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	f023 0303 	bic.w	r3, r3, #3
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	81a3      	strh	r3, [r4, #12]
 8009cf4:	89a0      	ldrh	r0, [r4, #12]
 8009cf6:	4305      	orrs	r5, r0
 8009cf8:	81a5      	strh	r5, [r4, #12]
 8009cfa:	e7cd      	b.n	8009c98 <__smakebuf_r+0x18>
 8009cfc:	08008fed 	.word	0x08008fed

08009d00 <memchr>:
 8009d00:	4603      	mov	r3, r0
 8009d02:	b510      	push	{r4, lr}
 8009d04:	b2c9      	uxtb	r1, r1
 8009d06:	4402      	add	r2, r0
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	d101      	bne.n	8009d12 <memchr+0x12>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e003      	b.n	8009d1a <memchr+0x1a>
 8009d12:	7804      	ldrb	r4, [r0, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	428c      	cmp	r4, r1
 8009d18:	d1f6      	bne.n	8009d08 <memchr+0x8>
 8009d1a:	bd10      	pop	{r4, pc}

08009d1c <__malloc_lock>:
 8009d1c:	4801      	ldr	r0, [pc, #4]	; (8009d24 <__malloc_lock+0x8>)
 8009d1e:	f7ff ba37 	b.w	8009190 <__retarget_lock_acquire_recursive>
 8009d22:	bf00      	nop
 8009d24:	200045d4 	.word	0x200045d4

08009d28 <__malloc_unlock>:
 8009d28:	4801      	ldr	r0, [pc, #4]	; (8009d30 <__malloc_unlock+0x8>)
 8009d2a:	f7ff ba32 	b.w	8009192 <__retarget_lock_release_recursive>
 8009d2e:	bf00      	nop
 8009d30:	200045d4 	.word	0x200045d4

08009d34 <_free_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4605      	mov	r5, r0
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	d043      	beq.n	8009dc4 <_free_r+0x90>
 8009d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d40:	1f0c      	subs	r4, r1, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bfb8      	it	lt
 8009d46:	18e4      	addlt	r4, r4, r3
 8009d48:	f7ff ffe8 	bl	8009d1c <__malloc_lock>
 8009d4c:	4a1e      	ldr	r2, [pc, #120]	; (8009dc8 <_free_r+0x94>)
 8009d4e:	6813      	ldr	r3, [r2, #0]
 8009d50:	4610      	mov	r0, r2
 8009d52:	b933      	cbnz	r3, 8009d62 <_free_r+0x2e>
 8009d54:	6063      	str	r3, [r4, #4]
 8009d56:	6014      	str	r4, [r2, #0]
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d5e:	f7ff bfe3 	b.w	8009d28 <__malloc_unlock>
 8009d62:	42a3      	cmp	r3, r4
 8009d64:	d90a      	bls.n	8009d7c <_free_r+0x48>
 8009d66:	6821      	ldr	r1, [r4, #0]
 8009d68:	1862      	adds	r2, r4, r1
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	bf01      	itttt	eq
 8009d6e:	681a      	ldreq	r2, [r3, #0]
 8009d70:	685b      	ldreq	r3, [r3, #4]
 8009d72:	1852      	addeq	r2, r2, r1
 8009d74:	6022      	streq	r2, [r4, #0]
 8009d76:	6063      	str	r3, [r4, #4]
 8009d78:	6004      	str	r4, [r0, #0]
 8009d7a:	e7ed      	b.n	8009d58 <_free_r+0x24>
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	b10b      	cbz	r3, 8009d86 <_free_r+0x52>
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	d9fa      	bls.n	8009d7c <_free_r+0x48>
 8009d86:	6811      	ldr	r1, [r2, #0]
 8009d88:	1850      	adds	r0, r2, r1
 8009d8a:	42a0      	cmp	r0, r4
 8009d8c:	d10b      	bne.n	8009da6 <_free_r+0x72>
 8009d8e:	6820      	ldr	r0, [r4, #0]
 8009d90:	4401      	add	r1, r0
 8009d92:	1850      	adds	r0, r2, r1
 8009d94:	4283      	cmp	r3, r0
 8009d96:	6011      	str	r1, [r2, #0]
 8009d98:	d1de      	bne.n	8009d58 <_free_r+0x24>
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	4401      	add	r1, r0
 8009da0:	6011      	str	r1, [r2, #0]
 8009da2:	6053      	str	r3, [r2, #4]
 8009da4:	e7d8      	b.n	8009d58 <_free_r+0x24>
 8009da6:	d902      	bls.n	8009dae <_free_r+0x7a>
 8009da8:	230c      	movs	r3, #12
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	e7d4      	b.n	8009d58 <_free_r+0x24>
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	1821      	adds	r1, r4, r0
 8009db2:	428b      	cmp	r3, r1
 8009db4:	bf01      	itttt	eq
 8009db6:	6819      	ldreq	r1, [r3, #0]
 8009db8:	685b      	ldreq	r3, [r3, #4]
 8009dba:	1809      	addeq	r1, r1, r0
 8009dbc:	6021      	streq	r1, [r4, #0]
 8009dbe:	6063      	str	r3, [r4, #4]
 8009dc0:	6054      	str	r4, [r2, #4]
 8009dc2:	e7c9      	b.n	8009d58 <_free_r+0x24>
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000328 	.word	0x20000328

08009dcc <_read_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	4d05      	ldr	r5, [pc, #20]	; (8009dec <_read_r+0x20>)
 8009dd8:	602a      	str	r2, [r5, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f7f7 fd70 	bl	80018c0 <_read>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_read_r+0x1e>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_read_r+0x1e>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	200045dc 	.word	0x200045dc

08009df0 <_fstat_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	2300      	movs	r3, #0
 8009df4:	4d06      	ldr	r5, [pc, #24]	; (8009e10 <_fstat_r+0x20>)
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	602b      	str	r3, [r5, #0]
 8009dfe:	f7f7 fd87 	bl	8001910 <_fstat>
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	d102      	bne.n	8009e0c <_fstat_r+0x1c>
 8009e06:	682b      	ldr	r3, [r5, #0]
 8009e08:	b103      	cbz	r3, 8009e0c <_fstat_r+0x1c>
 8009e0a:	6023      	str	r3, [r4, #0]
 8009e0c:	bd38      	pop	{r3, r4, r5, pc}
 8009e0e:	bf00      	nop
 8009e10:	200045dc 	.word	0x200045dc

08009e14 <_isatty_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	2300      	movs	r3, #0
 8009e18:	4d05      	ldr	r5, [pc, #20]	; (8009e30 <_isatty_r+0x1c>)
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f7 fd85 	bl	800192e <_isatty>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_isatty_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_isatty_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200045dc 	.word	0x200045dc

08009e34 <_init>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	bf00      	nop
 8009e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3a:	bc08      	pop	{r3}
 8009e3c:	469e      	mov	lr, r3
 8009e3e:	4770      	bx	lr

08009e40 <_fini>:
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	bf00      	nop
 8009e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e46:	bc08      	pop	{r3}
 8009e48:	469e      	mov	lr, r3
 8009e4a:	4770      	bx	lr
