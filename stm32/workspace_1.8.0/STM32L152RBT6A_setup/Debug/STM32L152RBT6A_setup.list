
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b844  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beb4  0800beb4  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800beb4  0800beb4  0001beb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bebc  0800bebc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bebc  0800bebc  0001bebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bec0  0800bec0  0001bec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800bec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000454c  200000f0  0800bfb4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000463c  0800bfb4  0002463c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a615  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003920  00000000  00000000  0003a72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001878f  00000000  00000000  000406b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001990c  00000000  00000000  00058e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e43  00000000  00000000  0007274b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  000fc5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000f0 	.word	0x200000f0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800b968 	.word	0x0800b968

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000f4 	.word	0x200000f4
 8000178:	0800b968 	.word	0x0800b968

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_d2iz>:
 80004f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004fc:	d215      	bcs.n	800052a <__aeabi_d2iz+0x36>
 80004fe:	d511      	bpl.n	8000524 <__aeabi_d2iz+0x30>
 8000500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000508:	d912      	bls.n	8000530 <__aeabi_d2iz+0x3c>
 800050a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800050e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800051a:	fa23 f002 	lsr.w	r0, r3, r2
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	4770      	bx	lr
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	4770      	bx	lr
 800052a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800052e:	d105      	bne.n	800053c <__aeabi_d2iz+0x48>
 8000530:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000534:	bf08      	it	eq
 8000536:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295
 8000554:	f04f 30ff 	movne.w	r0, #4294967295
 8000558:	f000 b96e 	b.w	8000838 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f000 f806 	bl	8000574 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__udivmoddi4>:
 8000574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000578:	9e08      	ldr	r6, [sp, #32]
 800057a:	460d      	mov	r5, r1
 800057c:	4604      	mov	r4, r0
 800057e:	468e      	mov	lr, r1
 8000580:	2b00      	cmp	r3, #0
 8000582:	f040 8083 	bne.w	800068c <__udivmoddi4+0x118>
 8000586:	428a      	cmp	r2, r1
 8000588:	4617      	mov	r7, r2
 800058a:	d947      	bls.n	800061c <__udivmoddi4+0xa8>
 800058c:	fab2 f382 	clz	r3, r2
 8000590:	b14b      	cbz	r3, 80005a6 <__udivmoddi4+0x32>
 8000592:	f1c3 0120 	rsb	r1, r3, #32
 8000596:	fa05 fe03 	lsl.w	lr, r5, r3
 800059a:	fa20 f101 	lsr.w	r1, r0, r1
 800059e:	409f      	lsls	r7, r3
 80005a0:	ea41 0e0e 	orr.w	lr, r1, lr
 80005a4:	409c      	lsls	r4, r3
 80005a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005aa:	fbbe fcf8 	udiv	ip, lr, r8
 80005ae:	fa1f f987 	uxth.w	r9, r7
 80005b2:	fb08 e21c 	mls	r2, r8, ip, lr
 80005b6:	fb0c f009 	mul.w	r0, ip, r9
 80005ba:	0c21      	lsrs	r1, r4, #16
 80005bc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80005c0:	4290      	cmp	r0, r2
 80005c2:	d90a      	bls.n	80005da <__udivmoddi4+0x66>
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80005ca:	f080 8118 	bcs.w	80007fe <__udivmoddi4+0x28a>
 80005ce:	4290      	cmp	r0, r2
 80005d0:	f240 8115 	bls.w	80007fe <__udivmoddi4+0x28a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	443a      	add	r2, r7
 80005da:	1a12      	subs	r2, r2, r0
 80005dc:	fbb2 f0f8 	udiv	r0, r2, r8
 80005e0:	fb08 2210 	mls	r2, r8, r0, r2
 80005e4:	fb00 f109 	mul.w	r1, r0, r9
 80005e8:	b2a4      	uxth	r4, r4
 80005ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ee:	42a1      	cmp	r1, r4
 80005f0:	d909      	bls.n	8000606 <__udivmoddi4+0x92>
 80005f2:	193c      	adds	r4, r7, r4
 80005f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80005f8:	f080 8103 	bcs.w	8000802 <__udivmoddi4+0x28e>
 80005fc:	42a1      	cmp	r1, r4
 80005fe:	f240 8100 	bls.w	8000802 <__udivmoddi4+0x28e>
 8000602:	3802      	subs	r0, #2
 8000604:	443c      	add	r4, r7
 8000606:	1a64      	subs	r4, r4, r1
 8000608:	2100      	movs	r1, #0
 800060a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800060e:	b11e      	cbz	r6, 8000618 <__udivmoddi4+0xa4>
 8000610:	2200      	movs	r2, #0
 8000612:	40dc      	lsrs	r4, r3
 8000614:	e9c6 4200 	strd	r4, r2, [r6]
 8000618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061c:	b902      	cbnz	r2, 8000620 <__udivmoddi4+0xac>
 800061e:	deff      	udf	#255	; 0xff
 8000620:	fab2 f382 	clz	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d14f      	bne.n	80006c8 <__udivmoddi4+0x154>
 8000628:	1a8d      	subs	r5, r1, r2
 800062a:	2101      	movs	r1, #1
 800062c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000630:	fa1f f882 	uxth.w	r8, r2
 8000634:	fbb5 fcfe 	udiv	ip, r5, lr
 8000638:	fb0e 551c 	mls	r5, lr, ip, r5
 800063c:	fb08 f00c 	mul.w	r0, r8, ip
 8000640:	0c22      	lsrs	r2, r4, #16
 8000642:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000646:	42a8      	cmp	r0, r5
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0xe6>
 800064a:	197d      	adds	r5, r7, r5
 800064c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000650:	d202      	bcs.n	8000658 <__udivmoddi4+0xe4>
 8000652:	42a8      	cmp	r0, r5
 8000654:	f200 80e9 	bhi.w	800082a <__udivmoddi4+0x2b6>
 8000658:	4694      	mov	ip, r2
 800065a:	1a2d      	subs	r5, r5, r0
 800065c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000660:	fb0e 5510 	mls	r5, lr, r0, r5
 8000664:	fb08 f800 	mul.w	r8, r8, r0
 8000668:	b2a4      	uxth	r4, r4
 800066a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800066e:	45a0      	cmp	r8, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x10e>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f100 32ff 	add.w	r2, r0, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x10c>
 800067a:	45a0      	cmp	r8, r4
 800067c:	f200 80d9 	bhi.w	8000832 <__udivmoddi4+0x2be>
 8000680:	4610      	mov	r0, r2
 8000682:	eba4 0408 	sub.w	r4, r4, r8
 8000686:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800068a:	e7c0      	b.n	800060e <__udivmoddi4+0x9a>
 800068c:	428b      	cmp	r3, r1
 800068e:	d908      	bls.n	80006a2 <__udivmoddi4+0x12e>
 8000690:	2e00      	cmp	r6, #0
 8000692:	f000 80b1 	beq.w	80007f8 <__udivmoddi4+0x284>
 8000696:	2100      	movs	r1, #0
 8000698:	e9c6 0500 	strd	r0, r5, [r6]
 800069c:	4608      	mov	r0, r1
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	fab3 f183 	clz	r1, r3
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d14b      	bne.n	8000742 <__udivmoddi4+0x1ce>
 80006aa:	42ab      	cmp	r3, r5
 80006ac:	d302      	bcc.n	80006b4 <__udivmoddi4+0x140>
 80006ae:	4282      	cmp	r2, r0
 80006b0:	f200 80b9 	bhi.w	8000826 <__udivmoddi4+0x2b2>
 80006b4:	1a84      	subs	r4, r0, r2
 80006b6:	eb65 0303 	sbc.w	r3, r5, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	469e      	mov	lr, r3
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d0aa      	beq.n	8000618 <__udivmoddi4+0xa4>
 80006c2:	e9c6 4e00 	strd	r4, lr, [r6]
 80006c6:	e7a7      	b.n	8000618 <__udivmoddi4+0xa4>
 80006c8:	409f      	lsls	r7, r3
 80006ca:	f1c3 0220 	rsb	r2, r3, #32
 80006ce:	40d1      	lsrs	r1, r2
 80006d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d8:	fa1f f887 	uxth.w	r8, r7
 80006dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80006e0:	fa24 f202 	lsr.w	r2, r4, r2
 80006e4:	409d      	lsls	r5, r3
 80006e6:	fb00 fc08 	mul.w	ip, r0, r8
 80006ea:	432a      	orrs	r2, r5
 80006ec:	0c15      	lsrs	r5, r2, #16
 80006ee:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006f2:	45ac      	cmp	ip, r5
 80006f4:	fa04 f403 	lsl.w	r4, r4, r3
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0x19a>
 80006fa:	197d      	adds	r5, r7, r5
 80006fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000700:	f080 808f 	bcs.w	8000822 <__udivmoddi4+0x2ae>
 8000704:	45ac      	cmp	ip, r5
 8000706:	f240 808c 	bls.w	8000822 <__udivmoddi4+0x2ae>
 800070a:	3802      	subs	r0, #2
 800070c:	443d      	add	r5, r7
 800070e:	eba5 050c 	sub.w	r5, r5, ip
 8000712:	fbb5 f1fe 	udiv	r1, r5, lr
 8000716:	fb0e 5c11 	mls	ip, lr, r1, r5
 800071a:	fb01 f908 	mul.w	r9, r1, r8
 800071e:	b295      	uxth	r5, r2
 8000720:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000724:	45a9      	cmp	r9, r5
 8000726:	d907      	bls.n	8000738 <__udivmoddi4+0x1c4>
 8000728:	197d      	adds	r5, r7, r5
 800072a:	f101 32ff 	add.w	r2, r1, #4294967295
 800072e:	d274      	bcs.n	800081a <__udivmoddi4+0x2a6>
 8000730:	45a9      	cmp	r9, r5
 8000732:	d972      	bls.n	800081a <__udivmoddi4+0x2a6>
 8000734:	3902      	subs	r1, #2
 8000736:	443d      	add	r5, r7
 8000738:	eba5 0509 	sub.w	r5, r5, r9
 800073c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000740:	e778      	b.n	8000634 <__udivmoddi4+0xc0>
 8000742:	f1c1 0720 	rsb	r7, r1, #32
 8000746:	408b      	lsls	r3, r1
 8000748:	fa22 fc07 	lsr.w	ip, r2, r7
 800074c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000750:	fa25 f407 	lsr.w	r4, r5, r7
 8000754:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000758:	fbb4 f9fe 	udiv	r9, r4, lr
 800075c:	fa1f f88c 	uxth.w	r8, ip
 8000760:	fb0e 4419 	mls	r4, lr, r9, r4
 8000764:	fa20 f307 	lsr.w	r3, r0, r7
 8000768:	fb09 fa08 	mul.w	sl, r9, r8
 800076c:	408d      	lsls	r5, r1
 800076e:	431d      	orrs	r5, r3
 8000770:	0c2b      	lsrs	r3, r5, #16
 8000772:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000776:	45a2      	cmp	sl, r4
 8000778:	fa02 f201 	lsl.w	r2, r2, r1
 800077c:	fa00 f301 	lsl.w	r3, r0, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x222>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f109 30ff 	add.w	r0, r9, #4294967295
 800078a:	d248      	bcs.n	800081e <__udivmoddi4+0x2aa>
 800078c:	45a2      	cmp	sl, r4
 800078e:	d946      	bls.n	800081e <__udivmoddi4+0x2aa>
 8000790:	f1a9 0902 	sub.w	r9, r9, #2
 8000794:	4464      	add	r4, ip
 8000796:	eba4 040a 	sub.w	r4, r4, sl
 800079a:	fbb4 f0fe 	udiv	r0, r4, lr
 800079e:	fb0e 4410 	mls	r4, lr, r0, r4
 80007a2:	fb00 fa08 	mul.w	sl, r0, r8
 80007a6:	b2ad      	uxth	r5, r5
 80007a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007ac:	45a2      	cmp	sl, r4
 80007ae:	d908      	bls.n	80007c2 <__udivmoddi4+0x24e>
 80007b0:	eb1c 0404 	adds.w	r4, ip, r4
 80007b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80007b8:	d22d      	bcs.n	8000816 <__udivmoddi4+0x2a2>
 80007ba:	45a2      	cmp	sl, r4
 80007bc:	d92b      	bls.n	8000816 <__udivmoddi4+0x2a2>
 80007be:	3802      	subs	r0, #2
 80007c0:	4464      	add	r4, ip
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	fba0 8902 	umull	r8, r9, r0, r2
 80007ca:	eba4 040a 	sub.w	r4, r4, sl
 80007ce:	454c      	cmp	r4, r9
 80007d0:	46c6      	mov	lr, r8
 80007d2:	464d      	mov	r5, r9
 80007d4:	d319      	bcc.n	800080a <__udivmoddi4+0x296>
 80007d6:	d016      	beq.n	8000806 <__udivmoddi4+0x292>
 80007d8:	b15e      	cbz	r6, 80007f2 <__udivmoddi4+0x27e>
 80007da:	ebb3 020e 	subs.w	r2, r3, lr
 80007de:	eb64 0405 	sbc.w	r4, r4, r5
 80007e2:	fa04 f707 	lsl.w	r7, r4, r7
 80007e6:	fa22 f301 	lsr.w	r3, r2, r1
 80007ea:	431f      	orrs	r7, r3
 80007ec:	40cc      	lsrs	r4, r1
 80007ee:	e9c6 7400 	strd	r7, r4, [r6]
 80007f2:	2100      	movs	r1, #0
 80007f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f8:	4631      	mov	r1, r6
 80007fa:	4630      	mov	r0, r6
 80007fc:	e70c      	b.n	8000618 <__udivmoddi4+0xa4>
 80007fe:	468c      	mov	ip, r1
 8000800:	e6eb      	b.n	80005da <__udivmoddi4+0x66>
 8000802:	4610      	mov	r0, r2
 8000804:	e6ff      	b.n	8000606 <__udivmoddi4+0x92>
 8000806:	4543      	cmp	r3, r8
 8000808:	d2e6      	bcs.n	80007d8 <__udivmoddi4+0x264>
 800080a:	ebb8 0e02 	subs.w	lr, r8, r2
 800080e:	eb69 050c 	sbc.w	r5, r9, ip
 8000812:	3801      	subs	r0, #1
 8000814:	e7e0      	b.n	80007d8 <__udivmoddi4+0x264>
 8000816:	4628      	mov	r0, r5
 8000818:	e7d3      	b.n	80007c2 <__udivmoddi4+0x24e>
 800081a:	4611      	mov	r1, r2
 800081c:	e78c      	b.n	8000738 <__udivmoddi4+0x1c4>
 800081e:	4681      	mov	r9, r0
 8000820:	e7b9      	b.n	8000796 <__udivmoddi4+0x222>
 8000822:	4608      	mov	r0, r1
 8000824:	e773      	b.n	800070e <__udivmoddi4+0x19a>
 8000826:	4608      	mov	r0, r1
 8000828:	e749      	b.n	80006be <__udivmoddi4+0x14a>
 800082a:	f1ac 0c02 	sub.w	ip, ip, #2
 800082e:	443d      	add	r5, r7
 8000830:	e713      	b.n	800065a <__udivmoddi4+0xe6>
 8000832:	3802      	subs	r0, #2
 8000834:	443c      	add	r4, r7
 8000836:	e724      	b.n	8000682 <__udivmoddi4+0x10e>

08000838 <__aeabi_idiv0>:
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <SELECT+0x18>)
 8000846:	f002 fd3f 	bl	80032c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f001 fda6 	bl	800239c <HAL_Delay>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020400 	.word	0x40020400

08000858 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <DESELECT+0x18>)
 8000862:	f002 fd31 	bl	80032c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f001 fd98 	bl	800239c <HAL_Delay>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020400 	.word	0x40020400

08000874 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800087e:	bf00      	nop
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <SPI_TxByte+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b02      	cmp	r3, #2
 800088c:	d1f8      	bne.n	8000880 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800088e:	1df9      	adds	r1, r7, #7
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2201      	movs	r2, #1
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <SPI_TxByte+0x30>)
 8000896:	f005 fe8b 	bl	80065b0 <HAL_SPI_Transmit>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000358 	.word	0x20000358

080008a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008b4:	bf00      	nop
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <SPI_TxBuffer+0x30>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d1f8      	bne.n	80008b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <SPI_TxBuffer+0x30>)
 80008cc:	f005 fe70 	bl	80065b0 <HAL_SPI_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000358 	.word	0x20000358

080008dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80008e2:	23ff      	movs	r3, #255	; 0xff
 80008e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008e6:	bf00      	nop
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <SPI_RxByte+0x34>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d1f8      	bne.n	80008e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80008f6:	1dba      	adds	r2, r7, #6
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <SPI_RxByte+0x34>)
 8000902:	f005 ff91 	bl	8006828 <HAL_SPI_TransmitReceive>

	return data;
 8000906:	79bb      	ldrb	r3, [r7, #6]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000358 	.word	0x20000358

08000914 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800091c:	f7ff ffde 	bl	80008dc <SPI_RxByte>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	701a      	strb	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SD_ReadyWait+0x30>)
 8000938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800093c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800093e:	f7ff ffcd 	bl	80008dc <SPI_RxByte>
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2bff      	cmp	r3, #255	; 0xff
 800094a:	d003      	beq.n	8000954 <SD_ReadyWait+0x24>
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SD_ReadyWait+0x30>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f4      	bne.n	800093e <SD_ReadyWait+0xe>

	return res;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000350 	.word	0x20000350

08000964 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800096a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800096e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000970:	f7ff ff72 	bl	8000858 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e005      	b.n	8000986 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	f7ff ff7a 	bl	8000874 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3301      	adds	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b09      	cmp	r3, #9
 800098a:	ddf6      	ble.n	800097a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800098c:	f7ff ff56 	bl	800083c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009a4:	2395      	movs	r3, #149	; 0x95
 80009a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80009a8:	463b      	mov	r3, r7
 80009aa:	2106      	movs	r1, #6
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff7b 	bl	80008a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80009b2:	e002      	b.n	80009ba <SD_PowerOn+0x56>
	{
		cnt--;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80009ba:	f7ff ff8f 	bl	80008dc <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d002      	beq.n	80009ca <SD_PowerOn+0x66>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f4      	bne.n	80009b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80009ca:	f7ff ff45 	bl	8000858 <DESELECT>
	SPI_TxByte(0XFF);
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	f7ff ff50 	bl	8000874 <SPI_TxByte>

	PowerFlag = 1;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <SD_PowerOn+0x80>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000010d 	.word	0x2000010d

080009e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_PowerOff+0x14>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000010d 	.word	0x2000010d

08000a00 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <SD_CheckPower+0x10>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	2000010d 	.word	0x2000010d

08000a14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SD_RxDataBlock+0x58>)
 8000a20:	22c8      	movs	r2, #200	; 0xc8
 8000a22:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a24:	f7ff ff5a 	bl	80008dc <SPI_RxByte>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d103      	bne.n	8000a3a <SD_RxDataBlock+0x26>
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SD_RxDataBlock+0x58>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f4      	bne.n	8000a24 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a3e:	d001      	beq.n	8000a44 <SD_RxDataBlock+0x30>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e00f      	b.n	8000a64 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff62 	bl	8000914 <SPI_RxBytePtr>
	} while(len--);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	603a      	str	r2, [r7, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f4      	bne.n	8000a44 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000a5a:	f7ff ff3f 	bl	80008dc <SPI_RxByte>
	SPI_RxByte();
 8000a5e:	f7ff ff3d 	bl	80008dc <SPI_RxByte>

	return TRUE;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000352 	.word	0x20000352

08000a70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000a80:	f7ff ff56 	bl	8000930 <SD_ReadyWait>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d001      	beq.n	8000a8e <SD_TxDataBlock+0x1e>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e02f      	b.n	8000aee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff feef 	bl	8000874 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	2bfd      	cmp	r3, #253	; 0xfd
 8000a9a:	d020      	beq.n	8000ade <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff01 	bl	80008a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000aa6:	f7ff ff19 	bl	80008dc <SPI_RxByte>
		SPI_RxByte();
 8000aaa:	f7ff ff17 	bl	80008dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000aae:	e00b      	b.n	8000ac8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ab0:	f7ff ff14 	bl	80008dc <SPI_RxByte>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d006      	beq.n	8000ad0 <SD_TxDataBlock+0x60>
			i++;
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b40      	cmp	r3, #64	; 0x40
 8000acc:	d9f0      	bls.n	8000ab0 <SD_TxDataBlock+0x40>
 8000ace:	e000      	b.n	8000ad2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ad0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ff02 	bl	80008dc <SPI_RxByte>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0fa      	beq.n	8000ad4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f003 031f 	and.w	r3, r3, #31
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d101      	bne.n	8000aec <SD_TxDataBlock+0x7c>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <SD_TxDataBlock+0x7e>

	return FALSE;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	6039      	str	r1, [r7, #0]
 8000b00:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b02:	f7ff ff15 	bl	8000930 <SD_ReadyWait>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d001      	beq.n	8000b10 <SD_SendCmd+0x1a>
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	e042      	b.n	8000b96 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff feae 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	0e1b      	lsrs	r3, r3, #24
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fea8 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fea2 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe9c 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe97 	bl	8000874 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b40      	cmp	r3, #64	; 0x40
 8000b4a:	d102      	bne.n	8000b52 <SD_SendCmd+0x5c>
 8000b4c:	2395      	movs	r3, #149	; 0x95
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e007      	b.n	8000b62 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b48      	cmp	r3, #72	; 0x48
 8000b56:	d102      	bne.n	8000b5e <SD_SendCmd+0x68>
 8000b58:	2387      	movs	r3, #135	; 0x87
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <SD_SendCmd+0x6c>
	else crc = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe85 	bl	8000874 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b4c      	cmp	r3, #76	; 0x4c
 8000b6e:	d101      	bne.n	8000b74 <SD_SendCmd+0x7e>
 8000b70:	f7ff feb4 	bl	80008dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000b78:	f7ff feb0 	bl	80008dc <SPI_RxByte>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000b80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da05      	bge.n	8000b94 <SD_SendCmd+0x9e>
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f1      	bne.n	8000b78 <SD_SendCmd+0x82>

	return res;
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SD_disk_initialize+0x14>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e0d1      	b.n	8000d58 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000bb4:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <SD_disk_initialize+0x2a>
 8000bc2:	4b67      	ldr	r3, [pc, #412]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	e0c6      	b.n	8000d58 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000bca:	f7ff fecb 	bl	8000964 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000bce:	f7ff fe35 	bl	800083c <SELECT>

	/* check disk type */
	type = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2040      	movs	r0, #64	; 0x40
 8000bda:	f7ff ff8c 	bl	8000af6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 80a1 	bne.w	8000d28 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000be6:	4b5f      	ldr	r3, [pc, #380]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000bee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000bf2:	2048      	movs	r0, #72	; 0x48
 8000bf4:	f7ff ff7f 	bl	8000af6 <SD_SendCmd>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d155      	bne.n	8000caa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e00c      	b.n	8000c1e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c04:	7bfc      	ldrb	r4, [r7, #15]
 8000c06:	f7ff fe69 	bl	80008dc <SPI_RxByte>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4423      	add	r3, r4
 8000c14:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d9ef      	bls.n	8000c04 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c24:	7abb      	ldrb	r3, [r7, #10]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d17e      	bne.n	8000d28 <SD_disk_initialize+0x188>
 8000c2a:	7afb      	ldrb	r3, [r7, #11]
 8000c2c:	2baa      	cmp	r3, #170	; 0xaa
 8000c2e:	d17b      	bne.n	8000d28 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c30:	2100      	movs	r1, #0
 8000c32:	2077      	movs	r0, #119	; 0x77
 8000c34:	f7ff ff5f 	bl	8000af6 <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d807      	bhi.n	8000c4e <SD_disk_initialize+0xae>
 8000c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c42:	2069      	movs	r0, #105	; 0x69
 8000c44:	f7ff ff57 	bl	8000af6 <SD_SendCmd>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1ec      	bne.n	8000c30 <SD_disk_initialize+0x90>
 8000c56:	e000      	b.n	8000c5a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c58:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d062      	beq.n	8000d28 <SD_disk_initialize+0x188>
 8000c62:	2100      	movs	r1, #0
 8000c64:	207a      	movs	r0, #122	; 0x7a
 8000c66:	f7ff ff46 	bl	8000af6 <SD_SendCmd>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d15b      	bne.n	8000d28 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e00c      	b.n	8000c90 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000c76:	7bfc      	ldrb	r4, [r7, #15]
 8000c78:	f7ff fe30 	bl	80008dc <SPI_RxByte>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4423      	add	r3, r4
 8000c86:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d9ef      	bls.n	8000c76 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000c96:	7a3b      	ldrb	r3, [r7, #8]
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SD_disk_initialize+0x104>
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	e000      	b.n	8000ca6 <SD_disk_initialize+0x106>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]
 8000ca8:	e03e      	b.n	8000d28 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000caa:	2100      	movs	r1, #0
 8000cac:	2077      	movs	r0, #119	; 0x77
 8000cae:	f7ff ff22 	bl	8000af6 <SD_SendCmd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d808      	bhi.n	8000cca <SD_disk_initialize+0x12a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2069      	movs	r0, #105	; 0x69
 8000cbc:	f7ff ff1b 	bl	8000af6 <SD_SendCmd>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d801      	bhi.n	8000cca <SD_disk_initialize+0x12a>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SD_disk_initialize+0x12c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d10e      	bne.n	8000cf2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2077      	movs	r0, #119	; 0x77
 8000cd8:	f7ff ff0d 	bl	8000af6 <SD_SendCmd>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d80e      	bhi.n	8000d00 <SD_disk_initialize+0x160>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2069      	movs	r0, #105	; 0x69
 8000ce6:	f7ff ff06 	bl	8000af6 <SD_SendCmd>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <SD_disk_initialize+0x160>
 8000cf0:	e00c      	b.n	8000d0c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2041      	movs	r0, #65	; 0x41
 8000cf6:	f7ff fefe 	bl	8000af6 <SD_SendCmd>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e2      	bne.n	8000cce <SD_disk_initialize+0x12e>
 8000d08:	e000      	b.n	8000d0c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d0a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <SD_disk_initialize+0x184>
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	2050      	movs	r0, #80	; 0x50
 8000d1a:	f7ff feec 	bl	8000af6 <SD_SendCmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SD_disk_initialize+0x188>
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d28:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <SD_disk_initialize+0x1c8>)
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d2e:	f7ff fd93 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000d32:	f7ff fdd3 	bl	80008dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e001      	b.n	8000d52 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000d4e:	f7ff fe4b 	bl	80009e8 <SD_PowerOff>
	}

	return Stat;
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000352 	.word	0x20000352
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SD_disk_status+0x14>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e002      	b.n	8000d86 <SD_disk_status+0x1a>
	return Stat;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <SD_disk_status+0x24>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000000 	.word	0x20000000

08000d94 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <SD_disk_read+0x1c>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <SD_disk_read+0x20>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e051      	b.n	8000e58 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <SD_disk_read+0xcc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SD_disk_read+0x32>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e048      	b.n	8000e58 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <SD_disk_read+0xd0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <SD_disk_read+0x44>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dd8:	f7ff fd30 	bl	800083c <SELECT>

	if (count == 1)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d111      	bne.n	8000e06 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2051      	movs	r0, #81	; 0x51
 8000de6:	f7ff fe86 	bl	8000af6 <SD_SendCmd>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d129      	bne.n	8000e44 <SD_disk_read+0xb0>
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f7ff fe0d 	bl	8000a14 <SD_RxDataBlock>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d021      	beq.n	8000e44 <SD_disk_read+0xb0>
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	e01e      	b.n	8000e44 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2052      	movs	r0, #82	; 0x52
 8000e0a:	f7ff fe74 	bl	8000af6 <SD_SendCmd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d117      	bne.n	8000e44 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff fdfb 	bl	8000a14 <SD_RxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00a      	beq.n	8000e3a <SD_disk_read+0xa6>
				buff += 512;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e2a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1ed      	bne.n	8000e14 <SD_disk_read+0x80>
 8000e38:	e000      	b.n	8000e3c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e3a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	204c      	movs	r0, #76	; 0x4c
 8000e40:	f7ff fe59 	bl	8000af6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000e44:	f7ff fd08 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000e48:	f7ff fd48 	bl	80008dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf14      	ite	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	2300      	moveq	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	2000010c 	.word	0x2000010c

08000e68 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <SD_disk_write+0x1c>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <SD_disk_write+0x20>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e06b      	b.n	8000f60 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <SD_disk_write+0x100>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SD_disk_write+0x32>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e062      	b.n	8000f60 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <SD_disk_write+0x100>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SD_disk_write+0x44>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e059      	b.n	8000f60 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <SD_disk_write+0x104>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <SD_disk_write+0x56>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ebe:	f7ff fcbd 	bl	800083c <SELECT>

	if (count == 1)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d110      	bne.n	8000eea <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	2058      	movs	r0, #88	; 0x58
 8000ecc:	f7ff fe13 	bl	8000af6 <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d13a      	bne.n	8000f4c <SD_disk_write+0xe4>
 8000ed6:	21fe      	movs	r1, #254	; 0xfe
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f7ff fdc9 	bl	8000a70 <SD_TxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d033      	beq.n	8000f4c <SD_disk_write+0xe4>
			count = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	e030      	b.n	8000f4c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <SD_disk_write+0x104>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2077      	movs	r0, #119	; 0x77
 8000efa:	f7ff fdfc 	bl	8000af6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	2057      	movs	r0, #87	; 0x57
 8000f02:	f7ff fdf8 	bl	8000af6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2059      	movs	r0, #89	; 0x59
 8000f0a:	f7ff fdf4 	bl	8000af6 <SD_SendCmd>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11b      	bne.n	8000f4c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f14:	21fc      	movs	r1, #252	; 0xfc
 8000f16:	68b8      	ldr	r0, [r7, #8]
 8000f18:	f7ff fdaa 	bl	8000a70 <SD_TxDataBlock>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00a      	beq.n	8000f38 <SD_disk_write+0xd0>
				buff += 512;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1ee      	bne.n	8000f14 <SD_disk_write+0xac>
 8000f36:	e000      	b.n	8000f3a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f38:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000f3a:	21fd      	movs	r1, #253	; 0xfd
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd97 	bl	8000a70 <SD_TxDataBlock>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <SD_disk_write+0xe4>
			{
				count = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000f4c:	f7ff fc84 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000f50:	f7ff fcc4 	bl	80008dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	2000010c 	.word	0x2000010c

08000f70 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b08b      	sub	sp, #44	; 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	603a      	str	r2, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SD_disk_ioctl+0x1e>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e115      	b.n	80011ba <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d124      	bne.n	8000fe4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d012      	beq.n	8000fc8 <SD_disk_ioctl+0x58>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	dc1a      	bgt.n	8000fdc <SD_disk_ioctl+0x6c>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <SD_disk_ioctl+0x40>
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d006      	beq.n	8000fbc <SD_disk_ioctl+0x4c>
 8000fae:	e015      	b.n	8000fdc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000fb0:	f7ff fd1a 	bl	80009e8 <SD_PowerOff>
			res = RES_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fba:	e0fc      	b.n	80011b6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000fbc:	f7ff fcd2 	bl	8000964 <SD_PowerOn>
			res = RES_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fc6:	e0f6      	b.n	80011b6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	1c5c      	adds	r4, r3, #1
 8000fcc:	f7ff fd18 	bl	8000a00 <SD_CheckPower>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fda:	e0ec      	b.n	80011b6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe2:	e0e8      	b.n	80011b6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <SD_disk_ioctl+0x254>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SD_disk_ioctl+0x86>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e0e1      	b.n	80011ba <SD_disk_ioctl+0x24a>

		SELECT();
 8000ff6:	f7ff fc21 	bl	800083c <SELECT>

		switch (ctrl)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b0d      	cmp	r3, #13
 8000ffe:	f200 80cb 	bhi.w	8001198 <SD_disk_ioctl+0x228>
 8001002:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <SD_disk_ioctl+0x98>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001103 	.word	0x08001103
 800100c:	08001041 	.word	0x08001041
 8001010:	080010f3 	.word	0x080010f3
 8001014:	08001199 	.word	0x08001199
 8001018:	08001199 	.word	0x08001199
 800101c:	08001199 	.word	0x08001199
 8001020:	08001199 	.word	0x08001199
 8001024:	08001199 	.word	0x08001199
 8001028:	08001199 	.word	0x08001199
 800102c:	08001199 	.word	0x08001199
 8001030:	08001199 	.word	0x08001199
 8001034:	08001115 	.word	0x08001115
 8001038:	08001139 	.word	0x08001139
 800103c:	0800115d 	.word	0x0800115d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001040:	2100      	movs	r1, #0
 8001042:	2049      	movs	r0, #73	; 0x49
 8001044:	f7ff fd57 	bl	8000af6 <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 80a8 	bne.w	80011a0 <SD_disk_ioctl+0x230>
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2110      	movs	r1, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fcdc 	bl	8000a14 <SD_RxDataBlock>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 809e 	beq.w	80011a0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	099b      	lsrs	r3, r3, #6
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10e      	bne.n	800108c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	b29a      	uxth	r2, r3
 8001072:	7d3b      	ldrb	r3, [r7, #20]
 8001074:	b29b      	uxth	r3, r3
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	029a      	lsls	r2, r3, #10
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e02e      	b.n	80010ea <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800108c:	7c7b      	ldrb	r3, [r7, #17]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	b2da      	uxtb	r2, r3
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	09db      	lsrs	r3, r3, #7
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0306 	and.w	r3, r3, #6
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3302      	adds	r3, #2
 80010b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80010b4:	7d3b      	ldrb	r3, [r7, #20]
 80010b6:	099b      	lsrs	r3, r3, #6
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	7cbb      	ldrb	r3, [r7, #18]
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80010dc:	8bfa      	ldrh	r2, [r7, #30]
 80010de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e2:	3b09      	subs	r3, #9
 80010e4:	409a      	lsls	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80010f0:	e056      	b.n	80011a0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001100:	e055      	b.n	80011ae <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001102:	f7ff fc15 	bl	8000930 <SD_ReadyWait>
 8001106:	4603      	mov	r3, r0
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d14b      	bne.n	80011a4 <SD_disk_ioctl+0x234>
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001112:	e047      	b.n	80011a4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001114:	2100      	movs	r1, #0
 8001116:	2049      	movs	r0, #73	; 0x49
 8001118:	f7ff fced 	bl	8000af6 <SD_SendCmd>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d142      	bne.n	80011a8 <SD_disk_ioctl+0x238>
 8001122:	2110      	movs	r1, #16
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	f7ff fc75 	bl	8000a14 <SD_RxDataBlock>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d03b      	beq.n	80011a8 <SD_disk_ioctl+0x238>
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001136:	e037      	b.n	80011a8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001138:	2100      	movs	r1, #0
 800113a:	204a      	movs	r0, #74	; 0x4a
 800113c:	f7ff fcdb 	bl	8000af6 <SD_SendCmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d132      	bne.n	80011ac <SD_disk_ioctl+0x23c>
 8001146:	2110      	movs	r1, #16
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f7ff fc63 	bl	8000a14 <SD_RxDataBlock>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02b      	beq.n	80011ac <SD_disk_ioctl+0x23c>
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800115a:	e027      	b.n	80011ac <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800115c:	2100      	movs	r1, #0
 800115e:	207a      	movs	r0, #122	; 0x7a
 8001160:	f7ff fcc9 	bl	8000af6 <SD_SendCmd>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001170:	e00b      	b.n	800118a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001172:	6a3c      	ldr	r4, [r7, #32]
 8001174:	1c63      	adds	r3, r4, #1
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	f7ff fbb0 	bl	80008dc <SPI_RxByte>
 800117c:	4603      	mov	r3, r0
 800117e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001184:	3301      	adds	r3, #1
 8001186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800118a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800118e:	2b03      	cmp	r3, #3
 8001190:	d9ef      	bls.n	8001172 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001198:	2304      	movs	r3, #4
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800119e:	e006      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a0:	bf00      	nop
 80011a2:	e004      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a4:	bf00      	nop
 80011a6:	e002      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a8:	bf00      	nop
 80011aa:	e000      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011ac:	bf00      	nop
		}

		DESELECT();
 80011ae:	f7ff fb53 	bl	8000858 <DESELECT>
		SPI_RxByte();
 80011b2:	f7ff fb93 	bl	80008dc <SPI_RxByte>
	}

	return res;
 80011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	372c      	adds	r7, #44	; 0x2c
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	f5ad 5d64 	sub.w	sp, sp, #14592	; 0x3900
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f001 f874 	bl	80022be <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f88d 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    // ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f000 fa5f 	bl	800169c <MX_GPIO_Init>
  MX_ADC_Init();
 80011de:	f000 f8ef 	bl	80013c0 <MX_ADC_Init>
  MX_I2C1_Init();
 80011e2:	f000 f945 	bl	8001470 <MX_I2C1_Init>
  MX_SPI2_Init();
 80011e6:	f000 f9f9 	bl	80015dc <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80011ea:	f000 fa2d 	bl	8001648 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80011ee:	f006 fadd 	bl	80077ac <MX_FATFS_Init>
  MX_RTC_Init();
 80011f2:	f000 f96b 	bl	80014cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

    muxInit();
 80011f6:	f000 fba7 	bl	8001948 <muxInit>

//    read3V3();
    // ITM_Port32(31) = 2;

    // int voltage_thresh_count = 0;
    int pressure_data[NUM_NODES] = {0};
 80011fa:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 80011fe:	f103 0308 	add.w	r3, r3, #8
 8001202:	3b04      	subs	r3, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800120a:	461a      	mov	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	f009 ff69 	bl	800b0e4 <memset>
    int pressure_data_offsets[NUM_NODES] = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	3b04      	subs	r3, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800121e:	461a      	mov	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f009 ff5f 	bl	800b0e4 <memset>

    HAL_Delay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122a:	f001 f8b7 	bl	800239c <HAL_Delay>

//    HAL_RTC_GetDate(&hrtc, &nDate, RTC_FORMAT_BIN);

    /* Mount the SD card */
//    fs = malloc(sizeof (FATFS));           /* Get work area for the volume */
    fr = f_mount(&fs, "", 0);
 800122e:	2200      	movs	r2, #0
 8001230:	492c      	ldr	r1, [pc, #176]	; (80012e4 <main+0x11c>)
 8001232:	482d      	ldr	r0, [pc, #180]	; (80012e8 <main+0x120>)
 8001234:	f008 fcf4 	bl	8009c20 <f_mount>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <main+0x124>)
 800123e:	701a      	strb	r2, [r3, #0]
//    fr = f_sync(&fil);

//    sprintf(date, "%02u-%02u-%02u.csv", nDate.Month, nDate.Date, nDate.Year);

    HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f001 f8aa 	bl	800239c <HAL_Delay>

//    calibrate(pressure_data_offsets, sizeof(pressure_data_offsets)/sizeof(*pressure_data_offsets));

//    HAL_Delay(1000);

    uint16_t start_time = HAL_GetTick();
 8001248:	f001 f89e 	bl	8002388 <HAL_GetTick>
 800124c:	4603      	mov	r3, r0
 800124e:	f507 5264 	add.w	r2, r7, #14592	; 0x3900
 8001252:	f102 0206 	add.w	r2, r2, #6
 8001256:	8013      	strh	r3, [r2, #0]
    /* USER CODE BEGIN 3 */
      /* Reset the pressure data array */
//      memcpy(pressure_data, pressure_data_offsets, sizeof(pressure_data));

      /* Sample all nodes on mat */
      sampleMat(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8001258:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 800125c:	f103 0308 	add.w	r3, r3, #8
 8001260:	3b04      	subs	r3, #4
 8001262:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fce4 	bl	8001c34 <sampleMat>

      /* Write to SD card */
      logData2SDCard(pressure_data, NUM_NODES, true);
 800126c:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001270:	f103 0308 	add.w	r3, r3, #8
 8001274:	3b04      	subs	r3, #4
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fb03 	bl	8001888 <logData2SDCard>

      // TODO: Check timer. If pass 2 minutes, open SD card file, read data and write to UART
      if (checkTime(start_time)) {
 8001282:	f507 5364 	add.w	r3, r7, #14592	; 0x3900
 8001286:	f103 0306 	add.w	r3, r3, #6
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd8b 	bl	8001da8 <checkTime>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0df      	beq.n	8001258 <main+0x90>
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <main+0x128>)
 80012a0:	f002 f812 	bl	80032c8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f001 f878 	bl	800239c <HAL_Delay>

		// Write calibration data to SD card
		logData2SDCard(pressure_data_offsets, NUM_NODES, false);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	3b04      	subs	r3, #4
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 fae5 	bl	8001888 <logData2SDCard>

		// Read SD card and send data to ESP8266 via UART
//		readSDCardSendUART();

	    /* Unmount the default drive */
		fr = f_mount(0, "", 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	4908      	ldr	r1, [pc, #32]	; (80012e4 <main+0x11c>)
 80012c2:	2000      	movs	r0, #0
 80012c4:	f008 fcac 	bl	8009c20 <f_mount>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <main+0x124>)
 80012ce:	701a      	strb	r2, [r3, #0]
//	    free(fs);                              /* Here the work area can be discarded */


		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <main+0x128>)
 80012d8:	f001 fff6 	bl	80032c8 <HAL_GPIO_WritePin>

	    exit(0);
 80012dc:	2000      	movs	r0, #0
 80012de:	f009 fec9 	bl	800b074 <exit>
 80012e2:	bf00      	nop
 80012e4:	0800b980 	.word	0x0800b980
 80012e8:	200003f4 	.word	0x200003f4
 80012ec:	2000150c 	.word	0x2000150c
 80012f0:	40020800 	.word	0x40020800

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2234      	movs	r2, #52	; 0x34
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f009 feee 	bl	800b0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <SystemClock_Config+0xc8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800132a:	4a24      	ldr	r2, [pc, #144]	; (80013bc <SystemClock_Config+0xc8>)
 800132c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001330:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001332:	230b      	movs	r3, #11
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001336:	2301      	movs	r3, #1
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	2301      	movs	r3, #1
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133e:	2310      	movs	r3, #16
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8001350:	2300      	movs	r3, #0
 8001352:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001354:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001358:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fdd0 	bl	8004f04 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800136a:	f000 fd31 	bl	8001dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2303      	movs	r3, #3
 8001374:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2101      	movs	r1, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f8eb 	bl	8005564 <HAL_RCC_ClockConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001394:	f000 fd1c 	bl	8001dd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001398:	2301      	movs	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800139c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fb49 	bl	8005a3c <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013b0:	f000 fd0e 	bl	8001dd0 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3758      	adds	r7, #88	; 0x58
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_ADC_Init+0xa8>)
 80013d2:	4a26      	ldr	r2, [pc, #152]	; (800146c <MX_ADC_Init+0xac>)
 80013d4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <MX_ADC_Init+0xa8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_ADC_Init+0xa8>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_ADC_Init+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_ADC_Init+0xa8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_ADC_Init+0xa8>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_ADC_Init+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_ADC_Init+0xa8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_ADC_Init+0xa8>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_ADC_Init+0xa8>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_ADC_Init+0xa8>)
 8001410:	2201      	movs	r2, #1
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_ADC_Init+0xa8>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_ADC_Init+0xa8>)
 800141e:	2210      	movs	r2, #16
 8001420:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_ADC_Init+0xa8>)
 8001424:	2200      	movs	r2, #0
 8001426:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_ADC_Init+0xa8>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_ADC_Init+0xa8>)
 8001432:	f000 ffd5 	bl	80023e0 <HAL_ADC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 800143c:	f000 fcc8 	bl	8001dd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001440:	2309      	movs	r3, #9
 8001442:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001444:	2301      	movs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001448:	2304      	movs	r3, #4
 800144a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC_Init+0xa8>)
 8001452:	f001 fa33 	bl	80028bc <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800145c:	f000 fcb8 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20001534 	.word	0x20001534
 800146c:	40012400 	.word	0x40012400

08001470 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001476:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <MX_I2C1_Init+0x54>)
 8001478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_I2C1_Init+0x50>)
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_I2C1_Init+0x58>)
 800147e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_I2C1_Init+0x50>)
 800148e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001492:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_I2C1_Init+0x50>)
 80014ae:	f001 ff23 	bl	80032f8 <HAL_I2C_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b8:	f000 fc8a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000142c 	.word	0x2000142c
 80014c4:	40005400 	.word	0x40005400
 80014c8:	000186a0 	.word	0x000186a0

080014cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <MX_RTC_Init+0x108>)
 80014f6:	4a38      	ldr	r2, [pc, #224]	; (80015d8 <MX_RTC_Init+0x10c>)
 80014f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014fa:	4b36      	ldr	r3, [pc, #216]	; (80015d4 <MX_RTC_Init+0x108>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_RTC_Init+0x108>)
 8001502:	227f      	movs	r2, #127	; 0x7f
 8001504:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001506:	4b33      	ldr	r3, [pc, #204]	; (80015d4 <MX_RTC_Init+0x108>)
 8001508:	22ff      	movs	r2, #255	; 0xff
 800150a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_RTC_Init+0x108>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <MX_RTC_Init+0x108>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_RTC_Init+0x108>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800151e:	482d      	ldr	r0, [pc, #180]	; (80015d4 <MX_RTC_Init+0x108>)
 8001520:	f004 fb96 	bl	8005c50 <HAL_RTC_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800152a:	f000 fc51 	bl	8001dd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 800152e:	2316      	movs	r3, #22
 8001530:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <MX_RTC_Init+0x108>)
 8001552:	f004 fc07 	bl	8005d64 <HAL_RTC_SetTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800155c:	f000 fc38 	bl	8001dd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001560:	2305      	movs	r3, #5
 8001562:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8001566:	2303      	movs	r3, #3
 8001568:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 800156c:	230b      	movs	r3, #11
 800156e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 8001572:	2316      	movs	r3, #22
 8001574:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4814      	ldr	r0, [pc, #80]	; (80015d4 <MX_RTC_Init+0x108>)
 8001582:	f004 fcf3 	bl	8005f6c <HAL_RTC_SetDate>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800158c:	f000 fc20 	bl	8001dd0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 8001590:	2306      	movs	r3, #6
 8001592:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80015b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b4:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_RTC_Init+0x108>)
 80015be:	f004 fd73 	bl	80060a8 <HAL_RTC_SetAlarm_IT>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80015c8:	f000 fc02 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3730      	adds	r7, #48	; 0x30
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200014ec 	.word	0x200014ec
 80015d8:	40002800 	.word	0x40002800

080015dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_SPI2_Init+0x64>)
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <MX_SPI2_Init+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_SPI2_Init+0x64>)
 80015e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_SPI2_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_SPI2_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_SPI2_Init+0x64>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_SPI2_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_SPI2_Init+0x64>)
 8001608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_SPI2_Init+0x64>)
 8001610:	2210      	movs	r2, #16
 8001612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_SPI2_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <MX_SPI2_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_SPI2_Init+0x64>)
 8001628:	220a      	movs	r2, #10
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_SPI2_Init+0x64>)
 800162e:	f004 ff43 	bl	80064b8 <HAL_SPI_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001638:	f000 fbca 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000358 	.word	0x20000358
 8001644:	40003800 	.word	0x40003800

08001648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_USART3_UART_Init+0x50>)
 8001650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800167e:	4805      	ldr	r0, [pc, #20]	; (8001694 <MX_USART3_UART_Init+0x4c>)
 8001680:	f005 fc42 	bl	8006f08 <HAL_UART_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800168a:	f000 fba1 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200003b0 	.word	0x200003b0
 8001698:	40004800 	.word	0x40004800

0800169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a54      	ldr	r2, [pc, #336]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b52      	ldr	r3, [pc, #328]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a4e      	ldr	r2, [pc, #312]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b4c      	ldr	r3, [pc, #304]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b49      	ldr	r3, [pc, #292]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	61d3      	str	r3, [r2, #28]
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <MX_GPIO_Init+0x16c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <MX_GPIO_Init+0x16c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <MX_GPIO_Init+0x16c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <MX_GPIO_Init+0x16c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a3c      	ldr	r2, [pc, #240]	; (8001808 <MX_GPIO_Init+0x16c>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <MX_GPIO_Init+0x16c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 800172a:	2200      	movs	r2, #0
 800172c:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001730:	4836      	ldr	r0, [pc, #216]	; (800180c <MX_GPIO_Init+0x170>)
 8001732:	f001 fdc9 	bl	80032c8 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001736:	2200      	movs	r2, #0
 8001738:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800173c:	4834      	ldr	r0, [pc, #208]	; (8001810 <MX_GPIO_Init+0x174>)
 800173e:	f001 fdc3 	bl	80032c8 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001742:	2200      	movs	r2, #0
 8001744:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001748:	4832      	ldr	r0, [pc, #200]	; (8001814 <MX_GPIO_Init+0x178>)
 800174a:	f001 fdbd 	bl	80032c8 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2104      	movs	r1, #4
 8001752:	4831      	ldr	r0, [pc, #196]	; (8001818 <MX_GPIO_Init+0x17c>)
 8001754:	f001 fdb8 	bl	80032c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001758:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 800175c:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <MX_GPIO_Init+0x170>)
 8001772:	f001 fc29 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001776:	f241 03f7 	movw	r3, #4343	; 0x10f7
 800177a:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4820      	ldr	r0, [pc, #128]	; (8001810 <MX_GPIO_Init+0x174>)
 8001790:	f001 fc1a 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001794:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001798:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4819      	ldr	r0, [pc, #100]	; (8001814 <MX_GPIO_Init+0x178>)
 80017ae:	f001 fc0b 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80017b2:	2340      	movs	r3, #64	; 0x40
 80017b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <MX_GPIO_Init+0x170>)
 80017c6:	f001 fbff 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <MX_GPIO_Init+0x174>)
 80017e0:	f001 fbf2 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 80017e4:	2304      	movs	r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_GPIO_Init+0x17c>)
 80017fc:	f001 fbe4 	bl	8002fc8 <HAL_GPIO_Init>

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	40020800 	.word	0x40020800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020c00 	.word	0x40020c00

0800181c <writeCurrentTime>:
    * @brief
    * @param  :
    * @retval :
    */
void writeCurrentTime(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af02      	add	r7, sp, #8
    char time[10];

    HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 8001822:	2200      	movs	r2, #0
 8001824:	4912      	ldr	r1, [pc, #72]	; (8001870 <writeCurrentTime+0x54>)
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <writeCurrentTime+0x58>)
 8001828:	f004 fb50 	bl	8005ecc <HAL_RTC_GetTime>
    sprintf(time, "%02u:%02u:%02u,", nTime.Hours, nTime.Minutes, nTime.Seconds);
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <writeCurrentTime+0x54>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <writeCurrentTime+0x54>)
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	4619      	mov	r1, r3
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <writeCurrentTime+0x54>)
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	1d38      	adds	r0, r7, #4
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	460b      	mov	r3, r1
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <writeCurrentTime+0x5c>)
 8001844:	f009 fc56 	bl	800b0f4 <siprintf>
    f_lseek(&fil, f_size(&fil));
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <writeCurrentTime+0x60>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4619      	mov	r1, r3
 800184e:	480b      	ldr	r0, [pc, #44]	; (800187c <writeCurrentTime+0x60>)
 8001850:	f008 fe34 	bl	800a4bc <f_lseek>
    fr = f_printf( &fil, "%s", time);
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	461a      	mov	r2, r3
 8001858:	4909      	ldr	r1, [pc, #36]	; (8001880 <writeCurrentTime+0x64>)
 800185a:	4808      	ldr	r0, [pc, #32]	; (800187c <writeCurrentTime+0x60>)
 800185c:	f009 f8c8 	bl	800a9f0 <f_printf>
 8001860:	4603      	mov	r3, r0
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b07      	ldr	r3, [pc, #28]	; (8001884 <writeCurrentTime+0x68>)
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20001510 	.word	0x20001510
 8001874:	200014ec 	.word	0x200014ec
 8001878:	0800b984 	.word	0x0800b984
 800187c:	20001588 	.word	0x20001588
 8001880:	0800b994 	.word	0x0800b994
 8001884:	2000150c 	.word	0x2000150c

08001888 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int data[], int len, bool write_timestamp)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	4613      	mov	r3, r2
 8001894:	71fb      	strb	r3, [r7, #7]
    /*Open the file*/
    fr = f_open(&fil, file_name, FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8001896:	2213      	movs	r2, #19
 8001898:	4926      	ldr	r1, [pc, #152]	; (8001934 <logData2SDCard+0xac>)
 800189a:	4827      	ldr	r0, [pc, #156]	; (8001938 <logData2SDCard+0xb0>)
 800189c:	f008 fa06 	bl	8009cac <f_open>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <logData2SDCard+0xb4>)
 80018a6:	701a      	strb	r2, [r3, #0]

    /* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 80018a8:	f242 31a9 	movw	r1, #9129	; 0x23a9
 80018ac:	4822      	ldr	r0, [pc, #136]	; (8001938 <logData2SDCard+0xb0>)
 80018ae:	f008 fe05 	bl	800a4bc <f_lseek>
    f_lseek(&fil, f_size(&fil));
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <logData2SDCard+0xb0>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4619      	mov	r1, r3
 80018b8:	481f      	ldr	r0, [pc, #124]	; (8001938 <logData2SDCard+0xb0>)
 80018ba:	f008 fdff 	bl	800a4bc <f_lseek>

    if (write_timestamp) {
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <logData2SDCard+0x40>
    	writeCurrentTime();
 80018c4:	f7ff ffaa 	bl	800181c <writeCurrentTime>
    }

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; ++node)
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	e010      	b.n	80018f0 <logData2SDCard+0x68>
    {
        fr = f_printf(&fil, "%d,", data[node]);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4919      	ldr	r1, [pc, #100]	; (8001940 <logData2SDCard+0xb8>)
 80018dc:	4816      	ldr	r0, [pc, #88]	; (8001938 <logData2SDCard+0xb0>)
 80018de:	f009 f887 	bl	800a9f0 <f_printf>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <logData2SDCard+0xb4>)
 80018e8:	701a      	strb	r2, [r3, #0]
    for(int node = 0; node < len - 1; ++node)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3301      	adds	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbe9      	blt.n	80018ce <logData2SDCard+0x46>
    }

    fr = f_printf(&fil, "%d\n", data[len - 1]);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001900:	3b01      	subs	r3, #1
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	490d      	ldr	r1, [pc, #52]	; (8001944 <logData2SDCard+0xbc>)
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <logData2SDCard+0xb0>)
 8001910:	f009 f86e 	bl	800a9f0 <f_printf>
 8001914:	4603      	mov	r3, r0
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <logData2SDCard+0xb4>)
 800191a:	701a      	strb	r2, [r3, #0]

	/* Close the file */
	fr = f_close(&fil);
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <logData2SDCard+0xb0>)
 800191e:	f008 fda3 	bl	800a468 <f_close>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <logData2SDCard+0xb4>)
 8001928:	701a      	strb	r2, [r3, #0]


}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000004 	.word	0x20000004
 8001938:	20001588 	.word	0x20001588
 800193c:	2000150c 	.word	0x2000150c
 8001940:	0800b998 	.word	0x0800b998
 8001944:	0800b99c 	.word	0x0800b99c

08001948 <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2101      	movs	r1, #1
 8001952:	4819      	ldr	r0, [pc, #100]	; (80019b8 <muxInit+0x70>)
 8001954:	f001 fcb8 	bl	80032c8 <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001958:	2300      	movs	r3, #0
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	e00e      	b.n	800197c <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800195e:	4a17      	ldr	r2, [pc, #92]	; (80019bc <muxInit+0x74>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001966:	4916      	ldr	r1, [pc, #88]	; (80019c0 <muxInit+0x78>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800196e:	4619      	mov	r1, r3
 8001970:	4610      	mov	r0, r2
 8001972:	f000 f935 	bl	8001be0 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3301      	adds	r3, #1
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b03      	cmp	r3, #3
 8001980:	dded      	ble.n	800195e <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001982:	2300      	movs	r3, #0
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	e00e      	b.n	80019a6 <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <muxInit+0x7c>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001990:	490d      	ldr	r1, [pc, #52]	; (80019c8 <muxInit+0x80>)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 f920 	bl	8001be0 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	dded      	ble.n	8001988 <muxInit+0x40>
	}
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020800 	.word	0x40020800
 80019bc:	20000024 	.word	0x20000024
 80019c0:	0800b9e8 	.word	0x0800b9e8
 80019c4:	20000034 	.word	0x20000034
 80019c8:	0800b9f8 	.word	0x0800b9f8

080019cc <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	f200 80eb 	bhi.w	8001bb4 <selectChannel+0x1e8>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <selectChannel+0x18>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a05 	.word	0x08001a05
 80019e8:	08001a3b 	.word	0x08001a3b
 80019ec:	08001a71 	.word	0x08001a71
 80019f0:	08001aa7 	.word	0x08001aa7
 80019f4:	08001add 	.word	0x08001add
 80019f8:	08001b13 	.word	0x08001b13
 80019fc:	08001b49 	.word	0x08001b49
 8001a00:	08001b7f 	.word	0x08001b7f
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	486b      	ldr	r0, [pc, #428]	; (8001bbc <selectChannel+0x1f0>)
 8001a10:	f001 fc5a 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3304      	adds	r3, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4866      	ldr	r0, [pc, #408]	; (8001bbc <selectChannel+0x1f0>)
 8001a22:	f001 fc51 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3308      	adds	r3, #8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	4619      	mov	r1, r3
 8001a32:	4862      	ldr	r0, [pc, #392]	; (8001bbc <selectChannel+0x1f0>)
 8001a34:	f001 fc48 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001a38:	e0bc      	b.n	8001bb4 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	2201      	movs	r2, #1
 8001a42:	4619      	mov	r1, r3
 8001a44:	485d      	ldr	r0, [pc, #372]	; (8001bbc <selectChannel+0x1f0>)
 8001a46:	f001 fc3f 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4859      	ldr	r0, [pc, #356]	; (8001bbc <selectChannel+0x1f0>)
 8001a58:	f001 fc36 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4854      	ldr	r0, [pc, #336]	; (8001bbc <selectChannel+0x1f0>)
 8001a6a:	f001 fc2d 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001a6e:	e0a1      	b.n	8001bb4 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4850      	ldr	r0, [pc, #320]	; (8001bbc <selectChannel+0x1f0>)
 8001a7c:	f001 fc24 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	3304      	adds	r3, #4
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	484b      	ldr	r0, [pc, #300]	; (8001bbc <selectChannel+0x1f0>)
 8001a8e:	f001 fc1b 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3308      	adds	r3, #8
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4847      	ldr	r0, [pc, #284]	; (8001bbc <selectChannel+0x1f0>)
 8001aa0:	f001 fc12 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001aa4:	e086      	b.n	8001bb4 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	2201      	movs	r2, #1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4842      	ldr	r0, [pc, #264]	; (8001bbc <selectChannel+0x1f0>)
 8001ab2:	f001 fc09 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	483e      	ldr	r0, [pc, #248]	; (8001bbc <selectChannel+0x1f0>)
 8001ac4:	f001 fc00 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	3308      	adds	r3, #8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4839      	ldr	r0, [pc, #228]	; (8001bbc <selectChannel+0x1f0>)
 8001ad6:	f001 fbf7 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001ada:	e06b      	b.n	8001bb4 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4835      	ldr	r0, [pc, #212]	; (8001bbc <selectChannel+0x1f0>)
 8001ae8:	f001 fbee 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3304      	adds	r3, #4
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2200      	movs	r2, #0
 8001af6:	4619      	mov	r1, r3
 8001af8:	4830      	ldr	r0, [pc, #192]	; (8001bbc <selectChannel+0x1f0>)
 8001afa:	f001 fbe5 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	3308      	adds	r3, #8
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	4619      	mov	r1, r3
 8001b0a:	482c      	ldr	r0, [pc, #176]	; (8001bbc <selectChannel+0x1f0>)
 8001b0c:	f001 fbdc 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001b10:	e050      	b.n	8001bb4 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4827      	ldr	r0, [pc, #156]	; (8001bbc <selectChannel+0x1f0>)
 8001b1e:	f001 fbd3 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	3304      	adds	r3, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4823      	ldr	r0, [pc, #140]	; (8001bbc <selectChannel+0x1f0>)
 8001b30:	f001 fbca 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3308      	adds	r3, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4619      	mov	r1, r3
 8001b40:	481e      	ldr	r0, [pc, #120]	; (8001bbc <selectChannel+0x1f0>)
 8001b42:	f001 fbc1 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001b46:	e035      	b.n	8001bb4 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	481a      	ldr	r0, [pc, #104]	; (8001bbc <selectChannel+0x1f0>)
 8001b54:	f001 fbb8 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	4619      	mov	r1, r3
 8001b64:	4815      	ldr	r0, [pc, #84]	; (8001bbc <selectChannel+0x1f0>)
 8001b66:	f001 fbaf 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2201      	movs	r2, #1
 8001b74:	4619      	mov	r1, r3
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <selectChannel+0x1f0>)
 8001b78:	f001 fba6 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001b7c:	e01a      	b.n	8001bb4 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	2201      	movs	r2, #1
 8001b86:	4619      	mov	r1, r3
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <selectChannel+0x1f0>)
 8001b8a:	f001 fb9d 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	3304      	adds	r3, #4
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2201      	movs	r2, #1
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4808      	ldr	r0, [pc, #32]	; (8001bbc <selectChannel+0x1f0>)
 8001b9c:	f001 fb94 	bl	80032c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <selectChannel+0x1f0>)
 8001bae:	f001 fb8b 	bl	80032c8 <HAL_GPIO_WritePin>
			break;
 8001bb2:	bf00      	nop
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f001 fb78 	bl	80032c8 <HAL_GPIO_WritePin>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2201      	movs	r2, #1
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 fb68 	bl	80032c8 <HAL_GPIO_WritePin>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
    // ADCSelectCH9();
    HAL_ADC_Start(&hadc);
 8001c06:	480a      	ldr	r0, [pc, #40]	; (8001c30 <readPressure+0x30>)
 8001c08:	f000 fd30 	bl	800266c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <readPressure+0x30>)
 8001c12:	f000 fdb7 	bl	8002784 <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 8001c16:	4806      	ldr	r0, [pc, #24]	; (8001c30 <readPressure+0x30>)
 8001c18:	f000 fe44 	bl	80028a4 <HAL_ADC_GetValue>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 8001c20:	4803      	ldr	r0, [pc, #12]	; (8001c30 <readPressure+0x30>)
 8001c22:	f000 fd83 	bl	800272c <HAL_ADC_Stop>
    return data;
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20001534 	.word	0x20001534

08001c34 <sampleMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void sampleMat(int data[], int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    int array_cnt = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (len != NUM_NODES) 
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 8001c48:	f040 809e 	bne.w	8001d88 <sampleMat+0x154>
    {
        /* Wrongly sized array */ 
        return;
    }

    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c50:	e095      	b.n	8001d7e <sampleMat+0x14a>
    {
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001c52:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <sampleMat+0x15c>)
 8001c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c5a:	494e      	ldr	r1, [pc, #312]	; (8001d94 <sampleMat+0x160>)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4610      	mov	r0, r2
 8001c66:	f7ff ffab 	bl	8001bc0 <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	e074      	b.n	8001d5a <sampleMat+0x126>
        {
			selectChannel(pwr_sel, pwrMuxSelect);
 8001c70:	4949      	ldr	r1, [pc, #292]	; (8001d98 <sampleMat+0x164>)
 8001c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c74:	f7ff feaa 	bl	80019cc <selectChannel>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
 8001c7c:	e067      	b.n	8001d4e <sampleMat+0x11a>
            {
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <sampleMat+0x168>)
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c86:	4946      	ldr	r1, [pc, #280]	; (8001da0 <sampleMat+0x16c>)
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff ff95 	bl	8001bc0 <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e046      	b.n	8001d2a <sampleMat+0xf6>
                {
				    if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <sampleMat+0x7a>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d03a      	beq.n	8001d1e <sampleMat+0xea>
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d037      	beq.n	8001d1e <sampleMat+0xea>
				    {
				       continue;
				    }

				    if ((sense_mux == 7) && (sense_sel > 2))
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	2b07      	cmp	r3, #7
 8001cb2:	d102      	bne.n	8001cba <sampleMat+0x86>
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	dc33      	bgt.n	8001d22 <sampleMat+0xee>
				    {
				       continue;
				    }

					selectChannel(sense_sel, senseMuxSelect);
 8001cba:	493a      	ldr	r1, [pc, #232]	; (8001da4 <sampleMat+0x170>)
 8001cbc:	69f8      	ldr	r0, [r7, #28]
 8001cbe:	f7ff fe85 	bl	80019cc <selectChannel>

					/* Read voltage */
					int raw_ADC_pressure = readPressure();
 8001cc2:	f7ff ff9d 	bl	8001c00 <readPressure>
 8001cc6:	6138      	str	r0, [r7, #16]
					int cycle_cnt = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
					int cycle_max = 10;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	60fb      	str	r3, [r7, #12]
					int cycle_sum = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
					while(cycle_cnt < cycle_max) {
 8001cd4:	e006      	b.n	8001ce4 <sampleMat+0xb0>
//						float ADC_voltage = *ADC_VOLTAGE_CONVERSION;
						cycle_sum += raw_ADC_pressure;
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
						cycle_cnt++;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
					while(cycle_cnt < cycle_max) {
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf4      	blt.n	8001cd6 <sampleMat+0xa2>
					}
					cycle_sum = round(cycle_sum/cycle_max);
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fb93 	bl	8000420 <__aeabi_i2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7fe fbf7 	bl	80004f4 <__aeabi_d2iz>
 8001d06:	4603      	mov	r3, r0
 8001d08:	617b      	str	r3, [r7, #20]
//						cycle_sum += ADC_voltage;
//						cycle_cnt++;
//					}
//					cycle_sum = cycle_sum/cycle_max;

					data[array_cnt] = cycle_sum;
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
					array_cnt++;
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	3301      	adds	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d1c:	e002      	b.n	8001d24 <sampleMat+0xf0>
				       continue;
 8001d1e:	bf00      	nop
 8001d20:	e000      	b.n	8001d24 <sampleMat+0xf0>
				       continue;
 8001d22:	bf00      	nop
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	3301      	adds	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	ddb5      	ble.n	8001c9c <sampleMat+0x68>
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001d30:	4a1a      	ldr	r2, [pc, #104]	; (8001d9c <sampleMat+0x168>)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d38:	4919      	ldr	r1, [pc, #100]	; (8001da0 <sampleMat+0x16c>)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff ff4c 	bl	8001be0 <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b07      	cmp	r3, #7
 8001d52:	dd94      	ble.n	8001c7e <sampleMat+0x4a>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	3301      	adds	r3, #1
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	2b07      	cmp	r3, #7
 8001d5e:	dd87      	ble.n	8001c70 <sampleMat+0x3c>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001d60:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <sampleMat+0x15c>)
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d68:	490a      	ldr	r1, [pc, #40]	; (8001d94 <sampleMat+0x160>)
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f7ff ff34 	bl	8001be0 <disableMux>
    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	f77f af66 	ble.w	8001c52 <sampleMat+0x1e>
 8001d86:	e000      	b.n	8001d8a <sampleMat+0x156>
        return;
 8001d88:	bf00      	nop
	}
}
 8001d8a:	3730      	adds	r7, #48	; 0x30
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000024 	.word	0x20000024
 8001d94:	0800b9e8 	.word	0x0800b9e8
 8001d98:	20000060 	.word	0x20000060
 8001d9c:	20000034 	.word	0x20000034
 8001da0:	0800b9f8 	.word	0x0800b9f8
 8001da4:	20000054 	.word	0x20000054

08001da8 <checkTime>:
	}

    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_RESET);
}

bool checkTime(uint32_t start_time) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  if((HAL_GetTick() - start_time) >= RUNTIME) // Run for 2 minutes
 8001db0:	f000 faea 	bl	8002388 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <checkTime+0x1e>
  {
	  return true;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <checkTime+0x20>
  }
  return false;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <Error_Handler+0x8>
	...

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001de2:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <HAL_MspInit+0x68>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <HAL_MspInit+0x68>)
 8001de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dec:	6253      	str	r3, [r2, #36]	; 0x24
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_MspInit+0x68>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_MspInit+0x68>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_MspInit+0x68>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x68>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x68>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <HAL_MspInit+0x68>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	6253      	str	r3, [r2, #36]	; 0x24
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x68>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2005      	movs	r0, #5
 8001e30:	f001 f809 	bl	8002e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e34:	2005      	movs	r0, #5
 8001e36:	f001 f822 	bl	8002e7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <HAL_ADC_MspInit+0x74>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d123      	bne.n	8001eb2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	61d3      	str	r3, [r2, #28]
 8001e8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_ADC_MspInit+0x78>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <HAL_ADC_MspInit+0x7c>)
 8001eae:	f001 f88b 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012400 	.word	0x40012400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <HAL_I2C_MspInit+0x9c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d138      	bne.n	8001f5c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b1f      	ldr	r3, [pc, #124]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001f02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f08:	2312      	movs	r3, #18
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f14:	2304      	movs	r3, #4
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4813      	ldr	r0, [pc, #76]	; (8001f6c <HAL_I2C_MspInit+0xa4>)
 8001f20:	f001 f852 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4a0f      	ldr	r2, [pc, #60]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001f2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2e:	6253      	str	r3, [r2, #36]	; 0x24
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_I2C_MspInit+0xa0>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	201f      	movs	r0, #31
 8001f42:	f000 ff80 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f46:	201f      	movs	r0, #31
 8001f48:	f000 ff99 	bl	8002e7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2020      	movs	r0, #32
 8001f52:	f000 ff78 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f56:	2020      	movs	r0, #32
 8001f58:	f000 ff91 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40005400 	.word	0x40005400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_RTC_MspInit+0x30>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f82:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <HAL_RTC_MspInit+0x34>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2029      	movs	r0, #41	; 0x29
 8001f8e:	f000 ff5a 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f92:	2029      	movs	r0, #41	; 0x29
 8001f94:	f000 ff73 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40002800 	.word	0x40002800
 8001fa4:	424706d8 	.word	0x424706d8

08001fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <HAL_SPI_MspInit+0x8c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d130      	bne.n	800202c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fca:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	4a1a      	ldr	r2, [pc, #104]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd4:	6253      	str	r3, [r2, #36]	; 0x24
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	4a14      	ldr	r2, [pc, #80]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	61d3      	str	r3, [r2, #28]
 8001fee:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_SPI_MspInit+0x90>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ffa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	2303      	movs	r3, #3
 800200a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800200c:	2305      	movs	r3, #5
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <HAL_SPI_MspInit+0x94>)
 8002018:	f000 ffd6 	bl	8002fc8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2024      	movs	r0, #36	; 0x24
 8002022:	f000 ff10 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002026:	2024      	movs	r0, #36	; 0x24
 8002028:	f000 ff29 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40003800 	.word	0x40003800
 8002038:	40023800 	.word	0x40023800
 800203c:	40020400 	.word	0x40020400

08002040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_UART_MspInit+0x8c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d130      	bne.n	80020c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_UART_MspInit+0x90>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	4a1a      	ldr	r2, [pc, #104]	; (80020d0 <HAL_UART_MspInit+0x90>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6253      	str	r3, [r2, #36]	; 0x24
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <HAL_UART_MspInit+0x90>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <HAL_UART_MspInit+0x90>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <HAL_UART_MspInit+0x90>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_UART_MspInit+0x90>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8002092:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a4:	2307      	movs	r3, #7
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	4809      	ldr	r0, [pc, #36]	; (80020d4 <HAL_UART_MspInit+0x94>)
 80020b0:	f000 ff8a 	bl	8002fc8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2027      	movs	r0, #39	; 0x27
 80020ba:	f000 fec4 	bl	8002e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020be:	2027      	movs	r0, #39	; 0x27
 80020c0:	f000 fedd 	bl	8002e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40004800 	.word	0x40004800
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020800 	.word	0x40020800

080020d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <NMI_Handler+0x4>

080020de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <HardFault_Handler+0x4>

080020e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler+0x4>

080020ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr

0800210e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <SysTick_Handler+0x34>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <SysTick_Handler+0x18>
		Timer1--;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <SysTick_Handler+0x34>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <SysTick_Handler+0x34>)
 8002132:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <SysTick_Handler+0x38>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <SysTick_Handler+0x2c>
		Timer2--;
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SysTick_Handler+0x38>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <SysTick_Handler+0x38>)
 8002146:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002148:	f000 f90c 	bl	8002364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000352 	.word	0x20000352
 8002154:	20000350 	.word	0x20000350

08002158 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <I2C1_EV_IRQHandler+0x10>)
 800216a:	f001 fa09 	bl	8003580 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000142c 	.word	0x2000142c

08002178 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <I2C1_ER_IRQHandler+0x10>)
 800217e:	f001 fb70 	bl	8003862 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000142c 	.word	0x2000142c

0800218c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <SPI2_IRQHandler+0x10>)
 8002192:	f004 fceb 	bl	8006b6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000358 	.word	0x20000358

080021a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <USART3_IRQHandler+0x10>)
 80021a6:	f004 fefd 	bl	8006fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200003b0 	.word	0x200003b0

080021b4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <RTC_Alarm_IRQHandler+0x10>)
 80021ba:	f004 f89b 	bl	80062f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200014ec 	.word	0x200014ec

080021c8 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021d2:	f008 ff49 	bl	800b068 <__errno>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2216      	movs	r2, #22
 80021da:	601a      	str	r2, [r3, #0]
	return -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_exit>:

void _exit (int status)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ffe7 	bl	80021c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021fa:	e7fe      	b.n	80021fa <_exit+0x12>

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f008 ff1c 	bl	800b068 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20008000 	.word	0x20008000
 800225c:	00000800 	.word	0x00000800
 8002260:	20000110 	.word	0x20000110
 8002264:	20004640 	.word	0x20004640

08002268 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002274:	480c      	ldr	r0, [pc, #48]	; (80022a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002276:	490d      	ldr	r1, [pc, #52]	; (80022ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800227c:	e002      	b.n	8002284 <LoopCopyDataInit>

0800227e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002282:	3304      	adds	r3, #4

08002284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002288:	d3f9      	bcc.n	800227e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002290:	e001      	b.n	8002296 <LoopFillZerobss>

08002292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002294:	3204      	adds	r2, #4

08002296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002298:	d3fb      	bcc.n	8002292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800229a:	f7ff ffe5 	bl	8002268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f008 fefd 	bl	800b09c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a2:	f7fe ff91 	bl	80011c8 <main>
  bx lr
 80022a6:	4770      	bx	lr
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 80022b0:	0800bec4 	.word	0x0800bec4
  ldr r2, =_sbss
 80022b4:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 80022b8:	2000463c 	.word	0x2000463c

080022bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_IRQHandler>

080022be <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 fdb1 	bl	8002e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ce:	200f      	movs	r0, #15
 80022d0:	f000 f80e 	bl	80022f0 <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	e001      	b.n	80022e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e0:	f7ff fd7c 	bl	8001ddc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e4:	79fb      	ldrb	r3, [r7, #7]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_InitTick+0x68>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d022      	beq.n	800234a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_InitTick+0x6c>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_InitTick+0x68>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002310:	fbb1 f3f3 	udiv	r3, r1, r3
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fdbe 	bl	8002e9a <HAL_SYSTICK_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b0f      	cmp	r3, #15
 8002328:	d809      	bhi.n	800233e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232a:	2200      	movs	r2, #0
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	f04f 30ff 	mov.w	r0, #4294967295
 8002332:	f000 fd88 	bl	8002e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_InitTick+0x70>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	e007      	b.n	800234e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e004      	b.n	800234e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000074 	.word	0x20000074
 800235c:	2000006c 	.word	0x2000006c
 8002360:	20000070 	.word	0x20000070

08002364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_IncTick+0x1c>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_IncTick+0x20>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4413      	add	r3, r2
 8002372:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_IncTick+0x1c>)
 8002374:	6013      	str	r3, [r2, #0]
}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	200025b8 	.word	0x200025b8
 8002384:	20000074 	.word	0x20000074

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b02      	ldr	r3, [pc, #8]	; (8002398 <HAL_GetTick+0x10>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr
 8002398:	200025b8 	.word	0x200025b8

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff fff0 	bl	8002388 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d004      	beq.n	80023c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_Delay+0x40>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c0:	bf00      	nop
 80023c2:	f7ff ffe1 	bl	8002388 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d8f7      	bhi.n	80023c2 <HAL_Delay+0x26>
  {
  }
}
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000074 	.word	0x20000074

080023e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e127      	b.n	8002650 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <HAL_ADC_Init+0x278>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a8d      	ldr	r2, [pc, #564]	; (8002658 <HAL_ADC_Init+0x278>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b8b      	ldr	r3, [pc, #556]	; (8002658 <HAL_ADC_Init+0x278>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fd07 	bl	8001e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80ff 	bne.w	8002646 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002450:	f023 0302 	bic.w	r3, r3, #2
 8002454:	f043 0202 	orr.w	r2, r3, #2
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800245c:	4b7f      	ldr	r3, [pc, #508]	; (800265c <HAL_ADC_Init+0x27c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	497c      	ldr	r1, [pc, #496]	; (800265c <HAL_ADC_Init+0x27c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002476:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247e:	4619      	mov	r1, r3
 8002480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002484:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800249a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024a0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	2302      	movs	r3, #2
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80024c2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	4313      	orrs	r3, r2
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d007      	beq.n	80024e2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80024da:	4313      	orrs	r3, r2
 80024dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024de:	4313      	orrs	r3, r2
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d04f      	beq.n	8002590 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f6:	4313      	orrs	r3, r2
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002502:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6912      	ldr	r2, [r2, #16]
 8002508:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800250c:	d003      	beq.n	8002516 <HAL_ADC_Init+0x136>
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6912      	ldr	r2, [r2, #16]
 8002512:	2a01      	cmp	r2, #1
 8002514:	d102      	bne.n	800251c <HAL_ADC_Init+0x13c>
 8002516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251a:	e000      	b.n	800251e <HAL_ADC_Init+0x13e>
 800251c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800251e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002522:	4313      	orrs	r3, r2
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d125      	bne.n	800257c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	3b01      	subs	r3, #1
 8002540:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002544:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	fa92 f2a2 	rbit	r2, r2
 800254c:	617a      	str	r2, [r7, #20]
  return result;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	fab2 f282 	clz	r2, r2
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	4093      	lsls	r3, r2
 8002558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	4313      	orrs	r3, r2
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
 8002562:	e00b      	b.n	800257c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <HAL_ADC_Init+0x280>)
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800258c:	430b      	orrs	r3, r1
 800258e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <HAL_ADC_Init+0x284>)
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ac:	d003      	beq.n	80025b6 <HAL_ADC_Init+0x1d6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d119      	bne.n	80025ea <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80025ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	60fa      	str	r2, [r7, #12]
  return result;
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	fab2 f282 	clz	r2, r2
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	fa03 f202 	lsl.w	r2, r3, r2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_ADC_Init+0x288>)
 8002602:	4013      	ands	r3, r2
 8002604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002606:	429a      	cmp	r2, r3
 8002608:	d10b      	bne.n	8002622 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	f023 0303 	bic.w	r3, r3, #3
 8002618:	f043 0201 	orr.w	r2, r3, #1
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002620:	e014      	b.n	800264c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	f023 0312 	bic.w	r3, r3, #18
 800262a:	f043 0210 	orr.w	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002644:	e002      	b.n	800264c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800264c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002650:	4618      	mov	r0, r3
 8002652:	3738      	adds	r7, #56	; 0x38
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40012700 	.word	0x40012700
 8002660:	fcfc16ff 	.word	0xfcfc16ff
 8002664:	c0fff18d 	.word	0xc0fff18d
 8002668:	bf80fffe 	.word	0xbf80fffe

0800266c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x1a>
 8002682:	2302      	movs	r3, #2
 8002684:	e04e      	b.n	8002724 <HAL_ADC_Start+0xb8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa64 	bl	8002b5c <ADC_Enable>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d141      	bne.n	8002722 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e2:	f023 0206 	bic.w	r2, r3, #6
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	651a      	str	r2, [r3, #80]	; 0x50
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002702:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002720:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_Stop+0x1a>
 8002742:	2302      	movs	r3, #2
 8002744:	e01a      	b.n	800277c <HAL_ADC_Stop+0x50>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa60 	bl	8002c14 <ADC_ConversionStop_Disable>
 8002754:	4603      	mov	r3, r0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a0:	d113      	bne.n	80027ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b0:	d10b      	bne.n	80027ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e068      	b.n	800289c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027ca:	f7ff fddd 	bl	8002388 <HAL_GetTick>
 80027ce:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027d0:	e021      	b.n	8002816 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d01d      	beq.n	8002816 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x6c>
 80027e0:	f7ff fdd2 	bl	8002388 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d212      	bcs.n	8002816 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	f043 0204 	orr.w	r2, r3, #4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e042      	b.n	800289c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0d6      	beq.n	80027d2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0212 	mvn.w	r2, #18
 8002834:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d124      	bne.n	800289a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11f      	bne.n	800289a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002864:	2b00      	cmp	r3, #0
 8002866:	d006      	beq.n	8002876 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002872:	2b00      	cmp	r3, #0
 8002874:	d111      	bne.n	800289a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x20>
 80028d8:	2302      	movs	r3, #2
 80028da:	e134      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x28a>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b06      	cmp	r3, #6
 80028ea:	d81c      	bhi.n	8002926 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	3b05      	subs	r3, #5
 80028fe:	221f      	movs	r2, #31
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	4019      	ands	r1, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	3b05      	subs	r3, #5
 8002918:	fa00 f203 	lsl.w	r2, r0, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
 8002924:	e07e      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d81c      	bhi.n	8002968 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b23      	subs	r3, #35	; 0x23
 8002940:	221f      	movs	r2, #31
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	4019      	ands	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b23      	subs	r3, #35	; 0x23
 800295a:	fa00 f203 	lsl.w	r2, r0, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c
 8002966:	e05d      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b12      	cmp	r3, #18
 800296e:	d81c      	bhi.n	80029aa <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	3b41      	subs	r3, #65	; 0x41
 8002982:	221f      	movs	r2, #31
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	4019      	ands	r1, r3
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b41      	subs	r3, #65	; 0x41
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
 80029a8:	e03c      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b18      	cmp	r3, #24
 80029b0:	d81c      	bhi.n	80029ec <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b5f      	subs	r3, #95	; 0x5f
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4019      	ands	r1, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b5f      	subs	r3, #95	; 0x5f
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	e01b      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	3b7d      	subs	r3, #125	; 0x7d
 80029fe:	221f      	movs	r2, #31
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	4019      	ands	r1, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	3b7d      	subs	r3, #125	; 0x7d
 8002a18:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	d81a      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6959      	ldr	r1, [r3, #20]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	4019      	ands	r1, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6898      	ldr	r0, [r3, #8]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	fa00 f203 	lsl.w	r2, r0, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	615a      	str	r2, [r3, #20]
 8002a60:	e042      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b13      	cmp	r3, #19
 8002a68:	d81c      	bhi.n	8002aa4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6919      	ldr	r1, [r3, #16]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b1e      	subs	r3, #30
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4019      	ands	r1, r3
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6898      	ldr	r0, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	3b1e      	subs	r3, #30
 8002a96:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	e021      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b1a      	cmp	r3, #26
 8002aaa:	d81c      	bhi.n	8002ae6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	3b3c      	subs	r3, #60	; 0x3c
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4019      	ands	r1, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b3c      	subs	r3, #60	; 0x3c
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]
 8002ae4:	e000      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ae6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d003      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002af4:	2b11      	cmp	r3, #17
 8002af6:	d121      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002af8:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_ADC_ConfigChannel+0x294>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11b      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_ADC_ConfigChannel+0x294>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a11      	ldr	r2, [pc, #68]	; (8002b50 <HAL_ADC_ConfigChannel+0x294>)
 8002b0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d111      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_ADC_ConfigChannel+0x298>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_ADC_ConfigChannel+0x29c>)
 8002b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b22:	0c9a      	lsrs	r2, r3, #18
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002b2e:	e002      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40012700 	.word	0x40012700
 8002b54:	2000006c 	.word	0x2000006c
 8002b58:	431bde83 	.word	0x431bde83

08002b5c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d043      	beq.n	8002c02 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <ADC_Enable+0xb0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <ADC_Enable+0xb4>)
 8002b90:	fba2 2303 	umull	r2, r3, r2, r3
 8002b94:	0c9a      	lsrs	r2, r3, #18
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002b9e:	e002      	b.n	8002ba6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002bac:	f7ff fbec 	bl	8002388 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bb2:	e01f      	b.n	8002bf4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002bb4:	f7ff fbe8 	bl	8002388 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d918      	bls.n	8002bf4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d011      	beq.n	8002bf4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd4:	f043 0210 	orr.w	r2, r3, #16
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	f043 0201 	orr.w	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d1d8      	bne.n	8002bb4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000006c 	.word	0x2000006c
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d12e      	bne.n	8002c8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c3e:	f7ff fba3 	bl	8002388 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c44:	e01b      	b.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002c46:	f7ff fb9f 	bl	8002388 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d914      	bls.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d10d      	bne.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	f043 0210 	orr.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	d0dc      	beq.n	8002c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <__NVIC_SetPriorityGrouping+0x44>)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	60d3      	str	r3, [r2, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f003 0307 	and.w	r3, r3, #7
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	db0b      	blt.n	8002d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	4906      	ldr	r1, [pc, #24]	; (8002d30 <__NVIC_EnableIRQ+0x34>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfc:	d301      	bcc.n	8002e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00f      	b.n	8002e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <SysTick_Config+0x40>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e10:	f7ff ff90 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <SysTick_Config+0x40>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <SysTick_Config+0x40>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010

08002e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff2d 	bl	8002c98 <__NVIC_SetPriorityGrouping>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e58:	f7ff ff42 	bl	8002ce0 <__NVIC_GetPriorityGrouping>
 8002e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	6978      	ldr	r0, [r7, #20]
 8002e64:	f7ff ff90 	bl	8002d88 <NVIC_EncodePriority>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff5f 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff35 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffa2 	bl	8002dec <SysTick_Config>
 8002ea8:	4603      	mov	r3, r0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d008      	beq.n	8002edc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e022      	b.n	8002f22 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f003 021c 	and.w	r2, r3, #28
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d005      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e029      	b.n	8002fa4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 021c 	and.w	r2, r3, #28
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4798      	blx	r3
    }
  }
  return status;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fbc:	b2db      	uxtb	r3, r3
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fde:	e154      	b.n	800328a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8146 	beq.w	8003284 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d005      	beq.n	8003010 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800300c:	2b02      	cmp	r3, #2
 800300e:	d130      	bne.n	8003072 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003046:	2201      	movs	r2, #1
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0201 	and.w	r2, r3, #1
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b03      	cmp	r3, #3
 800307c:	d017      	beq.n	80030ae <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d123      	bne.n	8003102 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	08da      	lsrs	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3208      	adds	r2, #8
 80030c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	08da      	lsrs	r2, r3, #3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3208      	adds	r2, #8
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0203 	and.w	r2, r3, #3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4313      	orrs	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80a0 	beq.w	8003284 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003144:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a57      	ldr	r2, [pc, #348]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	4b55      	ldr	r3, [pc, #340]	; (80032a8 <HAL_GPIO_Init+0x2e0>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800315c:	4a53      	ldr	r2, [pc, #332]	; (80032ac <HAL_GPIO_Init+0x2e4>)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	089b      	lsrs	r3, r3, #2
 8003162:	3302      	adds	r3, #2
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	220f      	movs	r2, #15
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a4b      	ldr	r2, [pc, #300]	; (80032b0 <HAL_GPIO_Init+0x2e8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d019      	beq.n	80031bc <HAL_GPIO_Init+0x1f4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a4a      	ldr	r2, [pc, #296]	; (80032b4 <HAL_GPIO_Init+0x2ec>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d013      	beq.n	80031b8 <HAL_GPIO_Init+0x1f0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_GPIO_Init+0x2f0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00d      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_GPIO_Init+0x2f4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a47      	ldr	r2, [pc, #284]	; (80032c0 <HAL_GPIO_Init+0x2f8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_GPIO_Init+0x1e4>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e008      	b.n	80031be <HAL_GPIO_Init+0x1f6>
 80031ac:	2305      	movs	r3, #5
 80031ae:	e006      	b.n	80031be <HAL_GPIO_Init+0x1f6>
 80031b0:	2303      	movs	r3, #3
 80031b2:	e004      	b.n	80031be <HAL_GPIO_Init+0x1f6>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e002      	b.n	80031be <HAL_GPIO_Init+0x1f6>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_GPIO_Init+0x1f6>
 80031bc:	2300      	movs	r3, #0
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	f002 0203 	and.w	r2, r2, #3
 80031c4:	0092      	lsls	r2, r2, #2
 80031c6:	4093      	lsls	r3, r2
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031ce:	4937      	ldr	r1, [pc, #220]	; (80032ac <HAL_GPIO_Init+0x2e4>)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	3302      	adds	r3, #2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031dc:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4013      	ands	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003200:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800322a:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003230:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003254:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_GPIO_Init+0x2fc>)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f aea3 	bne.w	8002fe0 <HAL_GPIO_Init+0x18>
  }
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40020000 	.word	0x40020000
 80032b4:	40020400 	.word	0x40020400
 80032b8:	40020800 	.word	0x40020800
 80032bc:	40020c00 	.word	0x40020c00
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40010400 	.word	0x40010400

080032c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
 80032d4:	4613      	mov	r3, r2
 80032d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032de:	887a      	ldrh	r2, [r7, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80032e4:	e003      	b.n	80032ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80032e6:	887b      	ldrh	r3, [r7, #2]
 80032e8:	041a      	lsls	r2, r3, #16
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	619a      	str	r2, [r3, #24]
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e12b      	b.n	8003562 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7fe fdd2 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2224      	movs	r2, #36	; 0x24
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800335a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800335c:	f002 fae6 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 8003360:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4a81      	ldr	r2, [pc, #516]	; (800356c <HAL_I2C_Init+0x274>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d807      	bhi.n	800337c <HAL_I2C_Init+0x84>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a80      	ldr	r2, [pc, #512]	; (8003570 <HAL_I2C_Init+0x278>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	e006      	b.n	800338a <HAL_I2C_Init+0x92>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_I2C_Init+0x27c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	bf94      	ite	ls
 8003384:	2301      	movls	r3, #1
 8003386:	2300      	movhi	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e0e7      	b.n	8003562 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a78      	ldr	r2, [pc, #480]	; (8003578 <HAL_I2C_Init+0x280>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	0c9b      	lsrs	r3, r3, #18
 800339c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a6a      	ldr	r2, [pc, #424]	; (800356c <HAL_I2C_Init+0x274>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d802      	bhi.n	80033cc <HAL_I2C_Init+0xd4>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3301      	adds	r3, #1
 80033ca:	e009      	b.n	80033e0 <HAL_I2C_Init+0xe8>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	4a69      	ldr	r2, [pc, #420]	; (800357c <HAL_I2C_Init+0x284>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	3301      	adds	r3, #1
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	495c      	ldr	r1, [pc, #368]	; (800356c <HAL_I2C_Init+0x274>)
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d819      	bhi.n	8003434 <HAL_I2C_Init+0x13c>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1e59      	subs	r1, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fbb1 f3f3 	udiv	r3, r1, r3
 800340e:	1c59      	adds	r1, r3, #1
 8003410:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003414:	400b      	ands	r3, r1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_I2C_Init+0x138>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1e59      	subs	r1, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fbb1 f3f3 	udiv	r3, r1, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342e:	e051      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003430:	2304      	movs	r3, #4
 8003432:	e04f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d111      	bne.n	8003460 <HAL_I2C_Init+0x168>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1e58      	subs	r0, r3, #1
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	fbb0 f3f3 	udiv	r3, r0, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e012      	b.n	8003486 <HAL_I2C_Init+0x18e>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Init+0x196>
 800348a:	2301      	movs	r3, #1
 800348c:	e022      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10e      	bne.n	80034b4 <HAL_I2C_Init+0x1bc>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e58      	subs	r0, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	460b      	mov	r3, r1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	440b      	add	r3, r1
 80034a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	e00f      	b.n	80034d4 <HAL_I2C_Init+0x1dc>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	0099      	lsls	r1, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ca:	3301      	adds	r3, #1
 80034cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	6809      	ldr	r1, [r1, #0]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6911      	ldr	r1, [r2, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	430b      	orrs	r3, r1
 8003516:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	000186a0 	.word	0x000186a0
 8003570:	001e847f 	.word	0x001e847f
 8003574:	003d08ff 	.word	0x003d08ff
 8003578:	431bde83 	.word	0x431bde83
 800357c:	10624dd3 	.word	0x10624dd3

08003580 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	2b10      	cmp	r3, #16
 80035ae:	d003      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x38>
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	f040 80c1 	bne.w	800373a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_I2C_EV_IRQHandler+0x6e>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035d8:	d003      	beq.n	80035e2 <HAL_I2C_EV_IRQHandler+0x62>
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035e0:	d101      	bne.n	80035e6 <HAL_I2C_EV_IRQHandler+0x66>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_I2C_EV_IRQHandler+0x68>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	f000 8132 	beq.w	8003852 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00c      	beq.n	8003612 <HAL_I2C_EV_IRQHandler+0x92>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	0a5b      	lsrs	r3, r3, #9
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 fc63 	bl	8004ed0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fd6f 	bl	80040ee <I2C_Master_SB>
 8003610:	e092      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	08db      	lsrs	r3, r3, #3
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d009      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0xb2>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	0a5b      	lsrs	r3, r3, #9
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fde4 	bl	80041f8 <I2C_Master_ADD10>
 8003630:	e082      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0xd2>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0a5b      	lsrs	r3, r3, #9
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fdfd 	bl	800424a <I2C_Master_ADDR>
 8003650:	e072      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	089b      	lsrs	r3, r3, #2
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d03b      	beq.n	80036d6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800366c:	f000 80f3 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	09db      	lsrs	r3, r3, #7
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00f      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x11c>
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d009      	beq.n	800369c <HAL_I2C_EV_IRQHandler+0x11c>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f9e9 	bl	8003a6c <I2C_MasterTransmit_TXE>
 800369a:	e04d      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80d6 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	0a5b      	lsrs	r3, r3, #9
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80cf 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80036b8:	7bbb      	ldrb	r3, [r7, #14]
 80036ba:	2b21      	cmp	r3, #33	; 0x21
 80036bc:	d103      	bne.n	80036c6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa70 	bl	8003ba4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036c4:	e0c7      	b.n	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	f040 80c4 	bne.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fade 	bl	8003c90 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d4:	e0bf      	b.n	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	f000 80b7 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00f      	beq.n	8003714 <HAL_I2C_EV_IRQHandler+0x194>
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	0a9b      	lsrs	r3, r3, #10
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_I2C_EV_IRQHandler+0x194>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	089b      	lsrs	r3, r3, #2
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb53 	bl	8003db8 <I2C_MasterReceive_RXNE>
 8003712:	e011      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 809a 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	0a5b      	lsrs	r3, r3, #9
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8093 	beq.w	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fbf2 	bl	8003f1a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003736:	e08e      	b.n	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003738:	e08d      	b.n	8003856 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	e007      	b.n	800375c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x20e>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	0a5b      	lsrs	r3, r3, #9
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003784:	69b9      	ldr	r1, [r7, #24]
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 ffab 	bl	80046e2 <I2C_Slave_ADDR>
 800378c:	e066      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x22e>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ffe6 	bl	8004778 <I2C_Slave_STOPF>
 80037ac:	e056      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037ae:	7bbb      	ldrb	r3, [r7, #14]
 80037b0:	2b21      	cmp	r3, #33	; 0x21
 80037b2:	d002      	beq.n	80037ba <HAL_I2C_EV_IRQHandler+0x23a>
 80037b4:	7bbb      	ldrb	r3, [r7, #14]
 80037b6:	2b29      	cmp	r3, #41	; 0x29
 80037b8:	d125      	bne.n	8003806 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	09db      	lsrs	r3, r3, #7
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00f      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x266>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	0a9b      	lsrs	r3, r3, #10
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_I2C_EV_IRQHandler+0x266>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fec3 	bl	800456a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e4:	e039      	b.n	800385a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d033      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0x2da>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	0a5b      	lsrs	r3, r3, #9
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d02d      	beq.n	800385a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fef0 	bl	80045e4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003804:	e029      	b.n	800385a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00f      	beq.n	8003832 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	0a9b      	lsrs	r3, r3, #10
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_I2C_EV_IRQHandler+0x2b2>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fefa 	bl	8004624 <I2C_SlaveReceive_RXNE>
 8003830:	e014      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	089b      	lsrs	r3, r3, #2
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	0a5b      	lsrs	r3, r3, #9
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 ff28 	bl	80046a0 <I2C_SlaveReceive_BTF>
 8003850:	e004      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003852:	bf00      	nop
 8003854:	e002      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800385a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b08a      	sub	sp, #40	; 0x28
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003884:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <HAL_I2C_ER_IRQHandler+0x4e>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	0a5b      	lsrs	r3, r3, #9
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <HAL_I2C_ER_IRQHandler+0x78>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f043 0302 	orr.w	r3, r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80038d8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	0a9b      	lsrs	r3, r3, #10
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d03f      	beq.n	8003966 <HAL_I2C_ER_IRQHandler+0x104>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d039      	beq.n	8003966 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80038f2:	7efb      	ldrb	r3, [r7, #27]
 80038f4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800390c:	7ebb      	ldrb	r3, [r7, #26]
 800390e:	2b20      	cmp	r3, #32
 8003910:	d112      	bne.n	8003938 <HAL_I2C_ER_IRQHandler+0xd6>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10f      	bne.n	8003938 <HAL_I2C_ER_IRQHandler+0xd6>
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b21      	cmp	r3, #33	; 0x21
 800391c:	d008      	beq.n	8003930 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	2b29      	cmp	r3, #41	; 0x29
 8003922:	d005      	beq.n	8003930 <HAL_I2C_ER_IRQHandler+0xce>
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b28      	cmp	r3, #40	; 0x28
 8003928:	d106      	bne.n	8003938 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b21      	cmp	r3, #33	; 0x21
 800392e:	d103      	bne.n	8003938 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f001 f851 	bl	80049d8 <I2C_Slave_AF>
 8003936:	e016      	b.n	8003966 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003940:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800394a:	7efb      	ldrb	r3, [r7, #27]
 800394c:	2b10      	cmp	r3, #16
 800394e:	d002      	beq.n	8003956 <HAL_I2C_ER_IRQHandler+0xf4>
 8003950:	7efb      	ldrb	r3, [r7, #27]
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d107      	bne.n	8003966 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003964:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	0adb      	lsrs	r3, r3, #11
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00e      	beq.n	8003990 <HAL_I2C_ER_IRQHandler+0x12e>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800398e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f001 f888 	bl	8004ab8 <I2C_ITError>
  }
}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	; 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
 8003a04:	4613      	mov	r3, r2
 8003a06:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d150      	bne.n	8003b34 <I2C_MasterTransmit_TXE+0xc8>
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b21      	cmp	r3, #33	; 0x21
 8003a96:	d14d      	bne.n	8003b34 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d01d      	beq.n	8003ada <I2C_MasterTransmit_TXE+0x6e>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d01a      	beq.n	8003ada <I2C_MasterTransmit_TXE+0x6e>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aaa:	d016      	beq.n	8003ada <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2211      	movs	r2, #17
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff ff6c 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ad8:	e060      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ae8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d107      	bne.n	8003b24 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff81 	bl	8003a24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b22:	e03b      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff ff3f 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b32:	e033      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b21      	cmp	r3, #33	; 0x21
 8003b38:	d005      	beq.n	8003b46 <I2C_MasterTransmit_TXE+0xda>
 8003b3a:	7bbb      	ldrb	r3, [r7, #14]
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d12d      	bne.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	d12a      	bne.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d108      	bne.n	8003b62 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b60:	e01c      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d103      	bne.n	8003b76 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f88e 	bl	8003c90 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b74:	e012      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b9a:	e7ff      	b.n	8003b9c <I2C_MasterTransmit_TXE+0x130>
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b21      	cmp	r3, #33	; 0x21
 8003bbc:	d164      	bne.n	8003c88 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d012      	beq.n	8003bee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bec:	e04c      	b.n	8003c88 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d01d      	beq.n	8003c30 <I2C_MasterTransmit_BTF+0x8c>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d01a      	beq.n	8003c30 <I2C_MasterTransmit_BTF+0x8c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c00:	d016      	beq.n	8003c30 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c10:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2211      	movs	r2, #17
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fec1 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003c2e:	e02b      	b.n	8003c88 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c3e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d107      	bne.n	8003c7a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff fed6 	bl	8003a24 <HAL_I2C_MemTxCpltCallback>
}
 8003c78:	e006      	b.n	8003c88 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff fe94 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11d      	bne.n	8003ce4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10b      	bne.n	8003cc8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003cc6:	e073      	b.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	121b      	asrs	r3, r3, #8
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ce2:	e065      	b.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10b      	bne.n	8003d04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d02:	e055      	b.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d151      	bne.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b22      	cmp	r3, #34	; 0x22
 8003d10:	d10d      	bne.n	8003d2e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d20:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d2c:	e040      	b.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	2b21      	cmp	r3, #33	; 0x21
 8003d3c:	d112      	bne.n	8003d64 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d62:	e025      	b.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d120      	bne.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b21      	cmp	r3, #33	; 0x21
 8003d72:	d11d      	bne.n	8003db0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d82:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fe3a 	bl	8003a24 <HAL_I2C_MemTxCpltCallback>
}
 8003db0:	bf00      	nop
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b22      	cmp	r3, #34	; 0x22
 8003dca:	f040 80a2 	bne.w	8003f12 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d921      	bls.n	8003e20 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	f040 8082 	bne.w	8003f12 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003e1e:	e078      	b.n	8003f12 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d074      	beq.n	8003f12 <I2C_MasterReceive_RXNE+0x15a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d002      	beq.n	8003e34 <I2C_MasterReceive_RXNE+0x7c>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d16e      	bne.n	8003f12 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 f819 	bl	8004e6c <I2C_WaitOnSTOPRequestThroughIT>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d142      	bne.n	8003ec6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e5e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d10a      	bne.n	8003eb0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7ff fdc4 	bl	8003a36 <HAL_I2C_MemRxCpltCallback>
}
 8003eae:	e030      	b.n	8003f12 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2212      	movs	r2, #18
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff fd7f 	bl	80039c2 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec4:	e025      	b.n	8003f12 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ed4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fd9b 	bl	8003a48 <HAL_I2C_ErrorCallback>
}
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d11b      	bne.n	8003f6a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f68:	e0bd      	b.n	80040e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d129      	bne.n	8003fc8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f82:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d00a      	beq.n	8003fa0 <I2C_MasterReceive_BTF+0x86>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d007      	beq.n	8003fa0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003fc6:	e08e      	b.n	80040e6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d176      	bne.n	80040c0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d002      	beq.n	8003fde <I2C_MasterReceive_BTF+0xc4>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e019      	b.n	8004024 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d002      	beq.n	8003ffc <I2C_MasterReceive_BTF+0xe2>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d108      	bne.n	800400e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e00a      	b.n	8004024 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d007      	beq.n	8004024 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004022:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800407e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d10a      	bne.n	80040aa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fcc7 	bl	8003a36 <HAL_I2C_MemRxCpltCallback>
}
 80040a8:	e01d      	b.n	80040e6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2212      	movs	r2, #18
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff fc82 	bl	80039c2 <HAL_I2C_MasterRxCpltCallback>
}
 80040be:	e012      	b.n	80040e6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d117      	bne.n	8004132 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	b2db      	uxtb	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800411a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800411c:	e067      	b.n	80041ee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	b2da      	uxtb	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
}
 8004130:	e05d      	b.n	80041ee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413a:	d133      	bne.n	80041a4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b21      	cmp	r3, #33	; 0x21
 8004146:	d109      	bne.n	800415c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004158:	611a      	str	r2, [r3, #16]
 800415a:	e008      	b.n	800416e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <I2C_Master_SB+0x92>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d032      	beq.n	80041ee <I2C_Master_SB+0x100>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02d      	beq.n	80041ee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a0:	605a      	str	r2, [r3, #4]
}
 80041a2:	e024      	b.n	80041ee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10e      	bne.n	80041ca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	11db      	asrs	r3, r3, #7
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f063 030f 	orn	r3, r3, #15
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	611a      	str	r2, [r3, #16]
}
 80041c8:	e011      	b.n	80041ee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10d      	bne.n	80041ee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	11db      	asrs	r3, r3, #7
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0306 	and.w	r3, r3, #6
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f063 030e 	orn	r3, r3, #14
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	611a      	str	r2, [r3, #16]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	b2da      	uxtb	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <I2C_Master_ADD10+0x26>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <I2C_Master_ADD10+0x48>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423e:	605a      	str	r2, [r3, #4]
  }
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800424a:	b480      	push	{r7}
 800424c:	b091      	sub	sp, #68	; 0x44
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004258:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	f040 8169 	bne.w	8004548 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10f      	bne.n	800429e <I2C_Master_ADDR+0x54>
 800427e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004282:	2b40      	cmp	r3, #64	; 0x40
 8004284:	d10b      	bne.n	800429e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	e160      	b.n	8004560 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11d      	bne.n	80042e2 <I2C_Master_ADDR+0x98>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042ae:	d118      	bne.n	80042e2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	651a      	str	r2, [r3, #80]	; 0x50
 80042e0:	e13e      	b.n	8004560 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d113      	bne.n	8004314 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e115      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b01      	cmp	r3, #1
 800431c:	f040 808a 	bne.w	8004434 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004326:	d137      	bne.n	8004398 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004336:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d113      	bne.n	8004370 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004356:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	e0e7      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	623b      	str	r3, [r7, #32]
 8004384:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e0d3      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	2b08      	cmp	r3, #8
 800439c:	d02e      	beq.n	80043fc <I2C_Master_ADDR+0x1b2>
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d02b      	beq.n	80043fc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a6:	2b12      	cmp	r3, #18
 80043a8:	d102      	bne.n	80043b0 <I2C_Master_ADDR+0x166>
 80043aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d125      	bne.n	80043fc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d00e      	beq.n	80043d4 <I2C_Master_ADDR+0x18a>
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d00b      	beq.n	80043d4 <I2C_Master_ADDR+0x18a>
 80043bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043be:	2b10      	cmp	r3, #16
 80043c0:	d008      	beq.n	80043d4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e007      	b.n	80043e4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	e0a1      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440c:	2300      	movs	r3, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	61bb      	str	r3, [r7, #24]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	e085      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d14d      	bne.n	80044da <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	2b04      	cmp	r3, #4
 8004442:	d016      	beq.n	8004472 <I2C_Master_ADDR+0x228>
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	2b02      	cmp	r3, #2
 8004448:	d013      	beq.n	8004472 <I2C_Master_ADDR+0x228>
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444c:	2b10      	cmp	r3, #16
 800444e:	d010      	beq.n	8004472 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e007      	b.n	8004482 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004480:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004490:	d117      	bne.n	80044c2 <I2C_Master_ADDR+0x278>
 8004492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004498:	d00b      	beq.n	80044b2 <I2C_Master_ADDR+0x268>
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b01      	cmp	r3, #1
 800449e:	d008      	beq.n	80044b2 <I2C_Master_ADDR+0x268>
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d005      	beq.n	80044b2 <I2C_Master_ADDR+0x268>
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d002      	beq.n	80044b2 <I2C_Master_ADDR+0x268>
 80044ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d107      	bne.n	80044c2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	e032      	b.n	8004540 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f8:	d117      	bne.n	800452a <I2C_Master_ADDR+0x2e0>
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004500:	d00b      	beq.n	800451a <I2C_Master_ADDR+0x2d0>
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	2b01      	cmp	r3, #1
 8004506:	d008      	beq.n	800451a <I2C_Master_ADDR+0x2d0>
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	2b08      	cmp	r3, #8
 800450c:	d005      	beq.n	800451a <I2C_Master_ADDR+0x2d0>
 800450e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004510:	2b10      	cmp	r3, #16
 8004512:	d002      	beq.n	800451a <I2C_Master_ADDR+0x2d0>
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	2b20      	cmp	r3, #32
 8004518:	d107      	bne.n	800452a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004528:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004546:	e00b      	b.n	8004560 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	e7ff      	b.n	8004560 <I2C_Master_ADDR+0x316>
 8004560:	bf00      	nop
 8004562:	3744      	adds	r7, #68	; 0x44
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d02b      	beq.n	80045dc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d114      	bne.n	80045dc <I2C_SlaveTransmit_TXE+0x72>
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b29      	cmp	r3, #41	; 0x29
 80045b6:	d111      	bne.n	80045dc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2221      	movs	r2, #33	; 0x21
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2228      	movs	r2, #40	; 0x28
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7ff f9fc 	bl	80039d4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d011      	beq.n	800461a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02c      	beq.n	8004698 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d114      	bne.n	8004698 <I2C_SlaveReceive_RXNE+0x74>
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b2a      	cmp	r3, #42	; 0x2a
 8004672:	d111      	bne.n	8004698 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2222      	movs	r2, #34	; 0x22
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2228      	movs	r2, #40	; 0x28
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff f9a7 	bl	80039e6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046fc:	2b28      	cmp	r3, #40	; 0x28
 80046fe:	d127      	bne.n	8004750 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	09db      	lsrs	r3, r3, #7
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	81bb      	strh	r3, [r7, #12]
 8004732:	e002      	b.n	800473a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004742:	89ba      	ldrh	r2, [r7, #12]
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff f955 	bl	80039f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800474e:	e00e      	b.n	800476e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004796:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d4:	d172      	bne.n	80048bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b22      	cmp	r3, #34	; 0x22
 80047da:	d002      	beq.n	80047e2 <I2C_Slave_STOPF+0x6a>
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b2a      	cmp	r3, #42	; 0x2a
 80047e0:	d135      	bne.n	800484e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0204 	orr.w	r2, r3, #4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004814:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fbc7 	bl	8002fae <HAL_DMA_GetState>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d049      	beq.n	80048ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	4a69      	ldr	r2, [pc, #420]	; (80049d0 <I2C_Slave_STOPF+0x258>)
 800482c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	4618      	mov	r0, r3
 8004834:	f7fe fb7a 	bl	8002f2c <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03d      	beq.n	80048ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800484c:	e035      	b.n	80048ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f043 0204 	orr.w	r2, r3, #4
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004880:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe fb91 	bl	8002fae <HAL_DMA_GetState>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d014      	beq.n	80048bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004896:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <I2C_Slave_STOPF+0x258>)
 8004898:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fb44 	bl	8002f2c <HAL_DMA_Abort_IT>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048b4:	4610      	mov	r0, r2
 80048b6:	4798      	blx	r3
 80048b8:	e000      	b.n	80048bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d03e      	beq.n	8004944 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d112      	bne.n	80048fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d112      	bne.n	800492e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	f043 0204 	orr.w	r2, r3, #4
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8b3 	bl	8004ab8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004952:	e039      	b.n	80049c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004954:	7bfb      	ldrb	r3, [r7, #15]
 8004956:	2b2a      	cmp	r3, #42	; 0x2a
 8004958:	d109      	bne.n	800496e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2228      	movs	r2, #40	; 0x28
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff f83c 	bl	80039e6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b28      	cmp	r3, #40	; 0x28
 8004978:	d111      	bne.n	800499e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <I2C_Slave_STOPF+0x25c>)
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff f83b 	bl	8003a12 <HAL_I2C_ListenCpltCallback>
}
 800499c:	e014      	b.n	80049c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	2b22      	cmp	r3, #34	; 0x22
 80049a4:	d002      	beq.n	80049ac <I2C_Slave_STOPF+0x234>
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b22      	cmp	r3, #34	; 0x22
 80049aa:	d10d      	bne.n	80049c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff f80f 	bl	80039e6 <HAL_I2C_SlaveRxCpltCallback>
}
 80049c8:	bf00      	nop
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08004d1d 	.word	0x08004d1d
 80049d4:	ffff0000 	.word	0xffff0000

080049d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d002      	beq.n	80049fa <I2C_Slave_AF+0x22>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d129      	bne.n	8004a4e <I2C_Slave_AF+0x76>
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b28      	cmp	r3, #40	; 0x28
 80049fe:	d126      	bne.n	8004a4e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <I2C_Slave_AF+0xdc>)
 8004a04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a14:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a1e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fe ffe3 	bl	8003a12 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004a4c:	e02e      	b.n	8004aac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b21      	cmp	r3, #33	; 0x21
 8004a52:	d126      	bne.n	8004aa2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <I2C_Slave_AF+0xdc>)
 8004a58:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a7e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a88:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a98:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fe ff9a 	bl	80039d4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004aa0:	e004      	b.n	8004aac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aaa:	615a      	str	r2, [r3, #20]
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	ffff0000 	.word	0xffff0000

08004ab8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	2b10      	cmp	r3, #16
 8004ad4:	d002      	beq.n	8004adc <I2C_ITError+0x24>
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d10a      	bne.n	8004af2 <I2C_ITError+0x3a>
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b22      	cmp	r3, #34	; 0x22
 8004ae0:	d107      	bne.n	8004af2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004af2:	7bfb      	ldrb	r3, [r7, #15]
 8004af4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004af8:	2b28      	cmp	r3, #40	; 0x28
 8004afa:	d107      	bne.n	8004b0c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2228      	movs	r2, #40	; 0x28
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b0a:	e015      	b.n	8004b38 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1a:	d00a      	beq.n	8004b32 <I2C_ITError+0x7a>
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	2b60      	cmp	r3, #96	; 0x60
 8004b20:	d007      	beq.n	8004b32 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b46:	d162      	bne.n	8004c0e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b56:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d020      	beq.n	8004ba8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <I2C_ITError+0x25c>)
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe f9da 	bl	8002f2c <HAL_DMA_Abort_IT>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f000 8089 	beq.w	8004c92 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0201 	bic.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4798      	blx	r3
 8004ba6:	e074      	b.n	8004c92 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	4a59      	ldr	r2, [pc, #356]	; (8004d14 <I2C_ITError+0x25c>)
 8004bae:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fe f9b9 	bl	8002f2c <HAL_DMA_Abort_IT>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d068      	beq.n	8004c92 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d10b      	bne.n	8004be6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c08:	4610      	mov	r0, r2
 8004c0a:	4798      	blx	r3
 8004c0c:	e041      	b.n	8004c92 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b60      	cmp	r3, #96	; 0x60
 8004c18:	d125      	bne.n	8004c66 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c32:	2b40      	cmp	r3, #64	; 0x40
 8004c34:	d10b      	bne.n	8004c4e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7fe fefb 	bl	8003a5a <HAL_I2C_AbortCpltCallback>
 8004c64:	e015      	b.n	8004c92 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d10b      	bne.n	8004c8c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7fe fedb 	bl	8003a48 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10e      	bne.n	8004cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d113      	bne.n	8004d0c <I2C_ITError+0x254>
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b28      	cmp	r3, #40	; 0x28
 8004ce8:	d110      	bne.n	8004d0c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <I2C_ITError+0x260>)
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fe fe83 	bl	8003a12 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	08004d1d 	.word	0x08004d1d
 8004d18:	ffff0000 	.word	0xffff0000

08004d1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d36:	4b4b      	ldr	r3, [pc, #300]	; (8004e64 <I2C_DMAAbort+0x148>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	08db      	lsrs	r3, r3, #3
 8004d3c:	4a4a      	ldr	r2, [pc, #296]	; (8004e68 <I2C_DMAAbort+0x14c>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	0a1a      	lsrs	r2, r3, #8
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00da      	lsls	r2, r3, #3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d106      	bne.n	8004d64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004d62:	e00a      	b.n	8004d7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d0ea      	beq.n	8004d50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	2200      	movs	r2, #0
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	2200      	movs	r2, #0
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	2200      	movs	r2, #0
 8004dce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b60      	cmp	r3, #96	; 0x60
 8004dea:	d10e      	bne.n	8004e0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e02:	6978      	ldr	r0, [r7, #20]
 8004e04:	f7fe fe29 	bl	8003a5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e08:	e027      	b.n	8004e5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e10:	2b28      	cmp	r3, #40	; 0x28
 8004e12:	d117      	bne.n	8004e44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2200      	movs	r2, #0
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2228      	movs	r2, #40	; 0x28
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e42:	e007      	b.n	8004e54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e54:	6978      	ldr	r0, [r7, #20]
 8004e56:	f7fe fdf7 	bl	8003a48 <HAL_I2C_ErrorCallback>
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	2000006c 	.word	0x2000006c
 8004e68:	14f8b589 	.word	0x14f8b589

08004e6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	4a13      	ldr	r2, [pc, #76]	; (8004ecc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	0a1a      	lsrs	r2, r3, #8
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e008      	b.n	8004ebc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb8:	d0e9      	beq.n	8004e8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000006c 	.word	0x2000006c
 8004ecc:	14f8b589 	.word	0x14f8b589

08004ed0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ee0:	d103      	bne.n	8004eea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ee8:	e007      	b.n	8004efa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ef2:	d102      	bne.n	8004efa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr

08004f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e31d      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f16:	4b94      	ldr	r3, [pc, #592]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f20:	4b91      	ldr	r3, [pc, #580]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f28:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07b      	beq.n	800502e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d006      	beq.n	8004f4a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d10f      	bne.n	8004f62 <HAL_RCC_OscConfig+0x5e>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f48:	d10b      	bne.n	8004f62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4a:	4b87      	ldr	r3, [pc, #540]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d06a      	beq.n	800502c <HAL_RCC_OscConfig+0x128>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d166      	bne.n	800502c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e2f7      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d106      	bne.n	8004f78 <HAL_RCC_OscConfig+0x74>
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7e      	ldr	r2, [pc, #504]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e02d      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10c      	bne.n	8004f9a <HAL_RCC_OscConfig+0x96>
 8004f80:	4b79      	ldr	r3, [pc, #484]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a78      	ldr	r2, [pc, #480]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4b76      	ldr	r3, [pc, #472]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a75      	ldr	r2, [pc, #468]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e01c      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd0>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCC_OscConfig+0xb8>
 8004fa2:	4b71      	ldr	r3, [pc, #452]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a70      	ldr	r2, [pc, #448]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	4b6e      	ldr	r3, [pc, #440]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a6d      	ldr	r2, [pc, #436]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e00b      	b.n	8004fd4 <HAL_RCC_OscConfig+0xd0>
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a69      	ldr	r2, [pc, #420]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	4b67      	ldr	r3, [pc, #412]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a66      	ldr	r2, [pc, #408]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fd f9d4 	bl	8002388 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe4:	f7fd f9d0 	bl	8002388 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b64      	cmp	r3, #100	; 0x64
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e2ad      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ff6:	4b5c      	ldr	r3, [pc, #368]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xe0>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005004:	f7fd f9c0 	bl	8002388 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800500c:	f7fd f9bc 	bl	8002388 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e299      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800501e:	4b52      	ldr	r3, [pc, #328]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x108>
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d05a      	beq.n	80050f0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	2b04      	cmp	r3, #4
 800503e:	d005      	beq.n	800504c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b0c      	cmp	r3, #12
 8005044:	d119      	bne.n	800507a <HAL_RCC_OscConfig+0x176>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d116      	bne.n	800507a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504c:	4b46      	ldr	r3, [pc, #280]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_RCC_OscConfig+0x160>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d001      	beq.n	8005064 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e276      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005064:	4b40      	ldr	r3, [pc, #256]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	493d      	ldr	r1, [pc, #244]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005074:	4313      	orrs	r3, r2
 8005076:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005078:	e03a      	b.n	80050f0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d020      	beq.n	80050c4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005082:	4b3a      	ldr	r3, [pc, #232]	; (800516c <HAL_RCC_OscConfig+0x268>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005088:	f7fd f97e 	bl	8002388 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005090:	f7fd f97a 	bl	8002388 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e257      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a2:	4b31      	ldr	r3, [pc, #196]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ae:	4b2e      	ldr	r3, [pc, #184]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021b      	lsls	r3, r3, #8
 80050bc:	492a      	ldr	r1, [pc, #168]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	604b      	str	r3, [r1, #4]
 80050c2:	e015      	b.n	80050f0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c4:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_RCC_OscConfig+0x268>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fd f95d 	bl	8002388 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fd f959 	bl	8002388 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e236      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050e4:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80b8 	beq.w	800526e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d170      	bne.n	80051e6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005104:	4b18      	ldr	r3, [pc, #96]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_OscConfig+0x218>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e21a      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1a      	ldr	r2, [r3, #32]
 8005120:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005128:	429a      	cmp	r2, r3
 800512a:	d921      	bls.n	8005170 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fc23 	bl	800597c <RCC_SetFlashLatencyFromMSIRange>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e208      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005140:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	4906      	ldr	r1, [pc, #24]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	061b      	lsls	r3, r3, #24
 8005160:	4901      	ldr	r1, [pc, #4]	; (8005168 <HAL_RCC_OscConfig+0x264>)
 8005162:	4313      	orrs	r3, r2
 8005164:	604b      	str	r3, [r1, #4]
 8005166:	e020      	b.n	80051aa <HAL_RCC_OscConfig+0x2a6>
 8005168:	40023800 	.word	0x40023800
 800516c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005170:	4ba4      	ldr	r3, [pc, #656]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	49a1      	ldr	r1, [pc, #644]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005182:	4ba0      	ldr	r3, [pc, #640]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	499c      	ldr	r1, [pc, #624]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fbee 	bl	800597c <RCC_SetFlashLatencyFromMSIRange>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e1d3      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	0b5b      	lsrs	r3, r3, #13
 80051b0:	3301      	adds	r3, #1
 80051b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80051ba:	4a92      	ldr	r2, [pc, #584]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80051bc:	6892      	ldr	r2, [r2, #8]
 80051be:	0912      	lsrs	r2, r2, #4
 80051c0:	f002 020f 	and.w	r2, r2, #15
 80051c4:	4990      	ldr	r1, [pc, #576]	; (8005408 <HAL_RCC_OscConfig+0x504>)
 80051c6:	5c8a      	ldrb	r2, [r1, r2]
 80051c8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051ca:	4a90      	ldr	r2, [pc, #576]	; (800540c <HAL_RCC_OscConfig+0x508>)
 80051cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051ce:	4b90      	ldr	r3, [pc, #576]	; (8005410 <HAL_RCC_OscConfig+0x50c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd f88c 	bl	80022f0 <HAL_InitTick>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d045      	beq.n	800526e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	e1b5      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d029      	beq.n	8005242 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051ee:	4b89      	ldr	r3, [pc, #548]	; (8005414 <HAL_RCC_OscConfig+0x510>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd f8c8 	bl	8002388 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051fc:	f7fd f8c4 	bl	8002388 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e1a1      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800520e:	4b7d      	ldr	r3, [pc, #500]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800521a:	4b7a      	ldr	r3, [pc, #488]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	4977      	ldr	r1, [pc, #476]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800522c:	4b75      	ldr	r3, [pc, #468]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	061b      	lsls	r3, r3, #24
 800523a:	4972      	ldr	r1, [pc, #456]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
 8005240:	e015      	b.n	800526e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005242:	4b74      	ldr	r3, [pc, #464]	; (8005414 <HAL_RCC_OscConfig+0x510>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd f89e 	bl	8002388 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005250:	f7fd f89a 	bl	8002388 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e177      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005262:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d030      	beq.n	80052dc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_RCC_OscConfig+0x514>)
 8005284:	2201      	movs	r2, #1
 8005286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005288:	f7fd f87e 	bl	8002388 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005290:	f7fd f87a 	bl	8002388 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e157      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052a2:	4b58      	ldr	r3, [pc, #352]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80052a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x38c>
 80052ae:	e015      	b.n	80052dc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b0:	4b59      	ldr	r3, [pc, #356]	; (8005418 <HAL_RCC_OscConfig+0x514>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b6:	f7fd f867 	bl	8002388 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052be:	f7fd f863 	bl	8002388 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e140      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052d0:	4b4c      	ldr	r3, [pc, #304]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80052d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80b5 	beq.w	8005454 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ee:	4b45      	ldr	r3, [pc, #276]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fa:	4b42      	ldr	r3, [pc, #264]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	4a41      	ldr	r2, [pc, #260]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6253      	str	r3, [r2, #36]	; 0x24
 8005306:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	60bb      	str	r3, [r7, #8]
 8005310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005312:	2301      	movs	r3, #1
 8005314:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <HAL_RCC_OscConfig+0x518>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d118      	bne.n	8005354 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005322:	4b3e      	ldr	r3, [pc, #248]	; (800541c <HAL_RCC_OscConfig+0x518>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a3d      	ldr	r2, [pc, #244]	; (800541c <HAL_RCC_OscConfig+0x518>)
 8005328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532e:	f7fd f82b 	bl	8002388 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005336:	f7fd f827 	bl	8002388 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b64      	cmp	r3, #100	; 0x64
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e104      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005348:	4b34      	ldr	r3, [pc, #208]	; (800541c <HAL_RCC_OscConfig+0x518>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d106      	bne.n	800536a <HAL_RCC_OscConfig+0x466>
 800535c:	4b29      	ldr	r3, [pc, #164]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	4a28      	ldr	r2, [pc, #160]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005366:	6353      	str	r3, [r2, #52]	; 0x34
 8005368:	e02d      	b.n	80053c6 <HAL_RCC_OscConfig+0x4c2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0x488>
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005376:	4a23      	ldr	r2, [pc, #140]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800537c:	6353      	str	r3, [r2, #52]	; 0x34
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	4a20      	ldr	r2, [pc, #128]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005388:	6353      	str	r3, [r2, #52]	; 0x34
 800538a:	e01c      	b.n	80053c6 <HAL_RCC_OscConfig+0x4c2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b05      	cmp	r3, #5
 8005392:	d10c      	bne.n	80053ae <HAL_RCC_OscConfig+0x4aa>
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 800539a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539e:	6353      	str	r3, [r2, #52]	; 0x34
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	4a17      	ldr	r2, [pc, #92]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	6353      	str	r3, [r2, #52]	; 0x34
 80053ac:	e00b      	b.n	80053c6 <HAL_RCC_OscConfig+0x4c2>
 80053ae:	4b15      	ldr	r3, [pc, #84]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4a14      	ldr	r2, [pc, #80]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b8:	6353      	str	r3, [r2, #52]	; 0x34
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	4a11      	ldr	r2, [pc, #68]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053c4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d015      	beq.n	80053fa <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ce:	f7fc ffdb 	bl	8002388 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053d4:	e00a      	b.n	80053ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053d6:	f7fc ffd7 	bl	8002388 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e0b2      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_OscConfig+0x500>)
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d0ee      	beq.n	80053d6 <HAL_RCC_OscConfig+0x4d2>
 80053f8:	e023      	b.n	8005442 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fc ffc5 	bl	8002388 <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005400:	e019      	b.n	8005436 <HAL_RCC_OscConfig+0x532>
 8005402:	bf00      	nop
 8005404:	40023800 	.word	0x40023800
 8005408:	0800ba24 	.word	0x0800ba24
 800540c:	2000006c 	.word	0x2000006c
 8005410:	20000070 	.word	0x20000070
 8005414:	42470020 	.word	0x42470020
 8005418:	42470680 	.word	0x42470680
 800541c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fc ffb2 	bl	8002388 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e08d      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005436:	4b49      	ldr	r3, [pc, #292]	; (800555c <HAL_RCC_OscConfig+0x658>)
 8005438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1ee      	bne.n	8005420 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005442:	7ffb      	ldrb	r3, [r7, #31]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005448:	4b44      	ldr	r3, [pc, #272]	; (800555c <HAL_RCC_OscConfig+0x658>)
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	4a43      	ldr	r2, [pc, #268]	; (800555c <HAL_RCC_OscConfig+0x658>)
 800544e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005452:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d079      	beq.n	8005550 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d056      	beq.n	8005510 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b02      	cmp	r3, #2
 8005468:	d13b      	bne.n	80054e2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b3d      	ldr	r3, [pc, #244]	; (8005560 <HAL_RCC_OscConfig+0x65c>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005470:	f7fc ff8a 	bl	8002388 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fc ff86 	bl	8002388 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e063      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800548a:	4b34      	ldr	r3, [pc, #208]	; (800555c <HAL_RCC_OscConfig+0x658>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_RCC_OscConfig+0x658>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	4319      	orrs	r1, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	430b      	orrs	r3, r1
 80054ae:	492b      	ldr	r1, [pc, #172]	; (800555c <HAL_RCC_OscConfig+0x658>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b4:	4b2a      	ldr	r3, [pc, #168]	; (8005560 <HAL_RCC_OscConfig+0x65c>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fc ff65 	bl	8002388 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fc ff61 	bl	8002388 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e03e      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d4:	4b21      	ldr	r3, [pc, #132]	; (800555c <HAL_RCC_OscConfig+0x658>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0f0      	beq.n	80054c2 <HAL_RCC_OscConfig+0x5be>
 80054e0:	e036      	b.n	8005550 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e2:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <HAL_RCC_OscConfig+0x65c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e8:	f7fc ff4e 	bl	8002388 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fc ff4a 	bl	8002388 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e027      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005502:	4b16      	ldr	r3, [pc, #88]	; (800555c <HAL_RCC_OscConfig+0x658>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x5ec>
 800550e:	e01f      	b.n	8005550 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e01a      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800551c:	4b0f      	ldr	r3, [pc, #60]	; (800555c <HAL_RCC_OscConfig+0x658>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	429a      	cmp	r2, r3
 800552e:	d10d      	bne.n	800554c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d106      	bne.n	800554c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40023800 	.word	0x40023800
 8005560:	42470060 	.word	0x42470060

08005564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e11a      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005578:	4b8f      	ldr	r3, [pc, #572]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d919      	bls.n	80055ba <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_ClockConfig+0x34>
 800558c:	4b8a      	ldr	r3, [pc, #552]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a89      	ldr	r2, [pc, #548]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 8005592:	f043 0304 	orr.w	r3, r3, #4
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	4b87      	ldr	r3, [pc, #540]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f023 0201 	bic.w	r2, r3, #1
 80055a0:	4985      	ldr	r1, [pc, #532]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a8:	4b83      	ldr	r3, [pc, #524]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d001      	beq.n	80055ba <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e0f9      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d008      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055c6:	4b7d      	ldr	r3, [pc, #500]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	497a      	ldr	r1, [pc, #488]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 808e 	beq.w	8005702 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d107      	bne.n	80055fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ee:	4b73      	ldr	r3, [pc, #460]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d121      	bne.n	800563e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e0d7      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005606:	4b6d      	ldr	r3, [pc, #436]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d115      	bne.n	800563e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0cb      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d107      	bne.n	800562e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800561e:	4b67      	ldr	r3, [pc, #412]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e0bf      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800562e:	4b63      	ldr	r3, [pc, #396]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e0b7      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f023 0203 	bic.w	r2, r3, #3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	495c      	ldr	r1, [pc, #368]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005650:	f7fc fe9a 	bl	8002388 <HAL_GetTick>
 8005654:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d112      	bne.n	8005684 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fc fe92 	bl	8002388 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e09b      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005676:	4b51      	ldr	r3, [pc, #324]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 030c 	and.w	r3, r3, #12
 800567e:	2b08      	cmp	r3, #8
 8005680:	d1ee      	bne.n	8005660 <HAL_RCC_ClockConfig+0xfc>
 8005682:	e03e      	b.n	8005702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d112      	bne.n	80056b2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800568e:	f7fc fe7b 	bl	8002388 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	f241 3288 	movw	r2, #5000	; 0x1388
 800569c:	4293      	cmp	r3, r2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e084      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b0c      	cmp	r3, #12
 80056ae:	d1ee      	bne.n	800568e <HAL_RCC_ClockConfig+0x12a>
 80056b0:	e027      	b.n	8005702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d11d      	bne.n	80056f6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056bc:	f7fc fe64 	bl	8002388 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e06d      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056d2:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d1ee      	bne.n	80056bc <HAL_RCC_ClockConfig+0x158>
 80056de:	e010      	b.n	8005702 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056e0:	f7fc fe52 	bl	8002388 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e05b      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80056f6:	4b31      	ldr	r3, [pc, #196]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ee      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005702:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d219      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d105      	bne.n	8005722 <HAL_RCC_ClockConfig+0x1be>
 8005716:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 800571c:	f043 0304 	orr.w	r3, r3, #4
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	4923      	ldr	r1, [pc, #140]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b21      	ldr	r3, [pc, #132]	; (80057b8 <HAL_RCC_ClockConfig+0x254>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e034      	b.n	80057ae <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4917      	ldr	r1, [pc, #92]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	490f      	ldr	r1, [pc, #60]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005782:	f000 f823 	bl	80057cc <HAL_RCC_GetSysClockFreq>
 8005786:	4602      	mov	r2, r0
 8005788:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <HAL_RCC_ClockConfig+0x258>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f003 030f 	and.w	r3, r3, #15
 8005792:	490b      	ldr	r1, [pc, #44]	; (80057c0 <HAL_RCC_ClockConfig+0x25c>)
 8005794:	5ccb      	ldrb	r3, [r1, r3]
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <HAL_RCC_ClockConfig+0x260>)
 800579c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800579e:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_ClockConfig+0x264>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fc fda4 	bl	80022f0 <HAL_InitTick>
 80057a8:	4603      	mov	r3, r0
 80057aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80057ac:	7afb      	ldrb	r3, [r7, #11]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40023c00 	.word	0x40023c00
 80057bc:	40023800 	.word	0x40023800
 80057c0:	0800ba24 	.word	0x0800ba24
 80057c4:	2000006c 	.word	0x2000006c
 80057c8:	20000070 	.word	0x20000070

080057cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057cc:	b5b0      	push	{r4, r5, r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80057d2:	4b4d      	ldr	r3, [pc, #308]	; (8005908 <HAL_RCC_GetSysClockFreq+0x13c>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b0c      	cmp	r3, #12
 80057e0:	d00c      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x30>
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d87c      	bhi.n	80058e0 <HAL_RCC_GetSysClockFreq+0x114>
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d002      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0x24>
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d003      	beq.n	80057f6 <HAL_RCC_GetSysClockFreq+0x2a>
 80057ee:	e077      	b.n	80058e0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057f0:	4b46      	ldr	r3, [pc, #280]	; (800590c <HAL_RCC_GetSysClockFreq+0x140>)
 80057f2:	613b      	str	r3, [r7, #16]
      break;
 80057f4:	e082      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057f6:	4b46      	ldr	r3, [pc, #280]	; (8005910 <HAL_RCC_GetSysClockFreq+0x144>)
 80057f8:	613b      	str	r3, [r7, #16]
      break;
 80057fa:	e07f      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0c9b      	lsrs	r3, r3, #18
 8005800:	f003 030f 	and.w	r3, r3, #15
 8005804:	4a43      	ldr	r2, [pc, #268]	; (8005914 <HAL_RCC_GetSysClockFreq+0x148>)
 8005806:	5cd3      	ldrb	r3, [r2, r3]
 8005808:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	0d9b      	lsrs	r3, r3, #22
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005816:	4b3c      	ldr	r3, [pc, #240]	; (8005908 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d01a      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	461a      	mov	r2, r3
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	4939      	ldr	r1, [pc, #228]	; (8005910 <HAL_RCC_GetSysClockFreq+0x144>)
 800582c:	fb01 f003 	mul.w	r0, r1, r3
 8005830:	2100      	movs	r1, #0
 8005832:	fb01 f102 	mul.w	r1, r1, r2
 8005836:	1844      	adds	r4, r0, r1
 8005838:	4935      	ldr	r1, [pc, #212]	; (8005910 <HAL_RCC_GetSysClockFreq+0x144>)
 800583a:	fba2 0101 	umull	r0, r1, r2, r1
 800583e:	1863      	adds	r3, r4, r1
 8005840:	4619      	mov	r1, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	461a      	mov	r2, r3
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f7fa fe7b 	bl	8000544 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4613      	mov	r3, r2
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	e040      	b.n	80058da <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	461c      	mov	r4, r3
 800585c:	f04f 0500 	mov.w	r5, #0
 8005860:	4620      	mov	r0, r4
 8005862:	4629      	mov	r1, r5
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	014b      	lsls	r3, r1, #5
 800586e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005872:	0142      	lsls	r2, r0, #5
 8005874:	4610      	mov	r0, r2
 8005876:	4619      	mov	r1, r3
 8005878:	1b00      	subs	r0, r0, r4
 800587a:	eb61 0105 	sbc.w	r1, r1, r5
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	f04f 0300 	mov.w	r3, #0
 8005886:	018b      	lsls	r3, r1, #6
 8005888:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800588c:	0182      	lsls	r2, r0, #6
 800588e:	1a12      	subs	r2, r2, r0
 8005890:	eb63 0301 	sbc.w	r3, r3, r1
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f04f 0100 	mov.w	r1, #0
 800589c:	00d9      	lsls	r1, r3, #3
 800589e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058a2:	00d0      	lsls	r0, r2, #3
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	1912      	adds	r2, r2, r4
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	0299      	lsls	r1, r3, #10
 80058b8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058bc:	0290      	lsls	r0, r2, #10
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	461a      	mov	r2, r3
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	f7fa fe39 	bl	8000544 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4613      	mov	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
      break;
 80058de:	e00d      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_GetSysClockFreq+0x13c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0b5b      	lsrs	r3, r3, #13
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	3301      	adds	r3, #1
 80058f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	613b      	str	r3, [r7, #16]
      break;
 80058fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fc:	693b      	ldr	r3, [r7, #16]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bdb0      	pop	{r4, r5, r7, pc}
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	00f42400 	.word	0x00f42400
 8005910:	01312d00 	.word	0x01312d00
 8005914:	0800ba18 	.word	0x0800ba18

08005918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800591c:	4b02      	ldr	r3, [pc, #8]	; (8005928 <HAL_RCC_GetHCLKFreq+0x10>)
 800591e:	681b      	ldr	r3, [r3, #0]
}
 8005920:	4618      	mov	r0, r3
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	2000006c 	.word	0x2000006c

0800592c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005930:	f7ff fff2 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 8005934:	4602      	mov	r2, r0
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	4903      	ldr	r1, [pc, #12]	; (8005950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005942:	5ccb      	ldrb	r3, [r1, r3]
 8005944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005948:	4618      	mov	r0, r3
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40023800 	.word	0x40023800
 8005950:	0800ba34 	.word	0x0800ba34

08005954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005958:	f7ff ffde 	bl	8005918 <HAL_RCC_GetHCLKFreq>
 800595c:	4602      	mov	r2, r0
 800595e:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	0adb      	lsrs	r3, r3, #11
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	4903      	ldr	r1, [pc, #12]	; (8005978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800596a:	5ccb      	ldrb	r3, [r1, r3]
 800596c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005970:	4618      	mov	r0, r3
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40023800 	.word	0x40023800
 8005978:	0800ba34 	.word	0x0800ba34

0800597c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005988:	4b29      	ldr	r3, [pc, #164]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d12c      	bne.n	80059ee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005994:	4b26      	ldr	r3, [pc, #152]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80059a0:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e016      	b.n	80059da <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b6:	6253      	str	r3, [r2, #36]	; 0x24
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80059cc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	4a17      	ldr	r2, [pc, #92]	; (8005a30 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80059d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80059e0:	d105      	bne.n	80059ee <RCC_SetFlashLatencyFromMSIRange+0x72>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80059e8:	d101      	bne.n	80059ee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80059ea:	2301      	movs	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d105      	bne.n	8005a00 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80059f4:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a0f      	ldr	r2, [pc, #60]	; (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059fa:	f043 0304 	orr.w	r3, r3, #4
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 0201 	bic.w	r2, r3, #1
 8005a08:	490b      	ldr	r1, [pc, #44]	; (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a10:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40007000 	.word	0x40007000
 8005a38:	40023c00 	.word	0x40023c00

08005a3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80ed 	beq.w	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a62:	4b78      	ldr	r3, [pc, #480]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10d      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a6e:	4b75      	ldr	r3, [pc, #468]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	4a74      	ldr	r2, [pc, #464]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a78:	6253      	str	r3, [r2, #36]	; 0x24
 8005a7a:	4b72      	ldr	r3, [pc, #456]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a86:	2301      	movs	r3, #1
 8005a88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a8a:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d118      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a96:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a6b      	ldr	r2, [pc, #428]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aa2:	f7fc fc71 	bl	8002388 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa8:	e008      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aaa:	f7fc fc6d 	bl	8002388 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b64      	cmp	r3, #100	; 0x64
 8005ab6:	d901      	bls.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0be      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005abc:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ac8:	4b5e      	ldr	r3, [pc, #376]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005ad0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d00f      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005afa:	d108      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005afc:	4b51      	ldr	r3, [pc, #324]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b08:	d101      	bne.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e095      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b0e:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b16:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d041      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10c      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d02d      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d027      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b52:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005b5a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b62:	4b3a      	ldr	r3, [pc, #232]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b68:	4a36      	ldr	r2, [pc, #216]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d014      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b78:	f7fc fc06 	bl	8002388 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b80:	f7fc fc02 	bl	8002388 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e051      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b96:	4b2b      	ldr	r3, [pc, #172]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ee      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bba:	d10a      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bbc:	4b21      	ldr	r3, [pc, #132]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005bcc:	491d      	ldr	r1, [pc, #116]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]
 8005bd2:	4b1c      	ldr	r3, [pc, #112]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bde:	4919      	ldr	r1, [pc, #100]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01a      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bfc:	d10a      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005c0e:	490d      	ldr	r1, [pc, #52]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c20:	4908      	ldr	r1, [pc, #32]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d105      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c36:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800
 8005c48:	40007000 	.word	0x40007000
 8005c4c:	424706dc 	.word	0x424706dc

08005c50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07c      	b.n	8005d5c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	7f5b      	ldrb	r3, [r3, #29]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fc f97c 	bl	8001f70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	22ca      	movs	r2, #202	; 0xca
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2253      	movs	r2, #83	; 0x53
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fba5 	bl	80063de <RTC_EnterInitMode>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	22ff      	movs	r2, #255	; 0xff
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e057      	b.n	8005d5c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	68d2      	ldr	r2, [r2, #12]
 8005ce6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6919      	ldr	r1, [r3, #16]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	041a      	lsls	r2, r3, #16
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d0a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fb40 	bl	8006392 <HAL_RTC_WaitForSynchro>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d008      	beq.n	8005d2a <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2204      	movs	r2, #4
 8005d24:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e018      	b.n	8005d5c <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	22ff      	movs	r2, #255	; 0xff
 8005d52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
  }
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d64:	b590      	push	{r4, r7, lr}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	7f1b      	ldrb	r3, [r3, #28]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_RTC_SetTime+0x18>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e0a3      	b.n	8005ec4 <HAL_RTC_SetTime+0x160>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d126      	bne.n	8005ddc <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fb43 	bl	8006432 <RTC_ByteToBcd2>
 8005dac:	4603      	mov	r3, r0
 8005dae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fb3c 	bl	8006432 <RTC_ByteToBcd2>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005dbe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	789b      	ldrb	r3, [r3, #2]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fb34 	bl	8006432 <RTC_ByteToBcd2>
 8005dca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005dcc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	78db      	ldrb	r3, [r3, #3]
 8005dd4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
 8005dda:	e018      	b.n	8005e0e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d102      	bne.n	8005df0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2200      	movs	r2, #0
 8005dee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005dfc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	78db      	ldrb	r3, [r3, #3]
 8005e08:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22ca      	movs	r2, #202	; 0xca
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2253      	movs	r2, #83	; 0x53
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 fadd 	bl	80063de <RTC_EnterInitMode>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	22ff      	movs	r2, #255	; 0xff
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2204      	movs	r2, #4
 8005e36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e040      	b.n	8005ec4 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6899      	ldr	r1, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e88:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fa81 	bl	8006392 <HAL_RTC_WaitForSynchro>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00b      	beq.n	8005eae <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	22ff      	movs	r2, #255	; 0xff
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00a      	b.n	8005ec4 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	22ff      	movs	r2, #255	; 0xff
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd90      	pop	{r4, r7, pc}

08005ecc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ee2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ee6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	0a1b      	lsrs	r3, r3, #8
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	0c1b      	lsrs	r3, r3, #16
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11a      	bne.n	8005f62 <HAL_RTC_GetTime+0x96>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 fa9d 	bl	8006470 <RTC_Bcd2ToByte>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f000 fa94 	bl	8006470 <RTC_Bcd2ToByte>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	789b      	ldrb	r3, [r3, #2]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 fa8b 	bl	8006470 <RTC_Bcd2ToByte>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	7f1b      	ldrb	r3, [r3, #28]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_RTC_SetDate+0x18>
 8005f80:	2302      	movs	r3, #2
 8005f82:	e08d      	b.n	80060a0 <HAL_RTC_SetDate+0x134>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2201      	movs	r2, #1
 8005f88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10e      	bne.n	8005fb4 <HAL_RTC_SetDate+0x48>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	785b      	ldrb	r3, [r3, #1]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	785b      	ldrb	r3, [r3, #1]
 8005fa6:	f023 0310 	bic.w	r3, r3, #16
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	330a      	adds	r3, #10
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d11c      	bne.n	8005ff4 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	78db      	ldrb	r3, [r3, #3]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa37 	bl	8006432 <RTC_ByteToBcd2>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fa30 	bl	8006432 <RTC_ByteToBcd2>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fd6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	789b      	ldrb	r3, [r3, #2]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fa28 	bl	8006432 <RTC_ByteToBcd2>
 8005fe2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fe4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	e00e      	b.n	8006012 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006000:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006006:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ca      	movs	r2, #202	; 0xca
 8006018:	625a      	str	r2, [r3, #36]	; 0x24
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2253      	movs	r2, #83	; 0x53
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f9db 	bl	80063de <RTC_EnterInitMode>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2204      	movs	r2, #4
 800603a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02c      	b.n	80060a0 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006050:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006054:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006064:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f993 	bl	8006392 <HAL_RTC_WaitForSynchro>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	22ff      	movs	r2, #255	; 0xff
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2204      	movs	r2, #4
 800607e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e00a      	b.n	80060a0 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800609e:	2300      	movs	r3, #0
  }
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	7f1b      	ldrb	r3, [r3, #28]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_RTC_SetAlarm_IT+0x20>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e10f      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x240>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2202      	movs	r2, #2
 80060d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d136      	bne.n	8006148 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2200      	movs	r2, #0
 80060ec:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f99d 	bl	8006432 <RTC_ByteToBcd2>
 80060f8:	4603      	mov	r3, r0
 80060fa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 f996 	bl	8006432 <RTC_ByteToBcd2>
 8006106:	4603      	mov	r3, r0
 8006108:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800610a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	789b      	ldrb	r3, [r3, #2]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 f98e 	bl	8006432 <RTC_ByteToBcd2>
 8006116:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006118:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78db      	ldrb	r3, [r3, #3]
 8006120:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006122:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	7d1b      	ldrb	r3, [r3, #20]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f981 	bl	8006432 <RTC_ByteToBcd2>
 8006130:	4603      	mov	r3, r0
 8006132:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006134:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800613c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e022      	b.n	800618e <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2200      	movs	r2, #0
 800615a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006168:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800616e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	78db      	ldrb	r3, [r3, #3]
 8006174:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006176:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	7d1b      	ldrb	r3, [r3, #20]
 800617c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800617e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006184:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	22ca      	movs	r2, #202	; 0xca
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2253      	movs	r2, #83	; 0x53
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a6:	d144      	bne.n	8006232 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061b6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80061c8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061ca:	f7fc f8dd 	bl	8002388 <HAL_GetTick>
 80061ce:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061d0:	e013      	b.n	80061fa <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80061d2:	f7fc f8d9 	bl	8002388 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061e0:	d90b      	bls.n	80061fa <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	22ff      	movs	r2, #255	; 0xff
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2203      	movs	r2, #3
 80061ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e076      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0e4      	beq.n	80061d2 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800622e:	609a      	str	r2, [r3, #8]
 8006230:	e043      	b.n	80062ba <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006240:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006252:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006254:	f7fc f898 	bl	8002388 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800625a:	e013      	b.n	8006284 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800625c:	f7fc f894 	bl	8002388 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800626a:	d90b      	bls.n	8006284 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2203      	movs	r2, #3
 8006278:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e031      	b.n	80062e8 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d0e4      	beq.n	800625c <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80062ba:	4b0d      	ldr	r3, [pc, #52]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x248>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x248>)
 80062c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x248>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <HAL_RTC_SetAlarm_IT+0x248>)
 80062cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}
 80062f0:	40010400 	.word	0x40010400

080062f4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d012      	beq.n	8006330 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f831 	bl	8006380 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800632e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d012      	beq.n	8006364 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00b      	beq.n	8006364 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8aa 	bl	80064a6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006362:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RTC_AlarmIRQHandler+0x88>)
 8006366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800636a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	775a      	strb	r2, [r3, #29]
}
 8006372:	bf00      	nop
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	40010400 	.word	0x40010400

08006380 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063a8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063aa:	f7fb ffed 	bl	8002388 <HAL_GetTick>
 80063ae:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063b0:	e009      	b.n	80063c6 <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80063b2:	f7fb ffe9 	bl	8002388 <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c0:	d901      	bls.n	80063c6 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e007      	b.n	80063d6 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0ee      	beq.n	80063b2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d119      	bne.n	8006428 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063fe:	f7fb ffc3 	bl	8002388 <HAL_GetTick>
 8006402:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006404:	e009      	b.n	800641a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006406:	f7fb ffbf 	bl	8002388 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006414:	d901      	bls.n	800641a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e007      	b.n	800642a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0ee      	beq.n	8006406 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	4603      	mov	r3, r0
 800643a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006444:	e005      	b.n	8006452 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	3b0a      	subs	r3, #10
 8006450:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006452:	7afb      	ldrb	r3, [r7, #11]
 8006454:	2b09      	cmp	r3, #9
 8006456:	d8f6      	bhi.n	8006446 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	b2da      	uxtb	r2, r3
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	4313      	orrs	r3, r2
 8006464:	b2db      	uxtb	r3, r3
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bc80      	pop	{r7}
 800646e:	4770      	bx	lr

08006470 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	b2db      	uxtb	r3, r3
 8006480:	461a      	mov	r2, r3
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	b2db      	uxtb	r3, r3
 8006498:	4413      	add	r3, r2
 800649a:	b2db      	uxtb	r3, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e06e      	b.n	80065a8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064da:	d009      	beq.n	80064f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	61da      	str	r2, [r3, #28]
 80064e2:	e005      	b.n	80064f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fb fd4c 	bl	8001fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006526:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	ea42 0103 	orr.w	r1, r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	0c1a      	lsrs	r2, r3, #16
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f002 0204 	and.w	r2, r2, #4
 8006596:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	4613      	mov	r3, r2
 80065be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <HAL_SPI_Transmit+0x22>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e126      	b.n	8006820 <HAL_SPI_Transmit+0x270>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065da:	f7fb fed5 	bl	8002388 <HAL_GetTick>
 80065de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065e0:	88fb      	ldrh	r3, [r7, #6]
 80065e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d002      	beq.n	80065f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
 80065f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065f4:	e10b      	b.n	800680e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Transmit+0x52>
 80065fc:	88fb      	ldrh	r3, [r7, #6]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006606:	e102      	b.n	800680e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2203      	movs	r2, #3
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664e:	d10f      	bne.n	8006670 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d007      	beq.n	800668e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800668c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006696:	d14b      	bne.n	8006730 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0xf6>
 80066a0:	8afb      	ldrh	r3, [r7, #22]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d13e      	bne.n	8006724 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066ca:	e02b      	b.n	8006724 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d112      	bne.n	8006700 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	881a      	ldrh	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	1c9a      	adds	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80066fe:	e011      	b.n	8006724 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006700:	f7fb fe42 	bl	8002388 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d803      	bhi.n	8006718 <HAL_SPI_Transmit+0x168>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	d102      	bne.n	800671e <HAL_SPI_Transmit+0x16e>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006722:	e074      	b.n	800680e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1ce      	bne.n	80066cc <HAL_SPI_Transmit+0x11c>
 800672e:	e04c      	b.n	80067ca <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_SPI_Transmit+0x18e>
 8006738:	8afb      	ldrh	r3, [r7, #22]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d140      	bne.n	80067c0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006764:	e02c      	b.n	80067c0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b02      	cmp	r3, #2
 8006772:	d113      	bne.n	800679c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	86da      	strh	r2, [r3, #54]	; 0x36
 800679a:	e011      	b.n	80067c0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800679c:	f7fb fdf4 	bl	8002388 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d803      	bhi.n	80067b4 <HAL_SPI_Transmit+0x204>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d102      	bne.n	80067ba <HAL_SPI_Transmit+0x20a>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067be:	e026      	b.n	800680e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1cd      	bne.n	8006766 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fb58 	bl	8006e84 <SPI_EndRxTxTransaction>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e000      	b.n	800680e <HAL_SPI_Transmit+0x25e>
  }

error:
 800680c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800681e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08c      	sub	sp, #48	; 0x30
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006836:	2301      	movs	r3, #1
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_SPI_TransmitReceive+0x26>
 800684a:	2302      	movs	r3, #2
 800684c:	e18a      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x33c>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006856:	f7fb fd97 	bl	8002388 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800686c:	887b      	ldrh	r3, [r7, #2]
 800686e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006874:	2b01      	cmp	r3, #1
 8006876:	d00f      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x70>
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687e:	d107      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x68>
 8006888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800688c:	2b04      	cmp	r3, #4
 800688e:	d003      	beq.n	8006898 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006890:	2302      	movs	r3, #2
 8006892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006896:	e15b      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x82>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x82>
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068b0:	e14e      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d003      	beq.n	80068c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2205      	movs	r2, #5
 80068c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	887a      	ldrh	r2, [r7, #2]
 80068dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	887a      	ldrh	r2, [r7, #2]
 80068e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	887a      	ldrh	r2, [r7, #2]
 80068ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d007      	beq.n	800691a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006922:	d178      	bne.n	8006a16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_SPI_TransmitReceive+0x10a>
 800692c:	8b7b      	ldrh	r3, [r7, #26]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d166      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	881a      	ldrh	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	1c9a      	adds	r2, r3, #2
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006956:	e053      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d11b      	bne.n	800699e <HAL_SPI_TransmitReceive+0x176>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d016      	beq.n	800699e <HAL_SPI_TransmitReceive+0x176>
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d113      	bne.n	800699e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	1c9a      	adds	r2, r3, #2
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d119      	bne.n	80069e0 <HAL_SPI_TransmitReceive+0x1b8>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d014      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	b292      	uxth	r2, r2
 80069c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	1c9a      	adds	r2, r3, #2
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069dc:	2301      	movs	r3, #1
 80069de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069e0:	f7fb fcd2 	bl	8002388 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d807      	bhi.n	8006a00 <HAL_SPI_TransmitReceive+0x1d8>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d003      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069fe:	e0a7      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1a6      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x130>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1a1      	bne.n	8006958 <HAL_SPI_TransmitReceive+0x130>
 8006a14:	e07c      	b.n	8006b10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_SPI_TransmitReceive+0x1fc>
 8006a1e:	8b7b      	ldrh	r3, [r7, #26]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d16b      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	330c      	adds	r3, #12
 8006a2e:	7812      	ldrb	r2, [r2, #0]
 8006a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4a:	e057      	b.n	8006afc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d11c      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x26c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d017      	beq.n	8006a94 <HAL_SPI_TransmitReceive+0x26c>
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d114      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d119      	bne.n	8006ad6 <HAL_SPI_TransmitReceive+0x2ae>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d014      	beq.n	8006ad6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ad6:	f7fb fc57 	bl	8002388 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d803      	bhi.n	8006aee <HAL_SPI_TransmitReceive+0x2c6>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d102      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x2cc>
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006afa:	e029      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1a2      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d19d      	bne.n	8006a4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f9b5 	bl	8006e84 <SPI_EndRxTxTransaction>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b2c:	e010      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10b      	bne.n	8006b4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	617b      	str	r3, [r7, #20]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	e000      	b.n	8006b50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3730      	adds	r7, #48	; 0x30
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00a      	beq.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	099b      	lsrs	r3, r3, #6
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	4798      	blx	r3
    return;
 8006bae:	e0be      	b.n	8006d2e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x66>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	09db      	lsrs	r3, r3, #7
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d004      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	4798      	blx	r3
    return;
 8006bd0:	e0ad      	b.n	8006d2e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d106      	bne.n	8006bec <HAL_SPI_IRQHandler+0x80>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	099b      	lsrs	r3, r3, #6
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f000 80a1 	beq.w	8006d2e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 809a 	beq.w	8006d2e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	099b      	lsrs	r3, r3, #6
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d023      	beq.n	8006c4e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d011      	beq.n	8006c36 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	e00b      	b.n	8006c4e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]
        return;
 8006c4c:	e06f      	b.n	8006d2e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f043 0201 	orr.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d04f      	beq.n	8006d2c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c9a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <HAL_SPI_IRQHandler+0x14c>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d034      	beq.n	8006d22 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0203 	bic.w	r2, r2, #3
 8006cc6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d011      	beq.n	8006cf4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd4:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <HAL_SPI_IRQHandler+0x1c8>)
 8006cd6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fc f925 	bl	8002f2c <HAL_DMA_Abort_IT>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d016      	beq.n	8006d2a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d00:	4a0c      	ldr	r2, [pc, #48]	; (8006d34 <HAL_SPI_IRQHandler+0x1c8>)
 8006d02:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7fc f90f 	bl	8002f2c <HAL_DMA_Abort_IT>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006d20:	e003      	b.n	8006d2a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f808 	bl	8006d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d28:	e000      	b.n	8006d2c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006d2a:	bf00      	nop
    return;
 8006d2c:	bf00      	nop
  }
}
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	08006d4b 	.word	0x08006d4b

08006d38 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f7ff ffe7 	bl	8006d38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fb fb00 	bl	8002388 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fb faf8 	bl	8002388 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fb fae8 	bl	8002388 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	2000006c 	.word	0x2000006c

08006e84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e90:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <SPI_EndRxTxTransaction+0x7c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a1b      	ldr	r2, [pc, #108]	; (8006f04 <SPI_EndRxTxTransaction+0x80>)
 8006e96:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9a:	0d5b      	lsrs	r3, r3, #21
 8006e9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ea0:	fb02 f303 	mul.w	r3, r2, r3
 8006ea4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eae:	d112      	bne.n	8006ed6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	2180      	movs	r1, #128	; 0x80
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff ff5a 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d016      	beq.n	8006ef4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e00f      	b.n	8006ef6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	2b80      	cmp	r3, #128	; 0x80
 8006eee:	d0f2      	beq.n	8006ed6 <SPI_EndRxTxTransaction+0x52>
 8006ef0:	e000      	b.n	8006ef4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ef2:	bf00      	nop
  }

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	2000006c 	.word	0x2000006c
 8006f04:	165e9f81 	.word	0x165e9f81

08006f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e03f      	b.n	8006f9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb f886 	bl	8002040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2224      	movs	r2, #36	; 0x24
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb49 	bl	80075e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695a      	ldr	r2, [r3, #20]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2220      	movs	r2, #32
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x52>
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d003      	beq.n	8006ff6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa4f 	bl	8007492 <UART_Receive_IT>
      return;
 8006ff4:	e17b      	b.n	80072ee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80b1 	beq.w	8007160 <HAL_UART_IRQHandler+0x1bc>
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_UART_IRQHandler+0x70>
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80a6 	beq.w	8007160 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00a      	beq.n	8007034 <HAL_UART_IRQHandler+0x90>
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	f043 0201 	orr.w	r2, r3, #1
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <HAL_UART_IRQHandler+0xb0>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	f043 0202 	orr.w	r2, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <HAL_UART_IRQHandler+0xd0>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	f043 0204 	orr.w	r2, r3, #4
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <HAL_UART_IRQHandler+0xfa>
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <HAL_UART_IRQHandler+0xee>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f043 0208 	orr.w	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 811e 	beq.w	80072e4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_UART_IRQHandler+0x11e>
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9e8 	bl	8007492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	f003 0308 	and.w	r3, r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <HAL_UART_IRQHandler+0x146>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d031      	beq.n	800714e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f92a 	bl	8007344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fa:	2b40      	cmp	r3, #64	; 0x40
 80070fc:	d123      	bne.n	8007146 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800710c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	2b00      	cmp	r3, #0
 8007114:	d013      	beq.n	800713e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	4a76      	ldr	r2, [pc, #472]	; (80072f4 <HAL_UART_IRQHandler+0x350>)
 800711c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	4618      	mov	r0, r3
 8007124:	f7fb ff02 	bl	8002f2c <HAL_DMA_Abort_IT>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713c:	e00e      	b.n	800715c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f8ec 	bl	800731c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007144:	e00a      	b.n	800715c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f8e8 	bl	800731c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	e006      	b.n	800715c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8e4 	bl	800731c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800715a:	e0c3      	b.n	80072e4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715c:	bf00      	nop
    return;
 800715e:	e0c1      	b.n	80072e4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007164:	2b01      	cmp	r3, #1
 8007166:	f040 80a1 	bne.w	80072ac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 809b 	beq.w	80072ac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8095 	beq.w	80072ac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	60fb      	str	r3, [r7, #12]
 8007196:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d14e      	bne.n	8007244 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80071b0:	8a3b      	ldrh	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f000 8098 	beq.w	80072e8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071bc:	8a3a      	ldrh	r2, [r7, #16]
 80071be:	429a      	cmp	r2, r3
 80071c0:	f080 8092 	bcs.w	80072e8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8a3a      	ldrh	r2, [r7, #16]
 80071c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b20      	cmp	r3, #32
 80071d2:	d02b      	beq.n	800722c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071e2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695a      	ldr	r2, [r3, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0201 	bic.w	r2, r2, #1
 80071f2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	695a      	ldr	r2, [r3, #20]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007202:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0210 	bic.w	r2, r2, #16
 8007220:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	4618      	mov	r0, r3
 8007228:	f7fb fe43 	bl	8002eb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007234:	b29b      	uxth	r3, r3
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	b29b      	uxth	r3, r3
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f876 	bl	800732e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007242:	e051      	b.n	80072e8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800724c:	b29b      	uxth	r3, r3
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d047      	beq.n	80072ec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800725c:	8a7b      	ldrh	r3, [r7, #18]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d044      	beq.n	80072ec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007270:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695a      	ldr	r2, [r3, #20]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0201 	bic.w	r2, r2, #1
 8007280:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0210 	bic.w	r2, r2, #16
 800729e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a0:	8a7b      	ldrh	r3, [r7, #18]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f842 	bl	800732e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80072aa:	e01f      	b.n	80072ec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d008      	beq.n	80072c8 <HAL_UART_IRQHandler+0x324>
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f87f 	bl	80073c4 <UART_Transmit_IT>
    return;
 80072c6:	e012      	b.n	80072ee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00d      	beq.n	80072ee <HAL_UART_IRQHandler+0x34a>
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d008      	beq.n	80072ee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8c0 	bl	8007462 <UART_EndTransmit_IT>
    return;
 80072e2:	e004      	b.n	80072ee <HAL_UART_IRQHandler+0x34a>
    return;
 80072e4:	bf00      	nop
 80072e6:	e002      	b.n	80072ee <HAL_UART_IRQHandler+0x34a>
      return;
 80072e8:	bf00      	nop
 80072ea:	e000      	b.n	80072ee <HAL_UART_IRQHandler+0x34a>
      return;
 80072ec:	bf00      	nop
  }
}
 80072ee:	3728      	adds	r7, #40	; 0x28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	0800739d 	.word	0x0800739d

080072f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800730a:	b480      	push	{r7}
 800730c:	b083      	sub	sp, #12
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	bc80      	pop	{r7}
 800732c:	4770      	bx	lr

0800732e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800733a:	bf00      	nop
 800733c:	370c      	adds	r7, #12
 800733e:	46bd      	mov	sp, r7
 8007340:	bc80      	pop	{r7}
 8007342:	4770      	bx	lr

08007344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800735a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0201 	bic.w	r2, r2, #1
 800736a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007370:	2b01      	cmp	r3, #1
 8007372:	d107      	bne.n	8007384 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0210 	bic.w	r2, r2, #16
 8007382:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff ffb0 	bl	800731c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073bc:	bf00      	nop
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b21      	cmp	r3, #33	; 0x21
 80073d6:	d13e      	bne.n	8007456 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d114      	bne.n	800740c <UART_Transmit_IT+0x48>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d110      	bne.n	800740c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	1c9a      	adds	r2, r3, #2
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	621a      	str	r2, [r3, #32]
 800740a:	e008      	b.n	800741e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	1c59      	adds	r1, r3, #1
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6211      	str	r1, [r2, #32]
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29b      	uxth	r3, r3
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	4619      	mov	r1, r3
 800742c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10f      	bne.n	8007452 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007440:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007450:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007456:	2302      	movs	r3, #2
  }
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff ff38 	bl	80072f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b22      	cmp	r3, #34	; 0x22
 80074a4:	f040 8099 	bne.w	80075da <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b0:	d117      	bne.n	80074e2 <UART_Receive_IT+0x50>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d113      	bne.n	80074e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	1c9a      	adds	r2, r3, #2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	629a      	str	r2, [r3, #40]	; 0x28
 80074e0:	e026      	b.n	8007530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f4:	d007      	beq.n	8007506 <UART_Receive_IT+0x74>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <UART_Receive_IT+0x82>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e008      	b.n	8007526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	b2db      	uxtb	r3, r3
 800751c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007520:	b2da      	uxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29b      	uxth	r3, r3
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4619      	mov	r1, r3
 800753e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007540:	2b00      	cmp	r3, #0
 8007542:	d148      	bne.n	80075d6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0220 	bic.w	r2, r2, #32
 8007552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	2b01      	cmp	r3, #1
 8007582:	d123      	bne.n	80075cc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f022 0210 	bic.w	r2, r2, #16
 8007598:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b10      	cmp	r3, #16
 80075a6:	d10a      	bne.n	80075be <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7ff feb2 	bl	800732e <HAL_UARTEx_RxEventCallback>
 80075ca:	e002      	b.n	80075d2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff fe9c 	bl	800730a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	e002      	b.n	80075dc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	e000      	b.n	80075dc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80075da:	2302      	movs	r3, #2
  }
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	431a      	orrs	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	4313      	orrs	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007624:	f023 030c 	bic.w	r3, r3, #12
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	430b      	orrs	r3, r1
 8007630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	695b      	ldr	r3, [r3, #20]
 8007638:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a55      	ldr	r2, [pc, #340]	; (80077a4 <UART_SetConfig+0x1c0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d103      	bne.n	800765a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007652:	f7fe f97f 	bl	8005954 <HAL_RCC_GetPCLK2Freq>
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	e002      	b.n	8007660 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800765a:	f7fe f967 	bl	800592c <HAL_RCC_GetPCLK1Freq>
 800765e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	69db      	ldr	r3, [r3, #28]
 8007664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007668:	d14c      	bne.n	8007704 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009a      	lsls	r2, r3, #2
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007680:	4a49      	ldr	r2, [pc, #292]	; (80077a8 <UART_SetConfig+0x1c4>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	0119      	lsls	r1, r3, #4
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009a      	lsls	r2, r3, #2
 8007694:	441a      	add	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	fbb2 f2f3 	udiv	r2, r2, r3
 80076a0:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <UART_SetConfig+0x1c4>)
 80076a2:	fba3 0302 	umull	r0, r3, r3, r2
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	2064      	movs	r0, #100	; 0x64
 80076aa:	fb00 f303 	mul.w	r3, r0, r3
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	3332      	adds	r3, #50	; 0x32
 80076b4:	4a3c      	ldr	r2, [pc, #240]	; (80077a8 <UART_SetConfig+0x1c4>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	005b      	lsls	r3, r3, #1
 80076be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076c2:	4419      	add	r1, r3
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009a      	lsls	r2, r3, #2
 80076ce:	441a      	add	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80076da:	4b33      	ldr	r3, [pc, #204]	; (80077a8 <UART_SetConfig+0x1c4>)
 80076dc:	fba3 0302 	umull	r0, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	2064      	movs	r0, #100	; 0x64
 80076e4:	fb00 f303 	mul.w	r3, r0, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	3332      	adds	r3, #50	; 0x32
 80076ee:	4a2e      	ldr	r2, [pc, #184]	; (80077a8 <UART_SetConfig+0x1c4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 0207 	and.w	r2, r3, #7
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	440a      	add	r2, r1
 8007700:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007702:	e04a      	b.n	800779a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009a      	lsls	r2, r3, #2
 800770e:	441a      	add	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <UART_SetConfig+0x1c4>)
 800771c:	fba2 2303 	umull	r2, r3, r2, r3
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	0119      	lsls	r1, r3, #4
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	4613      	mov	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	009a      	lsls	r2, r3, #2
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	fbb2 f2f3 	udiv	r2, r2, r3
 800773a:	4b1b      	ldr	r3, [pc, #108]	; (80077a8 <UART_SetConfig+0x1c4>)
 800773c:	fba3 0302 	umull	r0, r3, r3, r2
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	2064      	movs	r0, #100	; 0x64
 8007744:	fb00 f303 	mul.w	r3, r0, r3
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	3332      	adds	r3, #50	; 0x32
 800774e:	4a16      	ldr	r2, [pc, #88]	; (80077a8 <UART_SetConfig+0x1c4>)
 8007750:	fba2 2303 	umull	r2, r3, r2, r3
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800775a:	4419      	add	r1, r3
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009a      	lsls	r2, r3, #2
 8007766:	441a      	add	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <UART_SetConfig+0x1c4>)
 8007774:	fba3 0302 	umull	r0, r3, r3, r2
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	2064      	movs	r0, #100	; 0x64
 800777c:	fb00 f303 	mul.w	r3, r0, r3
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	011b      	lsls	r3, r3, #4
 8007784:	3332      	adds	r3, #50	; 0x32
 8007786:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <UART_SetConfig+0x1c4>)
 8007788:	fba2 2303 	umull	r2, r3, r2, r3
 800778c:	095b      	lsrs	r3, r3, #5
 800778e:	f003 020f 	and.w	r2, r3, #15
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	440a      	add	r2, r1
 8007798:	609a      	str	r2, [r3, #8]
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	40013800 	.word	0x40013800
 80077a8:	51eb851f 	.word	0x51eb851f

080077ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80077b0:	4904      	ldr	r1, [pc, #16]	; (80077c4 <MX_FATFS_Init+0x18>)
 80077b2:	4805      	ldr	r0, [pc, #20]	; (80077c8 <MX_FATFS_Init+0x1c>)
 80077b4:	f003 fb86 	bl	800aec4 <FATFS_LinkDriver>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <MX_FATFS_Init+0x20>)
 80077be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80077c0:	bf00      	nop
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200025bc 	.word	0x200025bc
 80077c8:	20000078 	.word	0x20000078
 80077cc:	200025c0 	.word	0x200025c0

080077d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80077d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	4603      	mov	r3, r0
 80077e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7f9 f9d8 	bl	8000ba0 <SD_disk_initialize>
 80077f0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	4603      	mov	r3, r0
 8007802:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	4618      	mov	r0, r3
 8007808:	f7f9 fab0 	bl	8000d6c <SD_disk_status>
 800780c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007826:	7bf8      	ldrb	r0, [r7, #15]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	f7f9 fab1 	bl	8000d94 <SD_disk_read>
 8007832:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	607a      	str	r2, [r7, #4]
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800784c:	7bf8      	ldrb	r0, [r7, #15]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	f7f9 fb08 	bl	8000e68 <SD_disk_write>
 8007858:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	4603      	mov	r3, r0
 800786a:	603a      	str	r2, [r7, #0]
 800786c:	71fb      	strb	r3, [r7, #7]
 800786e:	460b      	mov	r3, r1
 8007870:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007872:	79b9      	ldrb	r1, [r7, #6]
 8007874:	79fb      	ldrb	r3, [r7, #7]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4618      	mov	r0, r3
 800787a:	f7f9 fb79 	bl	8000f70 <SD_disk_ioctl>
 800787e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <disk_status+0x30>)
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	79fa      	ldrb	r2, [r7, #7]
 80078a0:	4905      	ldr	r1, [pc, #20]	; (80078b8 <disk_status+0x30>)
 80078a2:	440a      	add	r2, r1
 80078a4:	7a12      	ldrb	r2, [r2, #8]
 80078a6:	4610      	mov	r0, r2
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2000033c 	.word	0x2000033c

080078bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <disk_initialize+0x48>)
 80078ce:	5cd3      	ldrb	r3, [r2, r3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d111      	bne.n	80078f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <disk_initialize+0x48>)
 80078d8:	2101      	movs	r1, #1
 80078da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <disk_initialize+0x48>)
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	79fa      	ldrb	r2, [r7, #7]
 80078ea:	4906      	ldr	r1, [pc, #24]	; (8007904 <disk_initialize+0x48>)
 80078ec:	440a      	add	r2, r1
 80078ee:	7a12      	ldrb	r2, [r2, #8]
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	2000033c 	.word	0x2000033c

08007908 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	4a0a      	ldr	r2, [pc, #40]	; (8007944 <disk_read+0x3c>)
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	689c      	ldr	r4, [r3, #8]
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4a07      	ldr	r2, [pc, #28]	; (8007944 <disk_read+0x3c>)
 8007928:	4413      	add	r3, r2
 800792a:	7a18      	ldrb	r0, [r3, #8]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	47a0      	blx	r4
 8007934:	4603      	mov	r3, r0
 8007936:	75fb      	strb	r3, [r7, #23]
  return res;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
}
 800793a:	4618      	mov	r0, r3
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd90      	pop	{r4, r7, pc}
 8007942:	bf00      	nop
 8007944:	2000033c 	.word	0x2000033c

08007948 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <disk_write+0x3c>)
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	68dc      	ldr	r4, [r3, #12]
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4a07      	ldr	r2, [pc, #28]	; (8007984 <disk_write+0x3c>)
 8007968:	4413      	add	r3, r2
 800796a:	7a18      	ldrb	r0, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	47a0      	blx	r4
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]
  return res;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
}
 800797a:	4618      	mov	r0, r3
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd90      	pop	{r4, r7, pc}
 8007982:	bf00      	nop
 8007984:	2000033c 	.word	0x2000033c

08007988 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	4603      	mov	r3, r0
 8007990:	603a      	str	r2, [r7, #0]
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	460b      	mov	r3, r1
 8007996:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007998:	79fb      	ldrb	r3, [r7, #7]
 800799a:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <disk_ioctl+0x38>)
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	79fa      	ldrb	r2, [r7, #7]
 80079a6:	4906      	ldr	r1, [pc, #24]	; (80079c0 <disk_ioctl+0x38>)
 80079a8:	440a      	add	r2, r1
 80079aa:	7a10      	ldrb	r0, [r2, #8]
 80079ac:	79b9      	ldrb	r1, [r7, #6]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	4798      	blx	r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000033c 	.word	0x2000033c

080079c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3301      	adds	r3, #1
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80079d4:	89fb      	ldrh	r3, [r7, #14]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	b21a      	sxth	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b21b      	sxth	r3, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80079e6:	89fb      	ldrh	r3, [r7, #14]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc80      	pop	{r7}
 80079f0:	4770      	bx	lr

080079f2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3303      	adds	r3, #3
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	021b      	lsls	r3, r3, #8
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	3202      	adds	r2, #2
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	3201      	adds	r2, #1
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	7812      	ldrb	r2, [r2, #0]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
	return rv;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr

08007a36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	607a      	str	r2, [r7, #4]
 8007a48:	887a      	ldrh	r2, [r7, #2]
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	607a      	str	r2, [r7, #4]
 8007a5a:	887a      	ldrh	r2, [r7, #2]
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	701a      	strb	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	607a      	str	r2, [r7, #4]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00d      	beq.n	8007af6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	1c53      	adds	r3, r2, #1
 8007ade:	613b      	str	r3, [r7, #16]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	1c59      	adds	r1, r3, #1
 8007ae4:	6179      	str	r1, [r7, #20]
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f1      	bne.n	8007ada <mem_cpy+0x1a>
	}
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	617a      	str	r2, [r7, #20]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	607b      	str	r3, [r7, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1f3      	bne.n	8007b10 <mem_set+0x10>
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bc80      	pop	{r7}
 8007b32:	4770      	bx	lr

08007b34 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	61fa      	str	r2, [r7, #28]
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	4619      	mov	r1, r3
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	61ba      	str	r2, [r7, #24]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	1acb      	subs	r3, r1, r3
 8007b60:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	607b      	str	r3, [r7, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <mem_cmp+0x40>
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0eb      	beq.n	8007b4c <mem_cmp+0x18>

	return r;
 8007b74:	697b      	ldr	r3, [r7, #20]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3724      	adds	r7, #36	; 0x24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007b8a:	e002      	b.n	8007b92 <chk_chr+0x12>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <chk_chr+0x26>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d1f2      	bne.n	8007b8c <chk_chr+0xc>
	return *str;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bc80      	pop	{r7}
 8007bb2:	4770      	bx	lr

08007bb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60bb      	str	r3, [r7, #8]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	e029      	b.n	8007c1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007bc8:	4a26      	ldr	r2, [pc, #152]	; (8007c64 <chk_lock+0xb0>)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	011b      	lsls	r3, r3, #4
 8007bce:	4413      	add	r3, r2
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d01d      	beq.n	8007c12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bd6:	4a23      	ldr	r2, [pc, #140]	; (8007c64 <chk_lock+0xb0>)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	4413      	add	r3, r2
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d116      	bne.n	8007c16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007be8:	4a1e      	ldr	r2, [pc, #120]	; (8007c64 <chk_lock+0xb0>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	4413      	add	r3, r2
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d10c      	bne.n	8007c16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <chk_lock+0xb0>)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	4413      	add	r3, r2
 8007c04:	3308      	adds	r3, #8
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d102      	bne.n	8007c16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c10:	e007      	b.n	8007c22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c12:	2301      	movs	r3, #1
 8007c14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d9d2      	bls.n	8007bc8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d109      	bne.n	8007c3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d102      	bne.n	8007c34 <chk_lock+0x80>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d101      	bne.n	8007c38 <chk_lock+0x84>
 8007c34:	2300      	movs	r3, #0
 8007c36:	e010      	b.n	8007c5a <chk_lock+0xa6>
 8007c38:	2312      	movs	r3, #18
 8007c3a:	e00e      	b.n	8007c5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <chk_lock+0xa0>
 8007c42:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <chk_lock+0xb0>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	011b      	lsls	r3, r3, #4
 8007c48:	4413      	add	r3, r2
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	d101      	bne.n	8007c58 <chk_lock+0xa4>
 8007c54:	2310      	movs	r3, #16
 8007c56:	e000      	b.n	8007c5a <chk_lock+0xa6>
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr
 8007c64:	2000011c 	.word	0x2000011c

08007c68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	607b      	str	r3, [r7, #4]
 8007c72:	e002      	b.n	8007c7a <enq_lock+0x12>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3301      	adds	r3, #1
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d806      	bhi.n	8007c8e <enq_lock+0x26>
 8007c80:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <enq_lock+0x3c>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	4413      	add	r3, r2
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f2      	bne.n	8007c74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr
 8007ca4:	2000011c 	.word	0x2000011c

08007ca8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	e01f      	b.n	8007cf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007cb8:	4a41      	ldr	r2, [pc, #260]	; (8007dc0 <inc_lock+0x118>)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	4413      	add	r3, r2
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d113      	bne.n	8007cf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007cca:	4a3d      	ldr	r2, [pc, #244]	; (8007dc0 <inc_lock+0x118>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d109      	bne.n	8007cf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007cde:	4a38      	ldr	r2, [pc, #224]	; (8007dc0 <inc_lock+0x118>)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	011b      	lsls	r3, r3, #4
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d006      	beq.n	8007d00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d9dc      	bls.n	8007cb8 <inc_lock+0x10>
 8007cfe:	e000      	b.n	8007d02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007d00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d132      	bne.n	8007d6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	e002      	b.n	8007d14 <inc_lock+0x6c>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3301      	adds	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d806      	bhi.n	8007d28 <inc_lock+0x80>
 8007d1a:	4a29      	ldr	r2, [pc, #164]	; (8007dc0 <inc_lock+0x118>)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1f2      	bne.n	8007d0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d101      	bne.n	8007d32 <inc_lock+0x8a>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e040      	b.n	8007db4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4922      	ldr	r1, [pc, #136]	; (8007dc0 <inc_lock+0x118>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	440b      	add	r3, r1
 8007d3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	491e      	ldr	r1, [pc, #120]	; (8007dc0 <inc_lock+0x118>)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	695a      	ldr	r2, [r3, #20]
 8007d54:	491a      	ldr	r1, [pc, #104]	; (8007dc0 <inc_lock+0x118>)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007d60:	4a17      	ldr	r2, [pc, #92]	; (8007dc0 <inc_lock+0x118>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	4413      	add	r3, r2
 8007d68:	330c      	adds	r3, #12
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d009      	beq.n	8007d88 <inc_lock+0xe0>
 8007d74:	4a12      	ldr	r2, [pc, #72]	; (8007dc0 <inc_lock+0x118>)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	4413      	add	r3, r2
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	881b      	ldrh	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <inc_lock+0xe0>
 8007d84:	2300      	movs	r3, #0
 8007d86:	e015      	b.n	8007db4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d108      	bne.n	8007da0 <inc_lock+0xf8>
 8007d8e:	4a0c      	ldr	r2, [pc, #48]	; (8007dc0 <inc_lock+0x118>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	4413      	add	r3, r2
 8007d96:	330c      	adds	r3, #12
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	e001      	b.n	8007da4 <inc_lock+0xfc>
 8007da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007da4:	4906      	ldr	r1, [pc, #24]	; (8007dc0 <inc_lock+0x118>)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	440b      	add	r3, r1
 8007dac:	330c      	adds	r3, #12
 8007dae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	2000011c 	.word	0x2000011c

08007dc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d825      	bhi.n	8007e24 <dec_lock+0x60>
		n = Files[i].ctr;
 8007dd8:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <dec_lock+0x70>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	330c      	adds	r3, #12
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007de6:	89fb      	ldrh	r3, [r7, #14]
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dec:	d101      	bne.n	8007df2 <dec_lock+0x2e>
 8007dee:	2300      	movs	r3, #0
 8007df0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007df2:	89fb      	ldrh	r3, [r7, #14]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <dec_lock+0x3a>
 8007df8:	89fb      	ldrh	r3, [r7, #14]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007dfe:	4a0d      	ldr	r2, [pc, #52]	; (8007e34 <dec_lock+0x70>)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	011b      	lsls	r3, r3, #4
 8007e04:	4413      	add	r3, r2
 8007e06:	330c      	adds	r3, #12
 8007e08:	89fa      	ldrh	r2, [r7, #14]
 8007e0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e0c:	89fb      	ldrh	r3, [r7, #14]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d105      	bne.n	8007e1e <dec_lock+0x5a>
 8007e12:	4a08      	ldr	r2, [pc, #32]	; (8007e34 <dec_lock+0x70>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	4413      	add	r3, r2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	737b      	strb	r3, [r7, #13]
 8007e22:	e001      	b.n	8007e28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e24:	2302      	movs	r3, #2
 8007e26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e28:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr
 8007e34:	2000011c 	.word	0x2000011c

08007e38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e010      	b.n	8007e68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e46:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <clear_lock+0x44>)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	011b      	lsls	r3, r3, #4
 8007e4c:	4413      	add	r3, r2
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d105      	bne.n	8007e62 <clear_lock+0x2a>
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <clear_lock+0x44>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d9eb      	bls.n	8007e46 <clear_lock+0xe>
	}
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	2000011c 	.word	0x2000011c

08007e80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	78db      	ldrb	r3, [r3, #3]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d034      	beq.n	8007efe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7858      	ldrb	r0, [r3, #1]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	f7ff fd4e 	bl	8007948 <disk_write>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	73fb      	strb	r3, [r7, #15]
 8007eb6:	e022      	b.n	8007efe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	1ad2      	subs	r2, r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d217      	bcs.n	8007efe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	e010      	b.n	8007ef8 <sync_window+0x78>
					wsect += fs->fsize;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	4413      	add	r3, r2
 8007ede:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7858      	ldrb	r0, [r3, #1]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eea:	2301      	movs	r3, #1
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	f7ff fd2b 	bl	8007948 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d8eb      	bhi.n	8007ed6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d01b      	beq.n	8007f58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff ffad 	bl	8007e80 <sync_window>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f2a:	7bfb      	ldrb	r3, [r7, #15]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d113      	bne.n	8007f58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	7858      	ldrb	r0, [r3, #1]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	683a      	ldr	r2, [r7, #0]
 8007f3e:	f7ff fce3 	bl	8007908 <disk_read>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ff87 	bl	8007e80 <sync_window>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d159      	bne.n	8008030 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b03      	cmp	r3, #3
 8007f82:	d149      	bne.n	8008018 <sync_fs+0xb4>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	791b      	ldrb	r3, [r3, #4]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d145      	bne.n	8008018 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	899b      	ldrh	r3, [r3, #12]
 8007f96:	461a      	mov	r2, r3
 8007f98:	2100      	movs	r1, #0
 8007f9a:	f7ff fdb1 	bl	8007b00 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3338      	adds	r3, #56	; 0x38
 8007fa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fa6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7ff fd43 	bl	8007a36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3338      	adds	r3, #56	; 0x38
 8007fb4:	4921      	ldr	r1, [pc, #132]	; (800803c <sync_fs+0xd8>)
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7ff fd57 	bl	8007a6a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3338      	adds	r3, #56	; 0x38
 8007fc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fc4:	491e      	ldr	r1, [pc, #120]	; (8008040 <sync_fs+0xdc>)
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fd4f 	bl	8007a6a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3338      	adds	r3, #56	; 0x38
 8007fd0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7ff fd45 	bl	8007a6a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	3338      	adds	r3, #56	; 0x38
 8007fe4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7ff fd3b 	bl	8007a6a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	7858      	ldrb	r0, [r3, #1]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800c:	2301      	movs	r3, #1
 800800e:	f7ff fc9b 	bl	8007948 <disk_write>
			fs->fsi_flag = 0;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	785b      	ldrb	r3, [r3, #1]
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fcb1 	bl	8007988 <disk_ioctl>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <sync_fs+0xcc>
 800802c:	2301      	movs	r3, #1
 800802e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	41615252 	.word	0x41615252
 8008040:	61417272 	.word	0x61417272

08008044 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	3b02      	subs	r3, #2
 8008052:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	3b02      	subs	r3, #2
 800805a:	683a      	ldr	r2, [r7, #0]
 800805c:	429a      	cmp	r2, r3
 800805e:	d301      	bcc.n	8008064 <clust2sect+0x20>
 8008060:	2300      	movs	r3, #0
 8008062:	e008      	b.n	8008076 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	895b      	ldrh	r3, [r3, #10]
 8008068:	461a      	mov	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	fb03 f202 	mul.w	r2, r3, r2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	4413      	add	r3, r2
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr

08008080 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d904      	bls.n	80080a0 <get_fat+0x20>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d302      	bcc.n	80080a6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080a0:	2301      	movs	r3, #1
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e0bb      	b.n	800821e <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080a6:	f04f 33ff 	mov.w	r3, #4294967295
 80080aa:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	f000 8083 	beq.w	80081bc <get_fat+0x13c>
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	f300 80a7 	bgt.w	800820a <get_fat+0x18a>
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d002      	beq.n	80080c6 <get_fat+0x46>
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d056      	beq.n	8008172 <get_fat+0xf2>
 80080c4:	e0a1      	b.n	800820a <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4413      	add	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	899b      	ldrh	r3, [r3, #12]
 80080dc:	4619      	mov	r1, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080e4:	4413      	add	r3, r2
 80080e6:	4619      	mov	r1, r3
 80080e8:	6938      	ldr	r0, [r7, #16]
 80080ea:	f7ff ff0d 	bl	8007f08 <move_window>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f040 808d 	bne.w	8008210 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	60fa      	str	r2, [r7, #12]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	8992      	ldrh	r2, [r2, #12]
 8008100:	fbb3 f1f2 	udiv	r1, r3, r2
 8008104:	fb02 f201 	mul.w	r2, r2, r1
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4413      	add	r3, r2
 800810e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008112:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	899b      	ldrh	r3, [r3, #12]
 800811c:	4619      	mov	r1, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	fbb3 f3f1 	udiv	r3, r3, r1
 8008124:	4413      	add	r3, r2
 8008126:	4619      	mov	r1, r3
 8008128:	6938      	ldr	r0, [r7, #16]
 800812a:	f7ff feed 	bl	8007f08 <move_window>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d16f      	bne.n	8008214 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	899b      	ldrh	r3, [r3, #12]
 8008138:	461a      	mov	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008140:	fb02 f201 	mul.w	r2, r2, r1
 8008144:	1a9b      	subs	r3, r3, r2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4413      	add	r3, r2
 800814a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	461a      	mov	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4313      	orrs	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <get_fat+0xe8>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	091b      	lsrs	r3, r3, #4
 8008166:	e002      	b.n	800816e <get_fat+0xee>
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800816e:	617b      	str	r3, [r7, #20]
			break;
 8008170:	e055      	b.n	800821e <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	899b      	ldrh	r3, [r3, #12]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	b29b      	uxth	r3, r3
 800817e:	4619      	mov	r1, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	fbb3 f3f1 	udiv	r3, r3, r1
 8008186:	4413      	add	r3, r2
 8008188:	4619      	mov	r1, r3
 800818a:	6938      	ldr	r0, [r7, #16]
 800818c:	f7ff febc 	bl	8007f08 <move_window>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d140      	bne.n	8008218 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	8992      	ldrh	r2, [r2, #12]
 80081a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80081a8:	fb02 f200 	mul.w	r2, r2, r0
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	440b      	add	r3, r1
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fc07 	bl	80079c4 <ld_word>
 80081b6:	4603      	mov	r3, r0
 80081b8:	617b      	str	r3, [r7, #20]
			break;
 80081ba:	e030      	b.n	800821e <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	899b      	ldrh	r3, [r3, #12]
 80081c4:	089b      	lsrs	r3, r3, #2
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	4619      	mov	r1, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80081d0:	4413      	add	r3, r2
 80081d2:	4619      	mov	r1, r3
 80081d4:	6938      	ldr	r0, [r7, #16]
 80081d6:	f7ff fe97 	bl	8007f08 <move_window>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d11d      	bne.n	800821c <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	8992      	ldrh	r2, [r2, #12]
 80081ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80081f2:	fb02 f200 	mul.w	r2, r2, r0
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	440b      	add	r3, r1
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fbf9 	bl	80079f2 <ld_dword>
 8008200:	4603      	mov	r3, r0
 8008202:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008206:	617b      	str	r3, [r7, #20]
			break;
 8008208:	e009      	b.n	800821e <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800820a:	2301      	movs	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e006      	b.n	800821e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008210:	bf00      	nop
 8008212:	e004      	b.n	800821e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008214:	bf00      	nop
 8008216:	e002      	b.n	800821e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008218:	bf00      	nop
 800821a:	e000      	b.n	800821e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800821c:	bf00      	nop
		}
	}

	return val;
 800821e:	697b      	ldr	r3, [r7, #20]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b089      	sub	sp, #36	; 0x24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008234:	2302      	movs	r3, #2
 8008236:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2b01      	cmp	r3, #1
 800823c:	f240 8102 	bls.w	8008444 <put_fat+0x21c>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	429a      	cmp	r2, r3
 8008248:	f080 80fc 	bcs.w	8008444 <put_fat+0x21c>
		switch (fs->fs_type) {
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b03      	cmp	r3, #3
 8008252:	f000 80b6 	beq.w	80083c2 <put_fat+0x19a>
 8008256:	2b03      	cmp	r3, #3
 8008258:	f300 80fd 	bgt.w	8008456 <put_fat+0x22e>
 800825c:	2b01      	cmp	r3, #1
 800825e:	d003      	beq.n	8008268 <put_fat+0x40>
 8008260:	2b02      	cmp	r3, #2
 8008262:	f000 8083 	beq.w	800836c <put_fat+0x144>
 8008266:	e0f6      	b.n	8008456 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	899b      	ldrh	r3, [r3, #12]
 800827e:	4619      	mov	r1, r3
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	fbb3 f3f1 	udiv	r3, r3, r1
 8008286:	4413      	add	r3, r2
 8008288:	4619      	mov	r1, r3
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7ff fe3c 	bl	8007f08 <move_window>
 8008290:	4603      	mov	r3, r0
 8008292:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008294:	7ffb      	ldrb	r3, [r7, #31]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 80d6 	bne.w	8008448 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	61ba      	str	r2, [r7, #24]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	8992      	ldrh	r2, [r2, #12]
 80082ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80082b0:	fb02 f200 	mul.w	r2, r2, r0
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	440b      	add	r3, r1
 80082b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00d      	beq.n	80082e0 <put_fat+0xb8>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	f003 030f 	and.w	r3, r3, #15
 80082ce:	b25a      	sxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	b25b      	sxtb	r3, r3
 80082d8:	4313      	orrs	r3, r2
 80082da:	b25b      	sxtb	r3, r3
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	e001      	b.n	80082e4 <put_fat+0xbc>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	899b      	ldrh	r3, [r3, #12]
 80082f6:	4619      	mov	r1, r3
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80082fe:	4413      	add	r3, r2
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7ff fe00 	bl	8007f08 <move_window>
 8008308:	4603      	mov	r3, r0
 800830a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800830c:	7ffb      	ldrb	r3, [r7, #31]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f040 809c 	bne.w	800844c <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	899b      	ldrh	r3, [r3, #12]
 800831e:	461a      	mov	r2, r3
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	fbb3 f0f2 	udiv	r0, r3, r2
 8008326:	fb02 f200 	mul.w	r2, r2, r0
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	440b      	add	r3, r1
 800832e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0301 	and.w	r3, r3, #1
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <put_fat+0x11a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	b2db      	uxtb	r3, r3
 8008340:	e00e      	b.n	8008360 <put_fat+0x138>
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	b25b      	sxtb	r3, r3
 8008348:	f023 030f 	bic.w	r3, r3, #15
 800834c:	b25a      	sxtb	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	b25b      	sxtb	r3, r3
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	b25b      	sxtb	r3, r3
 800835a:	4313      	orrs	r3, r2
 800835c:	b25b      	sxtb	r3, r3
 800835e:	b2db      	uxtb	r3, r3
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	70da      	strb	r2, [r3, #3]
			break;
 800836a:	e074      	b.n	8008456 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	899b      	ldrh	r3, [r3, #12]
 8008374:	085b      	lsrs	r3, r3, #1
 8008376:	b29b      	uxth	r3, r3
 8008378:	4619      	mov	r1, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008380:	4413      	add	r3, r2
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fdbf 	bl	8007f08 <move_window>
 800838a:	4603      	mov	r3, r0
 800838c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800838e:	7ffb      	ldrb	r3, [r7, #31]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d15d      	bne.n	8008450 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	8992      	ldrh	r2, [r2, #12]
 80083a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80083a6:	fb02 f200 	mul.w	r2, r2, r0
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	440b      	add	r3, r1
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	b292      	uxth	r2, r2
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fb3e 	bl	8007a36 <st_word>
			fs->wflag = 1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	70da      	strb	r2, [r3, #3]
			break;
 80083c0:	e049      	b.n	8008456 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	899b      	ldrh	r3, [r3, #12]
 80083ca:	089b      	lsrs	r3, r3, #2
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	4619      	mov	r1, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80083d6:	4413      	add	r3, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f7ff fd94 	bl	8007f08 <move_window>
 80083e0:	4603      	mov	r3, r0
 80083e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083e4:	7ffb      	ldrb	r3, [r7, #31]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d134      	bne.n	8008454 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	8992      	ldrh	r2, [r2, #12]
 80083fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008402:	fb02 f200 	mul.w	r2, r2, r0
 8008406:	1a9b      	subs	r3, r3, r2
 8008408:	440b      	add	r3, r1
 800840a:	4618      	mov	r0, r3
 800840c:	f7ff faf1 	bl	80079f2 <ld_dword>
 8008410:	4603      	mov	r3, r0
 8008412:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008416:	4323      	orrs	r3, r4
 8008418:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	8992      	ldrh	r2, [r2, #12]
 8008428:	fbb3 f0f2 	udiv	r0, r3, r2
 800842c:	fb02 f200 	mul.w	r2, r2, r0
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	440b      	add	r3, r1
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff fb17 	bl	8007a6a <st_dword>
			fs->wflag = 1;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	70da      	strb	r2, [r3, #3]
			break;
 8008442:	e008      	b.n	8008456 <put_fat+0x22e>
		}
	}
 8008444:	bf00      	nop
 8008446:	e006      	b.n	8008456 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008448:	bf00      	nop
 800844a:	e004      	b.n	8008456 <put_fat+0x22e>
			if (res != FR_OK) break;
 800844c:	bf00      	nop
 800844e:	e002      	b.n	8008456 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008454:	bf00      	nop
	return res;
 8008456:	7ffb      	ldrb	r3, [r7, #31]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3724      	adds	r7, #36	; 0x24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d904      	bls.n	8008486 <remove_chain+0x26>
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	429a      	cmp	r2, r3
 8008484:	d301      	bcc.n	800848a <remove_chain+0x2a>
 8008486:	2302      	movs	r3, #2
 8008488:	e04b      	b.n	8008522 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00c      	beq.n	80084aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008490:	f04f 32ff 	mov.w	r2, #4294967295
 8008494:	6879      	ldr	r1, [r7, #4]
 8008496:	69b8      	ldr	r0, [r7, #24]
 8008498:	f7ff fec6 	bl	8008228 <put_fat>
 800849c:	4603      	mov	r3, r0
 800849e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80084a0:	7ffb      	ldrb	r3, [r7, #31]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d001      	beq.n	80084aa <remove_chain+0x4a>
 80084a6:	7ffb      	ldrb	r3, [r7, #31]
 80084a8:	e03b      	b.n	8008522 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fde7 	bl	8008080 <get_fat>
 80084b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d031      	beq.n	800851e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d101      	bne.n	80084c4 <remove_chain+0x64>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e02e      	b.n	8008522 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d101      	bne.n	80084d0 <remove_chain+0x70>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e028      	b.n	8008522 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084d0:	2200      	movs	r2, #0
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	69b8      	ldr	r0, [r7, #24]
 80084d6:	f7ff fea7 	bl	8008228 <put_fat>
 80084da:	4603      	mov	r3, r0
 80084dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80084de:	7ffb      	ldrb	r3, [r7, #31]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <remove_chain+0x88>
 80084e4:	7ffb      	ldrb	r3, [r7, #31]
 80084e6:	e01c      	b.n	8008522 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	699a      	ldr	r2, [r3, #24]
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	3b02      	subs	r3, #2
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d20b      	bcs.n	800850e <remove_chain+0xae>
			fs->free_clst++;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	791b      	ldrb	r3, [r3, #4]
 8008504:	f043 0301 	orr.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	d3c6      	bcc.n	80084aa <remove_chain+0x4a>
 800851c:	e000      	b.n	8008520 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800851e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10d      	bne.n	800855c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <create_chain+0x2c>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	429a      	cmp	r2, r3
 8008554:	d31b      	bcc.n	800858e <create_chain+0x64>
 8008556:	2301      	movs	r3, #1
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	e018      	b.n	800858e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff fd8e 	bl	8008080 <get_fat>
 8008564:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d801      	bhi.n	8008570 <create_chain+0x46>
 800856c:	2301      	movs	r3, #1
 800856e:	e070      	b.n	8008652 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d101      	bne.n	800857c <create_chain+0x52>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	e06a      	b.n	8008652 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d201      	bcs.n	800858a <create_chain+0x60>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	e063      	b.n	8008652 <create_chain+0x128>
		scl = clst;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	3301      	adds	r3, #1
 8008596:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d307      	bcc.n	80085b2 <create_chain+0x88>
				ncl = 2;
 80085a2:	2302      	movs	r3, #2
 80085a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80085a6:	69fa      	ldr	r2, [r7, #28]
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d901      	bls.n	80085b2 <create_chain+0x88>
 80085ae:	2300      	movs	r3, #0
 80085b0:	e04f      	b.n	8008652 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80085b2:	69f9      	ldr	r1, [r7, #28]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fd63 	bl	8008080 <get_fat>
 80085ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d003      	beq.n	80085d0 <create_chain+0xa6>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ce:	d101      	bne.n	80085d4 <create_chain+0xaa>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	e03e      	b.n	8008652 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d1da      	bne.n	8008592 <create_chain+0x68>
 80085dc:	2300      	movs	r3, #0
 80085de:	e038      	b.n	8008652 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80085e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	69f9      	ldr	r1, [r7, #28]
 80085e8:	6938      	ldr	r0, [r7, #16]
 80085ea:	f7ff fe1d 	bl	8008228 <put_fat>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <create_chain+0xe2>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d006      	beq.n	800860c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6938      	ldr	r0, [r7, #16]
 8008604:	f7ff fe10 	bl	8008228 <put_fat>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d116      	bne.n	8008640 <create_chain+0x116>
		fs->last_clst = ncl;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	69fa      	ldr	r2, [r7, #28]
 8008616:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	3b02      	subs	r3, #2
 8008622:	429a      	cmp	r2, r3
 8008624:	d804      	bhi.n	8008630 <create_chain+0x106>
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	1e5a      	subs	r2, r3, #1
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	791b      	ldrb	r3, [r3, #4]
 8008634:	f043 0301 	orr.w	r3, r3, #1
 8008638:	b2da      	uxtb	r2, r3
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	711a      	strb	r2, [r3, #4]
 800863e:	e007      	b.n	8008650 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008640:	7dfb      	ldrb	r3, [r7, #23]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d102      	bne.n	800864c <create_chain+0x122>
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	e000      	b.n	800864e <create_chain+0x124>
 800864c:	2301      	movs	r3, #1
 800864e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008650:	69fb      	ldr	r3, [r7, #28]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800865a:	b480      	push	{r7}
 800865c:	b087      	sub	sp, #28
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	3304      	adds	r3, #4
 8008670:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	899b      	ldrh	r3, [r3, #12]
 8008676:	461a      	mov	r2, r3
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	fbb3 f3f2 	udiv	r3, r3, r2
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	8952      	ldrh	r2, [r2, #10]
 8008682:	fbb3 f3f2 	udiv	r3, r3, r2
 8008686:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1d1a      	adds	r2, r3, #4
 800868c:	613a      	str	r2, [r7, #16]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <clmt_clust+0x42>
 8008698:	2300      	movs	r3, #0
 800869a:	e010      	b.n	80086be <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d307      	bcc.n	80086b4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	3304      	adds	r3, #4
 80086b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086b2:	e7e9      	b.n	8008688 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80086b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4413      	add	r3, r2
}
 80086be:	4618      	mov	r0, r3
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086de:	d204      	bcs.n	80086ea <dir_sdi+0x22>
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	f003 031f 	and.w	r3, r3, #31
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80086ea:	2302      	movs	r3, #2
 80086ec:	e071      	b.n	80087d2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d106      	bne.n	800870e <dir_sdi+0x46>
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d902      	bls.n	800870e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10c      	bne.n	800872e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	8912      	ldrh	r2, [r2, #8]
 800871c:	4293      	cmp	r3, r2
 800871e:	d301      	bcc.n	8008724 <dir_sdi+0x5c>
 8008720:	2302      	movs	r3, #2
 8008722:	e056      	b.n	80087d2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	61da      	str	r2, [r3, #28]
 800872c:	e02d      	b.n	800878a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	895b      	ldrh	r3, [r3, #10]
 8008732:	461a      	mov	r2, r3
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	899b      	ldrh	r3, [r3, #12]
 8008738:	fb03 f302 	mul.w	r3, r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800873e:	e019      	b.n	8008774 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6979      	ldr	r1, [r7, #20]
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fc9b 	bl	8008080 <get_fat>
 800874a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008752:	d101      	bne.n	8008758 <dir_sdi+0x90>
 8008754:	2301      	movs	r3, #1
 8008756:	e03c      	b.n	80087d2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d904      	bls.n	8008768 <dir_sdi+0xa0>
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	429a      	cmp	r2, r3
 8008766:	d301      	bcc.n	800876c <dir_sdi+0xa4>
 8008768:	2302      	movs	r3, #2
 800876a:	e032      	b.n	80087d2 <dir_sdi+0x10a>
			ofs -= csz;
 800876c:	683a      	ldr	r2, [r7, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	429a      	cmp	r2, r3
 800877a:	d2e1      	bcs.n	8008740 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	6938      	ldr	r0, [r7, #16]
 8008780:	f7ff fc60 	bl	8008044 <clust2sect>
 8008784:	4602      	mov	r2, r0
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <dir_sdi+0xd4>
 8008798:	2302      	movs	r3, #2
 800879a:	e01a      	b.n	80087d2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	899b      	ldrh	r3, [r3, #12]
 80087a4:	4619      	mov	r1, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80087ac:	441a      	add	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	899b      	ldrh	r3, [r3, #12]
 80087bc:	461a      	mov	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	fbb3 f0f2 	udiv	r0, r3, r2
 80087c4:	fb02 f200 	mul.w	r2, r2, r0
 80087c8:	1a9b      	subs	r3, r3, r2
 80087ca:	18ca      	adds	r2, r1, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3718      	adds	r7, #24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	3320      	adds	r3, #32
 80087f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <dir_next+0x28>
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008800:	d301      	bcc.n	8008806 <dir_next+0x2c>
 8008802:	2304      	movs	r3, #4
 8008804:	e0bb      	b.n	800897e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	899b      	ldrh	r3, [r3, #12]
 800880a:	461a      	mov	r2, r3
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008812:	fb02 f201 	mul.w	r2, r2, r1
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	f040 809d 	bne.w	8008958 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	095b      	lsrs	r3, r3, #5
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	8912      	ldrh	r2, [r2, #8]
 8008838:	4293      	cmp	r3, r2
 800883a:	f0c0 808d 	bcc.w	8008958 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	61da      	str	r2, [r3, #28]
 8008844:	2304      	movs	r3, #4
 8008846:	e09a      	b.n	800897e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	899b      	ldrh	r3, [r3, #12]
 800884c:	461a      	mov	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	fbb3 f3f2 	udiv	r3, r3, r2
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	8952      	ldrh	r2, [r2, #10]
 8008858:	3a01      	subs	r2, #1
 800885a:	4013      	ands	r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d17b      	bne.n	8008958 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f7ff fc09 	bl	8008080 <get_fat>
 800886e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d801      	bhi.n	800887a <dir_next+0xa0>
 8008876:	2302      	movs	r3, #2
 8008878:	e081      	b.n	800897e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d101      	bne.n	8008886 <dir_next+0xac>
 8008882:	2301      	movs	r3, #1
 8008884:	e07b      	b.n	800897e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	429a      	cmp	r2, r3
 800888e:	d359      	bcc.n	8008944 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	61da      	str	r2, [r3, #28]
 800889c:	2304      	movs	r3, #4
 800889e:	e06e      	b.n	800897e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7ff fe3e 	bl	800852a <create_chain>
 80088ae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <dir_next+0xe0>
 80088b6:	2307      	movs	r3, #7
 80088b8:	e061      	b.n	800897e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d101      	bne.n	80088c4 <dir_next+0xea>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e05c      	b.n	800897e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d101      	bne.n	80088d0 <dir_next+0xf6>
 80088cc:	2301      	movs	r3, #1
 80088ce:	e056      	b.n	800897e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fad5 	bl	8007e80 <sync_window>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <dir_next+0x106>
 80088dc:	2301      	movs	r3, #1
 80088de:	e04e      	b.n	800897e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	899b      	ldrh	r3, [r3, #12]
 80088ea:	461a      	mov	r2, r3
 80088ec:	2100      	movs	r1, #0
 80088ee:	f7ff f907 	bl	8007b00 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80088f2:	2300      	movs	r3, #0
 80088f4:	613b      	str	r3, [r7, #16]
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f7ff fba3 	bl	8008044 <clust2sect>
 80088fe:	4602      	mov	r2, r0
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	635a      	str	r2, [r3, #52]	; 0x34
 8008904:	e012      	b.n	800892c <dir_next+0x152>
						fs->wflag = 1;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2201      	movs	r2, #1
 800890a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff fab7 	bl	8007e80 <sync_window>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <dir_next+0x142>
 8008918:	2301      	movs	r3, #1
 800891a:	e030      	b.n	800897e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	3301      	adds	r3, #1
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	635a      	str	r2, [r3, #52]	; 0x34
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	895b      	ldrh	r3, [r3, #10]
 8008930:	461a      	mov	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	4293      	cmp	r3, r2
 8008936:	d3e6      	bcc.n	8008906 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	1ad2      	subs	r2, r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800894a:	6979      	ldr	r1, [r7, #20]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff fb79 	bl	8008044 <clust2sect>
 8008952:	4602      	mov	r2, r0
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	899b      	ldrh	r3, [r3, #12]
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008970:	fb02 f200 	mul.w	r2, r2, r0
 8008974:	1a9b      	subs	r3, r3, r2
 8008976:	18ca      	adds	r2, r1, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008996:	2100      	movs	r1, #0
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fe95 	bl	80086c8 <dir_sdi>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d12b      	bne.n	8008a00 <dir_alloc+0x7a>
		n = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	4619      	mov	r1, r3
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f7ff faa8 	bl	8007f08 <move_window>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089bc:	7dfb      	ldrb	r3, [r7, #23]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d11d      	bne.n	80089fe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2be5      	cmp	r3, #229	; 0xe5
 80089ca:	d004      	beq.n	80089d6 <dir_alloc+0x50>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d107      	bne.n	80089e6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	3301      	adds	r3, #1
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	693a      	ldr	r2, [r7, #16]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d102      	bne.n	80089ea <dir_alloc+0x64>
 80089e4:	e00c      	b.n	8008a00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80089ea:	2101      	movs	r1, #1
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7ff fef4 	bl	80087da <dir_next>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0d7      	beq.n	80089ac <dir_alloc+0x26>
 80089fc:	e000      	b.n	8008a00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80089fe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008a00:	7dfb      	ldrb	r3, [r7, #23]
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d101      	bne.n	8008a0a <dir_alloc+0x84>
 8008a06:	2307      	movs	r3, #7
 8008a08:	75fb      	strb	r3, [r7, #23]
	return res;
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	331a      	adds	r3, #26
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe ffce 	bl	80079c4 <ld_word>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d109      	bne.n	8008a48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	3314      	adds	r3, #20
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe ffc3 	bl	80079c4 <ld_word>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	60f8      	str	r0, [r7, #12]
 8008a5a:	60b9      	str	r1, [r7, #8]
 8008a5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	331a      	adds	r3, #26
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	b292      	uxth	r2, r2
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe ffe4 	bl	8007a36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d109      	bne.n	8008a8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f103 0214 	add.w	r2, r3, #20
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7fe ffd6 	bl	8007a36 <st_word>
	}
}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008a94:	b590      	push	{r4, r7, lr}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	331a      	adds	r3, #26
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe ff8e 	bl	80079c4 <ld_word>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <cmp_lfn+0x1e>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e059      	b.n	8008b66 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aba:	1e5a      	subs	r2, r3, #1
 8008abc:	4613      	mov	r3, r2
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008ac8:	2301      	movs	r3, #1
 8008aca:	81fb      	strh	r3, [r7, #14]
 8008acc:	2300      	movs	r3, #0
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	e033      	b.n	8008b3a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008ad2:	4a27      	ldr	r2, [pc, #156]	; (8008b70 <cmp_lfn+0xdc>)
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	4413      	add	r3, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fe ff6f 	bl	80079c4 <ld_word>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008aea:	89fb      	ldrh	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01a      	beq.n	8008b26 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2bfe      	cmp	r3, #254	; 0xfe
 8008af4:	d812      	bhi.n	8008b1c <cmp_lfn+0x88>
 8008af6:	89bb      	ldrh	r3, [r7, #12]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f002 fa2d 	bl	800af58 <ff_wtoupper>
 8008afe:	4603      	mov	r3, r0
 8008b00:	461c      	mov	r4, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	617a      	str	r2, [r7, #20]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fa21 	bl	800af58 <ff_wtoupper>
 8008b16:	4603      	mov	r3, r0
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	d001      	beq.n	8008b20 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e022      	b.n	8008b66 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008b20:	89bb      	ldrh	r3, [r7, #12]
 8008b22:	81fb      	strh	r3, [r7, #14]
 8008b24:	e006      	b.n	8008b34 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008b26:	89bb      	ldrh	r3, [r7, #12]
 8008b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d001      	beq.n	8008b34 <cmp_lfn+0xa0>
 8008b30:	2300      	movs	r3, #0
 8008b32:	e018      	b.n	8008b66 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	3301      	adds	r3, #1
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b0c      	cmp	r3, #12
 8008b3e:	d9c8      	bls.n	8008ad2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <cmp_lfn+0xd0>
 8008b4c:	89fb      	ldrh	r3, [r7, #14]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <cmp_lfn+0xd0>
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <cmp_lfn+0xd0>
 8008b60:	2300      	movs	r3, #0
 8008b62:	e000      	b.n	8008b66 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008b64:	2301      	movs	r3, #1
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	0800babc 	.word	0x0800babc

08008b74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4611      	mov	r1, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	460b      	mov	r3, r1
 8008b84:	71fb      	strb	r3, [r7, #7]
 8008b86:	4613      	mov	r3, r2
 8008b88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	330d      	adds	r3, #13
 8008b8e:	79ba      	ldrb	r2, [r7, #6]
 8008b90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	330b      	adds	r3, #11
 8008b96:	220f      	movs	r2, #15
 8008b98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	331a      	adds	r3, #26
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe ff44 	bl	8007a36 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	1e5a      	subs	r2, r3, #1
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	82fb      	strh	r3, [r7, #22]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008bc6:	8afb      	ldrh	r3, [r7, #22]
 8008bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <put_lfn+0x6c>
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	61fa      	str	r2, [r7, #28]
 8008bd6:	005b      	lsls	r3, r3, #1
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008be0:	4a17      	ldr	r2, [pc, #92]	; (8008c40 <put_lfn+0xcc>)
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	4413      	add	r3, r2
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	8afa      	ldrh	r2, [r7, #22]
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe ff1f 	bl	8007a36 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008bf8:	8afb      	ldrh	r3, [r7, #22]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d102      	bne.n	8008c04 <put_lfn+0x90>
 8008bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	d9da      	bls.n	8008bc6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008c10:	8afb      	ldrh	r3, [r7, #22]
 8008c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d006      	beq.n	8008c28 <put_lfn+0xb4>
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	005b      	lsls	r3, r3, #1
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4413      	add	r3, r2
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d103      	bne.n	8008c30 <put_lfn+0xbc>
 8008c28:	79fb      	ldrb	r3, [r7, #7]
 8008c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	79fa      	ldrb	r2, [r7, #7]
 8008c34:	701a      	strb	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	0800babc 	.word	0x0800babc

08008c44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08c      	sub	sp, #48	; 0x30
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008c52:	220b      	movs	r2, #11
 8008c54:	68b9      	ldr	r1, [r7, #8]
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7fe ff32 	bl	8007ac0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d92b      	bls.n	8008cba <gen_numname+0x76>
		sr = seq;
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008c66:	e022      	b.n	8008cae <gen_numname+0x6a>
			wc = *lfn++;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008c72:	2300      	movs	r3, #0
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c76:	e017      	b.n	8008ca8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	005a      	lsls	r2, r3, #1
 8008c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	4413      	add	r3, r2
 8008c84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c88:	085b      	lsrs	r3, r3, #1
 8008c8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <gen_numname+0x5e>
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008c9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008ca0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	2b0f      	cmp	r3, #15
 8008cac:	d9e4      	bls.n	8008c78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1d8      	bne.n	8008c68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008cba:	2307      	movs	r3, #7
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	3330      	adds	r3, #48	; 0x30
 8008cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cd2:	2b39      	cmp	r3, #57	; 0x39
 8008cd4:	d904      	bls.n	8008ce0 <gen_numname+0x9c>
 8008cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cda:	3307      	adds	r3, #7
 8008cdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	1e5a      	subs	r2, r3, #1
 8008ce4:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ce6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008cea:	4413      	add	r3, r2
 8008cec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008cf0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	091b      	lsrs	r3, r3, #4
 8008cf8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1de      	bne.n	8008cbe <gen_numname+0x7a>
	ns[i] = '~';
 8008d00:	f107 0214 	add.w	r2, r7, #20
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	4413      	add	r3, r2
 8008d08:	227e      	movs	r2, #126	; 0x7e
 8008d0a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d10:	e002      	b.n	8008d18 <gen_numname+0xd4>
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	3301      	adds	r3, #1
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
 8008d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d205      	bcs.n	8008d2c <gen_numname+0xe8>
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	4413      	add	r3, r2
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d1f2      	bne.n	8008d12 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	2b07      	cmp	r3, #7
 8008d30:	d808      	bhi.n	8008d44 <gen_numname+0x100>
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	62ba      	str	r2, [r7, #40]	; 0x28
 8008d38:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008d42:	e000      	b.n	8008d46 <gen_numname+0x102>
 8008d44:	2120      	movs	r1, #32
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	627a      	str	r2, [r7, #36]	; 0x24
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	4413      	add	r3, r2
 8008d50:	460a      	mov	r2, r1
 8008d52:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d9e8      	bls.n	8008d2c <gen_numname+0xe8>
}
 8008d5a:	bf00      	nop
 8008d5c:	bf00      	nop
 8008d5e:	3730      	adds	r7, #48	; 0x30
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008d70:	230b      	movs	r3, #11
 8008d72:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	0852      	lsrs	r2, r2, #1
 8008d7a:	01db      	lsls	r3, r3, #7
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	1c59      	adds	r1, r3, #1
 8008d84:	6079      	str	r1, [r7, #4]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	4413      	add	r3, r2
 8008d8a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	60bb      	str	r3, [r7, #8]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1ed      	bne.n	8008d74 <sum_sfn+0x10>
	return sum;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr

08008da4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008db2:	2100      	movs	r1, #0
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fc87 	bl	80086c8 <dir_sdi>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008dbe:	7dfb      	ldrb	r3, [r7, #23]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <dir_find+0x24>
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
 8008dc6:	e0a9      	b.n	8008f1c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008dc8:	23ff      	movs	r3, #255	; 0xff
 8008dca:	753b      	strb	r3, [r7, #20]
 8008dcc:	7d3b      	ldrb	r3, [r7, #20]
 8008dce:	757b      	strb	r3, [r7, #21]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6938      	ldr	r0, [r7, #16]
 8008de0:	f7ff f892 	bl	8007f08 <move_window>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 8090 	bne.w	8008f10 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008df8:	7dbb      	ldrb	r3, [r7, #22]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d102      	bne.n	8008e04 <dir_find+0x60>
 8008dfe:	2304      	movs	r3, #4
 8008e00:	75fb      	strb	r3, [r7, #23]
 8008e02:	e08a      	b.n	8008f1a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	330b      	adds	r3, #11
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	7bfa      	ldrb	r2, [r7, #15]
 8008e16:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008e18:	7dbb      	ldrb	r3, [r7, #22]
 8008e1a:	2be5      	cmp	r3, #229	; 0xe5
 8008e1c:	d007      	beq.n	8008e2e <dir_find+0x8a>
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	f003 0308 	and.w	r3, r3, #8
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d009      	beq.n	8008e3c <dir_find+0x98>
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	2b0f      	cmp	r3, #15
 8008e2c:	d006      	beq.n	8008e3c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008e2e:	23ff      	movs	r3, #255	; 0xff
 8008e30:	757b      	strb	r3, [r7, #21]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f04f 32ff 	mov.w	r2, #4294967295
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
 8008e3a:	e05e      	b.n	8008efa <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	2b0f      	cmp	r3, #15
 8008e40:	d136      	bne.n	8008eb0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d154      	bne.n	8008efa <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008e50:	7dbb      	ldrb	r3, [r7, #22]
 8008e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00d      	beq.n	8008e76 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	7b5b      	ldrb	r3, [r3, #13]
 8008e60:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008e62:	7dbb      	ldrb	r3, [r7, #22]
 8008e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e68:	75bb      	strb	r3, [r7, #22]
 8008e6a:	7dbb      	ldrb	r3, [r7, #22]
 8008e6c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695a      	ldr	r2, [r3, #20]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008e76:	7dba      	ldrb	r2, [r7, #22]
 8008e78:	7d7b      	ldrb	r3, [r7, #21]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d115      	bne.n	8008eaa <dir_find+0x106>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	330d      	adds	r3, #13
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	7d3a      	ldrb	r2, [r7, #20]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d10e      	bne.n	8008eaa <dir_find+0x106>
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	691a      	ldr	r2, [r3, #16]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7ff fdfc 	bl	8008a94 <cmp_lfn>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <dir_find+0x106>
 8008ea2:	7d7b      	ldrb	r3, [r7, #21]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	e000      	b.n	8008eac <dir_find+0x108>
 8008eaa:	23ff      	movs	r3, #255	; 0xff
 8008eac:	757b      	strb	r3, [r7, #21]
 8008eae:	e024      	b.n	8008efa <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008eb0:	7d7b      	ldrb	r3, [r7, #21]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d109      	bne.n	8008eca <dir_find+0x126>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7ff ff52 	bl	8008d64 <sum_sfn>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	7d3b      	ldrb	r3, [r7, #20]
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d024      	beq.n	8008f14 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10a      	bne.n	8008eee <dir_find+0x14a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a18      	ldr	r0, [r3, #32]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3324      	adds	r3, #36	; 0x24
 8008ee0:	220b      	movs	r2, #11
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f7fe fe26 	bl	8007b34 <mem_cmp>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d014      	beq.n	8008f18 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008eee:	23ff      	movs	r3, #255	; 0xff
 8008ef0:	757b      	strb	r3, [r7, #21]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fc6c 	bl	80087da <dir_next>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f43f af65 	beq.w	8008dd8 <dir_find+0x34>
 8008f0e:	e004      	b.n	8008f1a <dir_find+0x176>
		if (res != FR_OK) break;
 8008f10:	bf00      	nop
 8008f12:	e002      	b.n	8008f1a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008f14:	bf00      	nop
 8008f16:	e000      	b.n	8008f1a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008f18:	bf00      	nop

	return res;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	; 0x30
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008f38:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <dir_register+0x20>
 8008f40:	2306      	movs	r3, #6
 8008f42:	e0e0      	b.n	8009106 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008f44:	2300      	movs	r3, #0
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
 8008f48:	e002      	b.n	8008f50 <dir_register+0x2c>
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	4413      	add	r3, r2
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f4      	bne.n	8008f4a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	220c      	movs	r2, #12
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe fda7 	bl	8007ac0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d032      	beq.n	8008fe2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2240      	movs	r2, #64	; 0x40
 8008f80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008f84:	2301      	movs	r3, #1
 8008f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f88:	e016      	b.n	8008fb8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	f107 010c 	add.w	r1, r7, #12
 8008f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9a:	f7ff fe53 	bl	8008c44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff ff00 	bl	8008da4 <dir_find>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	3301      	adds	r3, #1
 8008fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fba:	2b63      	cmp	r3, #99	; 0x63
 8008fbc:	d9e5      	bls.n	8008f8a <dir_register+0x66>
 8008fbe:	e000      	b.n	8008fc2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008fc0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc4:	2b64      	cmp	r3, #100	; 0x64
 8008fc6:	d101      	bne.n	8008fcc <dir_register+0xa8>
 8008fc8:	2307      	movs	r3, #7
 8008fca:	e09c      	b.n	8009106 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d002      	beq.n	8008fda <dir_register+0xb6>
 8008fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008fd8:	e095      	b.n	8009106 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008fda:	7dfa      	ldrb	r2, [r7, #23]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <dir_register+0xd8>
 8008fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fee:	330c      	adds	r3, #12
 8008ff0:	4a47      	ldr	r2, [pc, #284]	; (8009110 <dir_register+0x1ec>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	e000      	b.n	8008ffe <dir_register+0xda>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009000:	6a39      	ldr	r1, [r7, #32]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7ff fcbf 	bl	8008986 <dir_alloc>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800900e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009012:	2b00      	cmp	r3, #0
 8009014:	d148      	bne.n	80090a8 <dir_register+0x184>
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	3b01      	subs	r3, #1
 800901a:	623b      	str	r3, [r7, #32]
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d042      	beq.n	80090a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	015b      	lsls	r3, r3, #5
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff fb4a 	bl	80086c8 <dir_sdi>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800903a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800903e:	2b00      	cmp	r3, #0
 8009040:	d132      	bne.n	80090a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3324      	adds	r3, #36	; 0x24
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff fe8c 	bl	8008d64 <sum_sfn>
 800904c:	4603      	mov	r3, r0
 800904e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	4619      	mov	r1, r3
 8009056:	69f8      	ldr	r0, [r7, #28]
 8009058:	f7fe ff56 	bl	8007f08 <move_window>
 800905c:	4603      	mov	r3, r0
 800905e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009066:	2b00      	cmp	r3, #0
 8009068:	d11d      	bne.n	80090a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	6918      	ldr	r0, [r3, #16]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a19      	ldr	r1, [r3, #32]
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	b2da      	uxtb	r2, r3
 8009076:	7efb      	ldrb	r3, [r7, #27]
 8009078:	f7ff fd7c 	bl	8008b74 <put_lfn>
				fs->wflag = 1;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	2201      	movs	r2, #1
 8009080:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fba8 	bl	80087da <dir_next>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009094:	2b00      	cmp	r3, #0
 8009096:	d107      	bne.n	80090a8 <dir_register+0x184>
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	3b01      	subs	r3, #1
 800909c:	623b      	str	r3, [r7, #32]
 800909e:	6a3b      	ldr	r3, [r7, #32]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1d5      	bne.n	8009050 <dir_register+0x12c>
 80090a4:	e000      	b.n	80090a8 <dir_register+0x184>
				if (res != FR_OK) break;
 80090a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80090a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d128      	bne.n	8009102 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	4619      	mov	r1, r3
 80090b6:	69f8      	ldr	r0, [r7, #28]
 80090b8:	f7fe ff26 	bl	8007f08 <move_window>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80090c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d11b      	bne.n	8009102 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	2220      	movs	r2, #32
 80090d0:	2100      	movs	r1, #0
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fd14 	bl	8007b00 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a18      	ldr	r0, [r3, #32]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3324      	adds	r3, #36	; 0x24
 80090e0:	220b      	movs	r2, #11
 80090e2:	4619      	mov	r1, r3
 80090e4:	f7fe fcec 	bl	8007ac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	330c      	adds	r3, #12
 80090f4:	f002 0218 	and.w	r2, r2, #24
 80090f8:	b2d2      	uxtb	r2, r2
 80090fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2201      	movs	r2, #1
 8009100:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009106:	4618      	mov	r0, r3
 8009108:	3730      	adds	r7, #48	; 0x30
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	4ec4ec4f 	.word	0x4ec4ec4f

08009114 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08a      	sub	sp, #40	; 0x28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	613b      	str	r3, [r7, #16]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	2300      	movs	r3, #0
 800912e:	617b      	str	r3, [r7, #20]
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	61ba      	str	r2, [r7, #24]
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4413      	add	r3, r2
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009144:	2b1f      	cmp	r3, #31
 8009146:	d940      	bls.n	80091ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800914a:	2b2f      	cmp	r3, #47	; 0x2f
 800914c:	d006      	beq.n	800915c <create_name+0x48>
 800914e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009150:	2b5c      	cmp	r3, #92	; 0x5c
 8009152:	d110      	bne.n	8009176 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009154:	e002      	b.n	800915c <create_name+0x48>
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	3301      	adds	r3, #1
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	4413      	add	r3, r2
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	2b2f      	cmp	r3, #47	; 0x2f
 8009166:	d0f6      	beq.n	8009156 <create_name+0x42>
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	4413      	add	r3, r2
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b5c      	cmp	r3, #92	; 0x5c
 8009172:	d0f0      	beq.n	8009156 <create_name+0x42>
			break;
 8009174:	e02a      	b.n	80091cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2bfe      	cmp	r3, #254	; 0xfe
 800917a:	d901      	bls.n	8009180 <create_name+0x6c>
 800917c:	2306      	movs	r3, #6
 800917e:	e177      	b.n	8009470 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009180:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009182:	b2db      	uxtb	r3, r3
 8009184:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009188:	2101      	movs	r1, #1
 800918a:	4618      	mov	r0, r3
 800918c:	f001 feaa 	bl	800aee4 <ff_convert>
 8009190:	4603      	mov	r3, r0
 8009192:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <create_name+0x8a>
 800919a:	2306      	movs	r3, #6
 800919c:	e168      	b.n	8009470 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800919e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091a0:	2b7f      	cmp	r3, #127	; 0x7f
 80091a2:	d809      	bhi.n	80091b8 <create_name+0xa4>
 80091a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091a6:	4619      	mov	r1, r3
 80091a8:	48b3      	ldr	r0, [pc, #716]	; (8009478 <create_name+0x364>)
 80091aa:	f7fe fce9 	bl	8007b80 <chk_chr>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <create_name+0xa4>
 80091b4:	2306      	movs	r3, #6
 80091b6:	e15b      	b.n	8009470 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	1c5a      	adds	r2, r3, #1
 80091bc:	617a      	str	r2, [r7, #20]
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80091c8:	e7b4      	b.n	8009134 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80091ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	441a      	add	r2, r3
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80091d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d8:	2b1f      	cmp	r3, #31
 80091da:	d801      	bhi.n	80091e0 <create_name+0xcc>
 80091dc:	2304      	movs	r3, #4
 80091de:	e000      	b.n	80091e2 <create_name+0xce>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80091e6:	e011      	b.n	800920c <create_name+0xf8>
		w = lfn[di - 1];
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80091ee:	3b01      	subs	r3, #1
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	881b      	ldrh	r3, [r3, #0]
 80091f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80091fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d002      	beq.n	8009206 <create_name+0xf2>
 8009200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009202:	2b2e      	cmp	r3, #46	; 0x2e
 8009204:	d106      	bne.n	8009214 <create_name+0x100>
		di--;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	3b01      	subs	r3, #1
 800920a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1ea      	bne.n	80091e8 <create_name+0xd4>
 8009212:	e000      	b.n	8009216 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009214:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	4413      	add	r3, r2
 800921e:	2200      	movs	r2, #0
 8009220:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <create_name+0x118>
 8009228:	2306      	movs	r3, #6
 800922a:	e121      	b.n	8009470 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	220b      	movs	r2, #11
 8009232:	2120      	movs	r1, #32
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe fc63 	bl	8007b00 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800923a:	2300      	movs	r3, #0
 800923c:	61bb      	str	r3, [r7, #24]
 800923e:	e002      	b.n	8009246 <create_name+0x132>
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	3301      	adds	r3, #1
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	2b20      	cmp	r3, #32
 8009252:	d0f5      	beq.n	8009240 <create_name+0x12c>
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	005b      	lsls	r3, r3, #1
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	4413      	add	r3, r2
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	2b2e      	cmp	r3, #46	; 0x2e
 8009260:	d0ee      	beq.n	8009240 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d009      	beq.n	800927c <create_name+0x168>
 8009268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800926c:	f043 0303 	orr.w	r3, r3, #3
 8009270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009274:	e002      	b.n	800927c <create_name+0x168>
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	3b01      	subs	r3, #1
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <create_name+0x182>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009288:	3b01      	subs	r3, #1
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	2b2e      	cmp	r3, #46	; 0x2e
 8009294:	d1ef      	bne.n	8009276 <create_name+0x162>

	i = b = 0; ni = 8;
 8009296:	2300      	movs	r3, #0
 8009298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800929c:	2300      	movs	r3, #0
 800929e:	623b      	str	r3, [r7, #32]
 80092a0:	2308      	movs	r3, #8
 80092a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	61ba      	str	r2, [r7, #24]
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80092b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8090 	beq.w	80093dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80092bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092be:	2b20      	cmp	r3, #32
 80092c0:	d006      	beq.n	80092d0 <create_name+0x1bc>
 80092c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092c4:	2b2e      	cmp	r3, #46	; 0x2e
 80092c6:	d10a      	bne.n	80092de <create_name+0x1ca>
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d006      	beq.n	80092de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80092d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092d4:	f043 0303 	orr.w	r3, r3, #3
 80092d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80092dc:	e07d      	b.n	80093da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80092de:	6a3a      	ldr	r2, [r7, #32]
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d203      	bcs.n	80092ee <create_name+0x1da>
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d123      	bne.n	8009336 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	2b0b      	cmp	r3, #11
 80092f2:	d106      	bne.n	8009302 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80092f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092f8:	f043 0303 	orr.w	r3, r3, #3
 80092fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009300:	e06f      	b.n	80093e2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	429a      	cmp	r2, r3
 8009308:	d005      	beq.n	8009316 <create_name+0x202>
 800930a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800930e:	f043 0303 	orr.w	r3, r3, #3
 8009312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	429a      	cmp	r2, r3
 800931c:	d860      	bhi.n	80093e0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	2308      	movs	r3, #8
 8009324:	623b      	str	r3, [r7, #32]
 8009326:	230b      	movs	r3, #11
 8009328:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800932a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009334:	e051      	b.n	80093da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009338:	2b7f      	cmp	r3, #127	; 0x7f
 800933a:	d914      	bls.n	8009366 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800933c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fdcf 	bl	800aee4 <ff_convert>
 8009346:	4603      	mov	r3, r0
 8009348:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800934a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800934c:	2b00      	cmp	r3, #0
 800934e:	d004      	beq.n	800935a <create_name+0x246>
 8009350:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009352:	3b80      	subs	r3, #128	; 0x80
 8009354:	4a49      	ldr	r2, [pc, #292]	; (800947c <create_name+0x368>)
 8009356:	5cd3      	ldrb	r3, [r2, r3]
 8009358:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800935a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800935e:	f043 0302 	orr.w	r3, r3, #2
 8009362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009368:	2b00      	cmp	r3, #0
 800936a:	d007      	beq.n	800937c <create_name+0x268>
 800936c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800936e:	4619      	mov	r1, r3
 8009370:	4843      	ldr	r0, [pc, #268]	; (8009480 <create_name+0x36c>)
 8009372:	f7fe fc05 	bl	8007b80 <chk_chr>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800937c:	235f      	movs	r3, #95	; 0x5f
 800937e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009384:	f043 0303 	orr.w	r3, r3, #3
 8009388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800938c:	e01b      	b.n	80093c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800938e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009390:	2b40      	cmp	r3, #64	; 0x40
 8009392:	d909      	bls.n	80093a8 <create_name+0x294>
 8009394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009396:	2b5a      	cmp	r3, #90	; 0x5a
 8009398:	d806      	bhi.n	80093a8 <create_name+0x294>
					b |= 2;
 800939a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800939e:	f043 0302 	orr.w	r3, r3, #2
 80093a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80093a6:	e00e      	b.n	80093c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80093a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093aa:	2b60      	cmp	r3, #96	; 0x60
 80093ac:	d90b      	bls.n	80093c6 <create_name+0x2b2>
 80093ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093b0:	2b7a      	cmp	r3, #122	; 0x7a
 80093b2:	d808      	bhi.n	80093c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80093b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093b8:	f043 0301 	orr.w	r3, r3, #1
 80093bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80093c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093c2:	3b20      	subs	r3, #32
 80093c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	623a      	str	r2, [r7, #32]
 80093cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093ce:	b2d1      	uxtb	r1, r2
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	4413      	add	r3, r2
 80093d4:	460a      	mov	r2, r1
 80093d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80093da:	e763      	b.n	80092a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80093dc:	bf00      	nop
 80093de:	e000      	b.n	80093e2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80093e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093e8:	2be5      	cmp	r3, #229	; 0xe5
 80093ea:	d103      	bne.n	80093f4 <create_name+0x2e0>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2205      	movs	r2, #5
 80093f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	2b08      	cmp	r3, #8
 80093f8:	d104      	bne.n	8009404 <create_name+0x2f0>
 80093fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009404:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009408:	f003 030c 	and.w	r3, r3, #12
 800940c:	2b0c      	cmp	r3, #12
 800940e:	d005      	beq.n	800941c <create_name+0x308>
 8009410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d105      	bne.n	8009428 <create_name+0x314>
 800941c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009420:	f043 0302 	orr.w	r3, r3, #2
 8009424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d117      	bne.n	8009464 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009438:	f003 0303 	and.w	r3, r3, #3
 800943c:	2b01      	cmp	r3, #1
 800943e:	d105      	bne.n	800944c <create_name+0x338>
 8009440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009444:	f043 0310 	orr.w	r3, r3, #16
 8009448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800944c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009450:	f003 030c 	and.w	r3, r3, #12
 8009454:	2b04      	cmp	r3, #4
 8009456:	d105      	bne.n	8009464 <create_name+0x350>
 8009458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800945c:	f043 0308 	orr.w	r3, r3, #8
 8009460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800946a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800946e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009470:	4618      	mov	r0, r3
 8009472:	3728      	adds	r7, #40	; 0x28
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	0800b9a0 	.word	0x0800b9a0
 800947c:	0800ba3c 	.word	0x0800ba3c
 8009480:	0800b9ac 	.word	0x0800b9ac

08009484 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009498:	e002      	b.n	80094a0 <follow_path+0x1c>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b2f      	cmp	r3, #47	; 0x2f
 80094a6:	d0f8      	beq.n	800949a <follow_path+0x16>
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b5c      	cmp	r3, #92	; 0x5c
 80094ae:	d0f4      	beq.n	800949a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	2200      	movs	r2, #0
 80094b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b1f      	cmp	r3, #31
 80094bc:	d80a      	bhi.n	80094d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2280      	movs	r2, #128	; 0x80
 80094c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094c6:	2100      	movs	r1, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff f8fd 	bl	80086c8 <dir_sdi>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
 80094d2:	e048      	b.n	8009566 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094d4:	463b      	mov	r3, r7
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fe1b 	bl	8009114 <create_name>
 80094de:	4603      	mov	r3, r0
 80094e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d139      	bne.n	800955c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff fc5b 	bl	8008da4 <dir_find>
 80094ee:	4603      	mov	r3, r0
 80094f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00a      	beq.n	8009516 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009500:	7dfb      	ldrb	r3, [r7, #23]
 8009502:	2b04      	cmp	r3, #4
 8009504:	d12c      	bne.n	8009560 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009506:	7afb      	ldrb	r3, [r7, #11]
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	2b00      	cmp	r3, #0
 800950e:	d127      	bne.n	8009560 <follow_path+0xdc>
 8009510:	2305      	movs	r3, #5
 8009512:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009514:	e024      	b.n	8009560 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	d121      	bne.n	8009564 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	799b      	ldrb	r3, [r3, #6]
 8009524:	f003 0310 	and.w	r3, r3, #16
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800952c:	2305      	movs	r3, #5
 800952e:	75fb      	strb	r3, [r7, #23]
 8009530:	e019      	b.n	8009566 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	695b      	ldr	r3, [r3, #20]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	8992      	ldrh	r2, [r2, #12]
 8009540:	fbb3 f0f2 	udiv	r0, r3, r2
 8009544:	fb02 f200 	mul.w	r2, r2, r0
 8009548:	1a9b      	subs	r3, r3, r2
 800954a:	440b      	add	r3, r1
 800954c:	4619      	mov	r1, r3
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f7ff fa60 	bl	8008a14 <ld_clust>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800955a:	e7bb      	b.n	80094d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800955c:	bf00      	nop
 800955e:	e002      	b.n	8009566 <follow_path+0xe2>
				break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009564:	bf00      	nop
			}
		}
	}

	return res;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009578:	f04f 33ff 	mov.w	r3, #4294967295
 800957c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d031      	beq.n	80095ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e002      	b.n	8009594 <get_ldnumber+0x24>
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	3301      	adds	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b1f      	cmp	r3, #31
 800959a:	d903      	bls.n	80095a4 <get_ldnumber+0x34>
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	2b3a      	cmp	r3, #58	; 0x3a
 80095a2:	d1f4      	bne.n	800958e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	2b3a      	cmp	r3, #58	; 0x3a
 80095aa:	d11c      	bne.n	80095e6 <get_ldnumber+0x76>
			tp = *path;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	60fa      	str	r2, [r7, #12]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	3b30      	subs	r3, #48	; 0x30
 80095bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b09      	cmp	r3, #9
 80095c2:	d80e      	bhi.n	80095e2 <get_ldnumber+0x72>
 80095c4:	68fa      	ldr	r2, [r7, #12]
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d10a      	bne.n	80095e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d107      	bne.n	80095e2 <get_ldnumber+0x72>
					vol = (int)i;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3301      	adds	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	697a      	ldr	r2, [r7, #20]
 80095e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	e002      	b.n	80095ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095e6:	2300      	movs	r3, #0
 80095e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095ea:	693b      	ldr	r3, [r7, #16]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	371c      	adds	r7, #28
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bc80      	pop	{r7}
 80095f4:	4770      	bx	lr
	...

080095f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	70da      	strb	r2, [r3, #3]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fe fc78 	bl	8007f08 <move_window>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <check_fs+0x2a>
 800961e:	2304      	movs	r3, #4
 8009620:	e038      	b.n	8009694 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3338      	adds	r3, #56	; 0x38
 8009626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe f9ca 	bl	80079c4 <ld_word>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009638:	429a      	cmp	r2, r3
 800963a:	d001      	beq.n	8009640 <check_fs+0x48>
 800963c:	2303      	movs	r3, #3
 800963e:	e029      	b.n	8009694 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009646:	2be9      	cmp	r3, #233	; 0xe9
 8009648:	d009      	beq.n	800965e <check_fs+0x66>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009650:	2beb      	cmp	r3, #235	; 0xeb
 8009652:	d11e      	bne.n	8009692 <check_fs+0x9a>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800965a:	2b90      	cmp	r3, #144	; 0x90
 800965c:	d119      	bne.n	8009692 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	3338      	adds	r3, #56	; 0x38
 8009662:	3336      	adds	r3, #54	; 0x36
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe f9c4 	bl	80079f2 <ld_dword>
 800966a:	4603      	mov	r3, r0
 800966c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009670:	4a0a      	ldr	r2, [pc, #40]	; (800969c <check_fs+0xa4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d101      	bne.n	800967a <check_fs+0x82>
 8009676:	2300      	movs	r3, #0
 8009678:	e00c      	b.n	8009694 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	3338      	adds	r3, #56	; 0x38
 800967e:	3352      	adds	r3, #82	; 0x52
 8009680:	4618      	mov	r0, r3
 8009682:	f7fe f9b6 	bl	80079f2 <ld_dword>
 8009686:	4603      	mov	r3, r0
 8009688:	4a05      	ldr	r2, [pc, #20]	; (80096a0 <check_fs+0xa8>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d101      	bne.n	8009692 <check_fs+0x9a>
 800968e:	2300      	movs	r3, #0
 8009690:	e000      	b.n	8009694 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009692:	2302      	movs	r3, #2
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	00544146 	.word	0x00544146
 80096a0:	33544146 	.word	0x33544146

080096a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b096      	sub	sp, #88	; 0x58
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff ff59 	bl	8009570 <get_ldnumber>
 80096be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	da01      	bge.n	80096ca <find_volume+0x26>
 80096c6:	230b      	movs	r3, #11
 80096c8:	e268      	b.n	8009b9c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096ca:	4ab0      	ldr	r2, [pc, #704]	; (800998c <find_volume+0x2e8>)
 80096cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <find_volume+0x3a>
 80096da:	230c      	movs	r3, #12
 80096dc:	e25e      	b.n	8009b9c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	f023 0301 	bic.w	r3, r3, #1
 80096ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d01a      	beq.n	800972a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80096f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f6:	785b      	ldrb	r3, [r3, #1]
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7fe f8c5 	bl	8007888 <disk_status>
 80096fe:	4603      	mov	r3, r0
 8009700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10c      	bne.n	800972a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d007      	beq.n	8009726 <find_volume+0x82>
 8009716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800971a:	f003 0304 	and.w	r3, r3, #4
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009722:	230a      	movs	r3, #10
 8009724:	e23a      	b.n	8009b9c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009726:	2300      	movs	r3, #0
 8009728:	e238      	b.n	8009b9c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2200      	movs	r2, #0
 800972e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009732:	b2da      	uxtb	r2, r3
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe f8bd 	bl	80078bc <disk_initialize>
 8009742:	4603      	mov	r3, r0
 8009744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009754:	2303      	movs	r3, #3
 8009756:	e221      	b.n	8009b9c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d007      	beq.n	800976e <find_volume+0xca>
 800975e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009762:	f003 0304 	and.w	r3, r3, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800976a:	230a      	movs	r3, #10
 800976c:	e216      	b.n	8009b9c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	7858      	ldrb	r0, [r3, #1]
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	330c      	adds	r3, #12
 8009776:	461a      	mov	r2, r3
 8009778:	2102      	movs	r1, #2
 800977a:	f7fe f905 	bl	8007988 <disk_ioctl>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <find_volume+0xe4>
 8009784:	2301      	movs	r3, #1
 8009786:	e209      	b.n	8009b9c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	899b      	ldrh	r3, [r3, #12]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009790:	d80d      	bhi.n	80097ae <find_volume+0x10a>
 8009792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009794:	899b      	ldrh	r3, [r3, #12]
 8009796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800979a:	d308      	bcc.n	80097ae <find_volume+0x10a>
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	899b      	ldrh	r3, [r3, #12]
 80097a0:	461a      	mov	r2, r3
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	899b      	ldrh	r3, [r3, #12]
 80097a6:	3b01      	subs	r3, #1
 80097a8:	4013      	ands	r3, r2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <find_volume+0x10e>
 80097ae:	2301      	movs	r3, #1
 80097b0:	e1f4      	b.n	8009b9c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80097b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097ba:	f7ff ff1d 	bl	80095f8 <check_fs>
 80097be:	4603      	mov	r3, r0
 80097c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d14b      	bne.n	8009864 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097cc:	2300      	movs	r3, #0
 80097ce:	643b      	str	r3, [r7, #64]	; 0x40
 80097d0:	e01f      	b.n	8009812 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80097d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097da:	011b      	lsls	r3, r3, #4
 80097dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80097e0:	4413      	add	r3, r2
 80097e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	3304      	adds	r3, #4
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d006      	beq.n	80097fc <find_volume+0x158>
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	3308      	adds	r3, #8
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe f8fd 	bl	80079f2 <ld_dword>
 80097f8:	4602      	mov	r2, r0
 80097fa:	e000      	b.n	80097fe <find_volume+0x15a>
 80097fc:	2200      	movs	r2, #0
 80097fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009806:	440b      	add	r3, r1
 8009808:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800980c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980e:	3301      	adds	r3, #1
 8009810:	643b      	str	r3, [r7, #64]	; 0x40
 8009812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009814:	2b03      	cmp	r3, #3
 8009816:	d9dc      	bls.n	80097d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009818:	2300      	movs	r3, #0
 800981a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800981c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <find_volume+0x184>
 8009822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009824:	3b01      	subs	r3, #1
 8009826:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009830:	4413      	add	r3, r2
 8009832:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009836:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <find_volume+0x1a6>
 800983e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009842:	f7ff fed9 	bl	80095f8 <check_fs>
 8009846:	4603      	mov	r3, r0
 8009848:	e000      	b.n	800984c <find_volume+0x1a8>
 800984a:	2303      	movs	r3, #3
 800984c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009854:	2b01      	cmp	r3, #1
 8009856:	d905      	bls.n	8009864 <find_volume+0x1c0>
 8009858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800985a:	3301      	adds	r3, #1
 800985c:	643b      	str	r3, [r7, #64]	; 0x40
 800985e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009860:	2b03      	cmp	r3, #3
 8009862:	d9e1      	bls.n	8009828 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009868:	2b04      	cmp	r3, #4
 800986a:	d101      	bne.n	8009870 <find_volume+0x1cc>
 800986c:	2301      	movs	r3, #1
 800986e:	e195      	b.n	8009b9c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009874:	2b01      	cmp	r3, #1
 8009876:	d901      	bls.n	800987c <find_volume+0x1d8>
 8009878:	230d      	movs	r3, #13
 800987a:	e18f      	b.n	8009b9c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	3338      	adds	r3, #56	; 0x38
 8009880:	330b      	adds	r3, #11
 8009882:	4618      	mov	r0, r3
 8009884:	f7fe f89e 	bl	80079c4 <ld_word>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	899b      	ldrh	r3, [r3, #12]
 8009890:	429a      	cmp	r2, r3
 8009892:	d001      	beq.n	8009898 <find_volume+0x1f4>
 8009894:	230d      	movs	r3, #13
 8009896:	e181      	b.n	8009b9c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	3338      	adds	r3, #56	; 0x38
 800989c:	3316      	adds	r3, #22
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe f890 	bl	80079c4 <ld_word>
 80098a4:	4603      	mov	r3, r0
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80098a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <find_volume+0x218>
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	3338      	adds	r3, #56	; 0x38
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe f89c 	bl	80079f2 <ld_dword>
 80098ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80098c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	789b      	ldrb	r3, [r3, #2]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d005      	beq.n	80098e0 <find_volume+0x23c>
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	789b      	ldrb	r3, [r3, #2]
 80098d8:	2b02      	cmp	r3, #2
 80098da:	d001      	beq.n	80098e0 <find_volume+0x23c>
 80098dc:	230d      	movs	r3, #13
 80098de:	e15d      	b.n	8009b9c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	789b      	ldrb	r3, [r3, #2]
 80098e4:	461a      	mov	r2, r3
 80098e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e8:	fb02 f303 	mul.w	r3, r2, r3
 80098ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	895b      	ldrh	r3, [r3, #10]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d008      	beq.n	8009914 <find_volume+0x270>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	895b      	ldrh	r3, [r3, #10]
 8009906:	461a      	mov	r2, r3
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	895b      	ldrh	r3, [r3, #10]
 800990c:	3b01      	subs	r3, #1
 800990e:	4013      	ands	r3, r2
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <find_volume+0x274>
 8009914:	230d      	movs	r3, #13
 8009916:	e141      	b.n	8009b9c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	3338      	adds	r3, #56	; 0x38
 800991c:	3311      	adds	r3, #17
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe f850 	bl	80079c4 <ld_word>
 8009924:	4603      	mov	r3, r0
 8009926:	461a      	mov	r2, r3
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	891b      	ldrh	r3, [r3, #8]
 8009930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009932:	8992      	ldrh	r2, [r2, #12]
 8009934:	0952      	lsrs	r2, r2, #5
 8009936:	b292      	uxth	r2, r2
 8009938:	fbb3 f1f2 	udiv	r1, r3, r2
 800993c:	fb02 f201 	mul.w	r2, r2, r1
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	b29b      	uxth	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <find_volume+0x2a8>
 8009948:	230d      	movs	r3, #13
 800994a:	e127      	b.n	8009b9c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	3338      	adds	r3, #56	; 0x38
 8009950:	3313      	adds	r3, #19
 8009952:	4618      	mov	r0, r3
 8009954:	f7fe f836 	bl	80079c4 <ld_word>
 8009958:	4603      	mov	r3, r0
 800995a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800995c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <find_volume+0x2cc>
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	3338      	adds	r3, #56	; 0x38
 8009966:	3320      	adds	r3, #32
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe f842 	bl	80079f2 <ld_dword>
 800996e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	3338      	adds	r3, #56	; 0x38
 8009974:	330e      	adds	r3, #14
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f824 	bl	80079c4 <ld_word>
 800997c:	4603      	mov	r3, r0
 800997e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <find_volume+0x2ec>
 8009986:	230d      	movs	r3, #13
 8009988:	e108      	b.n	8009b9c <find_volume+0x4f8>
 800998a:	bf00      	nop
 800998c:	20000114 	.word	0x20000114

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009994:	4413      	add	r3, r2
 8009996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009998:	8911      	ldrh	r1, [r2, #8]
 800999a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800999c:	8992      	ldrh	r2, [r2, #12]
 800999e:	0952      	lsrs	r2, r2, #5
 80099a0:	b292      	uxth	r2, r2
 80099a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80099a6:	b292      	uxth	r2, r2
 80099a8:	4413      	add	r3, r2
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80099ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d201      	bcs.n	80099b8 <find_volume+0x314>
 80099b4:	230d      	movs	r3, #13
 80099b6:	e0f1      	b.n	8009b9c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80099b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099c0:	8952      	ldrh	r2, [r2, #10]
 80099c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <find_volume+0x32e>
 80099ce:	230d      	movs	r3, #13
 80099d0:	e0e4      	b.n	8009b9c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80099d2:	2303      	movs	r3, #3
 80099d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099de:	4293      	cmp	r3, r2
 80099e0:	d802      	bhi.n	80099e8 <find_volume+0x344>
 80099e2:	2302      	movs	r3, #2
 80099e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d802      	bhi.n	80099f8 <find_volume+0x354>
 80099f2:	2301      	movs	r3, #1
 80099f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	1c9a      	adds	r2, r3, #2
 80099fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009a06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0a:	441a      	add	r2, r3
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a14:	441a      	add	r2, r3
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d11e      	bne.n	8009a60 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	3338      	adds	r3, #56	; 0x38
 8009a26:	332a      	adds	r3, #42	; 0x2a
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fd ffcb 	bl	80079c4 <ld_word>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d001      	beq.n	8009a38 <find_volume+0x394>
 8009a34:	230d      	movs	r3, #13
 8009a36:	e0b1      	b.n	8009b9c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	891b      	ldrh	r3, [r3, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <find_volume+0x3a0>
 8009a40:	230d      	movs	r3, #13
 8009a42:	e0ab      	b.n	8009b9c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a46:	3338      	adds	r3, #56	; 0x38
 8009a48:	332c      	adds	r3, #44	; 0x2c
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7fd ffd1 	bl	80079f2 <ld_dword>
 8009a50:	4602      	mov	r2, r0
 8009a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a54:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a5e:	e01f      	b.n	8009aa0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	891b      	ldrh	r3, [r3, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <find_volume+0x3c8>
 8009a68:	230d      	movs	r3, #13
 8009a6a:	e097      	b.n	8009b9c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a72:	441a      	add	r2, r3
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d103      	bne.n	8009a88 <find_volume+0x3e4>
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	e00a      	b.n	8009a9e <find_volume+0x3fa>
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	69da      	ldr	r2, [r3, #28]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	4413      	add	r3, r2
 8009a92:	085a      	lsrs	r2, r3, #1
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	899b      	ldrh	r3, [r3, #12]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aac:	440b      	add	r3, r1
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ab2:	8989      	ldrh	r1, [r1, #12]
 8009ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d201      	bcs.n	8009ac0 <find_volume+0x41c>
 8009abc:	230d      	movs	r3, #13
 8009abe:	e06d      	b.n	8009b9c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac6:	619a      	str	r2, [r3, #24]
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	699a      	ldr	r2, [r3, #24]
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	2280      	movs	r2, #128	; 0x80
 8009ad4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d149      	bne.n	8009b72 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	3338      	adds	r3, #56	; 0x38
 8009ae2:	3330      	adds	r3, #48	; 0x30
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fd ff6d 	bl	80079c4 <ld_word>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d140      	bne.n	8009b72 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af2:	3301      	adds	r3, #1
 8009af4:	4619      	mov	r1, r3
 8009af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009af8:	f7fe fa06 	bl	8007f08 <move_window>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d137      	bne.n	8009b72 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b04:	2200      	movs	r2, #0
 8009b06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	3338      	adds	r3, #56	; 0x38
 8009b0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fd ff57 	bl	80079c4 <ld_word>
 8009b16:	4603      	mov	r3, r0
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d127      	bne.n	8009b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	3338      	adds	r3, #56	; 0x38
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7fd ff63 	bl	80079f2 <ld_dword>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4a1d      	ldr	r2, [pc, #116]	; (8009ba4 <find_volume+0x500>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d11e      	bne.n	8009b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b36:	3338      	adds	r3, #56	; 0x38
 8009b38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fd ff58 	bl	80079f2 <ld_dword>
 8009b42:	4603      	mov	r3, r0
 8009b44:	4a18      	ldr	r2, [pc, #96]	; (8009ba8 <find_volume+0x504>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d113      	bne.n	8009b72 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	3338      	adds	r3, #56	; 0x38
 8009b4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fd ff4d 	bl	80079f2 <ld_dword>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	3338      	adds	r3, #56	; 0x38
 8009b62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fd ff43 	bl	80079f2 <ld_dword>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b70:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b7a:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <find_volume+0x508>)
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	b29a      	uxth	r2, r3
 8009b82:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <find_volume+0x508>)
 8009b84:	801a      	strh	r2, [r3, #0]
 8009b86:	4b09      	ldr	r3, [pc, #36]	; (8009bac <find_volume+0x508>)
 8009b88:	881a      	ldrh	r2, [r3, #0]
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b90:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <find_volume+0x50c>)
 8009b92:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b96:	f7fe f94f 	bl	8007e38 <clear_lock>
#endif
	return FR_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3758      	adds	r7, #88	; 0x58
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	41615252 	.word	0x41615252
 8009ba8:	61417272 	.word	0x61417272
 8009bac:	20000118 	.word	0x20000118
 8009bb0:	2000013c 	.word	0x2000013c

08009bb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009bbe:	2309      	movs	r3, #9
 8009bc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d01c      	beq.n	8009c02 <validate+0x4e>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d018      	beq.n	8009c02 <validate+0x4e>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d013      	beq.n	8009c02 <validate+0x4e>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	889a      	ldrh	r2, [r3, #4]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	88db      	ldrh	r3, [r3, #6]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d10c      	bne.n	8009c02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fe4a 	bl	8007888 <disk_status>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <validate+0x4e>
			res = FR_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <validate+0x5a>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	e000      	b.n	8009c10 <validate+0x5c>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	6013      	str	r3, [r2, #0]
	return res;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
	...

08009c20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009c32:	f107 0310 	add.w	r3, r7, #16
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fc9a 	bl	8009570 <get_ldnumber>
 8009c3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	da01      	bge.n	8009c48 <f_mount+0x28>
 8009c44:	230b      	movs	r3, #11
 8009c46:	e02b      	b.n	8009ca0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c48:	4a17      	ldr	r2, [pc, #92]	; (8009ca8 <f_mount+0x88>)
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c58:	69b8      	ldr	r0, [r7, #24]
 8009c5a:	f7fe f8ed 	bl	8007e38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	490d      	ldr	r1, [pc, #52]	; (8009ca8 <f_mount+0x88>)
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <f_mount+0x66>
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d001      	beq.n	8009c8a <f_mount+0x6a>
 8009c86:	2300      	movs	r3, #0
 8009c88:	e00a      	b.n	8009ca0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c8a:	f107 010c 	add.w	r1, r7, #12
 8009c8e:	f107 0308 	add.w	r3, r7, #8
 8009c92:	2200      	movs	r2, #0
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7ff fd05 	bl	80096a4 <find_volume>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3720      	adds	r7, #32
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	20000114 	.word	0x20000114

08009cac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b09a      	sub	sp, #104	; 0x68
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <f_open+0x18>
 8009cc0:	2309      	movs	r3, #9
 8009cc2:	e1bb      	b.n	800a03c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ccc:	79fa      	ldrb	r2, [r7, #7]
 8009cce:	f107 0114 	add.w	r1, r7, #20
 8009cd2:	f107 0308 	add.w	r3, r7, #8
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fce4 	bl	80096a4 <find_volume>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009ce2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 819f 	bne.w	800a02a <f_open+0x37e>
		dj.obj.fs = fs;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	f107 0318 	add.w	r3, r7, #24
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff fbc3 	bl	8009484 <follow_path>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d11a      	bne.n	8009d42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009d10:	b25b      	sxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da03      	bge.n	8009d1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009d16:	2306      	movs	r3, #6
 8009d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d1c:	e011      	b.n	8009d42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	f107 0318 	add.w	r3, r7, #24
 8009d34:	4611      	mov	r1, r2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fd ff3c 	bl	8007bb4 <chk_lock>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	f003 031c 	and.w	r3, r3, #28
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d07f      	beq.n	8009e4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009d4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d017      	beq.n	8009d84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d10e      	bne.n	8009d7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d5c:	f7fd ff84 	bl	8007c68 <enq_lock>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <f_open+0xc8>
 8009d66:	f107 0318 	add.w	r3, r7, #24
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff f8da 	bl	8008f24 <dir_register>
 8009d70:	4603      	mov	r3, r0
 8009d72:	e000      	b.n	8009d76 <f_open+0xca>
 8009d74:	2312      	movs	r3, #18
 8009d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	f043 0308 	orr.w	r3, r3, #8
 8009d80:	71fb      	strb	r3, [r7, #7]
 8009d82:	e010      	b.n	8009da6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d84:	7fbb      	ldrb	r3, [r7, #30]
 8009d86:	f003 0311 	and.w	r3, r3, #17
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <f_open+0xea>
					res = FR_DENIED;
 8009d8e:	2307      	movs	r3, #7
 8009d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d94:	e007      	b.n	8009da6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d96:	79fb      	ldrb	r3, [r7, #7]
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <f_open+0xfa>
 8009da0:	2308      	movs	r3, #8
 8009da2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009da6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d168      	bne.n	8009e80 <f_open+0x1d4>
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	f003 0308 	and.w	r3, r3, #8
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d063      	beq.n	8009e80 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009db8:	f7fd fd0a 	bl	80077d0 <get_fattime>
 8009dbc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	330e      	adds	r3, #14
 8009dc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fd fe50 	bl	8007a6a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dcc:	3316      	adds	r3, #22
 8009dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fd fe4a 	bl	8007a6a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd8:	330b      	adds	r3, #11
 8009dda:	2220      	movs	r2, #32
 8009ddc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fe15 	bl	8008a14 <ld_clust>
 8009dea:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009df0:	2200      	movs	r2, #0
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fe fe2d 	bl	8008a52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dfa:	331c      	adds	r3, #28
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd fe33 	bl	8007a6a <st_dword>
					fs->wflag = 1;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2201      	movs	r2, #1
 8009e08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d037      	beq.n	8009e80 <f_open+0x1d4>
						dw = fs->winsect;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009e16:	f107 0318 	add.w	r3, r7, #24
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fe fb1e 	bl	8008460 <remove_chain>
 8009e24:	4603      	mov	r3, r0
 8009e26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d126      	bne.n	8009e80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe f866 	bl	8007f08 <move_window>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e46:	3a01      	subs	r2, #1
 8009e48:	615a      	str	r2, [r3, #20]
 8009e4a:	e019      	b.n	8009e80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d115      	bne.n	8009e80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e54:	7fbb      	ldrb	r3, [r7, #30]
 8009e56:	f003 0310 	and.w	r3, r3, #16
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009e5e:	2304      	movs	r3, #4
 8009e60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009e64:	e00c      	b.n	8009e80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d007      	beq.n	8009e80 <f_open+0x1d4>
 8009e70:	7fbb      	ldrb	r3, [r7, #30]
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <f_open+0x1d4>
						res = FR_DENIED;
 8009e7a:	2307      	movs	r3, #7
 8009e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d128      	bne.n	8009eda <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e88:	79fb      	ldrb	r3, [r7, #7]
 8009e8a:	f003 0308 	and.w	r3, r3, #8
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	f023 0301 	bic.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf14      	ite	ne
 8009eb2:	2301      	movne	r3, #1
 8009eb4:	2300      	moveq	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f107 0318 	add.w	r3, r7, #24
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fd fef1 	bl	8007ca8 <inc_lock>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <f_open+0x22e>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009eda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f040 80a3 	bne.w	800a02a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fd92 	bl	8008a14 <ld_clust>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	331c      	adds	r3, #28
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fd fd79 	bl	80079f2 <ld_dword>
 8009f00:	4602      	mov	r2, r0
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	88da      	ldrh	r2, [r3, #6]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	79fa      	ldrb	r2, [r7, #7]
 8009f1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3330      	adds	r3, #48	; 0x30
 8009f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fd fddf 	bl	8007b00 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f42:	79fb      	ldrb	r3, [r7, #7]
 8009f44:	f003 0320 	and.w	r3, r3, #32
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d06e      	beq.n	800a02a <f_open+0x37e>
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d06a      	beq.n	800a02a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68da      	ldr	r2, [r3, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	895b      	ldrh	r3, [r3, #10]
 8009f60:	461a      	mov	r2, r3
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	899b      	ldrh	r3, [r3, #12]
 8009f66:	fb03 f302 	mul.w	r3, r3, r2
 8009f6a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f78:	e016      	b.n	8009fa8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe f87e 	bl	8008080 <get_fat>
 8009f84:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d802      	bhi.n	8009f92 <f_open+0x2e6>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f98:	d102      	bne.n	8009fa0 <f_open+0x2f4>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d103      	bne.n	8009fb8 <f_open+0x30c>
 8009fb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d8e0      	bhi.n	8009f7a <f_open+0x2ce>
				}
				fp->clust = clst;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009fbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d131      	bne.n	800a02a <f_open+0x37e>
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	899b      	ldrh	r3, [r3, #12]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fd2:	fb02 f201 	mul.w	r2, r2, r1
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d026      	beq.n	800a02a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe f82f 	bl	8008044 <clust2sect>
 8009fe6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <f_open+0x34a>
						res = FR_INT_ERR;
 8009fee:	2302      	movs	r3, #2
 8009ff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ff4:	e019      	b.n	800a02a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	899b      	ldrh	r3, [r3, #12]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffe:	fbb3 f2f2 	udiv	r2, r3, r2
 800a002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a004:	441a      	add	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	7858      	ldrb	r0, [r3, #1]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1a      	ldr	r2, [r3, #32]
 800a018:	2301      	movs	r3, #1
 800a01a:	f7fd fc75 	bl	8007908 <disk_read>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <f_open+0x37e>
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a02a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <f_open+0x38c>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3768      	adds	r7, #104	; 0x68
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b08c      	sub	sp, #48	; 0x30
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 800a050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f107 0210 	add.w	r2, r7, #16
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fda5 	bl	8009bb4 <validate>
 800a06a:	4603      	mov	r3, r0
 800a06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a070:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <f_write+0x44>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	7d5b      	ldrb	r3, [r3, #21]
 800a07c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <f_write+0x4a>
 800a088:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a08c:	e16a      	b.n	800a364 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	7d1b      	ldrb	r3, [r3, #20]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d101      	bne.n	800a09e <f_write+0x5a>
 800a09a:	2307      	movs	r3, #7
 800a09c:	e162      	b.n	800a364 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	699a      	ldr	r2, [r3, #24]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	f080 814c 	bcs.w	800a348 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	43db      	mvns	r3, r3
 800a0b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a0b8:	e146      	b.n	800a348 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	8992      	ldrh	r2, [r2, #12]
 800a0c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0c6:	fb02 f201 	mul.w	r2, r2, r1
 800a0ca:	1a9b      	subs	r3, r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 80f1 	bne.w	800a2b4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	8992      	ldrh	r2, [r2, #12]
 800a0da:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	8952      	ldrh	r2, [r2, #10]
 800a0e2:	3a01      	subs	r2, #1
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d143      	bne.n	800a176 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10c      	bne.n	800a110 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d11a      	bne.n	800a138 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2100      	movs	r1, #0
 800a106:	4618      	mov	r0, r3
 800a108:	f7fe fa0f 	bl	800852a <create_chain>
 800a10c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a10e:	e013      	b.n	800a138 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d007      	beq.n	800a128 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	4619      	mov	r1, r3
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7fe fa9b 	bl	800865a <clmt_clust>
 800a124:	62b8      	str	r0, [r7, #40]	; 0x28
 800a126:	e007      	b.n	800a138 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	4619      	mov	r1, r3
 800a130:	4610      	mov	r0, r2
 800a132:	f7fe f9fa 	bl	800852a <create_chain>
 800a136:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 8109 	beq.w	800a352 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	2b01      	cmp	r3, #1
 800a144:	d104      	bne.n	800a150 <f_write+0x10c>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2202      	movs	r2, #2
 800a14a:	755a      	strb	r2, [r3, #21]
 800a14c:	2302      	movs	r3, #2
 800a14e:	e109      	b.n	800a364 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a156:	d104      	bne.n	800a162 <f_write+0x11e>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	755a      	strb	r2, [r3, #21]
 800a15e:	2301      	movs	r3, #1
 800a160:	e100      	b.n	800a364 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a166:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <f_write+0x132>
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a174:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	7d1b      	ldrb	r3, [r3, #20]
 800a17a:	b25b      	sxtb	r3, r3
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da18      	bge.n	800a1b2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	7858      	ldrb	r0, [r3, #1]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1a      	ldr	r2, [r3, #32]
 800a18e:	2301      	movs	r3, #1
 800a190:	f7fd fbda 	bl	8007948 <disk_write>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d004      	beq.n	800a1a4 <f_write+0x160>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2201      	movs	r2, #1
 800a19e:	755a      	strb	r2, [r3, #21]
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e0df      	b.n	800a364 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	7d1b      	ldrb	r3, [r3, #20]
 800a1a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7fd ff42 	bl	8008044 <clust2sect>
 800a1c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d104      	bne.n	800a1d2 <f_write+0x18e>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	755a      	strb	r2, [r3, #21]
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e0c8      	b.n	800a364 <f_write+0x320>
			sect += csect;
 800a1d2:	697a      	ldr	r2, [r7, #20]
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	899b      	ldrh	r3, [r3, #12]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d043      	beq.n	800a276 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a1ee:	69ba      	ldr	r2, [r7, #24]
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	693a      	ldr	r2, [r7, #16]
 800a1f6:	8952      	ldrh	r2, [r2, #10]
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d905      	bls.n	800a208 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	895b      	ldrh	r3, [r3, #10]
 800a200:	461a      	mov	r2, r3
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	7858      	ldrb	r0, [r3, #1]
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	69f9      	ldr	r1, [r7, #28]
 800a212:	f7fd fb99 	bl	8007948 <disk_write>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d004      	beq.n	800a226 <f_write+0x1e2>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	755a      	strb	r2, [r3, #21]
 800a222:	2301      	movs	r3, #1
 800a224:	e09e      	b.n	800a364 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a1a      	ldr	r2, [r3, #32]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	1ad3      	subs	r3, r2, r3
 800a22e:	6a3a      	ldr	r2, [r7, #32]
 800a230:	429a      	cmp	r2, r3
 800a232:	d918      	bls.n	800a266 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a1a      	ldr	r2, [r3, #32]
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	8992      	ldrh	r2, [r2, #12]
 800a246:	fb02 f303 	mul.w	r3, r2, r3
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	18d1      	adds	r1, r2, r3
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	899b      	ldrh	r3, [r3, #12]
 800a252:	461a      	mov	r2, r3
 800a254:	f7fd fc34 	bl	8007ac0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	7d1b      	ldrb	r3, [r3, #20]
 800a25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a260:	b2da      	uxtb	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
 800a272:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a274:	e04b      	b.n	800a30e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d016      	beq.n	800a2ae <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	699a      	ldr	r2, [r3, #24]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a288:	429a      	cmp	r2, r3
 800a28a:	d210      	bcs.n	800a2ae <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	7858      	ldrb	r0, [r3, #1]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a296:	2301      	movs	r3, #1
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	f7fd fb35 	bl	8007908 <disk_read>
 800a29e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	755a      	strb	r2, [r3, #21]
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e05a      	b.n	800a364 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	899b      	ldrh	r3, [r3, #12]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	8992      	ldrh	r2, [r2, #12]
 800a2c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2c6:	fb02 f201 	mul.w	r2, r2, r1
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	1ac3      	subs	r3, r0, r3
 800a2ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d901      	bls.n	800a2dc <f_write+0x298>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	8992      	ldrh	r2, [r2, #12]
 800a2ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2ee:	fb02 f200 	mul.w	r2, r2, r0
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f8:	69f9      	ldr	r1, [r7, #28]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd fbe0 	bl	8007ac0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	7d1b      	ldrb	r3, [r3, #20]
 800a304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	4413      	add	r3, r2
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	699a      	ldr	r2, [r3, #24]
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	441a      	add	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	619a      	str	r2, [r3, #24]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	bf38      	it	cc
 800a32e:	461a      	movcc	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	441a      	add	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f47f aeb5 	bne.w	800a0ba <f_write+0x76>
 800a350:	e000      	b.n	800a354 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a352:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	7d1b      	ldrb	r3, [r3, #20]
 800a358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3730      	adds	r7, #48	; 0x30
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f107 0208 	add.w	r2, r7, #8
 800a37a:	4611      	mov	r1, r2
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7ff fc19 	bl	8009bb4 <validate>
 800a382:	4603      	mov	r3, r0
 800a384:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a386:	7dfb      	ldrb	r3, [r7, #23]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d168      	bne.n	800a45e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	7d1b      	ldrb	r3, [r3, #20]
 800a390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a394:	2b00      	cmp	r3, #0
 800a396:	d062      	beq.n	800a45e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	7d1b      	ldrb	r3, [r3, #20]
 800a39c:	b25b      	sxtb	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	da15      	bge.n	800a3ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	7858      	ldrb	r0, [r3, #1]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a1a      	ldr	r2, [r3, #32]
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f7fd fac9 	bl	8007948 <disk_write>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <f_sync+0x54>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e04f      	b.n	800a460 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7d1b      	ldrb	r3, [r3, #20]
 800a3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3c8:	b2da      	uxtb	r2, r3
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a3ce:	f7fd f9ff 	bl	80077d0 <get_fattime>
 800a3d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	4619      	mov	r1, r3
 800a3dc:	4610      	mov	r0, r2
 800a3de:	f7fd fd93 	bl	8007f08 <move_window>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d138      	bne.n	800a45e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	330b      	adds	r3, #11
 800a3f6:	781a      	ldrb	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	330b      	adds	r3, #11
 800a3fc:	f042 0220 	orr.w	r2, r2, #32
 800a400:	b2d2      	uxtb	r2, r2
 800a402:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	461a      	mov	r2, r3
 800a40e:	68f9      	ldr	r1, [r7, #12]
 800a410:	f7fe fb1f 	bl	8008a52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f103 021c 	add.w	r2, r3, #28
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	4619      	mov	r1, r3
 800a420:	4610      	mov	r0, r2
 800a422:	f7fd fb22 	bl	8007a6a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3316      	adds	r3, #22
 800a42a:	6939      	ldr	r1, [r7, #16]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7fd fb1c 	bl	8007a6a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	3312      	adds	r3, #18
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fd fafc 	bl	8007a36 <st_word>
					fs->wflag = 1;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2201      	movs	r2, #1
 800a442:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4618      	mov	r0, r3
 800a448:	f7fd fd8c 	bl	8007f64 <sync_fs>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	7d1b      	ldrb	r3, [r3, #20]
 800a454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ff7b 	bl	800a36c <f_sync>
 800a476:	4603      	mov	r3, r0
 800a478:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d118      	bne.n	800a4b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f107 0208 	add.w	r2, r7, #8
 800a486:	4611      	mov	r1, r2
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fb93 	bl	8009bb4 <validate>
 800a48e:	4603      	mov	r3, r0
 800a490:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10c      	bne.n	800a4b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fc91 	bl	8007dc4 <dec_lock>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b090      	sub	sp, #64	; 0x40
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f107 0208 	add.w	r2, r7, #8
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff fb70 	bl	8009bb4 <validate>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a4da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d103      	bne.n	800a4ea <f_lseek+0x2e>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	7d5b      	ldrb	r3, [r3, #21]
 800a4e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a4ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <f_lseek+0x3c>
 800a4f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4f6:	e201      	b.n	800a8fc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 80d9 	beq.w	800a6b4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a508:	d15a      	bne.n	800a5c0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	1d1a      	adds	r2, r3, #4
 800a514:	627a      	str	r2, [r7, #36]	; 0x24
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	617b      	str	r3, [r7, #20]
 800a51a:	2302      	movs	r3, #2
 800a51c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d03a      	beq.n	800a5a0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	2300      	movs	r3, #0
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a534:	3302      	adds	r3, #2
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	3301      	adds	r3, #1
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a546:	4618      	mov	r0, r3
 800a548:	f7fd fd9a 	bl	8008080 <get_fat>
 800a54c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	2b01      	cmp	r3, #1
 800a552:	d804      	bhi.n	800a55e <f_lseek+0xa2>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	755a      	strb	r2, [r3, #21]
 800a55a:	2302      	movs	r3, #2
 800a55c:	e1ce      	b.n	800a8fc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d104      	bne.n	800a570 <f_lseek+0xb4>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	755a      	strb	r2, [r3, #21]
 800a56c:	2301      	movs	r3, #1
 800a56e:	e1c5      	b.n	800a8fc <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
 800a574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a576:	429a      	cmp	r2, r3
 800a578:	d0de      	beq.n	800a538 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d809      	bhi.n	800a596 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a584:	1d1a      	adds	r2, r3, #4
 800a586:	627a      	str	r2, [r7, #36]	; 0x24
 800a588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a58a:	601a      	str	r2, [r3, #0]
 800a58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58e:	1d1a      	adds	r2, r3, #4
 800a590:	627a      	str	r2, [r7, #36]	; 0x24
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d3c4      	bcc.n	800a52a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5a6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d803      	bhi.n	800a5b8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	e19f      	b.n	800a8f8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a5b8:	2311      	movs	r3, #17
 800a5ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a5be:	e19b      	b.n	800a8f8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	683a      	ldr	r2, [r7, #0]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d902      	bls.n	800a5d0 <f_lseek+0x114>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 818d 	beq.w	800a8f8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7fe f838 	bl	800865a <clmt_clust>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	4610      	mov	r0, r2
 800a5fa:	f7fd fd23 	bl	8008044 <clust2sect>
 800a5fe:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d104      	bne.n	800a610 <f_lseek+0x154>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2202      	movs	r2, #2
 800a60a:	755a      	strb	r2, [r3, #21]
 800a60c:	2302      	movs	r3, #2
 800a60e:	e175      	b.n	800a8fc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	3b01      	subs	r3, #1
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	8992      	ldrh	r2, [r2, #12]
 800a618:	fbb3 f3f2 	udiv	r3, r3, r2
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	8952      	ldrh	r2, [r2, #10]
 800a620:	3a01      	subs	r2, #1
 800a622:	4013      	ands	r3, r2
 800a624:	69ba      	ldr	r2, [r7, #24]
 800a626:	4413      	add	r3, r2
 800a628:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	8992      	ldrh	r2, [r2, #12]
 800a632:	fbb3 f1f2 	udiv	r1, r3, r2
 800a636:	fb02 f201 	mul.w	r2, r2, r1
 800a63a:	1a9b      	subs	r3, r3, r2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f000 815b 	beq.w	800a8f8 <f_lseek+0x43c>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	429a      	cmp	r2, r3
 800a64a:	f000 8155 	beq.w	800a8f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7d1b      	ldrb	r3, [r3, #20]
 800a652:	b25b      	sxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	da18      	bge.n	800a68a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	7858      	ldrb	r0, [r3, #1]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1a      	ldr	r2, [r3, #32]
 800a666:	2301      	movs	r3, #1
 800a668:	f7fd f96e 	bl	8007948 <disk_write>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <f_lseek+0x1c0>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2201      	movs	r2, #1
 800a676:	755a      	strb	r2, [r3, #21]
 800a678:	2301      	movs	r3, #1
 800a67a:	e13f      	b.n	800a8fc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	7d1b      	ldrb	r3, [r3, #20]
 800a680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a684:	b2da      	uxtb	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	7858      	ldrb	r0, [r3, #1]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a694:	2301      	movs	r3, #1
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	f7fd f936 	bl	8007908 <disk_read>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d004      	beq.n	800a6ac <f_lseek+0x1f0>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	755a      	strb	r2, [r3, #21]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e127      	b.n	800a8fc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	621a      	str	r2, [r3, #32]
 800a6b2:	e121      	b.n	800a8f8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d908      	bls.n	800a6d0 <f_lseek+0x214>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7d1b      	ldrb	r3, [r3, #20]
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6de:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 80b5 	beq.w	800a852 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	895b      	ldrh	r3, [r3, #10]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	899b      	ldrh	r3, [r3, #12]
 800a6f2:	fb03 f302 	mul.w	r3, r3, r2
 800a6f6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01b      	beq.n	800a736 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	1e5a      	subs	r2, r3, #1
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	fbb2 f2f3 	udiv	r2, r2, r3
 800a708:	6a3b      	ldr	r3, [r7, #32]
 800a70a:	1e59      	subs	r1, r3, #1
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a712:	429a      	cmp	r2, r3
 800a714:	d30f      	bcc.n	800a736 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	1e5a      	subs	r2, r3, #1
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	425b      	negs	r3, r3
 800a71e:	401a      	ands	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	63bb      	str	r3, [r7, #56]	; 0x38
 800a734:	e022      	b.n	800a77c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d119      	bne.n	800a776 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2100      	movs	r1, #0
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd feef 	bl	800852a <create_chain>
 800a74c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a750:	2b01      	cmp	r3, #1
 800a752:	d104      	bne.n	800a75e <f_lseek+0x2a2>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	755a      	strb	r2, [r3, #21]
 800a75a:	2302      	movs	r3, #2
 800a75c:	e0ce      	b.n	800a8fc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a764:	d104      	bne.n	800a770 <f_lseek+0x2b4>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2201      	movs	r2, #1
 800a76a:	755a      	strb	r2, [r3, #21]
 800a76c:	2301      	movs	r3, #1
 800a76e:	e0c5      	b.n	800a8fc <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a774:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a77a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d067      	beq.n	800a852 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a782:	e03a      	b.n	800a7fa <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	699a      	ldr	r2, [r3, #24]
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	441a      	add	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7d1b      	ldrb	r3, [r3, #20]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fd febe 	bl	800852a <create_chain>
 800a7ae:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d108      	bne.n	800a7c8 <f_lseek+0x30c>
							ofs = 0; break;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	603b      	str	r3, [r7, #0]
 800a7ba:	e022      	b.n	800a802 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fd fc5d 	bl	8008080 <get_fat>
 800a7c6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ce:	d104      	bne.n	800a7da <f_lseek+0x31e>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	755a      	strb	r2, [r3, #21]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e090      	b.n	800a8fc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d904      	bls.n	800a7ea <f_lseek+0x32e>
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	69db      	ldr	r3, [r3, #28]
 800a7e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d304      	bcc.n	800a7f4 <f_lseek+0x338>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2202      	movs	r2, #2
 800a7ee:	755a      	strb	r2, [r3, #21]
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e083      	b.n	800a8fc <f_lseek+0x440>
					fp->clust = clst;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7f8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d8c0      	bhi.n	800a784 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	441a      	add	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	899b      	ldrh	r3, [r3, #12]
 800a812:	461a      	mov	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	fbb3 f1f2 	udiv	r1, r3, r2
 800a81a:	fb02 f201 	mul.w	r2, r2, r1
 800a81e:	1a9b      	subs	r3, r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d016      	beq.n	800a852 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fd fc0b 	bl	8008044 <clust2sect>
 800a82e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a832:	2b00      	cmp	r3, #0
 800a834:	d104      	bne.n	800a840 <f_lseek+0x384>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2202      	movs	r2, #2
 800a83a:	755a      	strb	r2, [r3, #21]
 800a83c:	2302      	movs	r3, #2
 800a83e:	e05d      	b.n	800a8fc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	461a      	mov	r2, r3
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	fbb3 f3f2 	udiv	r3, r3, r2
 800a84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a84e:	4413      	add	r3, r2
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d90a      	bls.n	800a874 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	7d1b      	ldrb	r3, [r3, #20]
 800a86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	8992      	ldrh	r2, [r2, #12]
 800a87c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a880:	fb02 f201 	mul.w	r2, r2, r1
 800a884:	1a9b      	subs	r3, r3, r2
 800a886:	2b00      	cmp	r3, #0
 800a888:	d036      	beq.n	800a8f8 <f_lseek+0x43c>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a890:	429a      	cmp	r2, r3
 800a892:	d031      	beq.n	800a8f8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	7d1b      	ldrb	r3, [r3, #20]
 800a898:	b25b      	sxtb	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da18      	bge.n	800a8d0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	7858      	ldrb	r0, [r3, #1]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1a      	ldr	r2, [r3, #32]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	f7fd f84b 	bl	8007948 <disk_write>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <f_lseek+0x406>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	755a      	strb	r2, [r3, #21]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e01c      	b.n	800a8fc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	7d1b      	ldrb	r3, [r3, #20]
 800a8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	7858      	ldrb	r0, [r3, #1]
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8da:	2301      	movs	r3, #1
 800a8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8de:	f7fd f813 	bl	8007908 <disk_read>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <f_lseek+0x436>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	755a      	strb	r2, [r3, #21]
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e004      	b.n	800a8fc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a8f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3740      	adds	r7, #64	; 0x40
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	2b0a      	cmp	r3, #10
 800a914:	d103      	bne.n	800a91e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a916:	210d      	movs	r1, #13
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff fff3 	bl	800a904 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	db25      	blt.n	800a976 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	1c5a      	adds	r2, r3, #1
 800a92e:	60fa      	str	r2, [r7, #12]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	4413      	add	r3, r2
 800a934:	78fa      	ldrb	r2, [r7, #3]
 800a936:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b3c      	cmp	r3, #60	; 0x3c
 800a93c:	dd12      	ble.n	800a964 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6818      	ldr	r0, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f103 010c 	add.w	r1, r3, #12
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	f7ff fb79 	bl	800a044 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	429a      	cmp	r2, r3
 800a958:	d101      	bne.n	800a95e <putc_bfd+0x5a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	e001      	b.n	800a962 <putc_bfd+0x5e>
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	609a      	str	r2, [r3, #8]
 800a974:	e000      	b.n	800a978 <putc_bfd+0x74>
	if (i < 0) return;
 800a976:	bf00      	nop
}
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b084      	sub	sp, #16
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	db16      	blt.n	800a9bc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f103 010c 	add.w	r1, r3, #12
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	461a      	mov	r2, r3
 800a99e:	f107 030c 	add.w	r3, r7, #12
 800a9a2:	f7ff fb4f 	bl	800a044 <f_write>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d107      	bne.n	800a9bc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d102      	bne.n	800a9bc <putc_flush+0x3e>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	e001      	b.n	800a9c0 <putc_flush+0x42>
	return EOF;
 800a9bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	605a      	str	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	609a      	str	r2, [r3, #8]
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bc80      	pop	{r7}
 800a9ee:	4770      	bx	lr

0800a9f0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a9f0:	b40e      	push	{r1, r2, r3}
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b0a7      	sub	sp, #156	; 0x9c
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a9fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff ffe1 	bl	800a9c8 <putc_init>

	va_start(arp, fmt);
 800aa06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800aa0a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800aa0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800aa1c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 81f4 	beq.w	800ae0e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800aa26:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa2a:	2b25      	cmp	r3, #37	; 0x25
 800aa2c:	d008      	beq.n	800aa40 <f_printf+0x50>
			putc_bfd(&pb, c);
 800aa2e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800aa32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aa36:	4611      	mov	r1, r2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff ff63 	bl	800a904 <putc_bfd>
			continue;
 800aa3e:	e1e5      	b.n	800ae0c <f_printf+0x41c>
		}
		w = f = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa46:	2300      	movs	r3, #0
 800aa48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800aa4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800aa5c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa60:	2b30      	cmp	r3, #48	; 0x30
 800aa62:	d10b      	bne.n	800aa7c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800aa64:	2301      	movs	r3, #1
 800aa66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800aa7a:	e024      	b.n	800aac6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800aa7c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aa80:	2b2d      	cmp	r3, #45	; 0x2d
 800aa82:	d120      	bne.n	800aac6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800aa84:	2302      	movs	r3, #2
 800aa86:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aa8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800aa9a:	e014      	b.n	800aac6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800aa9c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aaae:	4413      	add	r3, r2
 800aab0:	3b30      	subs	r3, #48	; 0x30
 800aab2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800aab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800aac6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aaca:	2b2f      	cmp	r3, #47	; 0x2f
 800aacc:	d903      	bls.n	800aad6 <f_printf+0xe6>
 800aace:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aad2:	2b39      	cmp	r3, #57	; 0x39
 800aad4:	d9e2      	bls.n	800aa9c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800aad6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aada:	2b6c      	cmp	r3, #108	; 0x6c
 800aadc:	d003      	beq.n	800aae6 <f_printf+0xf6>
 800aade:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aae2:	2b4c      	cmp	r3, #76	; 0x4c
 800aae4:	d10d      	bne.n	800ab02 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800aae6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aaea:	f043 0304 	orr.w	r3, r3, #4
 800aaee:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800aaf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800ab02:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 8183 	beq.w	800ae12 <f_printf+0x422>
		d = c;
 800ab0c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ab10:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ab14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab18:	2b60      	cmp	r3, #96	; 0x60
 800ab1a:	d908      	bls.n	800ab2e <f_printf+0x13e>
 800ab1c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab20:	2b7a      	cmp	r3, #122	; 0x7a
 800ab22:	d804      	bhi.n	800ab2e <f_printf+0x13e>
 800ab24:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab28:	3b20      	subs	r3, #32
 800ab2a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ab2e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ab32:	3b42      	subs	r3, #66	; 0x42
 800ab34:	2b16      	cmp	r3, #22
 800ab36:	f200 8098 	bhi.w	800ac6a <f_printf+0x27a>
 800ab3a:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <f_printf+0x150>)
 800ab3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab40:	0800ac4b 	.word	0x0800ac4b
 800ab44:	0800ac33 	.word	0x0800ac33
 800ab48:	0800ac5b 	.word	0x0800ac5b
 800ab4c:	0800ac6b 	.word	0x0800ac6b
 800ab50:	0800ac6b 	.word	0x0800ac6b
 800ab54:	0800ac6b 	.word	0x0800ac6b
 800ab58:	0800ac6b 	.word	0x0800ac6b
 800ab5c:	0800ac6b 	.word	0x0800ac6b
 800ab60:	0800ac6b 	.word	0x0800ac6b
 800ab64:	0800ac6b 	.word	0x0800ac6b
 800ab68:	0800ac6b 	.word	0x0800ac6b
 800ab6c:	0800ac6b 	.word	0x0800ac6b
 800ab70:	0800ac6b 	.word	0x0800ac6b
 800ab74:	0800ac53 	.word	0x0800ac53
 800ab78:	0800ac6b 	.word	0x0800ac6b
 800ab7c:	0800ac6b 	.word	0x0800ac6b
 800ab80:	0800ac6b 	.word	0x0800ac6b
 800ab84:	0800ab9d 	.word	0x0800ab9d
 800ab88:	0800ac6b 	.word	0x0800ac6b
 800ab8c:	0800ac5b 	.word	0x0800ac5b
 800ab90:	0800ac6b 	.word	0x0800ac6b
 800ab94:	0800ac6b 	.word	0x0800ac6b
 800ab98:	0800ac63 	.word	0x0800ac63
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ab9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab9e:	1d1a      	adds	r2, r3, #4
 800aba0:	67ba      	str	r2, [r7, #120]	; 0x78
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800aba6:	2300      	movs	r3, #0
 800aba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abac:	e004      	b.n	800abb8 <f_printf+0x1c8>
 800abae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abb2:	3301      	adds	r3, #1
 800abb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800abb8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800abba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abbe:	4413      	add	r3, r2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1f3      	bne.n	800abae <f_printf+0x1be>
			if (!(f & 2)) {
 800abc6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11a      	bne.n	800ac08 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800abd2:	e005      	b.n	800abe0 <f_printf+0x1f0>
 800abd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abd8:	2120      	movs	r1, #32
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fe92 	bl	800a904 <putc_bfd>
 800abe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800abea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800abee:	429a      	cmp	r2, r3
 800abf0:	d8f0      	bhi.n	800abd4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800abf2:	e009      	b.n	800ac08 <f_printf+0x218>
 800abf4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abf6:	1c5a      	adds	r2, r3, #1
 800abf8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800abfa:	781a      	ldrb	r2, [r3, #0]
 800abfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac00:	4611      	mov	r1, r2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fe7e 	bl	800a904 <putc_bfd>
 800ac08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1f1      	bne.n	800abf4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ac10:	e005      	b.n	800ac1e <f_printf+0x22e>
 800ac12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac16:	2120      	movs	r1, #32
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fe73 	bl	800a904 <putc_bfd>
 800ac1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac28:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d8f0      	bhi.n	800ac12 <f_printf+0x222>
			continue;
 800ac30:	e0ec      	b.n	800ae0c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ac32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac34:	1d1a      	adds	r2, r3, #4
 800ac36:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7ff fe5e 	bl	800a904 <putc_bfd>
 800ac48:	e0e0      	b.n	800ae0c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac50:	e014      	b.n	800ac7c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ac52:	2308      	movs	r3, #8
 800ac54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac58:	e010      	b.n	800ac7c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ac5a:	230a      	movs	r3, #10
 800ac5c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac60:	e00c      	b.n	800ac7c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ac62:	2310      	movs	r3, #16
 800ac64:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ac68:	e008      	b.n	800ac7c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ac6a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ac6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac72:	4611      	mov	r1, r2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fe45 	bl	800a904 <putc_bfd>
 800ac7a:	e0c7      	b.n	800ae0c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ac7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d004      	beq.n	800ac92 <f_printf+0x2a2>
 800ac88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac8a:	1d1a      	adds	r2, r3, #4
 800ac8c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	e00c      	b.n	800acac <f_printf+0x2bc>
 800ac92:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ac96:	2b44      	cmp	r3, #68	; 0x44
 800ac98:	d104      	bne.n	800aca4 <f_printf+0x2b4>
 800ac9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac9c:	1d1a      	adds	r2, r3, #4
 800ac9e:	67ba      	str	r2, [r7, #120]	; 0x78
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	e003      	b.n	800acac <f_printf+0x2bc>
 800aca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aca6:	1d1a      	adds	r2, r3, #4
 800aca8:	67ba      	str	r2, [r7, #120]	; 0x78
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800acb0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800acb4:	2b44      	cmp	r3, #68	; 0x44
 800acb6:	d10e      	bne.n	800acd6 <f_printf+0x2e6>
 800acb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	da0a      	bge.n	800acd6 <f_printf+0x2e6>
			v = 0 - v;
 800acc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acc4:	425b      	negs	r3, r3
 800acc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800acca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acce:	f043 0308 	orr.w	r3, r3, #8
 800acd2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800acdc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ace0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ace4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ace8:	fb02 f201 	mul.w	r2, r2, r1
 800acec:	1a9b      	subs	r3, r3, r2
 800acee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800acf2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800acf6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800acfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800acfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ad02:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	d90b      	bls.n	800ad22 <f_printf+0x332>
 800ad0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ad0e:	2b78      	cmp	r3, #120	; 0x78
 800ad10:	d101      	bne.n	800ad16 <f_printf+0x326>
 800ad12:	2227      	movs	r2, #39	; 0x27
 800ad14:	e000      	b.n	800ad18 <f_printf+0x328>
 800ad16:	2207      	movs	r2, #7
 800ad18:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad1c:	4413      	add	r3, r2
 800ad1e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800ad22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ad2c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad30:	3230      	adds	r2, #48	; 0x30
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800ad38:	440b      	add	r3, r1
 800ad3a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800ad3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d003      	beq.n	800ad4e <f_printf+0x35e>
 800ad46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad4a:	2b1f      	cmp	r3, #31
 800ad4c:	d9c6      	bls.n	800acdc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ad4e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <f_printf+0x380>
 800ad5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ad64:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800ad68:	4413      	add	r3, r2
 800ad6a:	222d      	movs	r2, #45	; 0x2d
 800ad6c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ad70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <f_printf+0x398>
 800ad84:	2330      	movs	r3, #48	; 0x30
 800ad86:	e000      	b.n	800ad8a <f_printf+0x39a>
 800ad88:	2320      	movs	r3, #32
 800ad8a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800ad8e:	e007      	b.n	800ada0 <f_printf+0x3b0>
 800ad90:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800ad94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad98:	4611      	mov	r1, r2
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff fdb2 	bl	800a904 <putc_bfd>
 800ada0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ada4:	f003 0302 	and.w	r3, r3, #2
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d108      	bne.n	800adbe <f_printf+0x3ce>
 800adac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adb0:	1c5a      	adds	r2, r3, #1
 800adb2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800adba:	429a      	cmp	r2, r3
 800adbc:	d8e8      	bhi.n	800ad90 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800adbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800adc2:	3b01      	subs	r3, #1
 800adc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800adc8:	f107 020c 	add.w	r2, r7, #12
 800adcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800add0:	4413      	add	r3, r2
 800add2:	781a      	ldrb	r2, [r3, #0]
 800add4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fd92 	bl	800a904 <putc_bfd>
		} while (i);
 800ade0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1ea      	bne.n	800adbe <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800ade8:	e007      	b.n	800adfa <f_printf+0x40a>
 800adea:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800adee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff fd85 	bl	800a904 <putc_bfd>
 800adfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d8ee      	bhi.n	800adea <f_printf+0x3fa>
		c = *fmt++;
 800ae0c:	e5fe      	b.n	800aa0c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800ae0e:	bf00      	nop
 800ae10:	e000      	b.n	800ae14 <f_printf+0x424>
		if (!c) break;
 800ae12:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800ae14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fdb0 	bl	800a97e <putc_flush>
 800ae1e:	4603      	mov	r3, r0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	379c      	adds	r7, #156	; 0x9c
 800ae24:	46bd      	mov	sp, r7
 800ae26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae2a:	b003      	add	sp, #12
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ae46:	4b1e      	ldr	r3, [pc, #120]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae48:	7a5b      	ldrb	r3, [r3, #9]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d131      	bne.n	800aeb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae50:	4b1b      	ldr	r3, [pc, #108]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae52:	7a5b      	ldrb	r3, [r3, #9]
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	461a      	mov	r2, r3
 800ae58:	4b19      	ldr	r3, [pc, #100]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae5a:	2100      	movs	r1, #0
 800ae5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ae5e:	4b18      	ldr	r3, [pc, #96]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae60:	7a5b      	ldrb	r3, [r3, #9]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	4a16      	ldr	r2, [pc, #88]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae70:	7a5b      	ldrb	r3, [r3, #9]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	461a      	mov	r2, r3
 800ae76:	4b12      	ldr	r3, [pc, #72]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae78:	4413      	add	r3, r2
 800ae7a:	79fa      	ldrb	r2, [r7, #7]
 800ae7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae7e:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae80:	7a5b      	ldrb	r3, [r3, #9]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	b2d1      	uxtb	r1, r2
 800ae88:	4a0d      	ldr	r2, [pc, #52]	; (800aec0 <FATFS_LinkDriverEx+0x90>)
 800ae8a:	7251      	strb	r1, [r2, #9]
 800ae8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae8e:	7dbb      	ldrb	r3, [r7, #22]
 800ae90:	3330      	adds	r3, #48	; 0x30
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	223a      	movs	r2, #58	; 0x3a
 800ae9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	3302      	adds	r3, #2
 800aea4:	222f      	movs	r2, #47	; 0x2f
 800aea6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	3303      	adds	r3, #3
 800aeac:	2200      	movs	r2, #0
 800aeae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bc80      	pop	{r7}
 800aebe:	4770      	bx	lr
 800aec0:	2000033c 	.word	0x2000033c

0800aec4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aece:	2200      	movs	r2, #0
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7ff ffac 	bl	800ae30 <FATFS_LinkDriverEx>
 800aed8:	4603      	mov	r3, r0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
	...

0800aee4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	4603      	mov	r3, r0
 800aeec:	6039      	str	r1, [r7, #0]
 800aeee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aef0:	88fb      	ldrh	r3, [r7, #6]
 800aef2:	2b7f      	cmp	r3, #127	; 0x7f
 800aef4:	d802      	bhi.n	800aefc <ff_convert+0x18>
		c = chr;
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	81fb      	strh	r3, [r7, #14]
 800aefa:	e025      	b.n	800af48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00b      	beq.n	800af1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800af02:	88fb      	ldrh	r3, [r7, #6]
 800af04:	2bff      	cmp	r3, #255	; 0xff
 800af06:	d805      	bhi.n	800af14 <ff_convert+0x30>
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	3b80      	subs	r3, #128	; 0x80
 800af0c:	4a11      	ldr	r2, [pc, #68]	; (800af54 <ff_convert+0x70>)
 800af0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af12:	e000      	b.n	800af16 <ff_convert+0x32>
 800af14:	2300      	movs	r3, #0
 800af16:	81fb      	strh	r3, [r7, #14]
 800af18:	e016      	b.n	800af48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800af1a:	2300      	movs	r3, #0
 800af1c:	81fb      	strh	r3, [r7, #14]
 800af1e:	e009      	b.n	800af34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800af20:	89fb      	ldrh	r3, [r7, #14]
 800af22:	4a0c      	ldr	r2, [pc, #48]	; (800af54 <ff_convert+0x70>)
 800af24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af28:	88fa      	ldrh	r2, [r7, #6]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d006      	beq.n	800af3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800af2e:	89fb      	ldrh	r3, [r7, #14]
 800af30:	3301      	adds	r3, #1
 800af32:	81fb      	strh	r3, [r7, #14]
 800af34:	89fb      	ldrh	r3, [r7, #14]
 800af36:	2b7f      	cmp	r3, #127	; 0x7f
 800af38:	d9f2      	bls.n	800af20 <ff_convert+0x3c>
 800af3a:	e000      	b.n	800af3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800af3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800af3e:	89fb      	ldrh	r3, [r7, #14]
 800af40:	3380      	adds	r3, #128	; 0x80
 800af42:	b29b      	uxth	r3, r3
 800af44:	b2db      	uxtb	r3, r3
 800af46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800af48:	89fb      	ldrh	r3, [r7, #14]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr
 800af54:	0800bacc 	.word	0x0800bacc

0800af58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af68:	d201      	bcs.n	800af6e <ff_wtoupper+0x16>
 800af6a:	4b3d      	ldr	r3, [pc, #244]	; (800b060 <ff_wtoupper+0x108>)
 800af6c:	e000      	b.n	800af70 <ff_wtoupper+0x18>
 800af6e:	4b3d      	ldr	r3, [pc, #244]	; (800b064 <ff_wtoupper+0x10c>)
 800af70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	1c9a      	adds	r2, r3, #2
 800af76:	617a      	str	r2, [r7, #20]
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800af7c:	8a7b      	ldrh	r3, [r7, #18]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d068      	beq.n	800b054 <ff_wtoupper+0xfc>
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	8a7b      	ldrh	r3, [r7, #18]
 800af86:	429a      	cmp	r2, r3
 800af88:	d364      	bcc.n	800b054 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	1c9a      	adds	r2, r3, #2
 800af8e:	617a      	str	r2, [r7, #20]
 800af90:	881b      	ldrh	r3, [r3, #0]
 800af92:	823b      	strh	r3, [r7, #16]
 800af94:	8a3b      	ldrh	r3, [r7, #16]
 800af96:	0a1b      	lsrs	r3, r3, #8
 800af98:	81fb      	strh	r3, [r7, #14]
 800af9a:	8a3b      	ldrh	r3, [r7, #16]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800afa0:	88fa      	ldrh	r2, [r7, #6]
 800afa2:	8a79      	ldrh	r1, [r7, #18]
 800afa4:	8a3b      	ldrh	r3, [r7, #16]
 800afa6:	440b      	add	r3, r1
 800afa8:	429a      	cmp	r2, r3
 800afaa:	da49      	bge.n	800b040 <ff_wtoupper+0xe8>
			switch (cmd) {
 800afac:	89fb      	ldrh	r3, [r7, #14]
 800afae:	2b08      	cmp	r3, #8
 800afb0:	d84f      	bhi.n	800b052 <ff_wtoupper+0xfa>
 800afb2:	a201      	add	r2, pc, #4	; (adr r2, 800afb8 <ff_wtoupper+0x60>)
 800afb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb8:	0800afdd 	.word	0x0800afdd
 800afbc:	0800afef 	.word	0x0800afef
 800afc0:	0800b005 	.word	0x0800b005
 800afc4:	0800b00d 	.word	0x0800b00d
 800afc8:	0800b015 	.word	0x0800b015
 800afcc:	0800b01d 	.word	0x0800b01d
 800afd0:	0800b025 	.word	0x0800b025
 800afd4:	0800b02d 	.word	0x0800b02d
 800afd8:	0800b035 	.word	0x0800b035
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800afdc:	88fa      	ldrh	r2, [r7, #6]
 800afde:	8a7b      	ldrh	r3, [r7, #18]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	005b      	lsls	r3, r3, #1
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	80fb      	strh	r3, [r7, #6]
 800afec:	e027      	b.n	800b03e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800afee:	88fa      	ldrh	r2, [r7, #6]
 800aff0:	8a7b      	ldrh	r3, [r7, #18]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	b29b      	uxth	r3, r3
 800affc:	88fa      	ldrh	r2, [r7, #6]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	80fb      	strh	r3, [r7, #6]
 800b002:	e01c      	b.n	800b03e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b004:	88fb      	ldrh	r3, [r7, #6]
 800b006:	3b10      	subs	r3, #16
 800b008:	80fb      	strh	r3, [r7, #6]
 800b00a:	e018      	b.n	800b03e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b00c:	88fb      	ldrh	r3, [r7, #6]
 800b00e:	3b20      	subs	r3, #32
 800b010:	80fb      	strh	r3, [r7, #6]
 800b012:	e014      	b.n	800b03e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b014:	88fb      	ldrh	r3, [r7, #6]
 800b016:	3b30      	subs	r3, #48	; 0x30
 800b018:	80fb      	strh	r3, [r7, #6]
 800b01a:	e010      	b.n	800b03e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b01c:	88fb      	ldrh	r3, [r7, #6]
 800b01e:	3b1a      	subs	r3, #26
 800b020:	80fb      	strh	r3, [r7, #6]
 800b022:	e00c      	b.n	800b03e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b024:	88fb      	ldrh	r3, [r7, #6]
 800b026:	3308      	adds	r3, #8
 800b028:	80fb      	strh	r3, [r7, #6]
 800b02a:	e008      	b.n	800b03e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	3b50      	subs	r3, #80	; 0x50
 800b030:	80fb      	strh	r3, [r7, #6]
 800b032:	e004      	b.n	800b03e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b034:	88fb      	ldrh	r3, [r7, #6]
 800b036:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b03a:	80fb      	strh	r3, [r7, #6]
 800b03c:	bf00      	nop
			}
			break;
 800b03e:	e008      	b.n	800b052 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b040:	89fb      	ldrh	r3, [r7, #14]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d195      	bne.n	800af72 <ff_wtoupper+0x1a>
 800b046:	8a3b      	ldrh	r3, [r7, #16]
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	4413      	add	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b050:	e78f      	b.n	800af72 <ff_wtoupper+0x1a>
			break;
 800b052:	bf00      	nop
	}

	return chr;
 800b054:	88fb      	ldrh	r3, [r7, #6]
}
 800b056:	4618      	mov	r0, r3
 800b058:	371c      	adds	r7, #28
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bc80      	pop	{r7}
 800b05e:	4770      	bx	lr
 800b060:	0800bbcc 	.word	0x0800bbcc
 800b064:	0800bdc0 	.word	0x0800bdc0

0800b068 <__errno>:
 800b068:	4b01      	ldr	r3, [pc, #4]	; (800b070 <__errno+0x8>)
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	2000008c 	.word	0x2000008c

0800b074 <exit>:
 800b074:	b508      	push	{r3, lr}
 800b076:	4b07      	ldr	r3, [pc, #28]	; (800b094 <exit+0x20>)
 800b078:	4604      	mov	r4, r0
 800b07a:	b113      	cbz	r3, 800b082 <exit+0xe>
 800b07c:	2100      	movs	r1, #0
 800b07e:	f3af 8000 	nop.w
 800b082:	4b05      	ldr	r3, [pc, #20]	; (800b098 <exit+0x24>)
 800b084:	6818      	ldr	r0, [r3, #0]
 800b086:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b088:	b103      	cbz	r3, 800b08c <exit+0x18>
 800b08a:	4798      	blx	r3
 800b08c:	4620      	mov	r0, r4
 800b08e:	f7f7 f8ab 	bl	80021e8 <_exit>
 800b092:	bf00      	nop
 800b094:	00000000 	.word	0x00000000
 800b098:	0800be7c 	.word	0x0800be7c

0800b09c <__libc_init_array>:
 800b09c:	b570      	push	{r4, r5, r6, lr}
 800b09e:	2600      	movs	r6, #0
 800b0a0:	4d0c      	ldr	r5, [pc, #48]	; (800b0d4 <__libc_init_array+0x38>)
 800b0a2:	4c0d      	ldr	r4, [pc, #52]	; (800b0d8 <__libc_init_array+0x3c>)
 800b0a4:	1b64      	subs	r4, r4, r5
 800b0a6:	10a4      	asrs	r4, r4, #2
 800b0a8:	42a6      	cmp	r6, r4
 800b0aa:	d109      	bne.n	800b0c0 <__libc_init_array+0x24>
 800b0ac:	f000 fc5c 	bl	800b968 <_init>
 800b0b0:	2600      	movs	r6, #0
 800b0b2:	4d0a      	ldr	r5, [pc, #40]	; (800b0dc <__libc_init_array+0x40>)
 800b0b4:	4c0a      	ldr	r4, [pc, #40]	; (800b0e0 <__libc_init_array+0x44>)
 800b0b6:	1b64      	subs	r4, r4, r5
 800b0b8:	10a4      	asrs	r4, r4, #2
 800b0ba:	42a6      	cmp	r6, r4
 800b0bc:	d105      	bne.n	800b0ca <__libc_init_array+0x2e>
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c4:	4798      	blx	r3
 800b0c6:	3601      	adds	r6, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__libc_init_array+0xc>
 800b0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ce:	4798      	blx	r3
 800b0d0:	3601      	adds	r6, #1
 800b0d2:	e7f2      	b.n	800b0ba <__libc_init_array+0x1e>
 800b0d4:	0800bebc 	.word	0x0800bebc
 800b0d8:	0800bebc 	.word	0x0800bebc
 800b0dc:	0800bebc 	.word	0x0800bebc
 800b0e0:	0800bec0 	.word	0x0800bec0

0800b0e4 <memset>:
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	4402      	add	r2, r0
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d100      	bne.n	800b0ee <memset+0xa>
 800b0ec:	4770      	bx	lr
 800b0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b0f2:	e7f9      	b.n	800b0e8 <memset+0x4>

0800b0f4 <siprintf>:
 800b0f4:	b40e      	push	{r1, r2, r3}
 800b0f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b0fa:	b500      	push	{lr}
 800b0fc:	b09c      	sub	sp, #112	; 0x70
 800b0fe:	ab1d      	add	r3, sp, #116	; 0x74
 800b100:	9002      	str	r0, [sp, #8]
 800b102:	9006      	str	r0, [sp, #24]
 800b104:	9107      	str	r1, [sp, #28]
 800b106:	9104      	str	r1, [sp, #16]
 800b108:	4808      	ldr	r0, [pc, #32]	; (800b12c <siprintf+0x38>)
 800b10a:	4909      	ldr	r1, [pc, #36]	; (800b130 <siprintf+0x3c>)
 800b10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b110:	9105      	str	r1, [sp, #20]
 800b112:	6800      	ldr	r0, [r0, #0]
 800b114:	a902      	add	r1, sp, #8
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	f000 f868 	bl	800b1ec <_svfiprintf_r>
 800b11c:	2200      	movs	r2, #0
 800b11e:	9b02      	ldr	r3, [sp, #8]
 800b120:	701a      	strb	r2, [r3, #0]
 800b122:	b01c      	add	sp, #112	; 0x70
 800b124:	f85d eb04 	ldr.w	lr, [sp], #4
 800b128:	b003      	add	sp, #12
 800b12a:	4770      	bx	lr
 800b12c:	2000008c 	.word	0x2000008c
 800b130:	ffff0208 	.word	0xffff0208

0800b134 <__ssputs_r>:
 800b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	688e      	ldr	r6, [r1, #8]
 800b13a:	4682      	mov	sl, r0
 800b13c:	429e      	cmp	r6, r3
 800b13e:	460c      	mov	r4, r1
 800b140:	4690      	mov	r8, r2
 800b142:	461f      	mov	r7, r3
 800b144:	d838      	bhi.n	800b1b8 <__ssputs_r+0x84>
 800b146:	898a      	ldrh	r2, [r1, #12]
 800b148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b14c:	d032      	beq.n	800b1b4 <__ssputs_r+0x80>
 800b14e:	6825      	ldr	r5, [r4, #0]
 800b150:	6909      	ldr	r1, [r1, #16]
 800b152:	3301      	adds	r3, #1
 800b154:	eba5 0901 	sub.w	r9, r5, r1
 800b158:	6965      	ldr	r5, [r4, #20]
 800b15a:	444b      	add	r3, r9
 800b15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b160:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b164:	106d      	asrs	r5, r5, #1
 800b166:	429d      	cmp	r5, r3
 800b168:	bf38      	it	cc
 800b16a:	461d      	movcc	r5, r3
 800b16c:	0553      	lsls	r3, r2, #21
 800b16e:	d531      	bpl.n	800b1d4 <__ssputs_r+0xa0>
 800b170:	4629      	mov	r1, r5
 800b172:	f000 fb53 	bl	800b81c <_malloc_r>
 800b176:	4606      	mov	r6, r0
 800b178:	b950      	cbnz	r0, 800b190 <__ssputs_r+0x5c>
 800b17a:	230c      	movs	r3, #12
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	f8ca 3000 	str.w	r3, [sl]
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b190:	464a      	mov	r2, r9
 800b192:	6921      	ldr	r1, [r4, #16]
 800b194:	f000 face 	bl	800b734 <memcpy>
 800b198:	89a3      	ldrh	r3, [r4, #12]
 800b19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	6126      	str	r6, [r4, #16]
 800b1a6:	444e      	add	r6, r9
 800b1a8:	6026      	str	r6, [r4, #0]
 800b1aa:	463e      	mov	r6, r7
 800b1ac:	6165      	str	r5, [r4, #20]
 800b1ae:	eba5 0509 	sub.w	r5, r5, r9
 800b1b2:	60a5      	str	r5, [r4, #8]
 800b1b4:	42be      	cmp	r6, r7
 800b1b6:	d900      	bls.n	800b1ba <__ssputs_r+0x86>
 800b1b8:	463e      	mov	r6, r7
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	4641      	mov	r1, r8
 800b1be:	6820      	ldr	r0, [r4, #0]
 800b1c0:	f000 fac6 	bl	800b750 <memmove>
 800b1c4:	68a3      	ldr	r3, [r4, #8]
 800b1c6:	6822      	ldr	r2, [r4, #0]
 800b1c8:	1b9b      	subs	r3, r3, r6
 800b1ca:	4432      	add	r2, r6
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	60a3      	str	r3, [r4, #8]
 800b1d0:	6022      	str	r2, [r4, #0]
 800b1d2:	e7db      	b.n	800b18c <__ssputs_r+0x58>
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	f000 fb7b 	bl	800b8d0 <_realloc_r>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	d1e1      	bne.n	800b1a4 <__ssputs_r+0x70>
 800b1e0:	4650      	mov	r0, sl
 800b1e2:	6921      	ldr	r1, [r4, #16]
 800b1e4:	f000 face 	bl	800b784 <_free_r>
 800b1e8:	e7c7      	b.n	800b17a <__ssputs_r+0x46>
	...

0800b1ec <_svfiprintf_r>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	898b      	ldrh	r3, [r1, #12]
 800b1f4:	4607      	mov	r7, r0
 800b1f6:	061b      	lsls	r3, r3, #24
 800b1f8:	460d      	mov	r5, r1
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	b09d      	sub	sp, #116	; 0x74
 800b1fe:	d50e      	bpl.n	800b21e <_svfiprintf_r+0x32>
 800b200:	690b      	ldr	r3, [r1, #16]
 800b202:	b963      	cbnz	r3, 800b21e <_svfiprintf_r+0x32>
 800b204:	2140      	movs	r1, #64	; 0x40
 800b206:	f000 fb09 	bl	800b81c <_malloc_r>
 800b20a:	6028      	str	r0, [r5, #0]
 800b20c:	6128      	str	r0, [r5, #16]
 800b20e:	b920      	cbnz	r0, 800b21a <_svfiprintf_r+0x2e>
 800b210:	230c      	movs	r3, #12
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e0d1      	b.n	800b3be <_svfiprintf_r+0x1d2>
 800b21a:	2340      	movs	r3, #64	; 0x40
 800b21c:	616b      	str	r3, [r5, #20]
 800b21e:	2300      	movs	r3, #0
 800b220:	9309      	str	r3, [sp, #36]	; 0x24
 800b222:	2320      	movs	r3, #32
 800b224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b228:	2330      	movs	r3, #48	; 0x30
 800b22a:	f04f 0901 	mov.w	r9, #1
 800b22e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3d8 <_svfiprintf_r+0x1ec>
 800b236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b23a:	4623      	mov	r3, r4
 800b23c:	469a      	mov	sl, r3
 800b23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b242:	b10a      	cbz	r2, 800b248 <_svfiprintf_r+0x5c>
 800b244:	2a25      	cmp	r2, #37	; 0x25
 800b246:	d1f9      	bne.n	800b23c <_svfiprintf_r+0x50>
 800b248:	ebba 0b04 	subs.w	fp, sl, r4
 800b24c:	d00b      	beq.n	800b266 <_svfiprintf_r+0x7a>
 800b24e:	465b      	mov	r3, fp
 800b250:	4622      	mov	r2, r4
 800b252:	4629      	mov	r1, r5
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff ff6d 	bl	800b134 <__ssputs_r>
 800b25a:	3001      	adds	r0, #1
 800b25c:	f000 80aa 	beq.w	800b3b4 <_svfiprintf_r+0x1c8>
 800b260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b262:	445a      	add	r2, fp
 800b264:	9209      	str	r2, [sp, #36]	; 0x24
 800b266:	f89a 3000 	ldrb.w	r3, [sl]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 80a2 	beq.w	800b3b4 <_svfiprintf_r+0x1c8>
 800b270:	2300      	movs	r3, #0
 800b272:	f04f 32ff 	mov.w	r2, #4294967295
 800b276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b27a:	f10a 0a01 	add.w	sl, sl, #1
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	9307      	str	r3, [sp, #28]
 800b282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b286:	931a      	str	r3, [sp, #104]	; 0x68
 800b288:	4654      	mov	r4, sl
 800b28a:	2205      	movs	r2, #5
 800b28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b290:	4851      	ldr	r0, [pc, #324]	; (800b3d8 <_svfiprintf_r+0x1ec>)
 800b292:	f000 fa41 	bl	800b718 <memchr>
 800b296:	9a04      	ldr	r2, [sp, #16]
 800b298:	b9d8      	cbnz	r0, 800b2d2 <_svfiprintf_r+0xe6>
 800b29a:	06d0      	lsls	r0, r2, #27
 800b29c:	bf44      	itt	mi
 800b29e:	2320      	movmi	r3, #32
 800b2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a4:	0711      	lsls	r1, r2, #28
 800b2a6:	bf44      	itt	mi
 800b2a8:	232b      	movmi	r3, #43	; 0x2b
 800b2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b4:	d015      	beq.n	800b2e2 <_svfiprintf_r+0xf6>
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	f04f 0c0a 	mov.w	ip, #10
 800b2be:	9a07      	ldr	r2, [sp, #28]
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2c6:	3b30      	subs	r3, #48	; 0x30
 800b2c8:	2b09      	cmp	r3, #9
 800b2ca:	d94e      	bls.n	800b36a <_svfiprintf_r+0x17e>
 800b2cc:	b1b0      	cbz	r0, 800b2fc <_svfiprintf_r+0x110>
 800b2ce:	9207      	str	r2, [sp, #28]
 800b2d0:	e014      	b.n	800b2fc <_svfiprintf_r+0x110>
 800b2d2:	eba0 0308 	sub.w	r3, r0, r8
 800b2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	46a2      	mov	sl, r4
 800b2de:	9304      	str	r3, [sp, #16]
 800b2e0:	e7d2      	b.n	800b288 <_svfiprintf_r+0x9c>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	1d19      	adds	r1, r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9103      	str	r1, [sp, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfbb      	ittet	lt
 800b2ee:	425b      	neglt	r3, r3
 800b2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2f4:	9307      	strge	r3, [sp, #28]
 800b2f6:	9307      	strlt	r3, [sp, #28]
 800b2f8:	bfb8      	it	lt
 800b2fa:	9204      	strlt	r2, [sp, #16]
 800b2fc:	7823      	ldrb	r3, [r4, #0]
 800b2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b300:	d10c      	bne.n	800b31c <_svfiprintf_r+0x130>
 800b302:	7863      	ldrb	r3, [r4, #1]
 800b304:	2b2a      	cmp	r3, #42	; 0x2a
 800b306:	d135      	bne.n	800b374 <_svfiprintf_r+0x188>
 800b308:	9b03      	ldr	r3, [sp, #12]
 800b30a:	3402      	adds	r4, #2
 800b30c:	1d1a      	adds	r2, r3, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	9203      	str	r2, [sp, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	bfb8      	it	lt
 800b316:	f04f 33ff 	movlt.w	r3, #4294967295
 800b31a:	9305      	str	r3, [sp, #20]
 800b31c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b3e8 <_svfiprintf_r+0x1fc>
 800b320:	2203      	movs	r2, #3
 800b322:	4650      	mov	r0, sl
 800b324:	7821      	ldrb	r1, [r4, #0]
 800b326:	f000 f9f7 	bl	800b718 <memchr>
 800b32a:	b140      	cbz	r0, 800b33e <_svfiprintf_r+0x152>
 800b32c:	2340      	movs	r3, #64	; 0x40
 800b32e:	eba0 000a 	sub.w	r0, r0, sl
 800b332:	fa03 f000 	lsl.w	r0, r3, r0
 800b336:	9b04      	ldr	r3, [sp, #16]
 800b338:	3401      	adds	r4, #1
 800b33a:	4303      	orrs	r3, r0
 800b33c:	9304      	str	r3, [sp, #16]
 800b33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b342:	2206      	movs	r2, #6
 800b344:	4825      	ldr	r0, [pc, #148]	; (800b3dc <_svfiprintf_r+0x1f0>)
 800b346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b34a:	f000 f9e5 	bl	800b718 <memchr>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d038      	beq.n	800b3c4 <_svfiprintf_r+0x1d8>
 800b352:	4b23      	ldr	r3, [pc, #140]	; (800b3e0 <_svfiprintf_r+0x1f4>)
 800b354:	bb1b      	cbnz	r3, 800b39e <_svfiprintf_r+0x1b2>
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	3307      	adds	r3, #7
 800b35a:	f023 0307 	bic.w	r3, r3, #7
 800b35e:	3308      	adds	r3, #8
 800b360:	9303      	str	r3, [sp, #12]
 800b362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b364:	4433      	add	r3, r6
 800b366:	9309      	str	r3, [sp, #36]	; 0x24
 800b368:	e767      	b.n	800b23a <_svfiprintf_r+0x4e>
 800b36a:	460c      	mov	r4, r1
 800b36c:	2001      	movs	r0, #1
 800b36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b372:	e7a5      	b.n	800b2c0 <_svfiprintf_r+0xd4>
 800b374:	2300      	movs	r3, #0
 800b376:	f04f 0c0a 	mov.w	ip, #10
 800b37a:	4619      	mov	r1, r3
 800b37c:	3401      	adds	r4, #1
 800b37e:	9305      	str	r3, [sp, #20]
 800b380:	4620      	mov	r0, r4
 800b382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b386:	3a30      	subs	r2, #48	; 0x30
 800b388:	2a09      	cmp	r2, #9
 800b38a:	d903      	bls.n	800b394 <_svfiprintf_r+0x1a8>
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d0c5      	beq.n	800b31c <_svfiprintf_r+0x130>
 800b390:	9105      	str	r1, [sp, #20]
 800b392:	e7c3      	b.n	800b31c <_svfiprintf_r+0x130>
 800b394:	4604      	mov	r4, r0
 800b396:	2301      	movs	r3, #1
 800b398:	fb0c 2101 	mla	r1, ip, r1, r2
 800b39c:	e7f0      	b.n	800b380 <_svfiprintf_r+0x194>
 800b39e:	ab03      	add	r3, sp, #12
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <_svfiprintf_r+0x1f8>)
 800b3a8:	a904      	add	r1, sp, #16
 800b3aa:	f3af 8000 	nop.w
 800b3ae:	1c42      	adds	r2, r0, #1
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	d1d6      	bne.n	800b362 <_svfiprintf_r+0x176>
 800b3b4:	89ab      	ldrh	r3, [r5, #12]
 800b3b6:	065b      	lsls	r3, r3, #25
 800b3b8:	f53f af2c 	bmi.w	800b214 <_svfiprintf_r+0x28>
 800b3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3be:	b01d      	add	sp, #116	; 0x74
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	ab03      	add	r3, sp, #12
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	462a      	mov	r2, r5
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <_svfiprintf_r+0x1f8>)
 800b3ce:	a904      	add	r1, sp, #16
 800b3d0:	f000 f87c 	bl	800b4cc <_printf_i>
 800b3d4:	e7eb      	b.n	800b3ae <_svfiprintf_r+0x1c2>
 800b3d6:	bf00      	nop
 800b3d8:	0800be80 	.word	0x0800be80
 800b3dc:	0800be8a 	.word	0x0800be8a
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	0800b135 	.word	0x0800b135
 800b3e8:	0800be86 	.word	0x0800be86

0800b3ec <_printf_common>:
 800b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f0:	4616      	mov	r6, r2
 800b3f2:	4699      	mov	r9, r3
 800b3f4:	688a      	ldr	r2, [r1, #8]
 800b3f6:	690b      	ldr	r3, [r1, #16]
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	bfb8      	it	lt
 800b3fe:	4613      	movlt	r3, r2
 800b400:	6033      	str	r3, [r6, #0]
 800b402:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b406:	460c      	mov	r4, r1
 800b408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b40c:	b10a      	cbz	r2, 800b412 <_printf_common+0x26>
 800b40e:	3301      	adds	r3, #1
 800b410:	6033      	str	r3, [r6, #0]
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	0699      	lsls	r1, r3, #26
 800b416:	bf42      	ittt	mi
 800b418:	6833      	ldrmi	r3, [r6, #0]
 800b41a:	3302      	addmi	r3, #2
 800b41c:	6033      	strmi	r3, [r6, #0]
 800b41e:	6825      	ldr	r5, [r4, #0]
 800b420:	f015 0506 	ands.w	r5, r5, #6
 800b424:	d106      	bne.n	800b434 <_printf_common+0x48>
 800b426:	f104 0a19 	add.w	sl, r4, #25
 800b42a:	68e3      	ldr	r3, [r4, #12]
 800b42c:	6832      	ldr	r2, [r6, #0]
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	42ab      	cmp	r3, r5
 800b432:	dc28      	bgt.n	800b486 <_printf_common+0x9a>
 800b434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b438:	1e13      	subs	r3, r2, #0
 800b43a:	6822      	ldr	r2, [r4, #0]
 800b43c:	bf18      	it	ne
 800b43e:	2301      	movne	r3, #1
 800b440:	0692      	lsls	r2, r2, #26
 800b442:	d42d      	bmi.n	800b4a0 <_printf_common+0xb4>
 800b444:	4649      	mov	r1, r9
 800b446:	4638      	mov	r0, r7
 800b448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b44c:	47c0      	blx	r8
 800b44e:	3001      	adds	r0, #1
 800b450:	d020      	beq.n	800b494 <_printf_common+0xa8>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	68e5      	ldr	r5, [r4, #12]
 800b456:	f003 0306 	and.w	r3, r3, #6
 800b45a:	2b04      	cmp	r3, #4
 800b45c:	bf18      	it	ne
 800b45e:	2500      	movne	r5, #0
 800b460:	6832      	ldr	r2, [r6, #0]
 800b462:	f04f 0600 	mov.w	r6, #0
 800b466:	68a3      	ldr	r3, [r4, #8]
 800b468:	bf08      	it	eq
 800b46a:	1aad      	subeq	r5, r5, r2
 800b46c:	6922      	ldr	r2, [r4, #16]
 800b46e:	bf08      	it	eq
 800b470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b474:	4293      	cmp	r3, r2
 800b476:	bfc4      	itt	gt
 800b478:	1a9b      	subgt	r3, r3, r2
 800b47a:	18ed      	addgt	r5, r5, r3
 800b47c:	341a      	adds	r4, #26
 800b47e:	42b5      	cmp	r5, r6
 800b480:	d11a      	bne.n	800b4b8 <_printf_common+0xcc>
 800b482:	2000      	movs	r0, #0
 800b484:	e008      	b.n	800b498 <_printf_common+0xac>
 800b486:	2301      	movs	r3, #1
 800b488:	4652      	mov	r2, sl
 800b48a:	4649      	mov	r1, r9
 800b48c:	4638      	mov	r0, r7
 800b48e:	47c0      	blx	r8
 800b490:	3001      	adds	r0, #1
 800b492:	d103      	bne.n	800b49c <_printf_common+0xb0>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49c:	3501      	adds	r5, #1
 800b49e:	e7c4      	b.n	800b42a <_printf_common+0x3e>
 800b4a0:	2030      	movs	r0, #48	; 0x30
 800b4a2:	18e1      	adds	r1, r4, r3
 800b4a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4ae:	4422      	add	r2, r4
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b6:	e7c5      	b.n	800b444 <_printf_common+0x58>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	4649      	mov	r1, r9
 800b4be:	4638      	mov	r0, r7
 800b4c0:	47c0      	blx	r8
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d0e6      	beq.n	800b494 <_printf_common+0xa8>
 800b4c6:	3601      	adds	r6, #1
 800b4c8:	e7d9      	b.n	800b47e <_printf_common+0x92>
	...

0800b4cc <_printf_i>:
 800b4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d0:	460c      	mov	r4, r1
 800b4d2:	7e27      	ldrb	r7, [r4, #24]
 800b4d4:	4691      	mov	r9, r2
 800b4d6:	2f78      	cmp	r7, #120	; 0x78
 800b4d8:	4680      	mov	r8, r0
 800b4da:	469a      	mov	sl, r3
 800b4dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b4de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4e2:	d807      	bhi.n	800b4f4 <_printf_i+0x28>
 800b4e4:	2f62      	cmp	r7, #98	; 0x62
 800b4e6:	d80a      	bhi.n	800b4fe <_printf_i+0x32>
 800b4e8:	2f00      	cmp	r7, #0
 800b4ea:	f000 80d9 	beq.w	800b6a0 <_printf_i+0x1d4>
 800b4ee:	2f58      	cmp	r7, #88	; 0x58
 800b4f0:	f000 80a4 	beq.w	800b63c <_printf_i+0x170>
 800b4f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4fc:	e03a      	b.n	800b574 <_printf_i+0xa8>
 800b4fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b502:	2b15      	cmp	r3, #21
 800b504:	d8f6      	bhi.n	800b4f4 <_printf_i+0x28>
 800b506:	a001      	add	r0, pc, #4	; (adr r0, 800b50c <_printf_i+0x40>)
 800b508:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b50c:	0800b565 	.word	0x0800b565
 800b510:	0800b579 	.word	0x0800b579
 800b514:	0800b4f5 	.word	0x0800b4f5
 800b518:	0800b4f5 	.word	0x0800b4f5
 800b51c:	0800b4f5 	.word	0x0800b4f5
 800b520:	0800b4f5 	.word	0x0800b4f5
 800b524:	0800b579 	.word	0x0800b579
 800b528:	0800b4f5 	.word	0x0800b4f5
 800b52c:	0800b4f5 	.word	0x0800b4f5
 800b530:	0800b4f5 	.word	0x0800b4f5
 800b534:	0800b4f5 	.word	0x0800b4f5
 800b538:	0800b687 	.word	0x0800b687
 800b53c:	0800b5a9 	.word	0x0800b5a9
 800b540:	0800b669 	.word	0x0800b669
 800b544:	0800b4f5 	.word	0x0800b4f5
 800b548:	0800b4f5 	.word	0x0800b4f5
 800b54c:	0800b6a9 	.word	0x0800b6a9
 800b550:	0800b4f5 	.word	0x0800b4f5
 800b554:	0800b5a9 	.word	0x0800b5a9
 800b558:	0800b4f5 	.word	0x0800b4f5
 800b55c:	0800b4f5 	.word	0x0800b4f5
 800b560:	0800b671 	.word	0x0800b671
 800b564:	680b      	ldr	r3, [r1, #0]
 800b566:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	600a      	str	r2, [r1, #0]
 800b570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b574:	2301      	movs	r3, #1
 800b576:	e0a4      	b.n	800b6c2 <_printf_i+0x1f6>
 800b578:	6825      	ldr	r5, [r4, #0]
 800b57a:	6808      	ldr	r0, [r1, #0]
 800b57c:	062e      	lsls	r6, r5, #24
 800b57e:	f100 0304 	add.w	r3, r0, #4
 800b582:	d50a      	bpl.n	800b59a <_printf_i+0xce>
 800b584:	6805      	ldr	r5, [r0, #0]
 800b586:	600b      	str	r3, [r1, #0]
 800b588:	2d00      	cmp	r5, #0
 800b58a:	da03      	bge.n	800b594 <_printf_i+0xc8>
 800b58c:	232d      	movs	r3, #45	; 0x2d
 800b58e:	426d      	negs	r5, r5
 800b590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b594:	230a      	movs	r3, #10
 800b596:	485e      	ldr	r0, [pc, #376]	; (800b710 <_printf_i+0x244>)
 800b598:	e019      	b.n	800b5ce <_printf_i+0x102>
 800b59a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b59e:	6805      	ldr	r5, [r0, #0]
 800b5a0:	600b      	str	r3, [r1, #0]
 800b5a2:	bf18      	it	ne
 800b5a4:	b22d      	sxthne	r5, r5
 800b5a6:	e7ef      	b.n	800b588 <_printf_i+0xbc>
 800b5a8:	680b      	ldr	r3, [r1, #0]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	1d18      	adds	r0, r3, #4
 800b5ae:	6008      	str	r0, [r1, #0]
 800b5b0:	0628      	lsls	r0, r5, #24
 800b5b2:	d501      	bpl.n	800b5b8 <_printf_i+0xec>
 800b5b4:	681d      	ldr	r5, [r3, #0]
 800b5b6:	e002      	b.n	800b5be <_printf_i+0xf2>
 800b5b8:	0669      	lsls	r1, r5, #25
 800b5ba:	d5fb      	bpl.n	800b5b4 <_printf_i+0xe8>
 800b5bc:	881d      	ldrh	r5, [r3, #0]
 800b5be:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c0:	bf0c      	ite	eq
 800b5c2:	2308      	moveq	r3, #8
 800b5c4:	230a      	movne	r3, #10
 800b5c6:	4852      	ldr	r0, [pc, #328]	; (800b710 <_printf_i+0x244>)
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5ce:	6866      	ldr	r6, [r4, #4]
 800b5d0:	2e00      	cmp	r6, #0
 800b5d2:	bfa8      	it	ge
 800b5d4:	6821      	ldrge	r1, [r4, #0]
 800b5d6:	60a6      	str	r6, [r4, #8]
 800b5d8:	bfa4      	itt	ge
 800b5da:	f021 0104 	bicge.w	r1, r1, #4
 800b5de:	6021      	strge	r1, [r4, #0]
 800b5e0:	b90d      	cbnz	r5, 800b5e6 <_printf_i+0x11a>
 800b5e2:	2e00      	cmp	r6, #0
 800b5e4:	d04d      	beq.n	800b682 <_printf_i+0x1b6>
 800b5e6:	4616      	mov	r6, r2
 800b5e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b5f0:	5dc7      	ldrb	r7, [r0, r7]
 800b5f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5f6:	462f      	mov	r7, r5
 800b5f8:	42bb      	cmp	r3, r7
 800b5fa:	460d      	mov	r5, r1
 800b5fc:	d9f4      	bls.n	800b5e8 <_printf_i+0x11c>
 800b5fe:	2b08      	cmp	r3, #8
 800b600:	d10b      	bne.n	800b61a <_printf_i+0x14e>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	07df      	lsls	r7, r3, #31
 800b606:	d508      	bpl.n	800b61a <_printf_i+0x14e>
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	6861      	ldr	r1, [r4, #4]
 800b60c:	4299      	cmp	r1, r3
 800b60e:	bfde      	ittt	le
 800b610:	2330      	movle	r3, #48	; 0x30
 800b612:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b61a:	1b92      	subs	r2, r2, r6
 800b61c:	6122      	str	r2, [r4, #16]
 800b61e:	464b      	mov	r3, r9
 800b620:	4621      	mov	r1, r4
 800b622:	4640      	mov	r0, r8
 800b624:	f8cd a000 	str.w	sl, [sp]
 800b628:	aa03      	add	r2, sp, #12
 800b62a:	f7ff fedf 	bl	800b3ec <_printf_common>
 800b62e:	3001      	adds	r0, #1
 800b630:	d14c      	bne.n	800b6cc <_printf_i+0x200>
 800b632:	f04f 30ff 	mov.w	r0, #4294967295
 800b636:	b004      	add	sp, #16
 800b638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63c:	4834      	ldr	r0, [pc, #208]	; (800b710 <_printf_i+0x244>)
 800b63e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b642:	680e      	ldr	r6, [r1, #0]
 800b644:	6823      	ldr	r3, [r4, #0]
 800b646:	f856 5b04 	ldr.w	r5, [r6], #4
 800b64a:	061f      	lsls	r7, r3, #24
 800b64c:	600e      	str	r6, [r1, #0]
 800b64e:	d514      	bpl.n	800b67a <_printf_i+0x1ae>
 800b650:	07d9      	lsls	r1, r3, #31
 800b652:	bf44      	itt	mi
 800b654:	f043 0320 	orrmi.w	r3, r3, #32
 800b658:	6023      	strmi	r3, [r4, #0]
 800b65a:	b91d      	cbnz	r5, 800b664 <_printf_i+0x198>
 800b65c:	6823      	ldr	r3, [r4, #0]
 800b65e:	f023 0320 	bic.w	r3, r3, #32
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	2310      	movs	r3, #16
 800b666:	e7af      	b.n	800b5c8 <_printf_i+0xfc>
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	f043 0320 	orr.w	r3, r3, #32
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	2378      	movs	r3, #120	; 0x78
 800b672:	4828      	ldr	r0, [pc, #160]	; (800b714 <_printf_i+0x248>)
 800b674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b678:	e7e3      	b.n	800b642 <_printf_i+0x176>
 800b67a:	065e      	lsls	r6, r3, #25
 800b67c:	bf48      	it	mi
 800b67e:	b2ad      	uxthmi	r5, r5
 800b680:	e7e6      	b.n	800b650 <_printf_i+0x184>
 800b682:	4616      	mov	r6, r2
 800b684:	e7bb      	b.n	800b5fe <_printf_i+0x132>
 800b686:	680b      	ldr	r3, [r1, #0]
 800b688:	6826      	ldr	r6, [r4, #0]
 800b68a:	1d1d      	adds	r5, r3, #4
 800b68c:	6960      	ldr	r0, [r4, #20]
 800b68e:	600d      	str	r5, [r1, #0]
 800b690:	0635      	lsls	r5, r6, #24
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	d501      	bpl.n	800b69a <_printf_i+0x1ce>
 800b696:	6018      	str	r0, [r3, #0]
 800b698:	e002      	b.n	800b6a0 <_printf_i+0x1d4>
 800b69a:	0671      	lsls	r1, r6, #25
 800b69c:	d5fb      	bpl.n	800b696 <_printf_i+0x1ca>
 800b69e:	8018      	strh	r0, [r3, #0]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	e7ba      	b.n	800b61e <_printf_i+0x152>
 800b6a8:	680b      	ldr	r3, [r1, #0]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	600a      	str	r2, [r1, #0]
 800b6ae:	681e      	ldr	r6, [r3, #0]
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	6862      	ldr	r2, [r4, #4]
 800b6b6:	f000 f82f 	bl	800b718 <memchr>
 800b6ba:	b108      	cbz	r0, 800b6c0 <_printf_i+0x1f4>
 800b6bc:	1b80      	subs	r0, r0, r6
 800b6be:	6060      	str	r0, [r4, #4]
 800b6c0:	6863      	ldr	r3, [r4, #4]
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ca:	e7a8      	b.n	800b61e <_printf_i+0x152>
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	47d0      	blx	sl
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d0ab      	beq.n	800b632 <_printf_i+0x166>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	079b      	lsls	r3, r3, #30
 800b6de:	d413      	bmi.n	800b708 <_printf_i+0x23c>
 800b6e0:	68e0      	ldr	r0, [r4, #12]
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	bfb8      	it	lt
 800b6e8:	4618      	movlt	r0, r3
 800b6ea:	e7a4      	b.n	800b636 <_printf_i+0x16a>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4632      	mov	r2, r6
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	47d0      	blx	sl
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d09b      	beq.n	800b632 <_printf_i+0x166>
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	68e3      	ldr	r3, [r4, #12]
 800b6fe:	9903      	ldr	r1, [sp, #12]
 800b700:	1a5b      	subs	r3, r3, r1
 800b702:	42ab      	cmp	r3, r5
 800b704:	dcf2      	bgt.n	800b6ec <_printf_i+0x220>
 800b706:	e7eb      	b.n	800b6e0 <_printf_i+0x214>
 800b708:	2500      	movs	r5, #0
 800b70a:	f104 0619 	add.w	r6, r4, #25
 800b70e:	e7f5      	b.n	800b6fc <_printf_i+0x230>
 800b710:	0800be91 	.word	0x0800be91
 800b714:	0800bea2 	.word	0x0800bea2

0800b718 <memchr>:
 800b718:	4603      	mov	r3, r0
 800b71a:	b510      	push	{r4, lr}
 800b71c:	b2c9      	uxtb	r1, r1
 800b71e:	4402      	add	r2, r0
 800b720:	4293      	cmp	r3, r2
 800b722:	4618      	mov	r0, r3
 800b724:	d101      	bne.n	800b72a <memchr+0x12>
 800b726:	2000      	movs	r0, #0
 800b728:	e003      	b.n	800b732 <memchr+0x1a>
 800b72a:	7804      	ldrb	r4, [r0, #0]
 800b72c:	3301      	adds	r3, #1
 800b72e:	428c      	cmp	r4, r1
 800b730:	d1f6      	bne.n	800b720 <memchr+0x8>
 800b732:	bd10      	pop	{r4, pc}

0800b734 <memcpy>:
 800b734:	440a      	add	r2, r1
 800b736:	4291      	cmp	r1, r2
 800b738:	f100 33ff 	add.w	r3, r0, #4294967295
 800b73c:	d100      	bne.n	800b740 <memcpy+0xc>
 800b73e:	4770      	bx	lr
 800b740:	b510      	push	{r4, lr}
 800b742:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b746:	4291      	cmp	r1, r2
 800b748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b74c:	d1f9      	bne.n	800b742 <memcpy+0xe>
 800b74e:	bd10      	pop	{r4, pc}

0800b750 <memmove>:
 800b750:	4288      	cmp	r0, r1
 800b752:	b510      	push	{r4, lr}
 800b754:	eb01 0402 	add.w	r4, r1, r2
 800b758:	d902      	bls.n	800b760 <memmove+0x10>
 800b75a:	4284      	cmp	r4, r0
 800b75c:	4623      	mov	r3, r4
 800b75e:	d807      	bhi.n	800b770 <memmove+0x20>
 800b760:	1e43      	subs	r3, r0, #1
 800b762:	42a1      	cmp	r1, r4
 800b764:	d008      	beq.n	800b778 <memmove+0x28>
 800b766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b76e:	e7f8      	b.n	800b762 <memmove+0x12>
 800b770:	4601      	mov	r1, r0
 800b772:	4402      	add	r2, r0
 800b774:	428a      	cmp	r2, r1
 800b776:	d100      	bne.n	800b77a <memmove+0x2a>
 800b778:	bd10      	pop	{r4, pc}
 800b77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b782:	e7f7      	b.n	800b774 <memmove+0x24>

0800b784 <_free_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4605      	mov	r5, r0
 800b788:	2900      	cmp	r1, #0
 800b78a:	d043      	beq.n	800b814 <_free_r+0x90>
 800b78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b790:	1f0c      	subs	r4, r1, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	bfb8      	it	lt
 800b796:	18e4      	addlt	r4, r4, r3
 800b798:	f000 f8d0 	bl	800b93c <__malloc_lock>
 800b79c:	4a1e      	ldr	r2, [pc, #120]	; (800b818 <_free_r+0x94>)
 800b79e:	6813      	ldr	r3, [r2, #0]
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	b933      	cbnz	r3, 800b7b2 <_free_r+0x2e>
 800b7a4:	6063      	str	r3, [r4, #4]
 800b7a6:	6014      	str	r4, [r2, #0]
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ae:	f000 b8cb 	b.w	800b948 <__malloc_unlock>
 800b7b2:	42a3      	cmp	r3, r4
 800b7b4:	d90a      	bls.n	800b7cc <_free_r+0x48>
 800b7b6:	6821      	ldr	r1, [r4, #0]
 800b7b8:	1862      	adds	r2, r4, r1
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	bf01      	itttt	eq
 800b7be:	681a      	ldreq	r2, [r3, #0]
 800b7c0:	685b      	ldreq	r3, [r3, #4]
 800b7c2:	1852      	addeq	r2, r2, r1
 800b7c4:	6022      	streq	r2, [r4, #0]
 800b7c6:	6063      	str	r3, [r4, #4]
 800b7c8:	6004      	str	r4, [r0, #0]
 800b7ca:	e7ed      	b.n	800b7a8 <_free_r+0x24>
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	b10b      	cbz	r3, 800b7d6 <_free_r+0x52>
 800b7d2:	42a3      	cmp	r3, r4
 800b7d4:	d9fa      	bls.n	800b7cc <_free_r+0x48>
 800b7d6:	6811      	ldr	r1, [r2, #0]
 800b7d8:	1850      	adds	r0, r2, r1
 800b7da:	42a0      	cmp	r0, r4
 800b7dc:	d10b      	bne.n	800b7f6 <_free_r+0x72>
 800b7de:	6820      	ldr	r0, [r4, #0]
 800b7e0:	4401      	add	r1, r0
 800b7e2:	1850      	adds	r0, r2, r1
 800b7e4:	4283      	cmp	r3, r0
 800b7e6:	6011      	str	r1, [r2, #0]
 800b7e8:	d1de      	bne.n	800b7a8 <_free_r+0x24>
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	4401      	add	r1, r0
 800b7f0:	6011      	str	r1, [r2, #0]
 800b7f2:	6053      	str	r3, [r2, #4]
 800b7f4:	e7d8      	b.n	800b7a8 <_free_r+0x24>
 800b7f6:	d902      	bls.n	800b7fe <_free_r+0x7a>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	602b      	str	r3, [r5, #0]
 800b7fc:	e7d4      	b.n	800b7a8 <_free_r+0x24>
 800b7fe:	6820      	ldr	r0, [r4, #0]
 800b800:	1821      	adds	r1, r4, r0
 800b802:	428b      	cmp	r3, r1
 800b804:	bf01      	itttt	eq
 800b806:	6819      	ldreq	r1, [r3, #0]
 800b808:	685b      	ldreq	r3, [r3, #4]
 800b80a:	1809      	addeq	r1, r1, r0
 800b80c:	6021      	streq	r1, [r4, #0]
 800b80e:	6063      	str	r3, [r4, #4]
 800b810:	6054      	str	r4, [r2, #4]
 800b812:	e7c9      	b.n	800b7a8 <_free_r+0x24>
 800b814:	bd38      	pop	{r3, r4, r5, pc}
 800b816:	bf00      	nop
 800b818:	20000348 	.word	0x20000348

0800b81c <_malloc_r>:
 800b81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81e:	1ccd      	adds	r5, r1, #3
 800b820:	f025 0503 	bic.w	r5, r5, #3
 800b824:	3508      	adds	r5, #8
 800b826:	2d0c      	cmp	r5, #12
 800b828:	bf38      	it	cc
 800b82a:	250c      	movcc	r5, #12
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	4606      	mov	r6, r0
 800b830:	db01      	blt.n	800b836 <_malloc_r+0x1a>
 800b832:	42a9      	cmp	r1, r5
 800b834:	d903      	bls.n	800b83e <_malloc_r+0x22>
 800b836:	230c      	movs	r3, #12
 800b838:	6033      	str	r3, [r6, #0]
 800b83a:	2000      	movs	r0, #0
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83e:	f000 f87d 	bl	800b93c <__malloc_lock>
 800b842:	4921      	ldr	r1, [pc, #132]	; (800b8c8 <_malloc_r+0xac>)
 800b844:	680a      	ldr	r2, [r1, #0]
 800b846:	4614      	mov	r4, r2
 800b848:	b99c      	cbnz	r4, 800b872 <_malloc_r+0x56>
 800b84a:	4f20      	ldr	r7, [pc, #128]	; (800b8cc <_malloc_r+0xb0>)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	b923      	cbnz	r3, 800b85a <_malloc_r+0x3e>
 800b850:	4621      	mov	r1, r4
 800b852:	4630      	mov	r0, r6
 800b854:	f000 f862 	bl	800b91c <_sbrk_r>
 800b858:	6038      	str	r0, [r7, #0]
 800b85a:	4629      	mov	r1, r5
 800b85c:	4630      	mov	r0, r6
 800b85e:	f000 f85d 	bl	800b91c <_sbrk_r>
 800b862:	1c43      	adds	r3, r0, #1
 800b864:	d123      	bne.n	800b8ae <_malloc_r+0x92>
 800b866:	230c      	movs	r3, #12
 800b868:	4630      	mov	r0, r6
 800b86a:	6033      	str	r3, [r6, #0]
 800b86c:	f000 f86c 	bl	800b948 <__malloc_unlock>
 800b870:	e7e3      	b.n	800b83a <_malloc_r+0x1e>
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	1b5b      	subs	r3, r3, r5
 800b876:	d417      	bmi.n	800b8a8 <_malloc_r+0x8c>
 800b878:	2b0b      	cmp	r3, #11
 800b87a:	d903      	bls.n	800b884 <_malloc_r+0x68>
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	441c      	add	r4, r3
 800b880:	6025      	str	r5, [r4, #0]
 800b882:	e004      	b.n	800b88e <_malloc_r+0x72>
 800b884:	6863      	ldr	r3, [r4, #4]
 800b886:	42a2      	cmp	r2, r4
 800b888:	bf0c      	ite	eq
 800b88a:	600b      	streq	r3, [r1, #0]
 800b88c:	6053      	strne	r3, [r2, #4]
 800b88e:	4630      	mov	r0, r6
 800b890:	f000 f85a 	bl	800b948 <__malloc_unlock>
 800b894:	f104 000b 	add.w	r0, r4, #11
 800b898:	1d23      	adds	r3, r4, #4
 800b89a:	f020 0007 	bic.w	r0, r0, #7
 800b89e:	1ac2      	subs	r2, r0, r3
 800b8a0:	d0cc      	beq.n	800b83c <_malloc_r+0x20>
 800b8a2:	1a1b      	subs	r3, r3, r0
 800b8a4:	50a3      	str	r3, [r4, r2]
 800b8a6:	e7c9      	b.n	800b83c <_malloc_r+0x20>
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	6864      	ldr	r4, [r4, #4]
 800b8ac:	e7cc      	b.n	800b848 <_malloc_r+0x2c>
 800b8ae:	1cc4      	adds	r4, r0, #3
 800b8b0:	f024 0403 	bic.w	r4, r4, #3
 800b8b4:	42a0      	cmp	r0, r4
 800b8b6:	d0e3      	beq.n	800b880 <_malloc_r+0x64>
 800b8b8:	1a21      	subs	r1, r4, r0
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f000 f82e 	bl	800b91c <_sbrk_r>
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	d1dd      	bne.n	800b880 <_malloc_r+0x64>
 800b8c4:	e7cf      	b.n	800b866 <_malloc_r+0x4a>
 800b8c6:	bf00      	nop
 800b8c8:	20000348 	.word	0x20000348
 800b8cc:	2000034c 	.word	0x2000034c

0800b8d0 <_realloc_r>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	4607      	mov	r7, r0
 800b8d4:	4614      	mov	r4, r2
 800b8d6:	460e      	mov	r6, r1
 800b8d8:	b921      	cbnz	r1, 800b8e4 <_realloc_r+0x14>
 800b8da:	4611      	mov	r1, r2
 800b8dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8e0:	f7ff bf9c 	b.w	800b81c <_malloc_r>
 800b8e4:	b922      	cbnz	r2, 800b8f0 <_realloc_r+0x20>
 800b8e6:	f7ff ff4d 	bl	800b784 <_free_r>
 800b8ea:	4625      	mov	r5, r4
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8f0:	f000 f830 	bl	800b954 <_malloc_usable_size_r>
 800b8f4:	42a0      	cmp	r0, r4
 800b8f6:	d20f      	bcs.n	800b918 <_realloc_r+0x48>
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f7ff ff8e 	bl	800b81c <_malloc_r>
 800b900:	4605      	mov	r5, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	d0f2      	beq.n	800b8ec <_realloc_r+0x1c>
 800b906:	4631      	mov	r1, r6
 800b908:	4622      	mov	r2, r4
 800b90a:	f7ff ff13 	bl	800b734 <memcpy>
 800b90e:	4631      	mov	r1, r6
 800b910:	4638      	mov	r0, r7
 800b912:	f7ff ff37 	bl	800b784 <_free_r>
 800b916:	e7e9      	b.n	800b8ec <_realloc_r+0x1c>
 800b918:	4635      	mov	r5, r6
 800b91a:	e7e7      	b.n	800b8ec <_realloc_r+0x1c>

0800b91c <_sbrk_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	2300      	movs	r3, #0
 800b920:	4d05      	ldr	r5, [pc, #20]	; (800b938 <_sbrk_r+0x1c>)
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	f7f6 fc68 	bl	80021fc <_sbrk>
 800b92c:	1c43      	adds	r3, r0, #1
 800b92e:	d102      	bne.n	800b936 <_sbrk_r+0x1a>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	b103      	cbz	r3, 800b936 <_sbrk_r+0x1a>
 800b934:	6023      	str	r3, [r4, #0]
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	2000462c 	.word	0x2000462c

0800b93c <__malloc_lock>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__malloc_lock+0x8>)
 800b93e:	f000 b811 	b.w	800b964 <__retarget_lock_acquire_recursive>
 800b942:	bf00      	nop
 800b944:	20004634 	.word	0x20004634

0800b948 <__malloc_unlock>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__malloc_unlock+0x8>)
 800b94a:	f000 b80c 	b.w	800b966 <__retarget_lock_release_recursive>
 800b94e:	bf00      	nop
 800b950:	20004634 	.word	0x20004634

0800b954 <_malloc_usable_size_r>:
 800b954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b958:	1f18      	subs	r0, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	bfbc      	itt	lt
 800b95e:	580b      	ldrlt	r3, [r1, r0]
 800b960:	18c0      	addlt	r0, r0, r3
 800b962:	4770      	bx	lr

0800b964 <__retarget_lock_acquire_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_release_recursive>:
 800b966:	4770      	bx	lr

0800b968 <_init>:
 800b968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96a:	bf00      	nop
 800b96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b96e:	bc08      	pop	{r3}
 800b970:	469e      	mov	lr, r3
 800b972:	4770      	bx	lr

0800b974 <_fini>:
 800b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b976:	bf00      	nop
 800b978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97a:	bc08      	pop	{r3}
 800b97c:	469e      	mov	lr, r3
 800b97e:	4770      	bx	lr
