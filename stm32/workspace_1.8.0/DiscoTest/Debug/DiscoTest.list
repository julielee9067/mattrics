
DiscoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f18  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003128  08003128  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003130  08003130  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  080031a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080031a8  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b78  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e82  00000000  00000000  00029c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001610f  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d60  00000000  00000000  00042b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083517  00000000  00000000  0004b867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ced7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000258c  00000000  00000000  000cedd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	0800303c 	.word	0x0800303c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	0800303c 	.word	0x0800303c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <Ringbuf_init+0x38>)
 800047a:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <Ringbuf_init+0x3c>)
 800047c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800047e:	4b0d      	ldr	r3, [pc, #52]	; (80004b4 <Ringbuf_init+0x40>)
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <Ringbuf_init+0x44>)
 8000482:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <Ringbuf_init+0x48>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <Ringbuf_init+0x48>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f042 0201 	orr.w	r2, r2, #1
 8000492:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000494:	4b09      	ldr	r3, [pc, #36]	; (80004bc <Ringbuf_init+0x48>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68da      	ldr	r2, [r3, #12]
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <Ringbuf_init+0x48>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f042 0220 	orr.w	r2, r2, #32
 80004a2:	60da      	str	r2, [r3, #12]
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr
 80004ac:	2000012c 	.word	0x2000012c
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	20000128 	.word	0x20000128
 80004b8:	200000d4 	.word	0x200000d4
 80004bc:	20000130 	.word	0x20000130

080004c0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	6039      	str	r1, [r7, #0]
 80004ca:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d0:	3301      	adds	r3, #1
 80004d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	429a      	cmp	r2, r3
 80004e0:	d007      	beq.n	80004f2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	79f9      	ldrb	r1, [r7, #7]
 80004ea:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <Uart_write>:
    return c;
  }
}

void Uart_write(int c)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	db21      	blt.n	800054e <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800050a:	4b13      	ldr	r3, [pc, #76]	; (8000558 <Uart_write+0x5c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	3301      	adds	r3, #1
 8000512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000516:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000518:	bf00      	nop
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <Uart_write+0x5c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	429a      	cmp	r2, r3
 8000524:	d0f9      	beq.n	800051a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <Uart_write+0x5c>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <Uart_write+0x5c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	b2c9      	uxtb	r1, r1
 8000534:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <Uart_write+0x5c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <Uart_write+0x60>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68da      	ldr	r2, [r3, #12]
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <Uart_write+0x60>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800054c:	60da      	str	r2, [r3, #12]
	}
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000128 	.word	0x20000128
 800055c:	20000130 	.word	0x20000130

08000560 <Uart_sendstring>:
{
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
}

void Uart_sendstring (const char *s)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000568:	e006      	b.n	8000578 <Uart_sendstring+0x18>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	1c5a      	adds	r2, r3, #1
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ffc2 	bl	80004fc <Uart_write>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1f4      	bne.n	800056a <Uart_sendstring+0xa>
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	f003 0320 	and.w	r3, r3, #32
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d013      	beq.n	80005d6 <Uart_isr+0x4a>
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d00e      	beq.n	80005d6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <Uart_isr+0xac>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff76 	bl	80004c0 <store_char>
        return;
 80005d4:	e02c      	b.n	8000630 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d027      	beq.n	8000630 <Uart_isr+0xa4>
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d022      	beq.n	8000630 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <Uart_isr+0xb0>)
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <Uart_isr+0xb0>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d108      	bne.n	8000608 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	68da      	ldr	r2, [r3, #12]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000604:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8000606:	e012      	b.n	800062e <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <Uart_isr+0xb0>)
 800060a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <Uart_isr+0xb0>)
 800060e:	5cd3      	ldrb	r3, [r2, r3]
 8000610:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <Uart_isr+0xb0>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	3301      	adds	r3, #1
 8000618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <Uart_isr+0xb0>)
 800061e:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	7bba      	ldrb	r2, [r7, #14]
 800062c:	605a      	str	r2, [r3, #4]
    	return;
 800062e:	bf00      	nop
    }
}
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000012c 	.word	0x2000012c
 800063c:	200000d4 	.word	0x200000d4

08000640 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000648:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800064c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d013      	beq.n	8000680 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000658:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800065c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000660:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000664:	2b00      	cmp	r3, #0
 8000666:	d00b      	beq.n	8000680 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000668:	e000      	b.n	800066c <ITM_SendChar+0x2c>
    {
      __NOP();
 800066a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f9      	beq.n	800066a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000676:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <wifi_initialization>:
extern void Uart_isr (UART_HandleTypeDef *huart);

//uint16_t Loop = 0;
//uint16_t Data = 0;

void wifi_initialization() {
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	Uart_sendstring("AT+RST\r\n");
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <wifi_initialization+0x14>)
 8000692:	f7ff ff65 	bl	8000560 <Uart_sendstring>
	printf("RESETTING..\r\n");
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <wifi_initialization+0x18>)
 8000698:	f002 f87c 	bl	8002794 <puts>
//	Uart_sendstring("AT\r\n");
//	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
//	printf("AT---->OK\n\n");
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	08003054 	.word	0x08003054
 80006a4:	08003060 	.word	0x08003060

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fa47 	bl	8000b3e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f820 	bl	80006f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <main+0x40>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f893 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006be:	f000 f867 	bl	8000790 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 80006c2:	f7ff fed7 	bl	8000474 <Ringbuf_init>
  wifi_initialization();
 80006c6:	f7ff ffe1 	bl	800068c <wifi_initialization>
  printf("Initialization Done \r\n");
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <main+0x44>)
 80006cc:	f002 f862 	bl	8002794 <puts>
  ITM_Port32(31) = 2; // change value of same port from 1 to 2
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <main+0x40>)
 80006d2:	2202      	movs	r2, #2
 80006d4:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("I'm in the main loop!\r\n");
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <main+0x48>)
 80006d8:	f002 f85c 	bl	8002794 <puts>
	  HAL_Delay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fa9c 	bl	8000c1c <HAL_Delay>
	  printf("I'm in the main loop!\r\n");
 80006e4:	e7f7      	b.n	80006d6 <main+0x2e>
 80006e6:	bf00      	nop
 80006e8:	e000007c 	.word	0xe000007c
 80006ec:	08003070 	.word	0x08003070
 80006f0:	08003088 	.word	0x08003088

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b092      	sub	sp, #72	; 0x48
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 ffd0 	bl	80026a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemClock_Config+0x98>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800071e:	4a1b      	ldr	r2, [pc, #108]	; (800078c <SystemClock_Config+0x98>)
 8000720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000724:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072a:	2301      	movs	r3, #1
 800072c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2310      	movs	r3, #16
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800073a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800073e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000744:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fd94 	bl	8001278 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000756:	f000 f88f 	bl	8000878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2303      	movs	r3, #3
 8000760:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2101      	movs	r1, #1
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f8b0 	bl	80018d8 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800077e:	f000 f87b 	bl	8000878 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3748      	adds	r7, #72	; 0x48
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40007000 	.word	0x40007000

08000790 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 8000796:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_USART2_UART_Init+0x50>)
 8000798:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 800079c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007b4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007b8:	220c      	movs	r2, #12
 80007ba:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_USART2_UART_Init+0x4c>)
 80007ca:	f001 faf1 	bl	8001db0 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80007d4:	f000 f850 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000130 	.word	0x20000130
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_GPIO_Init+0x58>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_GPIO_Init+0x58>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	61d3      	str	r3, [r2, #28]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_GPIO_Init+0x58>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_GPIO_Init+0x58>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a0d      	ldr	r2, [pc, #52]	; (800083c <MX_GPIO_Init+0x58>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_GPIO_Init+0x58>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_GPIO_Init+0x58>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <MX_GPIO_Init+0x58>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_GPIO_Init+0x58>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40023800 	.word	0x40023800

08000840 <_write>:

/* USER CODE BEGIN 4 */
// Use GCC for printf
// Avoid wasting a UART terminal just for writing
int _write(int file, char *ptr, int len) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	e009      	b.n	8000866 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	60ba      	str	r2, [r7, #8]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fef0 	bl	8000640 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	3301      	adds	r3, #1
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	697a      	ldr	r2, [r7, #20]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbf1      	blt.n	8000852 <_write+0x12>
	}
	return len;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_MspInit+0x58>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <HAL_MspInit+0x58>)
 8000890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000894:	6253      	str	r3, [r2, #36]	; 0x24
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_MspInit+0x58>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_MspInit+0x58>)
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_MspInit+0x58>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6213      	str	r3, [r2, #32]
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_MspInit+0x58>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_MspInit+0x58>)
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_MspInit+0x58>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6253      	str	r3, [r2, #36]	; 0x24
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_MspInit+0x58>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <HAL_UART_MspInit+0x8c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12f      	bne.n	8000962 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000902:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_UART_MspInit+0x90>)
 8000904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000906:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <HAL_UART_MspInit+0x90>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6253      	str	r3, [r2, #36]	; 0x24
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_UART_MspInit+0x90>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_UART_MspInit+0x90>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_UART_MspInit+0x90>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_UART_MspInit+0x90>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <HAL_UART_MspInit+0x94>)
 800094e:	f000 fb13 	bl	8000f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2026      	movs	r0, #38	; 0x26
 8000958:	f000 fa59 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095c:	2026      	movs	r0, #38	; 0x26
 800095e:	f000 fa72 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40004400 	.word	0x40004400
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f911 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr (&huart2);
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <USART2_IRQHandler+0x14>)
 80009ce:	f7ff fddd 	bl	800058c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <USART2_IRQHandler+0x14>)
 80009d4:	f001 fa3a 	bl	8001e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000130 	.word	0x20000130

080009e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	e00a      	b.n	8000a08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009f2:	f3af 8000 	nop.w
 80009f6:	4601      	mov	r1, r0
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	60ba      	str	r2, [r7, #8]
 80009fe:	b2ca      	uxtb	r2, r1
 8000a00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf0      	blt.n	80009f2 <_read+0x12>
	}

return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
	return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a40:	605a      	str	r2, [r3, #4]
	return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	return 0;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f001 fdd2 	bl	8002654 <__errno>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20008000 	.word	0x20008000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000011c 	.word	0x2000011c
 8000ae4:	20000188 	.word	0x20000188

08000ae8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af6:	490d      	ldr	r1, [pc, #52]	; (8000b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000afc:	e002      	b.n	8000b04 <LoopCopyDataInit>

08000afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b02:	3304      	adds	r3, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b08:	d3f9      	bcc.n	8000afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b0c:	4c0a      	ldr	r4, [pc, #40]	; (8000b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b10:	e001      	b.n	8000b16 <LoopFillZerobss>

08000b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b14:	3204      	adds	r2, #4

08000b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b18:	d3fb      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1a:	f7ff ffe5 	bl	8000ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f001 fd9f 	bl	8002660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b22:	f7ff fdc1 	bl	80006a8 <main>
  bx lr
 8000b26:	4770      	bx	lr
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b30:	08003138 	.word	0x08003138
  ldr r2, =_sbss
 8000b34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b38:	20000188 	.word	0x20000188

08000b3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC1_IRQHandler>

08000b3e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b082      	sub	sp, #8
 8000b42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f000 f955 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4e:	200f      	movs	r0, #15
 8000b50:	f000 f80e 	bl	8000b70 <HAL_InitTick>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d002      	beq.n	8000b60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	e001      	b.n	8000b64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b60:	f7ff fe90 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d022      	beq.n	8000bca <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_InitTick+0x6c>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <HAL_InitTick+0x68>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f962 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d10f      	bne.n	8000bc4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d809      	bhi.n	8000bbe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000baa:	2200      	movs	r2, #0
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	f000 f92c 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x70>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e004      	b.n	8000bce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e001      	b.n	8000bce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x20>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <HAL_IncTick+0x1c>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000174 	.word	0x20000174
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_GetTick+0x10>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	20000174 	.word	0x20000174

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff fff0 	bl	8000c08 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d004      	beq.n	8000c40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_Delay+0x40>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c40:	bf00      	nop
 8000c42:	f7ff ffe1 	bl	8000c08 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d8f7      	bhi.n	8000c42 <HAL_Delay+0x26>
  {
  }
}
 8000c52:	bf00      	nop
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <__NVIC_EnableIRQ+0x34>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Config>:
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff90 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff2d 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff42 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff35 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d008      	beq.n	8000ea4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e022      	b.n	8000eea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 020e 	bic.w	r2, r2, #14
 8000eb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0201 	bic.w	r2, r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	f003 021c 	and.w	r2, r3, #28
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d005      	beq.n	8000f18 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e029      	b.n	8000f6c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 020e 	bic.w	r2, r2, #14
 8000f26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0201 	bic.w	r2, r2, #1
 8000f36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f003 021c 	and.w	r2, r3, #28
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f44:	2101      	movs	r1, #1
 8000f46:	fa01 f202 	lsl.w	r2, r1, r2
 8000f4a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	4798      	blx	r3
    }
  }
  return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f8e:	e154      	b.n	800123a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8146 	beq.w	8001234 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80a0 	beq.w	8001234 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b58      	ldr	r3, [pc, #352]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4a57      	ldr	r2, [pc, #348]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6213      	str	r3, [r2, #32]
 8001100:	4b55      	ldr	r3, [pc, #340]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800110c:	4a53      	ldr	r2, [pc, #332]	; (800125c <HAL_GPIO_Init+0x2e4>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x2e8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d019      	beq.n	800116c <HAL_GPIO_Init+0x1f4>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x2ec>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d013      	beq.n	8001168 <HAL_GPIO_Init+0x1f0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a49      	ldr	r2, [pc, #292]	; (8001268 <HAL_GPIO_Init+0x2f0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2f4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a47      	ldr	r2, [pc, #284]	; (8001270 <HAL_GPIO_Init+0x2f8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1e4>
 8001158:	2304      	movs	r3, #4
 800115a:	e008      	b.n	800116e <HAL_GPIO_Init+0x1f6>
 800115c:	2305      	movs	r3, #5
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1f6>
 8001160:	2303      	movs	r3, #3
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x1f6>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x1f6>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x1f6>
 800116c:	2300      	movs	r3, #0
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800117e:	4937      	ldr	r1, [pc, #220]	; (800125c <HAL_GPIO_Init+0x2e4>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011b0:	4a30      	ldr	r2, [pc, #192]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <HAL_GPIO_Init+0x2fc>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	f47f aea3 	bne.w	8000f90 <HAL_GPIO_Init+0x18>
  }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40010000 	.word	0x40010000
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40010400 	.word	0x40010400

08001278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e31d      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4b94      	ldr	r3, [pc, #592]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001294:	4b91      	ldr	r3, [pc, #580]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d07b      	beq.n	80013a2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d006      	beq.n	80012be <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b0c      	cmp	r3, #12
 80012b4:	d10f      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5e>
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d10b      	bne.n	80012d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012be:	4b87      	ldr	r3, [pc, #540]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d06a      	beq.n	80013a0 <HAL_RCC_OscConfig+0x128>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d166      	bne.n	80013a0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e2f7      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x74>
 80012de:	4b7f      	ldr	r3, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7e      	ldr	r2, [pc, #504]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e02d      	b.n	8001348 <HAL_RCC_OscConfig+0xd0>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10c      	bne.n	800130e <HAL_RCC_OscConfig+0x96>
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a78      	ldr	r2, [pc, #480]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b76      	ldr	r3, [pc, #472]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a75      	ldr	r2, [pc, #468]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	e01c      	b.n	8001348 <HAL_RCC_OscConfig+0xd0>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b05      	cmp	r3, #5
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xb8>
 8001316:	4b71      	ldr	r3, [pc, #452]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a70      	ldr	r2, [pc, #448]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6d      	ldr	r2, [pc, #436]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd0>
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a69      	ldr	r2, [pc, #420]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b67      	ldr	r3, [pc, #412]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a66      	ldr	r2, [pc, #408]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc5a 	bl	8000c08 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc56 	bl	8000c08 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e2ad      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe0>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc46 	bl	8000c08 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc42 	bl	8000c08 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e299      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001392:	4b52      	ldr	r3, [pc, #328]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x108>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d05a      	beq.n	8001464 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d119      	bne.n	80013ee <HAL_RCC_OscConfig+0x176>
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d116      	bne.n	80013ee <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c0:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x160>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e276      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b40      	ldr	r3, [pc, #256]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	493d      	ldr	r1, [pc, #244]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ec:	e03a      	b.n	8001464 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d020      	beq.n	8001438 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <HAL_RCC_OscConfig+0x268>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fc:	f7ff fc04 	bl	8000c08 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fc00 	bl	8000c08 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e257      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	492a      	ldr	r1, [pc, #168]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001432:	4313      	orrs	r3, r2
 8001434:	604b      	str	r3, [r1, #4]
 8001436:	e015      	b.n	8001464 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001438:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <HAL_RCC_OscConfig+0x268>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fbe3 	bl	8000c08 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001446:	f7ff fbdf 	bl	8000c08 <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e236      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80b8 	beq.w	80015e2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d170      	bne.n	800155a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_OscConfig+0x218>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e21a      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800149c:	429a      	cmp	r2, r3
 800149e:	d921      	bls.n	80014e4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 fc23 	bl	8001cf0 <RCC_SetFlashLatencyFromMSIRange>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e208      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4906      	ldr	r1, [pc, #24]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	4901      	ldr	r1, [pc, #4]	; (80014dc <HAL_RCC_OscConfig+0x264>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
 80014da:	e020      	b.n	800151e <HAL_RCC_OscConfig+0x2a6>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e4:	4ba4      	ldr	r3, [pc, #656]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	49a1      	ldr	r1, [pc, #644]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	061b      	lsls	r3, r3, #24
 8001504:	499c      	ldr	r1, [pc, #624]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fbee 	bl	8001cf0 <RCC_SetFlashLatencyFromMSIRange>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1d3      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	0b5b      	lsrs	r3, r3, #13
 8001524:	3301      	adds	r3, #1
 8001526:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800152e:	4a92      	ldr	r2, [pc, #584]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001530:	6892      	ldr	r2, [r2, #8]
 8001532:	0912      	lsrs	r2, r2, #4
 8001534:	f002 020f 	and.w	r2, r2, #15
 8001538:	4990      	ldr	r1, [pc, #576]	; (800177c <HAL_RCC_OscConfig+0x504>)
 800153a:	5c8a      	ldrb	r2, [r1, r2]
 800153c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800153e:	4a90      	ldr	r2, [pc, #576]	; (8001780 <HAL_RCC_OscConfig+0x508>)
 8001540:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001542:	4b90      	ldr	r3, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0x50c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fb12 	bl	8000b70 <HAL_InitTick>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d045      	beq.n	80015e2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	e1b5      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d029      	beq.n	80015b6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001562:	4b89      	ldr	r3, [pc, #548]	; (8001788 <HAL_RCC_OscConfig+0x510>)
 8001564:	2201      	movs	r2, #1
 8001566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb4e 	bl	8000c08 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001570:	f7ff fb4a 	bl	8000c08 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1a1      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001582:	4b7d      	ldr	r3, [pc, #500]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0f0      	beq.n	8001570 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158e:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4977      	ldr	r1, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a0:	4b75      	ldr	r3, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4972      	ldr	r1, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]
 80015b4:	e015      	b.n	80015e2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015b6:	4b74      	ldr	r3, [pc, #464]	; (8001788 <HAL_RCC_OscConfig+0x510>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fb24 	bl	8000c08 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c4:	f7ff fb20 	bl	8000c08 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e177      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015d6:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d030      	beq.n	8001650 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d016      	beq.n	8001624 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f6:	4b65      	ldr	r3, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x514>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb04 	bl	8000c08 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fb00 	bl	8000c08 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e157      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001616:	4b58      	ldr	r3, [pc, #352]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x38c>
 8001622:	e015      	b.n	8001650 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001624:	4b59      	ldr	r3, [pc, #356]	; (800178c <HAL_RCC_OscConfig+0x514>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff faed 	bl	8000c08 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fae9 	bl	8000c08 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e140      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001644:	4b4c      	ldr	r3, [pc, #304]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 80b5 	beq.w	80017c8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001662:	4b45      	ldr	r3, [pc, #276]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b42      	ldr	r3, [pc, #264]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	4a41      	ldr	r2, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6253      	str	r3, [r2, #36]	; 0x24
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_OscConfig+0x518>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_RCC_OscConfig+0x518>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a3d      	ldr	r2, [pc, #244]	; (8001790 <HAL_RCC_OscConfig+0x518>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fab1 	bl	8000c08 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff faad 	bl	8000c08 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e104      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x518>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x466>
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016da:	6353      	str	r3, [r2, #52]	; 0x34
 80016dc:	e02d      	b.n	800173a <HAL_RCC_OscConfig+0x4c2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x488>
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	4a23      	ldr	r2, [pc, #140]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f0:	6353      	str	r3, [r2, #52]	; 0x34
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	4a20      	ldr	r2, [pc, #128]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 80016f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016fc:	6353      	str	r3, [r2, #52]	; 0x34
 80016fe:	e01c      	b.n	800173a <HAL_RCC_OscConfig+0x4c2>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b05      	cmp	r3, #5
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x4aa>
 8001708:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 800170a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170c:	4a1a      	ldr	r2, [pc, #104]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 800170e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001712:	6353      	str	r3, [r2, #52]	; 0x34
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6353      	str	r3, [r2, #52]	; 0x34
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x4c2>
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172c:	6353      	str	r3, [r2, #52]	; 0x34
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001738:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d015      	beq.n	800176e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fa61 	bl	8000c08 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa5d 	bl	8000c08 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0b2      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_RCC_OscConfig+0x500>)
 8001762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0ee      	beq.n	800174a <HAL_RCC_OscConfig+0x4d2>
 800176c:	e023      	b.n	80017b6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176e:	f7ff fa4b 	bl	8000c08 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001774:	e019      	b.n	80017aa <HAL_RCC_OscConfig+0x532>
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	080030ac 	.word	0x080030ac
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004
 8001788:	42470020 	.word	0x42470020
 800178c:	42470680 	.word	0x42470680
 8001790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fa38 	bl	8000c08 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e08d      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017aa:	4b49      	ldr	r3, [pc, #292]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 80017ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d079      	beq.n	80018c4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d056      	beq.n	8001884 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d13b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_OscConfig+0x65c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa10 	bl	8000c08 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fa0c 	bl	8000c08 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e063      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	4319      	orrs	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	430b      	orrs	r3, r1
 8001822:	492b      	ldr	r1, [pc, #172]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001828:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_RCC_OscConfig+0x65c>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f9eb 	bl	8000c08 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001836:	f7ff f9e7 	bl	8000c08 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e03e      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x5be>
 8001854:	e036      	b.n	80018c4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_RCC_OscConfig+0x65c>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185c:	f7ff f9d4 	bl	8000c08 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff f9d0 	bl	8000c08 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e027      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x5ec>
 8001882:	e01f      	b.n	80018c4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e01a      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <HAL_RCC_OscConfig+0x658>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d10d      	bne.n	80018c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	42470060 	.word	0x42470060

080018d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e11a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b8f      	ldr	r3, [pc, #572]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d919      	bls.n	800192e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_ClockConfig+0x34>
 8001900:	4b8a      	ldr	r3, [pc, #552]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a89      	ldr	r2, [pc, #548]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b87      	ldr	r3, [pc, #540]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 0201 	bic.w	r2, r3, #1
 8001914:	4985      	ldr	r1, [pc, #532]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191c:	4b83      	ldr	r3, [pc, #524]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0f9      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193a:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	497a      	ldr	r1, [pc, #488]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 808e 	beq.w	8001a76 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001962:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d121      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0d7      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d115      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0cb      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0bf      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0b7      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	495c      	ldr	r1, [pc, #368]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c4:	f7ff f920 	bl	8000c08 <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d112      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff f918 	bl	8000c08 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e09b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019ea:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_ClockConfig+0xfc>
 80019f6:	e03e      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d112      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f901 	bl	8000c08 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e084      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a18:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d1ee      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x12a>
 8001a24:	e027      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d11d      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a30:	f7ff f8ea 	bl	8000c08 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e06d      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d1ee      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x158>
 8001a52:	e010      	b.n	8001a76 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7ff f8d8 	bl	8000c08 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e05b      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ee      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d219      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x1be>
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0201 	bic.w	r2, r3, #1
 8001a9e:	4923      	ldr	r1, [pc, #140]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <HAL_RCC_ClockConfig+0x254>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e034      	b.n	8001b22 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4917      	ldr	r1, [pc, #92]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490f      	ldr	r1, [pc, #60]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f823 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <HAL_RCC_ClockConfig+0x258>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490b      	ldr	r1, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x25c>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_RCC_ClockConfig+0x264>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f82a 	bl	8000b70 <HAL_InitTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00
 8001b30:	40023800 	.word	0x40023800
 8001b34:	080030ac 	.word	0x080030ac
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	20000004 	.word	0x20000004

08001b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b0c      	cmp	r3, #12
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x30>
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d87c      	bhi.n	8001c54 <HAL_RCC_GetSysClockFreq+0x114>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0x24>
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x2a>
 8001b62:	e077      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b66:	613b      	str	r3, [r7, #16]
      break;
 8001b68:	e082      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b6a:	4b46      	ldr	r3, [pc, #280]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b6c:	613b      	str	r3, [r7, #16]
      break;
 8001b6e:	e07f      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	0c9b      	lsrs	r3, r3, #18
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	4a43      	ldr	r2, [pc, #268]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	0d9b      	lsrs	r3, r3, #22
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	3301      	adds	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01a      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	4939      	ldr	r1, [pc, #228]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ba0:	fb01 f003 	mul.w	r0, r1, r3
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	fb01 f102 	mul.w	r1, r1, r2
 8001baa:	1844      	adds	r4, r0, r1
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bae:	fba2 0101 	umull	r0, r1, r2, r1
 8001bb2:	1863      	adds	r3, r4, r1
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	f7fe fadd 	bl	800017c <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e040      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	461c      	mov	r4, r3
 8001bd0:	f04f 0500 	mov.w	r5, #0
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	014b      	lsls	r3, r1, #5
 8001be2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001be6:	0142      	lsls	r2, r0, #5
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	1b00      	subs	r0, r0, r4
 8001bee:	eb61 0105 	sbc.w	r1, r1, r5
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	018b      	lsls	r3, r1, #6
 8001bfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c00:	0182      	lsls	r2, r0, #6
 8001c02:	1a12      	subs	r2, r2, r0
 8001c04:	eb63 0301 	sbc.w	r3, r3, r1
 8001c08:	f04f 0000 	mov.w	r0, #0
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	00d9      	lsls	r1, r3, #3
 8001c12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c16:	00d0      	lsls	r0, r2, #3
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	1912      	adds	r2, r2, r4
 8001c1e:	eb45 0303 	adc.w	r3, r5, r3
 8001c22:	f04f 0000 	mov.w	r0, #0
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	0299      	lsls	r1, r3, #10
 8001c2c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c30:	0290      	lsls	r0, r2, #10
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe fa9b 	bl	800017c <__aeabi_uldivmod>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	613b      	str	r3, [r7, #16]
      break;
 8001c52:	e00d      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	0b5b      	lsrs	r3, r3, #13
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	613b      	str	r3, [r7, #16]
      break;
 8001c6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c70:	693b      	ldr	r3, [r7, #16]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	016e3600 	.word	0x016e3600
 8001c88:	080030a0 	.word	0x080030a0

08001c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c90:	4b02      	ldr	r3, [pc, #8]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca4:	f7ff fff2 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	080030bc 	.word	0x080030bc

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0adb      	lsrs	r3, r3, #11
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	080030bc 	.word	0x080030bc

08001cf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cfc:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12c      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d08:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e016      	b.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6253      	str	r3, [r2, #36]	; 0x24
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001d40:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d54:	d105      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001d5c:	d101      	bne.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001d5e:	2301      	movs	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	f043 0304 	orr.w	r3, r3, #4
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 0201 	bic.w	r2, r3, #1
 8001d7c:	490b      	ldr	r1, [pc, #44]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d001      	beq.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e03f      	b.n	8001e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fd82 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fb49 	bl	800248c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10d      	bne.n	8001e9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_UART_IRQHandler+0x52>
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa4f 	bl	800233a <UART_Receive_IT>
      return;
 8001e9c:	e17b      	b.n	8002196 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 80b1 	beq.w	8002008 <HAL_UART_IRQHandler+0x1bc>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d105      	bne.n	8001ebc <HAL_UART_IRQHandler+0x70>
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a6 	beq.w	8002008 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00a      	beq.n	8001edc <HAL_UART_IRQHandler+0x90>
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_UART_IRQHandler+0xb0>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f043 0202 	orr.w	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_UART_IRQHandler+0xd0>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f043 0204 	orr.w	r2, r3, #4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00f      	beq.n	8001f46 <HAL_UART_IRQHandler+0xfa>
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <HAL_UART_IRQHandler+0xee>
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f043 0208 	orr.w	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 811e 	beq.w	800218c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <HAL_UART_IRQHandler+0x11e>
 8001f5a:	6a3b      	ldr	r3, [r7, #32]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9e8 	bl	800233a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_UART_IRQHandler+0x146>
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d031      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f92a 	bl	80021ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d123      	bne.n	8001fee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d013      	beq.n	8001fe6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4a76      	ldr	r2, [pc, #472]	; (800219c <HAL_UART_IRQHandler+0x350>)
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ff92 	bl	8000ef4 <HAL_DMA_Abort_IT>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe4:	e00e      	b.n	8002004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8ec 	bl	80021c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fec:	e00a      	b.n	8002004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8e8 	bl	80021c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff4:	e006      	b.n	8002004 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8e4 	bl	80021c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002002:	e0c3      	b.n	800218c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002004:	bf00      	nop
    return;
 8002006:	e0c1      	b.n	800218c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 80a1 	bne.w	8002154 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 809b 	beq.w	8002154 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8095 	beq.w	8002154 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d14e      	bne.n	80020ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002058:	8a3b      	ldrh	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8098 	beq.w	8002190 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002064:	8a3a      	ldrh	r2, [r7, #16]
 8002066:	429a      	cmp	r2, r3
 8002068:	f080 8092 	bcs.w	8002190 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8a3a      	ldrh	r2, [r7, #16]
 8002070:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b20      	cmp	r3, #32
 800207a:	d02b      	beq.n	80020d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0210 	bic.w	r2, r2, #16
 80020c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fed3 	bl	8000e7a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020dc:	b29b      	uxth	r3, r3
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f876 	bl	80021d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020ea:	e051      	b.n	8002190 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d047      	beq.n	8002194 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002104:	8a7b      	ldrh	r3, [r7, #18]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d044      	beq.n	8002194 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002118:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0210 	bic.w	r2, r2, #16
 8002146:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002148:	8a7b      	ldrh	r3, [r7, #18]
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f842 	bl	80021d6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002152:	e01f      	b.n	8002194 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_UART_IRQHandler+0x324>
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f87f 	bl	800226c <UART_Transmit_IT>
    return;
 800216e:	e012      	b.n	8002196 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00d      	beq.n	8002196 <HAL_UART_IRQHandler+0x34a>
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8c0 	bl	800230a <UART_EndTransmit_IT>
    return;
 800218a:	e004      	b.n	8002196 <HAL_UART_IRQHandler+0x34a>
    return;
 800218c:	bf00      	nop
 800218e:	e002      	b.n	8002196 <HAL_UART_IRQHandler+0x34a>
      return;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <HAL_UART_IRQHandler+0x34a>
      return;
 8002194:	bf00      	nop
  }
}
 8002196:	3728      	adds	r7, #40	; 0x28
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	08002245 	.word	0x08002245

080021a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr

080021d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002202:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	2b01      	cmp	r3, #1
 800221a:	d107      	bne.n	800222c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0210 	bic.w	r2, r2, #16
 800222a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff ffb0 	bl	80021c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b21      	cmp	r3, #33	; 0x21
 800227e:	d13e      	bne.n	80022fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002288:	d114      	bne.n	80022b4 <UART_Transmit_IT+0x48>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d110      	bne.n	80022b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	1c9a      	adds	r2, r3, #2
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	621a      	str	r2, [r3, #32]
 80022b2:	e008      	b.n	80022c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	1c59      	adds	r1, r3, #1
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6211      	str	r1, [r2, #32]
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	4619      	mov	r1, r3
 80022d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10f      	bne.n	80022fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
  }
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff38 	bl	80021a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b22      	cmp	r3, #34	; 0x22
 800234c:	f040 8099 	bne.w	8002482 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002358:	d117      	bne.n	800238a <UART_Receive_IT+0x50>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	b29b      	uxth	r3, r3
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	b29a      	uxth	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
 8002388:	e026      	b.n	80023d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239c:	d007      	beq.n	80023ae <UART_Receive_IT+0x74>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <UART_Receive_IT+0x82>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	701a      	strb	r2, [r3, #0]
 80023ba:	e008      	b.n	80023ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4619      	mov	r1, r3
 80023e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d148      	bne.n	800247e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0220 	bic.w	r2, r2, #32
 80023fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800240a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	2b01      	cmp	r3, #1
 800242a:	d123      	bne.n	8002474 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0210 	bic.w	r2, r2, #16
 8002440:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d10a      	bne.n	8002466 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff feb2 	bl	80021d6 <HAL_UARTEx_RxEventCallback>
 8002472:	e002      	b.n	800247a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff fe9c 	bl	80021b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e002      	b.n	8002484 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80024cc:	f023 030c 	bic.w	r3, r3, #12
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	430b      	orrs	r3, r1
 80024d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a55      	ldr	r2, [pc, #340]	; (800264c <UART_SetConfig+0x1c0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d103      	bne.n	8002502 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024fa:	f7ff fbe5 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	e002      	b.n	8002508 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002502:	f7ff fbcd 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8002506:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002510:	d14c      	bne.n	80025ac <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	4a49      	ldr	r2, [pc, #292]	; (8002650 <UART_SetConfig+0x1c4>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	0119      	lsls	r1, r3, #4
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fbb2 f2f3 	udiv	r2, r2, r3
 8002548:	4b41      	ldr	r3, [pc, #260]	; (8002650 <UART_SetConfig+0x1c4>)
 800254a:	fba3 0302 	umull	r0, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2064      	movs	r0, #100	; 0x64
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	4a3c      	ldr	r2, [pc, #240]	; (8002650 <UART_SetConfig+0x1c4>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800256a:	4419      	add	r1, r3
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009a      	lsls	r2, r3, #2
 8002576:	441a      	add	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <UART_SetConfig+0x1c4>)
 8002584:	fba3 0302 	umull	r0, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2064      	movs	r0, #100	; 0x64
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3332      	adds	r3, #50	; 0x32
 8002596:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <UART_SetConfig+0x1c4>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	440a      	add	r2, r1
 80025a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025aa:	e04a      	b.n	8002642 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	009a      	lsls	r2, r3, #2
 80025b6:	441a      	add	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <UART_SetConfig+0x1c4>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	0119      	lsls	r1, r3, #4
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	009a      	lsls	r2, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <UART_SetConfig+0x1c4>)
 80025e4:	fba3 0302 	umull	r0, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2064      	movs	r0, #100	; 0x64
 80025ec:	fb00 f303 	mul.w	r3, r0, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	4a16      	ldr	r2, [pc, #88]	; (8002650 <UART_SetConfig+0x1c4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002602:	4419      	add	r1, r3
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009a      	lsls	r2, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	fbb2 f2f3 	udiv	r2, r2, r3
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <UART_SetConfig+0x1c4>)
 800261c:	fba3 0302 	umull	r0, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2064      	movs	r0, #100	; 0x64
 8002624:	fb00 f303 	mul.w	r3, r0, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <UART_SetConfig+0x1c4>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 020f 	and.w	r2, r3, #15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	440a      	add	r2, r1
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40013800 	.word	0x40013800
 8002650:	51eb851f 	.word	0x51eb851f

08002654 <__errno>:
 8002654:	4b01      	ldr	r3, [pc, #4]	; (800265c <__errno+0x8>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000000c 	.word	0x2000000c

08002660 <__libc_init_array>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	2600      	movs	r6, #0
 8002664:	4d0c      	ldr	r5, [pc, #48]	; (8002698 <__libc_init_array+0x38>)
 8002666:	4c0d      	ldr	r4, [pc, #52]	; (800269c <__libc_init_array+0x3c>)
 8002668:	1b64      	subs	r4, r4, r5
 800266a:	10a4      	asrs	r4, r4, #2
 800266c:	42a6      	cmp	r6, r4
 800266e:	d109      	bne.n	8002684 <__libc_init_array+0x24>
 8002670:	f000 fce4 	bl	800303c <_init>
 8002674:	2600      	movs	r6, #0
 8002676:	4d0a      	ldr	r5, [pc, #40]	; (80026a0 <__libc_init_array+0x40>)
 8002678:	4c0a      	ldr	r4, [pc, #40]	; (80026a4 <__libc_init_array+0x44>)
 800267a:	1b64      	subs	r4, r4, r5
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	42a6      	cmp	r6, r4
 8002680:	d105      	bne.n	800268e <__libc_init_array+0x2e>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	f855 3b04 	ldr.w	r3, [r5], #4
 8002688:	4798      	blx	r3
 800268a:	3601      	adds	r6, #1
 800268c:	e7ee      	b.n	800266c <__libc_init_array+0xc>
 800268e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002692:	4798      	blx	r3
 8002694:	3601      	adds	r6, #1
 8002696:	e7f2      	b.n	800267e <__libc_init_array+0x1e>
 8002698:	08003130 	.word	0x08003130
 800269c:	08003130 	.word	0x08003130
 80026a0:	08003130 	.word	0x08003130
 80026a4:	08003134 	.word	0x08003134

080026a8 <memset>:
 80026a8:	4603      	mov	r3, r0
 80026aa:	4402      	add	r2, r0
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d100      	bne.n	80026b2 <memset+0xa>
 80026b0:	4770      	bx	lr
 80026b2:	f803 1b01 	strb.w	r1, [r3], #1
 80026b6:	e7f9      	b.n	80026ac <memset+0x4>

080026b8 <_puts_r>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	460e      	mov	r6, r1
 80026bc:	4605      	mov	r5, r0
 80026be:	b118      	cbz	r0, 80026c8 <_puts_r+0x10>
 80026c0:	6983      	ldr	r3, [r0, #24]
 80026c2:	b90b      	cbnz	r3, 80026c8 <_puts_r+0x10>
 80026c4:	f000 fa48 	bl	8002b58 <__sinit>
 80026c8:	69ab      	ldr	r3, [r5, #24]
 80026ca:	68ac      	ldr	r4, [r5, #8]
 80026cc:	b913      	cbnz	r3, 80026d4 <_puts_r+0x1c>
 80026ce:	4628      	mov	r0, r5
 80026d0:	f000 fa42 	bl	8002b58 <__sinit>
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <_puts_r+0xd0>)
 80026d6:	429c      	cmp	r4, r3
 80026d8:	d120      	bne.n	800271c <_puts_r+0x64>
 80026da:	686c      	ldr	r4, [r5, #4]
 80026dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026de:	07db      	lsls	r3, r3, #31
 80026e0:	d405      	bmi.n	80026ee <_puts_r+0x36>
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	0598      	lsls	r0, r3, #22
 80026e6:	d402      	bmi.n	80026ee <_puts_r+0x36>
 80026e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ea:	f000 fad3 	bl	8002c94 <__retarget_lock_acquire_recursive>
 80026ee:	89a3      	ldrh	r3, [r4, #12]
 80026f0:	0719      	lsls	r1, r3, #28
 80026f2:	d51d      	bpl.n	8002730 <_puts_r+0x78>
 80026f4:	6923      	ldr	r3, [r4, #16]
 80026f6:	b1db      	cbz	r3, 8002730 <_puts_r+0x78>
 80026f8:	3e01      	subs	r6, #1
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002700:	3b01      	subs	r3, #1
 8002702:	60a3      	str	r3, [r4, #8]
 8002704:	bb39      	cbnz	r1, 8002756 <_puts_r+0x9e>
 8002706:	2b00      	cmp	r3, #0
 8002708:	da38      	bge.n	800277c <_puts_r+0xc4>
 800270a:	4622      	mov	r2, r4
 800270c:	210a      	movs	r1, #10
 800270e:	4628      	mov	r0, r5
 8002710:	f000 f848 	bl	80027a4 <__swbuf_r>
 8002714:	3001      	adds	r0, #1
 8002716:	d011      	beq.n	800273c <_puts_r+0x84>
 8002718:	250a      	movs	r5, #10
 800271a:	e011      	b.n	8002740 <_puts_r+0x88>
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <_puts_r+0xd4>)
 800271e:	429c      	cmp	r4, r3
 8002720:	d101      	bne.n	8002726 <_puts_r+0x6e>
 8002722:	68ac      	ldr	r4, [r5, #8]
 8002724:	e7da      	b.n	80026dc <_puts_r+0x24>
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <_puts_r+0xd8>)
 8002728:	429c      	cmp	r4, r3
 800272a:	bf08      	it	eq
 800272c:	68ec      	ldreq	r4, [r5, #12]
 800272e:	e7d5      	b.n	80026dc <_puts_r+0x24>
 8002730:	4621      	mov	r1, r4
 8002732:	4628      	mov	r0, r5
 8002734:	f000 f888 	bl	8002848 <__swsetup_r>
 8002738:	2800      	cmp	r0, #0
 800273a:	d0dd      	beq.n	80026f8 <_puts_r+0x40>
 800273c:	f04f 35ff 	mov.w	r5, #4294967295
 8002740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002742:	07da      	lsls	r2, r3, #31
 8002744:	d405      	bmi.n	8002752 <_puts_r+0x9a>
 8002746:	89a3      	ldrh	r3, [r4, #12]
 8002748:	059b      	lsls	r3, r3, #22
 800274a:	d402      	bmi.n	8002752 <_puts_r+0x9a>
 800274c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800274e:	f000 faa2 	bl	8002c96 <__retarget_lock_release_recursive>
 8002752:	4628      	mov	r0, r5
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	2b00      	cmp	r3, #0
 8002758:	da04      	bge.n	8002764 <_puts_r+0xac>
 800275a:	69a2      	ldr	r2, [r4, #24]
 800275c:	429a      	cmp	r2, r3
 800275e:	dc06      	bgt.n	800276e <_puts_r+0xb6>
 8002760:	290a      	cmp	r1, #10
 8002762:	d004      	beq.n	800276e <_puts_r+0xb6>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	6022      	str	r2, [r4, #0]
 800276a:	7019      	strb	r1, [r3, #0]
 800276c:	e7c5      	b.n	80026fa <_puts_r+0x42>
 800276e:	4622      	mov	r2, r4
 8002770:	4628      	mov	r0, r5
 8002772:	f000 f817 	bl	80027a4 <__swbuf_r>
 8002776:	3001      	adds	r0, #1
 8002778:	d1bf      	bne.n	80026fa <_puts_r+0x42>
 800277a:	e7df      	b.n	800273c <_puts_r+0x84>
 800277c:	250a      	movs	r5, #10
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	6022      	str	r2, [r4, #0]
 8002784:	701d      	strb	r5, [r3, #0]
 8002786:	e7db      	b.n	8002740 <_puts_r+0x88>
 8002788:	080030e8 	.word	0x080030e8
 800278c:	08003108 	.word	0x08003108
 8002790:	080030c8 	.word	0x080030c8

08002794 <puts>:
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <puts+0xc>)
 8002796:	4601      	mov	r1, r0
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	f7ff bf8d 	b.w	80026b8 <_puts_r>
 800279e:	bf00      	nop
 80027a0:	2000000c 	.word	0x2000000c

080027a4 <__swbuf_r>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	460e      	mov	r6, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	4605      	mov	r5, r0
 80027ac:	b118      	cbz	r0, 80027b6 <__swbuf_r+0x12>
 80027ae:	6983      	ldr	r3, [r0, #24]
 80027b0:	b90b      	cbnz	r3, 80027b6 <__swbuf_r+0x12>
 80027b2:	f000 f9d1 	bl	8002b58 <__sinit>
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <__swbuf_r+0x98>)
 80027b8:	429c      	cmp	r4, r3
 80027ba:	d12b      	bne.n	8002814 <__swbuf_r+0x70>
 80027bc:	686c      	ldr	r4, [r5, #4]
 80027be:	69a3      	ldr	r3, [r4, #24]
 80027c0:	60a3      	str	r3, [r4, #8]
 80027c2:	89a3      	ldrh	r3, [r4, #12]
 80027c4:	071a      	lsls	r2, r3, #28
 80027c6:	d52f      	bpl.n	8002828 <__swbuf_r+0x84>
 80027c8:	6923      	ldr	r3, [r4, #16]
 80027ca:	b36b      	cbz	r3, 8002828 <__swbuf_r+0x84>
 80027cc:	6923      	ldr	r3, [r4, #16]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	b2f6      	uxtb	r6, r6
 80027d2:	1ac0      	subs	r0, r0, r3
 80027d4:	6963      	ldr	r3, [r4, #20]
 80027d6:	4637      	mov	r7, r6
 80027d8:	4283      	cmp	r3, r0
 80027da:	dc04      	bgt.n	80027e6 <__swbuf_r+0x42>
 80027dc:	4621      	mov	r1, r4
 80027de:	4628      	mov	r0, r5
 80027e0:	f000 f926 	bl	8002a30 <_fflush_r>
 80027e4:	bb30      	cbnz	r0, 8002834 <__swbuf_r+0x90>
 80027e6:	68a3      	ldr	r3, [r4, #8]
 80027e8:	3001      	adds	r0, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60a3      	str	r3, [r4, #8]
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	6022      	str	r2, [r4, #0]
 80027f4:	701e      	strb	r6, [r3, #0]
 80027f6:	6963      	ldr	r3, [r4, #20]
 80027f8:	4283      	cmp	r3, r0
 80027fa:	d004      	beq.n	8002806 <__swbuf_r+0x62>
 80027fc:	89a3      	ldrh	r3, [r4, #12]
 80027fe:	07db      	lsls	r3, r3, #31
 8002800:	d506      	bpl.n	8002810 <__swbuf_r+0x6c>
 8002802:	2e0a      	cmp	r6, #10
 8002804:	d104      	bne.n	8002810 <__swbuf_r+0x6c>
 8002806:	4621      	mov	r1, r4
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f911 	bl	8002a30 <_fflush_r>
 800280e:	b988      	cbnz	r0, 8002834 <__swbuf_r+0x90>
 8002810:	4638      	mov	r0, r7
 8002812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <__swbuf_r+0x9c>)
 8002816:	429c      	cmp	r4, r3
 8002818:	d101      	bne.n	800281e <__swbuf_r+0x7a>
 800281a:	68ac      	ldr	r4, [r5, #8]
 800281c:	e7cf      	b.n	80027be <__swbuf_r+0x1a>
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <__swbuf_r+0xa0>)
 8002820:	429c      	cmp	r4, r3
 8002822:	bf08      	it	eq
 8002824:	68ec      	ldreq	r4, [r5, #12]
 8002826:	e7ca      	b.n	80027be <__swbuf_r+0x1a>
 8002828:	4621      	mov	r1, r4
 800282a:	4628      	mov	r0, r5
 800282c:	f000 f80c 	bl	8002848 <__swsetup_r>
 8002830:	2800      	cmp	r0, #0
 8002832:	d0cb      	beq.n	80027cc <__swbuf_r+0x28>
 8002834:	f04f 37ff 	mov.w	r7, #4294967295
 8002838:	e7ea      	b.n	8002810 <__swbuf_r+0x6c>
 800283a:	bf00      	nop
 800283c:	080030e8 	.word	0x080030e8
 8002840:	08003108 	.word	0x08003108
 8002844:	080030c8 	.word	0x080030c8

08002848 <__swsetup_r>:
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <__swsetup_r+0xcc>)
 800284a:	b570      	push	{r4, r5, r6, lr}
 800284c:	681d      	ldr	r5, [r3, #0]
 800284e:	4606      	mov	r6, r0
 8002850:	460c      	mov	r4, r1
 8002852:	b125      	cbz	r5, 800285e <__swsetup_r+0x16>
 8002854:	69ab      	ldr	r3, [r5, #24]
 8002856:	b913      	cbnz	r3, 800285e <__swsetup_r+0x16>
 8002858:	4628      	mov	r0, r5
 800285a:	f000 f97d 	bl	8002b58 <__sinit>
 800285e:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <__swsetup_r+0xd0>)
 8002860:	429c      	cmp	r4, r3
 8002862:	d10f      	bne.n	8002884 <__swsetup_r+0x3c>
 8002864:	686c      	ldr	r4, [r5, #4]
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800286c:	0719      	lsls	r1, r3, #28
 800286e:	d42c      	bmi.n	80028ca <__swsetup_r+0x82>
 8002870:	06dd      	lsls	r5, r3, #27
 8002872:	d411      	bmi.n	8002898 <__swsetup_r+0x50>
 8002874:	2309      	movs	r3, #9
 8002876:	6033      	str	r3, [r6, #0]
 8002878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	81a3      	strh	r3, [r4, #12]
 8002882:	e03e      	b.n	8002902 <__swsetup_r+0xba>
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <__swsetup_r+0xd4>)
 8002886:	429c      	cmp	r4, r3
 8002888:	d101      	bne.n	800288e <__swsetup_r+0x46>
 800288a:	68ac      	ldr	r4, [r5, #8]
 800288c:	e7eb      	b.n	8002866 <__swsetup_r+0x1e>
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <__swsetup_r+0xd8>)
 8002890:	429c      	cmp	r4, r3
 8002892:	bf08      	it	eq
 8002894:	68ec      	ldreq	r4, [r5, #12]
 8002896:	e7e6      	b.n	8002866 <__swsetup_r+0x1e>
 8002898:	0758      	lsls	r0, r3, #29
 800289a:	d512      	bpl.n	80028c2 <__swsetup_r+0x7a>
 800289c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800289e:	b141      	cbz	r1, 80028b2 <__swsetup_r+0x6a>
 80028a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028a4:	4299      	cmp	r1, r3
 80028a6:	d002      	beq.n	80028ae <__swsetup_r+0x66>
 80028a8:	4630      	mov	r0, r6
 80028aa:	f000 fa59 	bl	8002d60 <_free_r>
 80028ae:	2300      	movs	r3, #0
 80028b0:	6363      	str	r3, [r4, #52]	; 0x34
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028b8:	81a3      	strh	r3, [r4, #12]
 80028ba:	2300      	movs	r3, #0
 80028bc:	6063      	str	r3, [r4, #4]
 80028be:	6923      	ldr	r3, [r4, #16]
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	89a3      	ldrh	r3, [r4, #12]
 80028c4:	f043 0308 	orr.w	r3, r3, #8
 80028c8:	81a3      	strh	r3, [r4, #12]
 80028ca:	6923      	ldr	r3, [r4, #16]
 80028cc:	b94b      	cbnz	r3, 80028e2 <__swsetup_r+0x9a>
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d8:	d003      	beq.n	80028e2 <__swsetup_r+0x9a>
 80028da:	4621      	mov	r1, r4
 80028dc:	4630      	mov	r0, r6
 80028de:	f000 f9ff 	bl	8002ce0 <__smakebuf_r>
 80028e2:	89a0      	ldrh	r0, [r4, #12]
 80028e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80028e8:	f010 0301 	ands.w	r3, r0, #1
 80028ec:	d00a      	beq.n	8002904 <__swsetup_r+0xbc>
 80028ee:	2300      	movs	r3, #0
 80028f0:	60a3      	str	r3, [r4, #8]
 80028f2:	6963      	ldr	r3, [r4, #20]
 80028f4:	425b      	negs	r3, r3
 80028f6:	61a3      	str	r3, [r4, #24]
 80028f8:	6923      	ldr	r3, [r4, #16]
 80028fa:	b943      	cbnz	r3, 800290e <__swsetup_r+0xc6>
 80028fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002900:	d1ba      	bne.n	8002878 <__swsetup_r+0x30>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	0781      	lsls	r1, r0, #30
 8002906:	bf58      	it	pl
 8002908:	6963      	ldrpl	r3, [r4, #20]
 800290a:	60a3      	str	r3, [r4, #8]
 800290c:	e7f4      	b.n	80028f8 <__swsetup_r+0xb0>
 800290e:	2000      	movs	r0, #0
 8002910:	e7f7      	b.n	8002902 <__swsetup_r+0xba>
 8002912:	bf00      	nop
 8002914:	2000000c 	.word	0x2000000c
 8002918:	080030e8 	.word	0x080030e8
 800291c:	08003108 	.word	0x08003108
 8002920:	080030c8 	.word	0x080030c8

08002924 <__sflush_r>:
 8002924:	898a      	ldrh	r2, [r1, #12]
 8002926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800292a:	4605      	mov	r5, r0
 800292c:	0710      	lsls	r0, r2, #28
 800292e:	460c      	mov	r4, r1
 8002930:	d458      	bmi.n	80029e4 <__sflush_r+0xc0>
 8002932:	684b      	ldr	r3, [r1, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dc05      	bgt.n	8002944 <__sflush_r+0x20>
 8002938:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	dc02      	bgt.n	8002944 <__sflush_r+0x20>
 800293e:	2000      	movs	r0, #0
 8002940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002944:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002946:	2e00      	cmp	r6, #0
 8002948:	d0f9      	beq.n	800293e <__sflush_r+0x1a>
 800294a:	2300      	movs	r3, #0
 800294c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002950:	682f      	ldr	r7, [r5, #0]
 8002952:	602b      	str	r3, [r5, #0]
 8002954:	d032      	beq.n	80029bc <__sflush_r+0x98>
 8002956:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	075a      	lsls	r2, r3, #29
 800295c:	d505      	bpl.n	800296a <__sflush_r+0x46>
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	1ac0      	subs	r0, r0, r3
 8002962:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002964:	b10b      	cbz	r3, 800296a <__sflush_r+0x46>
 8002966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002968:	1ac0      	subs	r0, r0, r3
 800296a:	2300      	movs	r3, #0
 800296c:	4602      	mov	r2, r0
 800296e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002970:	4628      	mov	r0, r5
 8002972:	6a21      	ldr	r1, [r4, #32]
 8002974:	47b0      	blx	r6
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	d106      	bne.n	800298a <__sflush_r+0x66>
 800297c:	6829      	ldr	r1, [r5, #0]
 800297e:	291d      	cmp	r1, #29
 8002980:	d82c      	bhi.n	80029dc <__sflush_r+0xb8>
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <__sflush_r+0x108>)
 8002984:	40ca      	lsrs	r2, r1
 8002986:	07d6      	lsls	r6, r2, #31
 8002988:	d528      	bpl.n	80029dc <__sflush_r+0xb8>
 800298a:	2200      	movs	r2, #0
 800298c:	6062      	str	r2, [r4, #4]
 800298e:	6922      	ldr	r2, [r4, #16]
 8002990:	04d9      	lsls	r1, r3, #19
 8002992:	6022      	str	r2, [r4, #0]
 8002994:	d504      	bpl.n	80029a0 <__sflush_r+0x7c>
 8002996:	1c42      	adds	r2, r0, #1
 8002998:	d101      	bne.n	800299e <__sflush_r+0x7a>
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	b903      	cbnz	r3, 80029a0 <__sflush_r+0x7c>
 800299e:	6560      	str	r0, [r4, #84]	; 0x54
 80029a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029a2:	602f      	str	r7, [r5, #0]
 80029a4:	2900      	cmp	r1, #0
 80029a6:	d0ca      	beq.n	800293e <__sflush_r+0x1a>
 80029a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ac:	4299      	cmp	r1, r3
 80029ae:	d002      	beq.n	80029b6 <__sflush_r+0x92>
 80029b0:	4628      	mov	r0, r5
 80029b2:	f000 f9d5 	bl	8002d60 <_free_r>
 80029b6:	2000      	movs	r0, #0
 80029b8:	6360      	str	r0, [r4, #52]	; 0x34
 80029ba:	e7c1      	b.n	8002940 <__sflush_r+0x1c>
 80029bc:	6a21      	ldr	r1, [r4, #32]
 80029be:	2301      	movs	r3, #1
 80029c0:	4628      	mov	r0, r5
 80029c2:	47b0      	blx	r6
 80029c4:	1c41      	adds	r1, r0, #1
 80029c6:	d1c7      	bne.n	8002958 <__sflush_r+0x34>
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0c4      	beq.n	8002958 <__sflush_r+0x34>
 80029ce:	2b1d      	cmp	r3, #29
 80029d0:	d001      	beq.n	80029d6 <__sflush_r+0xb2>
 80029d2:	2b16      	cmp	r3, #22
 80029d4:	d101      	bne.n	80029da <__sflush_r+0xb6>
 80029d6:	602f      	str	r7, [r5, #0]
 80029d8:	e7b1      	b.n	800293e <__sflush_r+0x1a>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	81a3      	strh	r3, [r4, #12]
 80029e2:	e7ad      	b.n	8002940 <__sflush_r+0x1c>
 80029e4:	690f      	ldr	r7, [r1, #16]
 80029e6:	2f00      	cmp	r7, #0
 80029e8:	d0a9      	beq.n	800293e <__sflush_r+0x1a>
 80029ea:	0793      	lsls	r3, r2, #30
 80029ec:	bf18      	it	ne
 80029ee:	2300      	movne	r3, #0
 80029f0:	680e      	ldr	r6, [r1, #0]
 80029f2:	bf08      	it	eq
 80029f4:	694b      	ldreq	r3, [r1, #20]
 80029f6:	eba6 0807 	sub.w	r8, r6, r7
 80029fa:	600f      	str	r7, [r1, #0]
 80029fc:	608b      	str	r3, [r1, #8]
 80029fe:	f1b8 0f00 	cmp.w	r8, #0
 8002a02:	dd9c      	ble.n	800293e <__sflush_r+0x1a>
 8002a04:	4643      	mov	r3, r8
 8002a06:	463a      	mov	r2, r7
 8002a08:	4628      	mov	r0, r5
 8002a0a:	6a21      	ldr	r1, [r4, #32]
 8002a0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a0e:	47b0      	blx	r6
 8002a10:	2800      	cmp	r0, #0
 8002a12:	dc06      	bgt.n	8002a22 <__sflush_r+0xfe>
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a1e:	81a3      	strh	r3, [r4, #12]
 8002a20:	e78e      	b.n	8002940 <__sflush_r+0x1c>
 8002a22:	4407      	add	r7, r0
 8002a24:	eba8 0800 	sub.w	r8, r8, r0
 8002a28:	e7e9      	b.n	80029fe <__sflush_r+0xda>
 8002a2a:	bf00      	nop
 8002a2c:	20400001 	.word	0x20400001

08002a30 <_fflush_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	690b      	ldr	r3, [r1, #16]
 8002a34:	4605      	mov	r5, r0
 8002a36:	460c      	mov	r4, r1
 8002a38:	b913      	cbnz	r3, 8002a40 <_fflush_r+0x10>
 8002a3a:	2500      	movs	r5, #0
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	b118      	cbz	r0, 8002a4a <_fflush_r+0x1a>
 8002a42:	6983      	ldr	r3, [r0, #24]
 8002a44:	b90b      	cbnz	r3, 8002a4a <_fflush_r+0x1a>
 8002a46:	f000 f887 	bl	8002b58 <__sinit>
 8002a4a:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <_fflush_r+0x6c>)
 8002a4c:	429c      	cmp	r4, r3
 8002a4e:	d11b      	bne.n	8002a88 <_fflush_r+0x58>
 8002a50:	686c      	ldr	r4, [r5, #4]
 8002a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ef      	beq.n	8002a3a <_fflush_r+0xa>
 8002a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a5c:	07d0      	lsls	r0, r2, #31
 8002a5e:	d404      	bmi.n	8002a6a <_fflush_r+0x3a>
 8002a60:	0599      	lsls	r1, r3, #22
 8002a62:	d402      	bmi.n	8002a6a <_fflush_r+0x3a>
 8002a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a66:	f000 f915 	bl	8002c94 <__retarget_lock_acquire_recursive>
 8002a6a:	4628      	mov	r0, r5
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	f7ff ff59 	bl	8002924 <__sflush_r>
 8002a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a74:	4605      	mov	r5, r0
 8002a76:	07da      	lsls	r2, r3, #31
 8002a78:	d4e0      	bmi.n	8002a3c <_fflush_r+0xc>
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	059b      	lsls	r3, r3, #22
 8002a7e:	d4dd      	bmi.n	8002a3c <_fflush_r+0xc>
 8002a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a82:	f000 f908 	bl	8002c96 <__retarget_lock_release_recursive>
 8002a86:	e7d9      	b.n	8002a3c <_fflush_r+0xc>
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <_fflush_r+0x70>)
 8002a8a:	429c      	cmp	r4, r3
 8002a8c:	d101      	bne.n	8002a92 <_fflush_r+0x62>
 8002a8e:	68ac      	ldr	r4, [r5, #8]
 8002a90:	e7df      	b.n	8002a52 <_fflush_r+0x22>
 8002a92:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <_fflush_r+0x74>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	bf08      	it	eq
 8002a98:	68ec      	ldreq	r4, [r5, #12]
 8002a9a:	e7da      	b.n	8002a52 <_fflush_r+0x22>
 8002a9c:	080030e8 	.word	0x080030e8
 8002aa0:	08003108 	.word	0x08003108
 8002aa4:	080030c8 	.word	0x080030c8

08002aa8 <std>:
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
 8002aae:	e9c0 3300 	strd	r3, r3, [r0]
 8002ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab6:	6083      	str	r3, [r0, #8]
 8002ab8:	8181      	strh	r1, [r0, #12]
 8002aba:	6643      	str	r3, [r0, #100]	; 0x64
 8002abc:	81c2      	strh	r2, [r0, #14]
 8002abe:	6183      	str	r3, [r0, #24]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	305c      	adds	r0, #92	; 0x5c
 8002ac6:	f7ff fdef 	bl	80026a8 <memset>
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <std+0x38>)
 8002acc:	6224      	str	r4, [r4, #32]
 8002ace:	6263      	str	r3, [r4, #36]	; 0x24
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <std+0x3c>)
 8002ad2:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <std+0x40>)
 8002ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <std+0x44>)
 8002ada:	6323      	str	r3, [r4, #48]	; 0x30
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	bf00      	nop
 8002ae0:	08002ecd 	.word	0x08002ecd
 8002ae4:	08002eef 	.word	0x08002eef
 8002ae8:	08002f27 	.word	0x08002f27
 8002aec:	08002f4b 	.word	0x08002f4b

08002af0 <_cleanup_r>:
 8002af0:	4901      	ldr	r1, [pc, #4]	; (8002af8 <_cleanup_r+0x8>)
 8002af2:	f000 b8af 	b.w	8002c54 <_fwalk_reent>
 8002af6:	bf00      	nop
 8002af8:	08002a31 	.word	0x08002a31

08002afc <__sfmoreglue>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	2568      	movs	r5, #104	; 0x68
 8002b00:	1e4a      	subs	r2, r1, #1
 8002b02:	4355      	muls	r5, r2
 8002b04:	460e      	mov	r6, r1
 8002b06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002b0a:	f000 f975 	bl	8002df8 <_malloc_r>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	b140      	cbz	r0, 8002b24 <__sfmoreglue+0x28>
 8002b12:	2100      	movs	r1, #0
 8002b14:	e9c0 1600 	strd	r1, r6, [r0]
 8002b18:	300c      	adds	r0, #12
 8002b1a:	60a0      	str	r0, [r4, #8]
 8002b1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002b20:	f7ff fdc2 	bl	80026a8 <memset>
 8002b24:	4620      	mov	r0, r4
 8002b26:	bd70      	pop	{r4, r5, r6, pc}

08002b28 <__sfp_lock_acquire>:
 8002b28:	4801      	ldr	r0, [pc, #4]	; (8002b30 <__sfp_lock_acquire+0x8>)
 8002b2a:	f000 b8b3 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 8002b2e:	bf00      	nop
 8002b30:	20000180 	.word	0x20000180

08002b34 <__sfp_lock_release>:
 8002b34:	4801      	ldr	r0, [pc, #4]	; (8002b3c <__sfp_lock_release+0x8>)
 8002b36:	f000 b8ae 	b.w	8002c96 <__retarget_lock_release_recursive>
 8002b3a:	bf00      	nop
 8002b3c:	20000180 	.word	0x20000180

08002b40 <__sinit_lock_acquire>:
 8002b40:	4801      	ldr	r0, [pc, #4]	; (8002b48 <__sinit_lock_acquire+0x8>)
 8002b42:	f000 b8a7 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 8002b46:	bf00      	nop
 8002b48:	2000017b 	.word	0x2000017b

08002b4c <__sinit_lock_release>:
 8002b4c:	4801      	ldr	r0, [pc, #4]	; (8002b54 <__sinit_lock_release+0x8>)
 8002b4e:	f000 b8a2 	b.w	8002c96 <__retarget_lock_release_recursive>
 8002b52:	bf00      	nop
 8002b54:	2000017b 	.word	0x2000017b

08002b58 <__sinit>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	f7ff fff0 	bl	8002b40 <__sinit_lock_acquire>
 8002b60:	69a3      	ldr	r3, [r4, #24]
 8002b62:	b11b      	cbz	r3, 8002b6c <__sinit+0x14>
 8002b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b68:	f7ff bff0 	b.w	8002b4c <__sinit_lock_release>
 8002b6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b70:	6523      	str	r3, [r4, #80]	; 0x50
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <__sinit+0x68>)
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <__sinit+0x6c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b7a:	42a3      	cmp	r3, r4
 8002b7c:	bf08      	it	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	4620      	mov	r0, r4
 8002b82:	bf08      	it	eq
 8002b84:	61a3      	streq	r3, [r4, #24]
 8002b86:	f000 f81f 	bl	8002bc8 <__sfp>
 8002b8a:	6060      	str	r0, [r4, #4]
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f000 f81b 	bl	8002bc8 <__sfp>
 8002b92:	60a0      	str	r0, [r4, #8]
 8002b94:	4620      	mov	r0, r4
 8002b96:	f000 f817 	bl	8002bc8 <__sfp>
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2104      	movs	r1, #4
 8002b9e:	60e0      	str	r0, [r4, #12]
 8002ba0:	6860      	ldr	r0, [r4, #4]
 8002ba2:	f7ff ff81 	bl	8002aa8 <std>
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2109      	movs	r1, #9
 8002baa:	68a0      	ldr	r0, [r4, #8]
 8002bac:	f7ff ff7c 	bl	8002aa8 <std>
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	2112      	movs	r1, #18
 8002bb4:	68e0      	ldr	r0, [r4, #12]
 8002bb6:	f7ff ff77 	bl	8002aa8 <std>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61a3      	str	r3, [r4, #24]
 8002bbe:	e7d1      	b.n	8002b64 <__sinit+0xc>
 8002bc0:	080030c4 	.word	0x080030c4
 8002bc4:	08002af1 	.word	0x08002af1

08002bc8 <__sfp>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	4607      	mov	r7, r0
 8002bcc:	f7ff ffac 	bl	8002b28 <__sfp_lock_acquire>
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <__sfp+0x84>)
 8002bd2:	681e      	ldr	r6, [r3, #0]
 8002bd4:	69b3      	ldr	r3, [r6, #24]
 8002bd6:	b913      	cbnz	r3, 8002bde <__sfp+0x16>
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f7ff ffbd 	bl	8002b58 <__sinit>
 8002bde:	3648      	adds	r6, #72	; 0x48
 8002be0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	d503      	bpl.n	8002bf0 <__sfp+0x28>
 8002be8:	6833      	ldr	r3, [r6, #0]
 8002bea:	b30b      	cbz	r3, 8002c30 <__sfp+0x68>
 8002bec:	6836      	ldr	r6, [r6, #0]
 8002bee:	e7f7      	b.n	8002be0 <__sfp+0x18>
 8002bf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bf4:	b9d5      	cbnz	r5, 8002c2c <__sfp+0x64>
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <__sfp+0x88>)
 8002bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bfc:	60e3      	str	r3, [r4, #12]
 8002bfe:	6665      	str	r5, [r4, #100]	; 0x64
 8002c00:	f000 f847 	bl	8002c92 <__retarget_lock_init_recursive>
 8002c04:	f7ff ff96 	bl	8002b34 <__sfp_lock_release>
 8002c08:	2208      	movs	r2, #8
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002c14:	6025      	str	r5, [r4, #0]
 8002c16:	61a5      	str	r5, [r4, #24]
 8002c18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002c1c:	f7ff fd44 	bl	80026a8 <memset>
 8002c20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002c24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002c28:	4620      	mov	r0, r4
 8002c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2c:	3468      	adds	r4, #104	; 0x68
 8002c2e:	e7d9      	b.n	8002be4 <__sfp+0x1c>
 8002c30:	2104      	movs	r1, #4
 8002c32:	4638      	mov	r0, r7
 8002c34:	f7ff ff62 	bl	8002afc <__sfmoreglue>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	6030      	str	r0, [r6, #0]
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d1d5      	bne.n	8002bec <__sfp+0x24>
 8002c40:	f7ff ff78 	bl	8002b34 <__sfp_lock_release>
 8002c44:	230c      	movs	r3, #12
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	e7ee      	b.n	8002c28 <__sfp+0x60>
 8002c4a:	bf00      	nop
 8002c4c:	080030c4 	.word	0x080030c4
 8002c50:	ffff0001 	.word	0xffff0001

08002c54 <_fwalk_reent>:
 8002c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	4606      	mov	r6, r0
 8002c5a:	4688      	mov	r8, r1
 8002c5c:	2700      	movs	r7, #0
 8002c5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c66:	f1b9 0901 	subs.w	r9, r9, #1
 8002c6a:	d505      	bpl.n	8002c78 <_fwalk_reent+0x24>
 8002c6c:	6824      	ldr	r4, [r4, #0]
 8002c6e:	2c00      	cmp	r4, #0
 8002c70:	d1f7      	bne.n	8002c62 <_fwalk_reent+0xe>
 8002c72:	4638      	mov	r0, r7
 8002c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c78:	89ab      	ldrh	r3, [r5, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d907      	bls.n	8002c8e <_fwalk_reent+0x3a>
 8002c7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c82:	3301      	adds	r3, #1
 8002c84:	d003      	beq.n	8002c8e <_fwalk_reent+0x3a>
 8002c86:	4629      	mov	r1, r5
 8002c88:	4630      	mov	r0, r6
 8002c8a:	47c0      	blx	r8
 8002c8c:	4307      	orrs	r7, r0
 8002c8e:	3568      	adds	r5, #104	; 0x68
 8002c90:	e7e9      	b.n	8002c66 <_fwalk_reent+0x12>

08002c92 <__retarget_lock_init_recursive>:
 8002c92:	4770      	bx	lr

08002c94 <__retarget_lock_acquire_recursive>:
 8002c94:	4770      	bx	lr

08002c96 <__retarget_lock_release_recursive>:
 8002c96:	4770      	bx	lr

08002c98 <__swhatbuf_r>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	460e      	mov	r6, r1
 8002c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	b096      	sub	sp, #88	; 0x58
 8002ca8:	da07      	bge.n	8002cba <__swhatbuf_r+0x22>
 8002caa:	2300      	movs	r3, #0
 8002cac:	602b      	str	r3, [r5, #0]
 8002cae:	89b3      	ldrh	r3, [r6, #12]
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	d410      	bmi.n	8002cd6 <__swhatbuf_r+0x3e>
 8002cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb8:	e00e      	b.n	8002cd8 <__swhatbuf_r+0x40>
 8002cba:	466a      	mov	r2, sp
 8002cbc:	f000 f96c 	bl	8002f98 <_fstat_r>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	dbf2      	blt.n	8002caa <__swhatbuf_r+0x12>
 8002cc4:	9a01      	ldr	r2, [sp, #4]
 8002cc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cce:	425a      	negs	r2, r3
 8002cd0:	415a      	adcs	r2, r3
 8002cd2:	602a      	str	r2, [r5, #0]
 8002cd4:	e7ee      	b.n	8002cb4 <__swhatbuf_r+0x1c>
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	2000      	movs	r0, #0
 8002cda:	6023      	str	r3, [r4, #0]
 8002cdc:	b016      	add	sp, #88	; 0x58
 8002cde:	bd70      	pop	{r4, r5, r6, pc}

08002ce0 <__smakebuf_r>:
 8002ce0:	898b      	ldrh	r3, [r1, #12]
 8002ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ce4:	079d      	lsls	r5, r3, #30
 8002ce6:	4606      	mov	r6, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	d507      	bpl.n	8002cfc <__smakebuf_r+0x1c>
 8002cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002cf0:	6023      	str	r3, [r4, #0]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	6163      	str	r3, [r4, #20]
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd70      	pop	{r4, r5, r6, pc}
 8002cfc:	466a      	mov	r2, sp
 8002cfe:	ab01      	add	r3, sp, #4
 8002d00:	f7ff ffca 	bl	8002c98 <__swhatbuf_r>
 8002d04:	9900      	ldr	r1, [sp, #0]
 8002d06:	4605      	mov	r5, r0
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f000 f875 	bl	8002df8 <_malloc_r>
 8002d0e:	b948      	cbnz	r0, 8002d24 <__smakebuf_r+0x44>
 8002d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d14:	059a      	lsls	r2, r3, #22
 8002d16:	d4ef      	bmi.n	8002cf8 <__smakebuf_r+0x18>
 8002d18:	f023 0303 	bic.w	r3, r3, #3
 8002d1c:	f043 0302 	orr.w	r3, r3, #2
 8002d20:	81a3      	strh	r3, [r4, #12]
 8002d22:	e7e3      	b.n	8002cec <__smakebuf_r+0xc>
 8002d24:	4b0d      	ldr	r3, [pc, #52]	; (8002d5c <__smakebuf_r+0x7c>)
 8002d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	6020      	str	r0, [r4, #0]
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	81a3      	strh	r3, [r4, #12]
 8002d32:	9b00      	ldr	r3, [sp, #0]
 8002d34:	6120      	str	r0, [r4, #16]
 8002d36:	6163      	str	r3, [r4, #20]
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	b15b      	cbz	r3, 8002d54 <__smakebuf_r+0x74>
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d42:	f000 f93b 	bl	8002fbc <_isatty_r>
 8002d46:	b128      	cbz	r0, 8002d54 <__smakebuf_r+0x74>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	89a0      	ldrh	r0, [r4, #12]
 8002d56:	4305      	orrs	r5, r0
 8002d58:	81a5      	strh	r5, [r4, #12]
 8002d5a:	e7cd      	b.n	8002cf8 <__smakebuf_r+0x18>
 8002d5c:	08002af1 	.word	0x08002af1

08002d60 <_free_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4605      	mov	r5, r0
 8002d64:	2900      	cmp	r1, #0
 8002d66:	d043      	beq.n	8002df0 <_free_r+0x90>
 8002d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d6c:	1f0c      	subs	r4, r1, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bfb8      	it	lt
 8002d72:	18e4      	addlt	r4, r4, r3
 8002d74:	f000 f944 	bl	8003000 <__malloc_lock>
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <_free_r+0x94>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	b933      	cbnz	r3, 8002d8e <_free_r+0x2e>
 8002d80:	6063      	str	r3, [r4, #4]
 8002d82:	6014      	str	r4, [r2, #0]
 8002d84:	4628      	mov	r0, r5
 8002d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d8a:	f000 b93f 	b.w	800300c <__malloc_unlock>
 8002d8e:	42a3      	cmp	r3, r4
 8002d90:	d90a      	bls.n	8002da8 <_free_r+0x48>
 8002d92:	6821      	ldr	r1, [r4, #0]
 8002d94:	1862      	adds	r2, r4, r1
 8002d96:	4293      	cmp	r3, r2
 8002d98:	bf01      	itttt	eq
 8002d9a:	681a      	ldreq	r2, [r3, #0]
 8002d9c:	685b      	ldreq	r3, [r3, #4]
 8002d9e:	1852      	addeq	r2, r2, r1
 8002da0:	6022      	streq	r2, [r4, #0]
 8002da2:	6063      	str	r3, [r4, #4]
 8002da4:	6004      	str	r4, [r0, #0]
 8002da6:	e7ed      	b.n	8002d84 <_free_r+0x24>
 8002da8:	461a      	mov	r2, r3
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	b10b      	cbz	r3, 8002db2 <_free_r+0x52>
 8002dae:	42a3      	cmp	r3, r4
 8002db0:	d9fa      	bls.n	8002da8 <_free_r+0x48>
 8002db2:	6811      	ldr	r1, [r2, #0]
 8002db4:	1850      	adds	r0, r2, r1
 8002db6:	42a0      	cmp	r0, r4
 8002db8:	d10b      	bne.n	8002dd2 <_free_r+0x72>
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	4401      	add	r1, r0
 8002dbe:	1850      	adds	r0, r2, r1
 8002dc0:	4283      	cmp	r3, r0
 8002dc2:	6011      	str	r1, [r2, #0]
 8002dc4:	d1de      	bne.n	8002d84 <_free_r+0x24>
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4401      	add	r1, r0
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	6053      	str	r3, [r2, #4]
 8002dd0:	e7d8      	b.n	8002d84 <_free_r+0x24>
 8002dd2:	d902      	bls.n	8002dda <_free_r+0x7a>
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	602b      	str	r3, [r5, #0]
 8002dd8:	e7d4      	b.n	8002d84 <_free_r+0x24>
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	1821      	adds	r1, r4, r0
 8002dde:	428b      	cmp	r3, r1
 8002de0:	bf01      	itttt	eq
 8002de2:	6819      	ldreq	r1, [r3, #0]
 8002de4:	685b      	ldreq	r3, [r3, #4]
 8002de6:	1809      	addeq	r1, r1, r0
 8002de8:	6021      	streq	r1, [r4, #0]
 8002dea:	6063      	str	r3, [r4, #4]
 8002dec:	6054      	str	r4, [r2, #4]
 8002dee:	e7c9      	b.n	8002d84 <_free_r+0x24>
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	bf00      	nop
 8002df4:	20000120 	.word	0x20000120

08002df8 <_malloc_r>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	1ccd      	adds	r5, r1, #3
 8002dfc:	f025 0503 	bic.w	r5, r5, #3
 8002e00:	3508      	adds	r5, #8
 8002e02:	2d0c      	cmp	r5, #12
 8002e04:	bf38      	it	cc
 8002e06:	250c      	movcc	r5, #12
 8002e08:	2d00      	cmp	r5, #0
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	db01      	blt.n	8002e12 <_malloc_r+0x1a>
 8002e0e:	42a9      	cmp	r1, r5
 8002e10:	d903      	bls.n	8002e1a <_malloc_r+0x22>
 8002e12:	230c      	movs	r3, #12
 8002e14:	6033      	str	r3, [r6, #0]
 8002e16:	2000      	movs	r0, #0
 8002e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e1a:	f000 f8f1 	bl	8003000 <__malloc_lock>
 8002e1e:	4921      	ldr	r1, [pc, #132]	; (8002ea4 <_malloc_r+0xac>)
 8002e20:	680a      	ldr	r2, [r1, #0]
 8002e22:	4614      	mov	r4, r2
 8002e24:	b99c      	cbnz	r4, 8002e4e <_malloc_r+0x56>
 8002e26:	4f20      	ldr	r7, [pc, #128]	; (8002ea8 <_malloc_r+0xb0>)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b923      	cbnz	r3, 8002e36 <_malloc_r+0x3e>
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f000 f83c 	bl	8002eac <_sbrk_r>
 8002e34:	6038      	str	r0, [r7, #0]
 8002e36:	4629      	mov	r1, r5
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f000 f837 	bl	8002eac <_sbrk_r>
 8002e3e:	1c43      	adds	r3, r0, #1
 8002e40:	d123      	bne.n	8002e8a <_malloc_r+0x92>
 8002e42:	230c      	movs	r3, #12
 8002e44:	4630      	mov	r0, r6
 8002e46:	6033      	str	r3, [r6, #0]
 8002e48:	f000 f8e0 	bl	800300c <__malloc_unlock>
 8002e4c:	e7e3      	b.n	8002e16 <_malloc_r+0x1e>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	1b5b      	subs	r3, r3, r5
 8002e52:	d417      	bmi.n	8002e84 <_malloc_r+0x8c>
 8002e54:	2b0b      	cmp	r3, #11
 8002e56:	d903      	bls.n	8002e60 <_malloc_r+0x68>
 8002e58:	6023      	str	r3, [r4, #0]
 8002e5a:	441c      	add	r4, r3
 8002e5c:	6025      	str	r5, [r4, #0]
 8002e5e:	e004      	b.n	8002e6a <_malloc_r+0x72>
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	42a2      	cmp	r2, r4
 8002e64:	bf0c      	ite	eq
 8002e66:	600b      	streq	r3, [r1, #0]
 8002e68:	6053      	strne	r3, [r2, #4]
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f000 f8ce 	bl	800300c <__malloc_unlock>
 8002e70:	f104 000b 	add.w	r0, r4, #11
 8002e74:	1d23      	adds	r3, r4, #4
 8002e76:	f020 0007 	bic.w	r0, r0, #7
 8002e7a:	1ac2      	subs	r2, r0, r3
 8002e7c:	d0cc      	beq.n	8002e18 <_malloc_r+0x20>
 8002e7e:	1a1b      	subs	r3, r3, r0
 8002e80:	50a3      	str	r3, [r4, r2]
 8002e82:	e7c9      	b.n	8002e18 <_malloc_r+0x20>
 8002e84:	4622      	mov	r2, r4
 8002e86:	6864      	ldr	r4, [r4, #4]
 8002e88:	e7cc      	b.n	8002e24 <_malloc_r+0x2c>
 8002e8a:	1cc4      	adds	r4, r0, #3
 8002e8c:	f024 0403 	bic.w	r4, r4, #3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	d0e3      	beq.n	8002e5c <_malloc_r+0x64>
 8002e94:	1a21      	subs	r1, r4, r0
 8002e96:	4630      	mov	r0, r6
 8002e98:	f000 f808 	bl	8002eac <_sbrk_r>
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d1dd      	bne.n	8002e5c <_malloc_r+0x64>
 8002ea0:	e7cf      	b.n	8002e42 <_malloc_r+0x4a>
 8002ea2:	bf00      	nop
 8002ea4:	20000120 	.word	0x20000120
 8002ea8:	20000124 	.word	0x20000124

08002eac <_sbrk_r>:
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	2300      	movs	r3, #0
 8002eb0:	4d05      	ldr	r5, [pc, #20]	; (8002ec8 <_sbrk_r+0x1c>)
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	4608      	mov	r0, r1
 8002eb6:	602b      	str	r3, [r5, #0]
 8002eb8:	f7fd fde0 	bl	8000a7c <_sbrk>
 8002ebc:	1c43      	adds	r3, r0, #1
 8002ebe:	d102      	bne.n	8002ec6 <_sbrk_r+0x1a>
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	b103      	cbz	r3, 8002ec6 <_sbrk_r+0x1a>
 8002ec4:	6023      	str	r3, [r4, #0]
 8002ec6:	bd38      	pop	{r3, r4, r5, pc}
 8002ec8:	20000184 	.word	0x20000184

08002ecc <__sread>:
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	460c      	mov	r4, r1
 8002ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed4:	f000 f8a0 	bl	8003018 <_read_r>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	bfab      	itete	ge
 8002edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ede:	89a3      	ldrhlt	r3, [r4, #12]
 8002ee0:	181b      	addge	r3, r3, r0
 8002ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ee6:	bfac      	ite	ge
 8002ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eea:	81a3      	strhlt	r3, [r4, #12]
 8002eec:	bd10      	pop	{r4, pc}

08002eee <__swrite>:
 8002eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef2:	461f      	mov	r7, r3
 8002ef4:	898b      	ldrh	r3, [r1, #12]
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	460c      	mov	r4, r1
 8002efc:	4616      	mov	r6, r2
 8002efe:	d505      	bpl.n	8002f0c <__swrite+0x1e>
 8002f00:	2302      	movs	r3, #2
 8002f02:	2200      	movs	r2, #0
 8002f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f08:	f000 f868 	bl	8002fdc <_lseek_r>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	4632      	mov	r2, r6
 8002f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f14:	81a3      	strh	r3, [r4, #12]
 8002f16:	4628      	mov	r0, r5
 8002f18:	463b      	mov	r3, r7
 8002f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f22:	f000 b817 	b.w	8002f54 <_write_r>

08002f26 <__sseek>:
 8002f26:	b510      	push	{r4, lr}
 8002f28:	460c      	mov	r4, r1
 8002f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2e:	f000 f855 	bl	8002fdc <_lseek_r>
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	bf15      	itete	ne
 8002f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f42:	81a3      	strheq	r3, [r4, #12]
 8002f44:	bf18      	it	ne
 8002f46:	81a3      	strhne	r3, [r4, #12]
 8002f48:	bd10      	pop	{r4, pc}

08002f4a <__sclose>:
 8002f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4e:	f000 b813 	b.w	8002f78 <_close_r>
	...

08002f54 <_write_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4604      	mov	r4, r0
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4d05      	ldr	r5, [pc, #20]	; (8002f74 <_write_r+0x20>)
 8002f60:	602a      	str	r2, [r5, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f7fd fc6c 	bl	8000840 <_write>
 8002f68:	1c43      	adds	r3, r0, #1
 8002f6a:	d102      	bne.n	8002f72 <_write_r+0x1e>
 8002f6c:	682b      	ldr	r3, [r5, #0]
 8002f6e:	b103      	cbz	r3, 8002f72 <_write_r+0x1e>
 8002f70:	6023      	str	r3, [r4, #0]
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	20000184 	.word	0x20000184

08002f78 <_close_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	4d05      	ldr	r5, [pc, #20]	; (8002f94 <_close_r+0x1c>)
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd fd49 	bl	8000a1a <_close>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_close_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_close_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20000184 	.word	0x20000184

08002f98 <_fstat_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4d06      	ldr	r5, [pc, #24]	; (8002fb8 <_fstat_r+0x20>)
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	f7fd fd43 	bl	8000a30 <_fstat>
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d102      	bne.n	8002fb4 <_fstat_r+0x1c>
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	b103      	cbz	r3, 8002fb4 <_fstat_r+0x1c>
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	bd38      	pop	{r3, r4, r5, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000184 	.word	0x20000184

08002fbc <_isatty_r>:
 8002fbc:	b538      	push	{r3, r4, r5, lr}
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	4d05      	ldr	r5, [pc, #20]	; (8002fd8 <_isatty_r+0x1c>)
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	602b      	str	r3, [r5, #0]
 8002fc8:	f7fd fd41 	bl	8000a4e <_isatty>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_isatty_r+0x1a>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_isatty_r+0x1a>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000184 	.word	0x20000184

08002fdc <_lseek_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	4604      	mov	r4, r0
 8002fe0:	4608      	mov	r0, r1
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	4d05      	ldr	r5, [pc, #20]	; (8002ffc <_lseek_r+0x20>)
 8002fe8:	602a      	str	r2, [r5, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7fd fd39 	bl	8000a62 <_lseek>
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	d102      	bne.n	8002ffa <_lseek_r+0x1e>
 8002ff4:	682b      	ldr	r3, [r5, #0]
 8002ff6:	b103      	cbz	r3, 8002ffa <_lseek_r+0x1e>
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
 8002ffc:	20000184 	.word	0x20000184

08003000 <__malloc_lock>:
 8003000:	4801      	ldr	r0, [pc, #4]	; (8003008 <__malloc_lock+0x8>)
 8003002:	f7ff be47 	b.w	8002c94 <__retarget_lock_acquire_recursive>
 8003006:	bf00      	nop
 8003008:	2000017c 	.word	0x2000017c

0800300c <__malloc_unlock>:
 800300c:	4801      	ldr	r0, [pc, #4]	; (8003014 <__malloc_unlock+0x8>)
 800300e:	f7ff be42 	b.w	8002c96 <__retarget_lock_release_recursive>
 8003012:	bf00      	nop
 8003014:	2000017c 	.word	0x2000017c

08003018 <_read_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4604      	mov	r4, r0
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	2200      	movs	r2, #0
 8003022:	4d05      	ldr	r5, [pc, #20]	; (8003038 <_read_r+0x20>)
 8003024:	602a      	str	r2, [r5, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f7fd fcda 	bl	80009e0 <_read>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d102      	bne.n	8003036 <_read_r+0x1e>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	b103      	cbz	r3, 8003036 <_read_r+0x1e>
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	20000184 	.word	0x20000184

0800303c <_init>:
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303e:	bf00      	nop
 8003040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003042:	bc08      	pop	{r3}
 8003044:	469e      	mov	lr, r3
 8003046:	4770      	bx	lr

08003048 <_fini>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	bf00      	nop
 800304c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304e:	bc08      	pop	{r3}
 8003050:	469e      	mov	lr, r3
 8003052:	4770      	bx	lr
