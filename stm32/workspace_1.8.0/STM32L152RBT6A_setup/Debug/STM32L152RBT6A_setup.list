
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba34  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800bb70  0800bb70  0001bb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a4  0800c0a4  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a4  0800c0a4  0001c0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0ac  0800c0ac  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0ac  0800c0ac  0001c0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800c0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044e4  200000f0  0800c1a4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200045d4  0800c1a4  000245d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a51d  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003904  00000000  00000000  0003a636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001879b  00000000  00000000  00040560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019891  00000000  00000000  00058cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089df3  00000000  00000000  0007258c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fc37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f0  00000000  00000000  000fc3d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000f0 	.word	0x200000f0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800bb58 	.word	0x0800bb58

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000f4 	.word	0x200000f4
 8000178:	0800bb58 	.word	0x0800bb58

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_d2iz>:
 80004f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004fc:	d215      	bcs.n	800052a <__aeabi_d2iz+0x36>
 80004fe:	d511      	bpl.n	8000524 <__aeabi_d2iz+0x30>
 8000500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000508:	d912      	bls.n	8000530 <__aeabi_d2iz+0x3c>
 800050a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800050e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800051a:	fa23 f002 	lsr.w	r0, r3, r2
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	4770      	bx	lr
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	4770      	bx	lr
 800052a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800052e:	d105      	bne.n	800053c <__aeabi_d2iz+0x48>
 8000530:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000534:	bf08      	it	eq
 8000536:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295
 8000554:	f04f 30ff 	movne.w	r0, #4294967295
 8000558:	f000 b96e 	b.w	8000838 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f000 f806 	bl	8000574 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__udivmoddi4>:
 8000574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000578:	9e08      	ldr	r6, [sp, #32]
 800057a:	460d      	mov	r5, r1
 800057c:	4604      	mov	r4, r0
 800057e:	468e      	mov	lr, r1
 8000580:	2b00      	cmp	r3, #0
 8000582:	f040 8083 	bne.w	800068c <__udivmoddi4+0x118>
 8000586:	428a      	cmp	r2, r1
 8000588:	4617      	mov	r7, r2
 800058a:	d947      	bls.n	800061c <__udivmoddi4+0xa8>
 800058c:	fab2 f382 	clz	r3, r2
 8000590:	b14b      	cbz	r3, 80005a6 <__udivmoddi4+0x32>
 8000592:	f1c3 0120 	rsb	r1, r3, #32
 8000596:	fa05 fe03 	lsl.w	lr, r5, r3
 800059a:	fa20 f101 	lsr.w	r1, r0, r1
 800059e:	409f      	lsls	r7, r3
 80005a0:	ea41 0e0e 	orr.w	lr, r1, lr
 80005a4:	409c      	lsls	r4, r3
 80005a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005aa:	fbbe fcf8 	udiv	ip, lr, r8
 80005ae:	fa1f f987 	uxth.w	r9, r7
 80005b2:	fb08 e21c 	mls	r2, r8, ip, lr
 80005b6:	fb0c f009 	mul.w	r0, ip, r9
 80005ba:	0c21      	lsrs	r1, r4, #16
 80005bc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80005c0:	4290      	cmp	r0, r2
 80005c2:	d90a      	bls.n	80005da <__udivmoddi4+0x66>
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80005ca:	f080 8118 	bcs.w	80007fe <__udivmoddi4+0x28a>
 80005ce:	4290      	cmp	r0, r2
 80005d0:	f240 8115 	bls.w	80007fe <__udivmoddi4+0x28a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	443a      	add	r2, r7
 80005da:	1a12      	subs	r2, r2, r0
 80005dc:	fbb2 f0f8 	udiv	r0, r2, r8
 80005e0:	fb08 2210 	mls	r2, r8, r0, r2
 80005e4:	fb00 f109 	mul.w	r1, r0, r9
 80005e8:	b2a4      	uxth	r4, r4
 80005ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ee:	42a1      	cmp	r1, r4
 80005f0:	d909      	bls.n	8000606 <__udivmoddi4+0x92>
 80005f2:	193c      	adds	r4, r7, r4
 80005f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80005f8:	f080 8103 	bcs.w	8000802 <__udivmoddi4+0x28e>
 80005fc:	42a1      	cmp	r1, r4
 80005fe:	f240 8100 	bls.w	8000802 <__udivmoddi4+0x28e>
 8000602:	3802      	subs	r0, #2
 8000604:	443c      	add	r4, r7
 8000606:	1a64      	subs	r4, r4, r1
 8000608:	2100      	movs	r1, #0
 800060a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800060e:	b11e      	cbz	r6, 8000618 <__udivmoddi4+0xa4>
 8000610:	2200      	movs	r2, #0
 8000612:	40dc      	lsrs	r4, r3
 8000614:	e9c6 4200 	strd	r4, r2, [r6]
 8000618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061c:	b902      	cbnz	r2, 8000620 <__udivmoddi4+0xac>
 800061e:	deff      	udf	#255	; 0xff
 8000620:	fab2 f382 	clz	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d14f      	bne.n	80006c8 <__udivmoddi4+0x154>
 8000628:	1a8d      	subs	r5, r1, r2
 800062a:	2101      	movs	r1, #1
 800062c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000630:	fa1f f882 	uxth.w	r8, r2
 8000634:	fbb5 fcfe 	udiv	ip, r5, lr
 8000638:	fb0e 551c 	mls	r5, lr, ip, r5
 800063c:	fb08 f00c 	mul.w	r0, r8, ip
 8000640:	0c22      	lsrs	r2, r4, #16
 8000642:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000646:	42a8      	cmp	r0, r5
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0xe6>
 800064a:	197d      	adds	r5, r7, r5
 800064c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000650:	d202      	bcs.n	8000658 <__udivmoddi4+0xe4>
 8000652:	42a8      	cmp	r0, r5
 8000654:	f200 80e9 	bhi.w	800082a <__udivmoddi4+0x2b6>
 8000658:	4694      	mov	ip, r2
 800065a:	1a2d      	subs	r5, r5, r0
 800065c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000660:	fb0e 5510 	mls	r5, lr, r0, r5
 8000664:	fb08 f800 	mul.w	r8, r8, r0
 8000668:	b2a4      	uxth	r4, r4
 800066a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800066e:	45a0      	cmp	r8, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x10e>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f100 32ff 	add.w	r2, r0, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x10c>
 800067a:	45a0      	cmp	r8, r4
 800067c:	f200 80d9 	bhi.w	8000832 <__udivmoddi4+0x2be>
 8000680:	4610      	mov	r0, r2
 8000682:	eba4 0408 	sub.w	r4, r4, r8
 8000686:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800068a:	e7c0      	b.n	800060e <__udivmoddi4+0x9a>
 800068c:	428b      	cmp	r3, r1
 800068e:	d908      	bls.n	80006a2 <__udivmoddi4+0x12e>
 8000690:	2e00      	cmp	r6, #0
 8000692:	f000 80b1 	beq.w	80007f8 <__udivmoddi4+0x284>
 8000696:	2100      	movs	r1, #0
 8000698:	e9c6 0500 	strd	r0, r5, [r6]
 800069c:	4608      	mov	r0, r1
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	fab3 f183 	clz	r1, r3
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d14b      	bne.n	8000742 <__udivmoddi4+0x1ce>
 80006aa:	42ab      	cmp	r3, r5
 80006ac:	d302      	bcc.n	80006b4 <__udivmoddi4+0x140>
 80006ae:	4282      	cmp	r2, r0
 80006b0:	f200 80b9 	bhi.w	8000826 <__udivmoddi4+0x2b2>
 80006b4:	1a84      	subs	r4, r0, r2
 80006b6:	eb65 0303 	sbc.w	r3, r5, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	469e      	mov	lr, r3
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d0aa      	beq.n	8000618 <__udivmoddi4+0xa4>
 80006c2:	e9c6 4e00 	strd	r4, lr, [r6]
 80006c6:	e7a7      	b.n	8000618 <__udivmoddi4+0xa4>
 80006c8:	409f      	lsls	r7, r3
 80006ca:	f1c3 0220 	rsb	r2, r3, #32
 80006ce:	40d1      	lsrs	r1, r2
 80006d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d8:	fa1f f887 	uxth.w	r8, r7
 80006dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80006e0:	fa24 f202 	lsr.w	r2, r4, r2
 80006e4:	409d      	lsls	r5, r3
 80006e6:	fb00 fc08 	mul.w	ip, r0, r8
 80006ea:	432a      	orrs	r2, r5
 80006ec:	0c15      	lsrs	r5, r2, #16
 80006ee:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006f2:	45ac      	cmp	ip, r5
 80006f4:	fa04 f403 	lsl.w	r4, r4, r3
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0x19a>
 80006fa:	197d      	adds	r5, r7, r5
 80006fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000700:	f080 808f 	bcs.w	8000822 <__udivmoddi4+0x2ae>
 8000704:	45ac      	cmp	ip, r5
 8000706:	f240 808c 	bls.w	8000822 <__udivmoddi4+0x2ae>
 800070a:	3802      	subs	r0, #2
 800070c:	443d      	add	r5, r7
 800070e:	eba5 050c 	sub.w	r5, r5, ip
 8000712:	fbb5 f1fe 	udiv	r1, r5, lr
 8000716:	fb0e 5c11 	mls	ip, lr, r1, r5
 800071a:	fb01 f908 	mul.w	r9, r1, r8
 800071e:	b295      	uxth	r5, r2
 8000720:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000724:	45a9      	cmp	r9, r5
 8000726:	d907      	bls.n	8000738 <__udivmoddi4+0x1c4>
 8000728:	197d      	adds	r5, r7, r5
 800072a:	f101 32ff 	add.w	r2, r1, #4294967295
 800072e:	d274      	bcs.n	800081a <__udivmoddi4+0x2a6>
 8000730:	45a9      	cmp	r9, r5
 8000732:	d972      	bls.n	800081a <__udivmoddi4+0x2a6>
 8000734:	3902      	subs	r1, #2
 8000736:	443d      	add	r5, r7
 8000738:	eba5 0509 	sub.w	r5, r5, r9
 800073c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000740:	e778      	b.n	8000634 <__udivmoddi4+0xc0>
 8000742:	f1c1 0720 	rsb	r7, r1, #32
 8000746:	408b      	lsls	r3, r1
 8000748:	fa22 fc07 	lsr.w	ip, r2, r7
 800074c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000750:	fa25 f407 	lsr.w	r4, r5, r7
 8000754:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000758:	fbb4 f9fe 	udiv	r9, r4, lr
 800075c:	fa1f f88c 	uxth.w	r8, ip
 8000760:	fb0e 4419 	mls	r4, lr, r9, r4
 8000764:	fa20 f307 	lsr.w	r3, r0, r7
 8000768:	fb09 fa08 	mul.w	sl, r9, r8
 800076c:	408d      	lsls	r5, r1
 800076e:	431d      	orrs	r5, r3
 8000770:	0c2b      	lsrs	r3, r5, #16
 8000772:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000776:	45a2      	cmp	sl, r4
 8000778:	fa02 f201 	lsl.w	r2, r2, r1
 800077c:	fa00 f301 	lsl.w	r3, r0, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x222>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f109 30ff 	add.w	r0, r9, #4294967295
 800078a:	d248      	bcs.n	800081e <__udivmoddi4+0x2aa>
 800078c:	45a2      	cmp	sl, r4
 800078e:	d946      	bls.n	800081e <__udivmoddi4+0x2aa>
 8000790:	f1a9 0902 	sub.w	r9, r9, #2
 8000794:	4464      	add	r4, ip
 8000796:	eba4 040a 	sub.w	r4, r4, sl
 800079a:	fbb4 f0fe 	udiv	r0, r4, lr
 800079e:	fb0e 4410 	mls	r4, lr, r0, r4
 80007a2:	fb00 fa08 	mul.w	sl, r0, r8
 80007a6:	b2ad      	uxth	r5, r5
 80007a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007ac:	45a2      	cmp	sl, r4
 80007ae:	d908      	bls.n	80007c2 <__udivmoddi4+0x24e>
 80007b0:	eb1c 0404 	adds.w	r4, ip, r4
 80007b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80007b8:	d22d      	bcs.n	8000816 <__udivmoddi4+0x2a2>
 80007ba:	45a2      	cmp	sl, r4
 80007bc:	d92b      	bls.n	8000816 <__udivmoddi4+0x2a2>
 80007be:	3802      	subs	r0, #2
 80007c0:	4464      	add	r4, ip
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	fba0 8902 	umull	r8, r9, r0, r2
 80007ca:	eba4 040a 	sub.w	r4, r4, sl
 80007ce:	454c      	cmp	r4, r9
 80007d0:	46c6      	mov	lr, r8
 80007d2:	464d      	mov	r5, r9
 80007d4:	d319      	bcc.n	800080a <__udivmoddi4+0x296>
 80007d6:	d016      	beq.n	8000806 <__udivmoddi4+0x292>
 80007d8:	b15e      	cbz	r6, 80007f2 <__udivmoddi4+0x27e>
 80007da:	ebb3 020e 	subs.w	r2, r3, lr
 80007de:	eb64 0405 	sbc.w	r4, r4, r5
 80007e2:	fa04 f707 	lsl.w	r7, r4, r7
 80007e6:	fa22 f301 	lsr.w	r3, r2, r1
 80007ea:	431f      	orrs	r7, r3
 80007ec:	40cc      	lsrs	r4, r1
 80007ee:	e9c6 7400 	strd	r7, r4, [r6]
 80007f2:	2100      	movs	r1, #0
 80007f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f8:	4631      	mov	r1, r6
 80007fa:	4630      	mov	r0, r6
 80007fc:	e70c      	b.n	8000618 <__udivmoddi4+0xa4>
 80007fe:	468c      	mov	ip, r1
 8000800:	e6eb      	b.n	80005da <__udivmoddi4+0x66>
 8000802:	4610      	mov	r0, r2
 8000804:	e6ff      	b.n	8000606 <__udivmoddi4+0x92>
 8000806:	4543      	cmp	r3, r8
 8000808:	d2e6      	bcs.n	80007d8 <__udivmoddi4+0x264>
 800080a:	ebb8 0e02 	subs.w	lr, r8, r2
 800080e:	eb69 050c 	sbc.w	r5, r9, ip
 8000812:	3801      	subs	r0, #1
 8000814:	e7e0      	b.n	80007d8 <__udivmoddi4+0x264>
 8000816:	4628      	mov	r0, r5
 8000818:	e7d3      	b.n	80007c2 <__udivmoddi4+0x24e>
 800081a:	4611      	mov	r1, r2
 800081c:	e78c      	b.n	8000738 <__udivmoddi4+0x1c4>
 800081e:	4681      	mov	r9, r0
 8000820:	e7b9      	b.n	8000796 <__udivmoddi4+0x222>
 8000822:	4608      	mov	r0, r1
 8000824:	e773      	b.n	800070e <__udivmoddi4+0x19a>
 8000826:	4608      	mov	r0, r1
 8000828:	e749      	b.n	80006be <__udivmoddi4+0x14a>
 800082a:	f1ac 0c02 	sub.w	ip, ip, #2
 800082e:	443d      	add	r5, r7
 8000830:	e713      	b.n	800065a <__udivmoddi4+0xe6>
 8000832:	3802      	subs	r0, #2
 8000834:	443c      	add	r4, r7
 8000836:	e724      	b.n	8000682 <__udivmoddi4+0x10e>

08000838 <__aeabi_idiv0>:
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <SELECT+0x18>)
 8000846:	f002 fe36 	bl	80034b6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f001 fe86 	bl	800255c <HAL_Delay>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020400 	.word	0x40020400

08000858 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2140      	movs	r1, #64	; 0x40
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <DESELECT+0x18>)
 8000862:	f002 fe28 	bl	80034b6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f001 fe78 	bl	800255c <HAL_Delay>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40020400 	.word	0x40020400

08000874 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800087e:	bf00      	nop
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <SPI_TxByte+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	2b02      	cmp	r3, #2
 800088c:	d1f8      	bne.n	8000880 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800088e:	1df9      	adds	r1, r7, #7
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2201      	movs	r2, #1
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <SPI_TxByte+0x30>)
 8000896:	f005 ff83 	bl	80067a0 <HAL_SPI_Transmit>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000358 	.word	0x20000358

080008a8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008b4:	bf00      	nop
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <SPI_TxBuffer+0x30>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d1f8      	bne.n	80008b6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80008c4:	887a      	ldrh	r2, [r7, #2]
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	6879      	ldr	r1, [r7, #4]
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <SPI_TxBuffer+0x30>)
 80008cc:	f005 ff68 	bl	80067a0 <HAL_SPI_Transmit>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000358 	.word	0x20000358

080008dc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80008e2:	23ff      	movs	r3, #255	; 0xff
 80008e4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80008e6:	bf00      	nop
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <SPI_RxByte+0x34>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d1f8      	bne.n	80008e8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80008f6:	1dba      	adds	r2, r7, #6
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	2364      	movs	r3, #100	; 0x64
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2301      	movs	r3, #1
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <SPI_RxByte+0x34>)
 8000902:	f006 f889 	bl	8006a18 <HAL_SPI_TransmitReceive>

	return data;
 8000906:	79bb      	ldrb	r3, [r7, #6]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000358 	.word	0x20000358

08000914 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800091c:	f7ff ffde 	bl	80008dc <SPI_RxByte>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	701a      	strb	r2, [r3, #0]
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <SD_ReadyWait+0x30>)
 8000938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800093c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800093e:	f7ff ffcd 	bl	80008dc <SPI_RxByte>
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2bff      	cmp	r3, #255	; 0xff
 800094a:	d003      	beq.n	8000954 <SD_ReadyWait+0x24>
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <SD_ReadyWait+0x30>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f4      	bne.n	800093e <SD_ReadyWait+0xe>

	return res;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000350 	.word	0x20000350

08000964 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800096a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800096e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000970:	f7ff ff72 	bl	8000858 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e005      	b.n	8000986 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	f7ff ff7a 	bl	8000874 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3301      	adds	r3, #1
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	2b09      	cmp	r3, #9
 800098a:	ddf6      	ble.n	800097a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800098c:	f7ff ff56 	bl	800083c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000990:	2340      	movs	r3, #64	; 0x40
 8000992:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80009a4:	2395      	movs	r3, #149	; 0x95
 80009a6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80009a8:	463b      	mov	r3, r7
 80009aa:	2106      	movs	r1, #6
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff7b 	bl	80008a8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80009b2:	e002      	b.n	80009ba <SD_PowerOn+0x56>
	{
		cnt--;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80009ba:	f7ff ff8f 	bl	80008dc <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d002      	beq.n	80009ca <SD_PowerOn+0x66>
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1f4      	bne.n	80009b4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80009ca:	f7ff ff45 	bl	8000858 <DESELECT>
	SPI_TxByte(0XFF);
 80009ce:	20ff      	movs	r0, #255	; 0xff
 80009d0:	f7ff ff50 	bl	8000874 <SPI_TxByte>

	PowerFlag = 1;
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <SD_PowerOn+0x80>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000010d 	.word	0x2000010d

080009e8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <SD_PowerOff+0x14>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000010d 	.word	0x2000010d

08000a00 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <SD_CheckPower+0x10>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	2000010d 	.word	0x2000010d

08000a14 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SD_RxDataBlock+0x58>)
 8000a20:	22c8      	movs	r2, #200	; 0xc8
 8000a22:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000a24:	f7ff ff5a 	bl	80008dc <SPI_RxByte>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d103      	bne.n	8000a3a <SD_RxDataBlock+0x26>
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SD_RxDataBlock+0x58>)
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d1f4      	bne.n	8000a24 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a3e:	d001      	beq.n	8000a44 <SD_RxDataBlock+0x30>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e00f      	b.n	8000a64 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff62 	bl	8000914 <SPI_RxBytePtr>
	} while(len--);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	603a      	str	r2, [r7, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1f4      	bne.n	8000a44 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000a5a:	f7ff ff3f 	bl	80008dc <SPI_RxByte>
	SPI_RxByte();
 8000a5e:	f7ff ff3d 	bl	80008dc <SPI_RxByte>

	return TRUE;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000352 	.word	0x20000352

08000a70 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000a80:	f7ff ff56 	bl	8000930 <SD_ReadyWait>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d001      	beq.n	8000a8e <SD_TxDataBlock+0x1e>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e02f      	b.n	8000aee <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff feef 	bl	8000874 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000a96:	78fb      	ldrb	r3, [r7, #3]
 8000a98:	2bfd      	cmp	r3, #253	; 0xfd
 8000a9a:	d020      	beq.n	8000ade <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff01 	bl	80008a8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000aa6:	f7ff ff19 	bl	80008dc <SPI_RxByte>
		SPI_RxByte();
 8000aaa:	f7ff ff17 	bl	80008dc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000aae:	e00b      	b.n	8000ac8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000ab0:	f7ff ff14 	bl	80008dc <SPI_RxByte>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	d006      	beq.n	8000ad0 <SD_TxDataBlock+0x60>
			i++;
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	2b40      	cmp	r3, #64	; 0x40
 8000acc:	d9f0      	bls.n	8000ab0 <SD_TxDataBlock+0x40>
 8000ace:	e000      	b.n	8000ad2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ad0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ff02 	bl	80008dc <SPI_RxByte>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0fa      	beq.n	8000ad4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	f003 031f 	and.w	r3, r3, #31
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d101      	bne.n	8000aec <SD_TxDataBlock+0x7c>
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <SD_TxDataBlock+0x7e>

	return FALSE;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	6039      	str	r1, [r7, #0]
 8000b00:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000b02:	f7ff ff15 	bl	8000930 <SD_ReadyWait>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	d001      	beq.n	8000b10 <SD_SendCmd+0x1a>
 8000b0c:	23ff      	movs	r3, #255	; 0xff
 8000b0e:	e042      	b.n	8000b96 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff feae 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	0e1b      	lsrs	r3, r3, #24
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fea8 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	0c1b      	lsrs	r3, r3, #16
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fea2 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe9c 	bl	8000874 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fe97 	bl	8000874 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	2b40      	cmp	r3, #64	; 0x40
 8000b4a:	d102      	bne.n	8000b52 <SD_SendCmd+0x5c>
 8000b4c:	2395      	movs	r3, #149	; 0x95
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e007      	b.n	8000b62 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b48      	cmp	r3, #72	; 0x48
 8000b56:	d102      	bne.n	8000b5e <SD_SendCmd+0x68>
 8000b58:	2387      	movs	r3, #135	; 0x87
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <SD_SendCmd+0x6c>
	else crc = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe85 	bl	8000874 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b4c      	cmp	r3, #76	; 0x4c
 8000b6e:	d101      	bne.n	8000b74 <SD_SendCmd+0x7e>
 8000b70:	f7ff feb4 	bl	80008dc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000b78:	f7ff feb0 	bl	80008dc <SPI_RxByte>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000b80:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da05      	bge.n	8000b94 <SD_SendCmd+0x9e>
 8000b88:	7bbb      	ldrb	r3, [r7, #14]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	73bb      	strb	r3, [r7, #14]
 8000b8e:	7bbb      	ldrb	r3, [r7, #14]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f1      	bne.n	8000b78 <SD_SendCmd+0x82>

	return res;
 8000b94:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SD_disk_initialize+0x14>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e0d1      	b.n	8000d58 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000bb4:	4b6a      	ldr	r3, [pc, #424]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <SD_disk_initialize+0x2a>
 8000bc2:	4b67      	ldr	r3, [pc, #412]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	e0c6      	b.n	8000d58 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000bca:	f7ff fecb 	bl	8000964 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000bce:	f7ff fe35 	bl	800083c <SELECT>

	/* check disk type */
	type = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2040      	movs	r0, #64	; 0x40
 8000bda:	f7ff ff8c 	bl	8000af6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	f040 80a1 	bne.w	8000d28 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000be6:	4b5f      	ldr	r3, [pc, #380]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000be8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bec:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000bee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000bf2:	2048      	movs	r0, #72	; 0x48
 8000bf4:	f7ff ff7f 	bl	8000af6 <SD_SendCmd>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d155      	bne.n	8000caa <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000bfe:	2300      	movs	r3, #0
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e00c      	b.n	8000c1e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000c04:	7bfc      	ldrb	r4, [r7, #15]
 8000c06:	f7ff fe69 	bl	80008dc <SPI_RxByte>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4423      	add	r3, r4
 8000c14:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d9ef      	bls.n	8000c04 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000c24:	7abb      	ldrb	r3, [r7, #10]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d17e      	bne.n	8000d28 <SD_disk_initialize+0x188>
 8000c2a:	7afb      	ldrb	r3, [r7, #11]
 8000c2c:	2baa      	cmp	r3, #170	; 0xaa
 8000c2e:	d17b      	bne.n	8000d28 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c30:	2100      	movs	r1, #0
 8000c32:	2077      	movs	r0, #119	; 0x77
 8000c34:	f7ff ff5f 	bl	8000af6 <SD_SendCmd>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d807      	bhi.n	8000c4e <SD_disk_initialize+0xae>
 8000c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000c42:	2069      	movs	r0, #105	; 0x69
 8000c44:	f7ff ff57 	bl	8000af6 <SD_SendCmd>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d004      	beq.n	8000c58 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000c4e:	4b45      	ldr	r3, [pc, #276]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1ec      	bne.n	8000c30 <SD_disk_initialize+0x90>
 8000c56:	e000      	b.n	8000c5a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c58:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000c5a:	4b42      	ldr	r3, [pc, #264]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d062      	beq.n	8000d28 <SD_disk_initialize+0x188>
 8000c62:	2100      	movs	r1, #0
 8000c64:	207a      	movs	r0, #122	; 0x7a
 8000c66:	f7ff ff46 	bl	8000af6 <SD_SendCmd>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d15b      	bne.n	8000d28 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e00c      	b.n	8000c90 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000c76:	7bfc      	ldrb	r4, [r7, #15]
 8000c78:	f7ff fe30 	bl	80008dc <SPI_RxByte>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	4423      	add	r3, r4
 8000c86:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d9ef      	bls.n	8000c76 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000c96:	7a3b      	ldrb	r3, [r7, #8]
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SD_disk_initialize+0x104>
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	e000      	b.n	8000ca6 <SD_disk_initialize+0x106>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	73bb      	strb	r3, [r7, #14]
 8000ca8:	e03e      	b.n	8000d28 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000caa:	2100      	movs	r1, #0
 8000cac:	2077      	movs	r0, #119	; 0x77
 8000cae:	f7ff ff22 	bl	8000af6 <SD_SendCmd>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d808      	bhi.n	8000cca <SD_disk_initialize+0x12a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2069      	movs	r0, #105	; 0x69
 8000cbc:	f7ff ff1b 	bl	8000af6 <SD_SendCmd>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d801      	bhi.n	8000cca <SD_disk_initialize+0x12a>
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e000      	b.n	8000ccc <SD_disk_initialize+0x12c>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d10e      	bne.n	8000cf2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2077      	movs	r0, #119	; 0x77
 8000cd8:	f7ff ff0d 	bl	8000af6 <SD_SendCmd>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d80e      	bhi.n	8000d00 <SD_disk_initialize+0x160>
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2069      	movs	r0, #105	; 0x69
 8000ce6:	f7ff ff06 	bl	8000af6 <SD_SendCmd>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d107      	bne.n	8000d00 <SD_disk_initialize+0x160>
 8000cf0:	e00c      	b.n	8000d0c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2041      	movs	r0, #65	; 0x41
 8000cf6:	f7ff fefe 	bl	8000af6 <SD_SendCmd>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d004      	beq.n	8000d0a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e2      	bne.n	8000cce <SD_disk_initialize+0x12e>
 8000d08:	e000      	b.n	8000d0c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000d0a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <SD_disk_initialize+0x1c4>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <SD_disk_initialize+0x184>
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	2050      	movs	r0, #80	; 0x50
 8000d1a:	f7ff feec 	bl	8000af6 <SD_SendCmd>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SD_disk_initialize+0x188>
 8000d24:	2300      	movs	r3, #0
 8000d26:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000d28:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <SD_disk_initialize+0x1c8>)
 8000d2a:	7bbb      	ldrb	r3, [r7, #14]
 8000d2c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000d2e:	f7ff fd93 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000d32:	f7ff fdd3 	bl	80008dc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000d36:	7bbb      	ldrb	r3, [r7, #14]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e001      	b.n	8000d52 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000d4e:	f7ff fe4b 	bl	80009e8 <SD_PowerOff>
	}

	return Stat;
 8000d52:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <SD_disk_initialize+0x1c0>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000352 	.word	0x20000352
 8000d68:	2000010c 	.word	0x2000010c

08000d6c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SD_disk_status+0x14>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e002      	b.n	8000d86 <SD_disk_status+0x1a>
	return Stat;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <SD_disk_status+0x24>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000000 	.word	0x20000000

08000d94 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4603      	mov	r3, r0
 8000da2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <SD_disk_read+0x1c>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <SD_disk_read+0x20>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e051      	b.n	8000e58 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <SD_disk_read+0xcc>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SD_disk_read+0x32>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e048      	b.n	8000e58 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <SD_disk_read+0xd0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <SD_disk_read+0x44>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000dd8:	f7ff fd30 	bl	800083c <SELECT>

	if (count == 1)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d111      	bne.n	8000e06 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2051      	movs	r0, #81	; 0x51
 8000de6:	f7ff fe86 	bl	8000af6 <SD_SendCmd>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d129      	bne.n	8000e44 <SD_disk_read+0xb0>
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	68b8      	ldr	r0, [r7, #8]
 8000df6:	f7ff fe0d 	bl	8000a14 <SD_RxDataBlock>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d021      	beq.n	8000e44 <SD_disk_read+0xb0>
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	e01e      	b.n	8000e44 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2052      	movs	r0, #82	; 0x52
 8000e0a:	f7ff fe74 	bl	8000af6 <SD_SendCmd>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d117      	bne.n	8000e44 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	68b8      	ldr	r0, [r7, #8]
 8000e1a:	f7ff fdfb 	bl	8000a14 <SD_RxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00a      	beq.n	8000e3a <SD_disk_read+0xa6>
				buff += 512;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000e2a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1ed      	bne.n	8000e14 <SD_disk_read+0x80>
 8000e38:	e000      	b.n	8000e3c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000e3a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	204c      	movs	r0, #76	; 0x4c
 8000e40:	f7ff fe59 	bl	8000af6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000e44:	f7ff fd08 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000e48:	f7ff fd48 	bl	80008dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf14      	ite	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	2300      	moveq	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	2000010c 	.word	0x2000010c

08000e68 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	4603      	mov	r3, r0
 8000e76:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d102      	bne.n	8000e84 <SD_disk_write+0x1c>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <SD_disk_write+0x20>
 8000e84:	2304      	movs	r3, #4
 8000e86:	e06b      	b.n	8000f60 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <SD_disk_write+0x100>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SD_disk_write+0x32>
 8000e96:	2303      	movs	r3, #3
 8000e98:	e062      	b.n	8000f60 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000e9a:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <SD_disk_write+0x100>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SD_disk_write+0x44>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e059      	b.n	8000f60 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <SD_disk_write+0x104>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <SD_disk_write+0x56>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	025b      	lsls	r3, r3, #9
 8000ebc:	607b      	str	r3, [r7, #4]

	SELECT();
 8000ebe:	f7ff fcbd 	bl	800083c <SELECT>

	if (count == 1)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d110      	bne.n	8000eea <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	2058      	movs	r0, #88	; 0x58
 8000ecc:	f7ff fe13 	bl	8000af6 <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d13a      	bne.n	8000f4c <SD_disk_write+0xe4>
 8000ed6:	21fe      	movs	r1, #254	; 0xfe
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f7ff fdc9 	bl	8000a70 <SD_TxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d033      	beq.n	8000f4c <SD_disk_write+0xe4>
			count = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	e030      	b.n	8000f4c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <SD_disk_write+0x104>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d007      	beq.n	8000f06 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2077      	movs	r0, #119	; 0x77
 8000efa:	f7ff fdfc 	bl	8000af6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000efe:	6839      	ldr	r1, [r7, #0]
 8000f00:	2057      	movs	r0, #87	; 0x57
 8000f02:	f7ff fdf8 	bl	8000af6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2059      	movs	r0, #89	; 0x59
 8000f0a:	f7ff fdf4 	bl	8000af6 <SD_SendCmd>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d11b      	bne.n	8000f4c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f14:	21fc      	movs	r1, #252	; 0xfc
 8000f16:	68b8      	ldr	r0, [r7, #8]
 8000f18:	f7ff fdaa 	bl	8000a70 <SD_TxDataBlock>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00a      	beq.n	8000f38 <SD_disk_write+0xd0>
				buff += 512;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f28:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1ee      	bne.n	8000f14 <SD_disk_write+0xac>
 8000f36:	e000      	b.n	8000f3a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000f38:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000f3a:	21fd      	movs	r1, #253	; 0xfd
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fd97 	bl	8000a70 <SD_TxDataBlock>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <SD_disk_write+0xe4>
			{
				count = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000f4c:	f7ff fc84 	bl	8000858 <DESELECT>
	SPI_RxByte();
 8000f50:	f7ff fcc4 	bl	80008dc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	2000010c 	.word	0x2000010c

08000f70 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b08b      	sub	sp, #44	; 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	603a      	str	r2, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SD_disk_ioctl+0x1e>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e115      	b.n	80011ba <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d124      	bne.n	8000fe4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d012      	beq.n	8000fc8 <SD_disk_ioctl+0x58>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	dc1a      	bgt.n	8000fdc <SD_disk_ioctl+0x6c>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <SD_disk_ioctl+0x40>
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d006      	beq.n	8000fbc <SD_disk_ioctl+0x4c>
 8000fae:	e015      	b.n	8000fdc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000fb0:	f7ff fd1a 	bl	80009e8 <SD_PowerOff>
			res = RES_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fba:	e0fc      	b.n	80011b6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000fbc:	f7ff fcd2 	bl	8000964 <SD_PowerOn>
			res = RES_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fc6:	e0f6      	b.n	80011b6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000fc8:	6a3b      	ldr	r3, [r7, #32]
 8000fca:	1c5c      	adds	r4, r3, #1
 8000fcc:	f7ff fd18 	bl	8000a00 <SD_CheckPower>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000fda:	e0ec      	b.n	80011b6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fe2:	e0e8      	b.n	80011b6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fe4:	4b77      	ldr	r3, [pc, #476]	; (80011c4 <SD_disk_ioctl+0x254>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SD_disk_ioctl+0x86>
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e0e1      	b.n	80011ba <SD_disk_ioctl+0x24a>

		SELECT();
 8000ff6:	f7ff fc21 	bl	800083c <SELECT>

		switch (ctrl)
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2b0d      	cmp	r3, #13
 8000ffe:	f200 80cb 	bhi.w	8001198 <SD_disk_ioctl+0x228>
 8001002:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <SD_disk_ioctl+0x98>)
 8001004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001008:	08001103 	.word	0x08001103
 800100c:	08001041 	.word	0x08001041
 8001010:	080010f3 	.word	0x080010f3
 8001014:	08001199 	.word	0x08001199
 8001018:	08001199 	.word	0x08001199
 800101c:	08001199 	.word	0x08001199
 8001020:	08001199 	.word	0x08001199
 8001024:	08001199 	.word	0x08001199
 8001028:	08001199 	.word	0x08001199
 800102c:	08001199 	.word	0x08001199
 8001030:	08001199 	.word	0x08001199
 8001034:	08001115 	.word	0x08001115
 8001038:	08001139 	.word	0x08001139
 800103c:	0800115d 	.word	0x0800115d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001040:	2100      	movs	r1, #0
 8001042:	2049      	movs	r0, #73	; 0x49
 8001044:	f7ff fd57 	bl	8000af6 <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	f040 80a8 	bne.w	80011a0 <SD_disk_ioctl+0x230>
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2110      	movs	r1, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fcdc 	bl	8000a14 <SD_RxDataBlock>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 809e 	beq.w	80011a0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001064:	7b3b      	ldrb	r3, [r7, #12]
 8001066:	099b      	lsrs	r3, r3, #6
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10e      	bne.n	800108c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800106e:	7d7b      	ldrb	r3, [r7, #21]
 8001070:	b29a      	uxth	r2, r3
 8001072:	7d3b      	ldrb	r3, [r7, #20]
 8001074:	b29b      	uxth	r3, r3
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	3301      	adds	r3, #1
 8001080:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	029a      	lsls	r2, r3, #10
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e02e      	b.n	80010ea <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800108c:	7c7b      	ldrb	r3, [r7, #17]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	b2da      	uxtb	r2, r3
 8001094:	7dbb      	ldrb	r3, [r7, #22]
 8001096:	09db      	lsrs	r3, r3, #7
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b2da      	uxtb	r2, r3
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0306 	and.w	r3, r3, #6
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4413      	add	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	3302      	adds	r3, #2
 80010b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80010b4:	7d3b      	ldrb	r3, [r7, #20]
 80010b6:	099b      	lsrs	r3, r3, #6
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	7cbb      	ldrb	r3, [r7, #18]
 80010ca:	029b      	lsls	r3, r3, #10
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3301      	adds	r3, #1
 80010da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80010dc:	8bfa      	ldrh	r2, [r7, #30]
 80010de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010e2:	3b09      	subs	r3, #9
 80010e4:	409a      	lsls	r2, r3
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80010f0:	e056      	b.n	80011a0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001100:	e055      	b.n	80011ae <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001102:	f7ff fc15 	bl	8000930 <SD_ReadyWait>
 8001106:	4603      	mov	r3, r0
 8001108:	2bff      	cmp	r3, #255	; 0xff
 800110a:	d14b      	bne.n	80011a4 <SD_disk_ioctl+0x234>
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001112:	e047      	b.n	80011a4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001114:	2100      	movs	r1, #0
 8001116:	2049      	movs	r0, #73	; 0x49
 8001118:	f7ff fced 	bl	8000af6 <SD_SendCmd>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d142      	bne.n	80011a8 <SD_disk_ioctl+0x238>
 8001122:	2110      	movs	r1, #16
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	f7ff fc75 	bl	8000a14 <SD_RxDataBlock>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d03b      	beq.n	80011a8 <SD_disk_ioctl+0x238>
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001136:	e037      	b.n	80011a8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001138:	2100      	movs	r1, #0
 800113a:	204a      	movs	r0, #74	; 0x4a
 800113c:	f7ff fcdb 	bl	8000af6 <SD_SendCmd>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d132      	bne.n	80011ac <SD_disk_ioctl+0x23c>
 8001146:	2110      	movs	r1, #16
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f7ff fc63 	bl	8000a14 <SD_RxDataBlock>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d02b      	beq.n	80011ac <SD_disk_ioctl+0x23c>
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800115a:	e027      	b.n	80011ac <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800115c:	2100      	movs	r1, #0
 800115e:	207a      	movs	r0, #122	; 0x7a
 8001160:	f7ff fcc9 	bl	8000af6 <SD_SendCmd>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001170:	e00b      	b.n	800118a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001172:	6a3c      	ldr	r4, [r7, #32]
 8001174:	1c63      	adds	r3, r4, #1
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	f7ff fbb0 	bl	80008dc <SPI_RxByte>
 800117c:	4603      	mov	r3, r0
 800117e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001184:	3301      	adds	r3, #1
 8001186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800118a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800118e:	2b03      	cmp	r3, #3
 8001190:	d9ef      	bls.n	8001172 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001198:	2304      	movs	r3, #4
 800119a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800119e:	e006      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a0:	bf00      	nop
 80011a2:	e004      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a4:	bf00      	nop
 80011a6:	e002      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011a8:	bf00      	nop
 80011aa:	e000      	b.n	80011ae <SD_disk_ioctl+0x23e>
			break;
 80011ac:	bf00      	nop
		}

		DESELECT();
 80011ae:	f7ff fb53 	bl	8000858 <DESELECT>
		SPI_RxByte();
 80011b2:	f7ff fb93 	bl	80008dc <SPI_RxByte>
	}

	return res;
 80011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	372c      	adds	r7, #44	; 0x2c
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000000 	.word	0x20000000

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	f5ad 5d64 	sub.w	sp, sp, #14592	; 0x3900
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f001 f954 	bl	800247e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f8d3 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    // ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011da:	f000 faa5 	bl	8001728 <MX_GPIO_Init>
  MX_ADC_Init();
 80011de:	f000 f935 	bl	800144c <MX_ADC_Init>
  MX_I2C1_Init();
 80011e2:	f000 f98b 	bl	80014fc <MX_I2C1_Init>
  MX_SPI2_Init();
 80011e6:	f000 fa3f 	bl	8001668 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80011ea:	f000 fa73 	bl	80016d4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80011ee:	f006 fbd5 	bl	800799c <MX_FATFS_Init>
  MX_RTC_Init();
 80011f2:	f000 f9b1 	bl	8001558 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

    muxInit();
 80011f6:	f000 fbdf 	bl	80019b8 <muxInit>

    // int voltage_thresh_count = 0;
    int pressure_data[NUM_NODES] = {0};
 80011fa:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 80011fe:	f103 0308 	add.w	r3, r3, #8
 8001202:	3b04      	subs	r3, #4
 8001204:	4618      	mov	r0, r3
 8001206:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800120a:	461a      	mov	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	f00a f861 	bl	800b2d4 <memset>
    int calibration_data[NUM_NODES] = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	3b04      	subs	r3, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800121e:	461a      	mov	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f00a f857 	bl	800b2d4 <memset>

    //    /* Mount the SD card */
    fr = f_mount(&fs, "", 0) && FR_OK;
 8001226:	2200      	movs	r2, #0
 8001228:	494f      	ldr	r1, [pc, #316]	; (8001368 <main+0x1a0>)
 800122a:	4850      	ldr	r0, [pc, #320]	; (800136c <main+0x1a4>)
 800122c:	f008 fdf0 	bl	8009e10 <f_mount>
 8001230:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <main+0x1a8>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    int cycle_cnt = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	f507 5264 	add.w	r2, r7, #14592	; 0x3900
 800123c:	f102 0204 	add.w	r2, r2, #4
 8001240:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    /*Wait for user button press to start the program*/
    while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 8001242:	bf00      	nop
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	484b      	ldr	r0, [pc, #300]	; (8001374 <main+0x1ac>)
 8001248:	f002 f91e 	bl	8003488 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0f8      	beq.n	8001244 <main+0x7c>

	// Set RED LED to start measuring calibration data with nothing on the mat
	HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	4846      	ldr	r0, [pc, #280]	; (8001374 <main+0x1ac>)
 800125a:	f002 f92c 	bl	80034b6 <HAL_GPIO_WritePin>

	// Calibrate mat
    calibrate(calibration_data, sizeof(calibration_data)/sizeof(*calibration_data)); // 18s
 800125e:	f107 0308 	add.w	r3, r7, #8
 8001262:	3b04      	subs	r3, #4
 8001264:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fe55 	bl	8001f18 <calibrate>

    // Mat finished calibration, turn off RED LED
	HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	483f      	ldr	r0, [pc, #252]	; (8001374 <main+0x1ac>)
 8001276:	f002 f91e 	bl	80034b6 <HAL_GPIO_WritePin>

	// Wait for user to put a weight on the mat
    while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 800127a:	bf00      	nop
 800127c:	2140      	movs	r1, #64	; 0x40
 800127e:	483d      	ldr	r0, [pc, #244]	; (8001374 <main+0x1ac>)
 8001280:	f002 f902 	bl	8003488 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d0f8      	beq.n	800127c <main+0xb4>

	// Set Blue LED
	HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	4839      	ldr	r0, [pc, #228]	; (8001374 <main+0x1ac>)
 8001290:	f002 f911 	bl	80034b6 <HAL_GPIO_WritePin>
	// wait 15s for reading to settle
	HAL_Delay(WAITTIME); //15s
 8001294:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001298:	f001 f960 	bl	800255c <HAL_Delay>
	// turn off blue LED
	HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	4834      	ldr	r0, [pc, #208]	; (8001374 <main+0x1ac>)
 80012a2:	f002 f908 	bl	80034b6 <HAL_GPIO_WritePin>

    /*Open the file to write data to*/
    fr = f_open(&fil, file_name, FA_CREATE_ALWAYS | FA_WRITE) && FR_OK;
 80012a6:	220a      	movs	r2, #10
 80012a8:	4933      	ldr	r1, [pc, #204]	; (8001378 <main+0x1b0>)
 80012aa:	4834      	ldr	r0, [pc, #208]	; (800137c <main+0x1b4>)
 80012ac:	f008 fdf6 	bl	8009e9c <f_open>
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <main+0x1a8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]

	// Turn on green LED to indicate data logging
	HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	482d      	ldr	r0, [pc, #180]	; (8001374 <main+0x1ac>)
 80012be:	f002 f8fa 	bl	80034b6 <HAL_GPIO_WritePin>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	if (fr != FR_OK) {
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <main+0x1a8>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <main+0x106>
    		Error_Handler();
 80012ca:	f000 fe61 	bl	8001f90 <Error_Handler>
    	}

      /* Sample all nodes on mat */
      sampleMat(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data)); // 30s
 80012ce:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 80012d2:	f103 0308 	add.w	r3, r3, #8
 80012d6:	3b04      	subs	r3, #4
 80012d8:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fce5 	bl	8001cac <sampleMat>

      /* Write sampled data to SD card */
      logData2SDCard(pressure_data, NUM_NODES, true);
 80012e2:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 80012e6:	f103 0308 	add.w	r3, r3, #8
 80012ea:	3b04      	subs	r3, #4
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fb0e 	bl	8001914 <logData2SDCard>
  	  HAL_Delay(50);
 80012f8:	2032      	movs	r0, #50	; 0x32
 80012fa:	f001 f92f 	bl	800255c <HAL_Delay>

      // TODO: Check timer. If pass 2 minutes, open SD card file, read data and write to UART
//      if (checkTime(start_time)) {
  	  if (cycle_cnt >=SAMPLE_CYCLES) {
 80012fe:	f507 5364 	add.w	r3, r7, #14592	; 0x3900
 8001302:	f103 0304 	add.w	r3, r3, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b04      	cmp	r3, #4
 800130a:	dd21      	ble.n	8001350 <main+0x188>
  		  // Set Green pin to indicate logging is occuring
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001312:	4818      	ldr	r0, [pc, #96]	; (8001374 <main+0x1ac>)
 8001314:	f002 f8cf 	bl	80034b6 <HAL_GPIO_WritePin>

		// Write calibration data to SD card on the last row (without timestamp)
		logData2SDCard(calibration_data, NUM_NODES, false);
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	3b04      	subs	r3, #4
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001324:	4618      	mov	r0, r3
 8001326:	f000 faf5 	bl	8001914 <logData2SDCard>

		// Read SD card and send data to ESP8266 via UART
//		readSDCardSendUART();

	    /* Unmount the default drive */
  		fr = f_close(&fil);
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <main+0x1b4>)
 800132c:	f009 f994 	bl	800a658 <f_close>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <main+0x1a8>)
 8001336:	701a      	strb	r2, [r3, #0]
		fr = f_mount(0, "", 0);
 8001338:	2200      	movs	r2, #0
 800133a:	490b      	ldr	r1, [pc, #44]	; (8001368 <main+0x1a0>)
 800133c:	2000      	movs	r0, #0
 800133e:	f008 fd67 	bl	8009e10 <f_mount>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <main+0x1a8>)
 8001348:	701a      	strb	r2, [r3, #0]

	    exit(0);
 800134a:	2000      	movs	r0, #0
 800134c:	f009 ff8a 	bl	800b264 <exit>
      }

      cycle_cnt++;
 8001350:	f507 5364 	add.w	r3, r7, #14592	; 0x3900
 8001354:	f103 0304 	add.w	r3, r3, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	f507 5264 	add.w	r2, r7, #14592	; 0x3900
 8001360:	f102 0204 	add.w	r2, r2, #4
 8001364:	6013      	str	r3, [r2, #0]
    	if (fr != FR_OK) {
 8001366:	e7ac      	b.n	80012c2 <main+0xfa>
 8001368:	0800bb70 	.word	0x0800bb70
 800136c:	200003f4 	.word	0x200003f4
 8001370:	2000010e 	.word	0x2000010e
 8001374:	40020800 	.word	0x40020800
 8001378:	20000004 	.word	0x20000004
 800137c:	20001520 	.word	0x20001520

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b096      	sub	sp, #88	; 0x58
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2234      	movs	r2, #52	; 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f009 ffa0 	bl	800b2d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <SystemClock_Config+0xc8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <SystemClock_Config+0xc8>)
 80013b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013bc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80013be:	230b      	movs	r3, #11
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c6:	2301      	movs	r3, #1
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ca:	2310      	movs	r3, #16
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ce:	2301      	movs	r3, #1
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80013dc:	2300      	movs	r3, #0
 80013de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80013e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fe82 	bl	80050f4 <HAL_RCC_OscConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013f6:	f000 fdcb 	bl	8001f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	230f      	movs	r3, #15
 80013fc:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2303      	movs	r3, #3
 8001400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2101      	movs	r1, #1
 8001414:	4618      	mov	r0, r3
 8001416:	f004 f99d 	bl	8005754 <HAL_RCC_ClockConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001420:	f000 fdb6 	bl	8001f90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001424:	2301      	movs	r3, #1
 8001426:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001428:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4618      	mov	r0, r3
 8001432:	f004 fbfb 	bl	8005c2c <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800143c:	f000 fda8 	bl	8001f90 <Error_Handler>
  }
}
 8001440:	bf00      	nop
 8001442:	3758      	adds	r7, #88	; 0x58
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <MX_ADC_Init+0xa8>)
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <MX_ADC_Init+0xac>)
 8001460:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_ADC_Init+0xa8>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_ADC_Init+0xa8>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001480:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_ADC_Init+0xa8>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_ADC_Init+0xa8>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_ADC_Init+0xa8>)
 800149c:	2201      	movs	r2, #1
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014aa:	2210      	movs	r2, #16
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014be:	f001 f86f 	bl	80025a0 <HAL_ADC_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80014c8:	f000 fd62 	bl	8001f90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014cc:	2309      	movs	r3, #9
 80014ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 80014d4:	2304      	movs	r3, #4
 80014d6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_ADC_Init+0xa8>)
 80014de:	f001 facd 	bl	8002a7c <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80014e8:	f000 fd52 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200014cc 	.word	0x200014cc
 80014f8:	40012400 	.word	0x40012400

080014fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_I2C1_Init+0x50>)
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <MX_I2C1_Init+0x54>)
 8001504:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_I2C1_Init+0x50>)
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <MX_I2C1_Init+0x58>)
 800150a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_I2C1_Init+0x50>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <MX_I2C1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_I2C1_Init+0x50>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_I2C1_Init+0x50>)
 800153a:	f001 ffd5 	bl	80034e8 <HAL_I2C_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001544:	f000 fd24 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000142c 	.word	0x2000142c
 8001550:	40005400 	.word	0x40005400
 8001554:	000186a0 	.word	0x000186a0

08001558 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]
 800157e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001580:	4b37      	ldr	r3, [pc, #220]	; (8001660 <MX_RTC_Init+0x108>)
 8001582:	4a38      	ldr	r2, [pc, #224]	; (8001664 <MX_RTC_Init+0x10c>)
 8001584:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001586:	4b36      	ldr	r3, [pc, #216]	; (8001660 <MX_RTC_Init+0x108>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800158c:	4b34      	ldr	r3, [pc, #208]	; (8001660 <MX_RTC_Init+0x108>)
 800158e:	227f      	movs	r2, #127	; 0x7f
 8001590:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <MX_RTC_Init+0x108>)
 8001594:	22ff      	movs	r2, #255	; 0xff
 8001596:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <MX_RTC_Init+0x108>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800159e:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MX_RTC_Init+0x108>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <MX_RTC_Init+0x108>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015aa:	482d      	ldr	r0, [pc, #180]	; (8001660 <MX_RTC_Init+0x108>)
 80015ac:	f004 fc48 	bl	8005e40 <HAL_RTC_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80015b6:	f000 fceb 	bl	8001f90 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 80015ba:	2316      	movs	r3, #22
 80015bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	2200      	movs	r2, #0
 80015da:	4619      	mov	r1, r3
 80015dc:	4820      	ldr	r0, [pc, #128]	; (8001660 <MX_RTC_Init+0x108>)
 80015de:	f004 fcb9 	bl	8005f54 <HAL_RTC_SetTime>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80015e8:	f000 fcd2 	bl	8001f90 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80015ec:	2305      	movs	r3, #5
 80015ee:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 80015f8:	230b      	movs	r3, #11
 80015fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 80015fe:	2316      	movs	r3, #22
 8001600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001604:	f107 0320 	add.w	r3, r7, #32
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	4814      	ldr	r0, [pc, #80]	; (8001660 <MX_RTC_Init+0x108>)
 800160e:	f004 fda5 	bl	800615c <HAL_RTC_SetDate>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001618:	f000 fcba 	bl	8001f90 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 800161c:	2306      	movs	r3, #6
 800161e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 800163c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001640:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_RTC_Init+0x108>)
 800164a:	f004 fe25 	bl	8006298 <HAL_RTC_SetAlarm_IT>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8001654:	f000 fc9c 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3730      	adds	r7, #48	; 0x30
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20001488 	.word	0x20001488
 8001664:	40002800 	.word	0x40002800

08001668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_SPI2_Init+0x64>)
 800166e:	4a18      	ldr	r2, [pc, #96]	; (80016d0 <MX_SPI2_Init+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_SPI2_Init+0x64>)
 8001674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI2_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_SPI2_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <MX_SPI2_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI2_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_SPI2_Init+0x64>)
 8001694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001698:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI2_Init+0x64>)
 800169c:	2210      	movs	r2, #16
 800169e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_SPI2_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI2_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_SPI2_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI2_Init+0x64>)
 80016b4:	220a      	movs	r2, #10
 80016b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_SPI2_Init+0x64>)
 80016ba:	f004 fff5 	bl	80066a8 <HAL_SPI_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016c4:	f000 fc64 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000358 	.word	0x20000358
 80016d0:	40003800 	.word	0x40003800

080016d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <MX_USART3_UART_Init+0x50>)
 80016dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART3_UART_Init+0x4c>)
 800170c:	f005 fcf4 	bl	80070f8 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001716:	f000 fc3b 	bl	8001f90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200003b0 	.word	0x200003b0
 8001724:	40004800 	.word	0x40004800

08001728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172e:	f107 0314 	add.w	r3, r7, #20
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b55      	ldr	r3, [pc, #340]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a54      	ldr	r2, [pc, #336]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b52      	ldr	r3, [pc, #328]	; (8001894 <MX_GPIO_Init+0x16c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	4b4f      	ldr	r3, [pc, #316]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <MX_GPIO_Init+0x16c>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	61d3      	str	r3, [r2, #28]
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a48      	ldr	r2, [pc, #288]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <MX_GPIO_Init+0x16c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a42      	ldr	r2, [pc, #264]	; (8001894 <MX_GPIO_Init+0x16c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b40      	ldr	r3, [pc, #256]	; (8001894 <MX_GPIO_Init+0x16c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <MX_GPIO_Init+0x16c>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a3c      	ldr	r2, [pc, #240]	; (8001894 <MX_GPIO_Init+0x16c>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b3a      	ldr	r3, [pc, #232]	; (8001894 <MX_GPIO_Init+0x16c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 80017b6:	2200      	movs	r2, #0
 80017b8:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 80017bc:	4836      	ldr	r0, [pc, #216]	; (8001898 <MX_GPIO_Init+0x170>)
 80017be:	f001 fe7a 	bl	80034b6 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 80017c2:	2200      	movs	r2, #0
 80017c4:	f241 01f7 	movw	r1, #4343	; 0x10f7
 80017c8:	4834      	ldr	r0, [pc, #208]	; (800189c <MX_GPIO_Init+0x174>)
 80017ca:	f001 fe74 	bl	80034b6 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80017ce:	2200      	movs	r2, #0
 80017d0:	f641 4165 	movw	r1, #7269	; 0x1c65
 80017d4:	4832      	ldr	r0, [pc, #200]	; (80018a0 <MX_GPIO_Init+0x178>)
 80017d6:	f001 fe6e 	bl	80034b6 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	2104      	movs	r1, #4
 80017de:	4831      	ldr	r0, [pc, #196]	; (80018a4 <MX_GPIO_Init+0x17c>)
 80017e0:	f001 fe69 	bl	80034b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 80017e4:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 80017e8:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4826      	ldr	r0, [pc, #152]	; (8001898 <MX_GPIO_Init+0x170>)
 80017fe:	f001 fcc3 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001802:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8001806:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4820      	ldr	r0, [pc, #128]	; (800189c <MX_GPIO_Init+0x174>)
 800181c:	f001 fcb4 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001820:	f641 4365 	movw	r3, #7269	; 0x1c65
 8001824:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4819      	ldr	r0, [pc, #100]	; (80018a0 <MX_GPIO_Init+0x178>)
 800183a:	f001 fca5 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 800183e:	2340      	movs	r3, #64	; 0x40
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_GPIO_Init+0x170>)
 8001852:	f001 fc99 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	4619      	mov	r1, r3
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <MX_GPIO_Init+0x174>)
 800186c:	f001 fc8c 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001870:	2304      	movs	r3, #4
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	; (80018a4 <MX_GPIO_Init+0x17c>)
 8001888:	f001 fc7e 	bl	8003188 <HAL_GPIO_Init>

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	; 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40023800 	.word	0x40023800
 8001898:	40020800 	.word	0x40020800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <writeCurrentTime>:
    * @brief
    * @param  :
    * @retval :
    */
void writeCurrentTime(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
    char time[10];

    HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 80018ae:	2200      	movs	r2, #0
 80018b0:	4912      	ldr	r1, [pc, #72]	; (80018fc <writeCurrentTime+0x54>)
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <writeCurrentTime+0x58>)
 80018b4:	f004 fc02 	bl	80060bc <HAL_RTC_GetTime>
    sprintf(time, "%02u:%02u:%02u,", nTime.Hours, nTime.Minutes, nTime.Seconds);
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <writeCurrentTime+0x54>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <writeCurrentTime+0x54>)
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	4619      	mov	r1, r3
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <writeCurrentTime+0x54>)
 80018c6:	789b      	ldrb	r3, [r3, #2]
 80018c8:	1d38      	adds	r0, r7, #4
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <writeCurrentTime+0x5c>)
 80018d0:	f009 fd08 	bl	800b2e4 <siprintf>
    f_lseek(&fil, f_size(&fil));
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <writeCurrentTime+0x60>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4619      	mov	r1, r3
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <writeCurrentTime+0x60>)
 80018dc:	f008 fee6 	bl	800a6ac <f_lseek>
    fr = f_printf( &fil, "%s", time);
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	461a      	mov	r2, r3
 80018e4:	4909      	ldr	r1, [pc, #36]	; (800190c <writeCurrentTime+0x64>)
 80018e6:	4808      	ldr	r0, [pc, #32]	; (8001908 <writeCurrentTime+0x60>)
 80018e8:	f009 f97a 	bl	800abe0 <f_printf>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <writeCurrentTime+0x68>)
 80018f2:	701a      	strb	r2, [r3, #0]
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200014a8 	.word	0x200014a8
 8001900:	20001488 	.word	0x20001488
 8001904:	0800bb74 	.word	0x0800bb74
 8001908:	20001520 	.word	0x20001520
 800190c:	0800bb84 	.word	0x0800bb84
 8001910:	2000010e 	.word	0x2000010e

08001914 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int data[], int len, bool write_timestamp)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	71fb      	strb	r3, [r7, #7]

    /* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 8001922:	f242 31a9 	movw	r1, #9129	; 0x23a9
 8001926:	4820      	ldr	r0, [pc, #128]	; (80019a8 <logData2SDCard+0x94>)
 8001928:	f008 fec0 	bl	800a6ac <f_lseek>
    f_lseek(&fil, f_size(&fil));
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <logData2SDCard+0x94>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4619      	mov	r1, r3
 8001932:	481d      	ldr	r0, [pc, #116]	; (80019a8 <logData2SDCard+0x94>)
 8001934:	f008 feba 	bl	800a6ac <f_lseek>

    if (write_timestamp) {
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <logData2SDCard+0x2e>
    	writeCurrentTime();
 800193e:	f7ff ffb3 	bl	80018a8 <writeCurrentTime>
    }

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; node++) {
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e00f      	b.n	8001968 <logData2SDCard+0x54>
        fr = f_printf(&fil, "%d,", data[node]) && FR_OK;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	4915      	ldr	r1, [pc, #84]	; (80019ac <logData2SDCard+0x98>)
 8001956:	4814      	ldr	r0, [pc, #80]	; (80019a8 <logData2SDCard+0x94>)
 8001958:	f009 f942 	bl	800abe0 <f_printf>
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <logData2SDCard+0x9c>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    for(int node = 0; node < len - 1; node++) {
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	3b01      	subs	r3, #1
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	429a      	cmp	r2, r3
 8001970:	dbea      	blt.n	8001948 <logData2SDCard+0x34>
    }

    fr = f_printf(&fil, "%d\n", data[len - 1]) && FR_OK;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001978:	3b01      	subs	r3, #1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	490b      	ldr	r1, [pc, #44]	; (80019b4 <logData2SDCard+0xa0>)
 8001986:	4808      	ldr	r0, [pc, #32]	; (80019a8 <logData2SDCard+0x94>)
 8001988:	f009 f92a 	bl	800abe0 <f_printf>
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <logData2SDCard+0x9c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

    // Flush file after every mat reading
    fr = f_sync(&fil) && FR_OK;
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <logData2SDCard+0x94>)
 8001994:	f008 fde2 	bl	800a55c <f_sync>
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <logData2SDCard+0x9c>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]

}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20001520 	.word	0x20001520
 80019ac:	0800bb88 	.word	0x0800bb88
 80019b0:	2000010e 	.word	0x2000010e
 80019b4:	0800bb8c 	.word	0x0800bb8c

080019b8 <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2101      	movs	r1, #1
 80019c2:	4819      	ldr	r0, [pc, #100]	; (8001a28 <muxInit+0x70>)
 80019c4:	f001 fd77 	bl	80034b6 <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	e00e      	b.n	80019ec <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80019ce:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <muxInit+0x74>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019d6:	4916      	ldr	r1, [pc, #88]	; (8001a30 <muxInit+0x78>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019de:	4619      	mov	r1, r3
 80019e0:	4610      	mov	r0, r2
 80019e2:	f000 f935 	bl	8001c50 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	dded      	ble.n	80019ce <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	e00e      	b.n	8001a16 <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <muxInit+0x7c>)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a00:	490d      	ldr	r1, [pc, #52]	; (8001a38 <muxInit+0x80>)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	f000 f920 	bl	8001c50 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	dded      	ble.n	80019f8 <muxInit+0x40>
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	20000024 	.word	0x20000024
 8001a30:	0800bbd8 	.word	0x0800bbd8
 8001a34:	20000034 	.word	0x20000034
 8001a38:	0800bbe8 	.word	0x0800bbe8

08001a3c <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	f200 80eb 	bhi.w	8001c24 <selectChannel+0x1e8>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <selectChannel+0x18>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a75 	.word	0x08001a75
 8001a58:	08001aab 	.word	0x08001aab
 8001a5c:	08001ae1 	.word	0x08001ae1
 8001a60:	08001b17 	.word	0x08001b17
 8001a64:	08001b4d 	.word	0x08001b4d
 8001a68:	08001b83 	.word	0x08001b83
 8001a6c:	08001bb9 	.word	0x08001bb9
 8001a70:	08001bef 	.word	0x08001bef
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	486b      	ldr	r0, [pc, #428]	; (8001c2c <selectChannel+0x1f0>)
 8001a80:	f001 fd19 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	3304      	adds	r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4866      	ldr	r0, [pc, #408]	; (8001c2c <selectChannel+0x1f0>)
 8001a92:	f001 fd10 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3308      	adds	r3, #8
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4862      	ldr	r0, [pc, #392]	; (8001c2c <selectChannel+0x1f0>)
 8001aa4:	f001 fd07 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001aa8:	e0bc      	b.n	8001c24 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	485d      	ldr	r0, [pc, #372]	; (8001c2c <selectChannel+0x1f0>)
 8001ab6:	f001 fcfe 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4859      	ldr	r0, [pc, #356]	; (8001c2c <selectChannel+0x1f0>)
 8001ac8:	f001 fcf5 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4854      	ldr	r0, [pc, #336]	; (8001c2c <selectChannel+0x1f0>)
 8001ada:	f001 fcec 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001ade:	e0a1      	b.n	8001c24 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4850      	ldr	r0, [pc, #320]	; (8001c2c <selectChannel+0x1f0>)
 8001aec:	f001 fce3 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	3304      	adds	r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2201      	movs	r2, #1
 8001afa:	4619      	mov	r1, r3
 8001afc:	484b      	ldr	r0, [pc, #300]	; (8001c2c <selectChannel+0x1f0>)
 8001afe:	f001 fcda 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3308      	adds	r3, #8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4847      	ldr	r0, [pc, #284]	; (8001c2c <selectChannel+0x1f0>)
 8001b10:	f001 fcd1 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001b14:	e086      	b.n	8001c24 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4842      	ldr	r0, [pc, #264]	; (8001c2c <selectChannel+0x1f0>)
 8001b22:	f001 fcc8 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4619      	mov	r1, r3
 8001b32:	483e      	ldr	r0, [pc, #248]	; (8001c2c <selectChannel+0x1f0>)
 8001b34:	f001 fcbf 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3308      	adds	r3, #8
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	2200      	movs	r2, #0
 8001b42:	4619      	mov	r1, r3
 8001b44:	4839      	ldr	r0, [pc, #228]	; (8001c2c <selectChannel+0x1f0>)
 8001b46:	f001 fcb6 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001b4a:	e06b      	b.n	8001c24 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4835      	ldr	r0, [pc, #212]	; (8001c2c <selectChannel+0x1f0>)
 8001b58:	f001 fcad 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4830      	ldr	r0, [pc, #192]	; (8001c2c <selectChannel+0x1f0>)
 8001b6a:	f001 fca4 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3308      	adds	r3, #8
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2201      	movs	r2, #1
 8001b78:	4619      	mov	r1, r3
 8001b7a:	482c      	ldr	r0, [pc, #176]	; (8001c2c <selectChannel+0x1f0>)
 8001b7c:	f001 fc9b 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001b80:	e050      	b.n	8001c24 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4827      	ldr	r0, [pc, #156]	; (8001c2c <selectChannel+0x1f0>)
 8001b8e:	f001 fc92 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	3304      	adds	r3, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4823      	ldr	r0, [pc, #140]	; (8001c2c <selectChannel+0x1f0>)
 8001ba0:	f001 fc89 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	3308      	adds	r3, #8
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2201      	movs	r2, #1
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481e      	ldr	r0, [pc, #120]	; (8001c2c <selectChannel+0x1f0>)
 8001bb2:	f001 fc80 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001bb6:	e035      	b.n	8001c24 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481a      	ldr	r0, [pc, #104]	; (8001c2c <selectChannel+0x1f0>)
 8001bc4:	f001 fc77 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4815      	ldr	r0, [pc, #84]	; (8001c2c <selectChannel+0x1f0>)
 8001bd6:	f001 fc6e 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	3308      	adds	r3, #8
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2201      	movs	r2, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	4811      	ldr	r0, [pc, #68]	; (8001c2c <selectChannel+0x1f0>)
 8001be8:	f001 fc65 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001bec:	e01a      	b.n	8001c24 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <selectChannel+0x1f0>)
 8001bfa:	f001 fc5c 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	3304      	adds	r3, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2201      	movs	r2, #1
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4808      	ldr	r0, [pc, #32]	; (8001c2c <selectChannel+0x1f0>)
 8001c0c:	f001 fc53 	bl	80034b6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3308      	adds	r3, #8
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <selectChannel+0x1f0>)
 8001c1e:	f001 fc4a 	bl	80034b6 <HAL_GPIO_WritePin>
			break;
 8001c22:	bf00      	nop
	}
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40020000 	.word	0x40020000

08001c30 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f001 fc37 	bl	80034b6 <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f001 fc27 	bl	80034b6 <HAL_GPIO_WritePin>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
	HAL_Delay(ADC_DELAY);
 8001c76:	2003      	movs	r0, #3
 8001c78:	f000 fc70 	bl	800255c <HAL_Delay>
	HAL_ADC_Start(&hadc);
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <readPressure+0x38>)
 8001c7e:	f000 fdd5 	bl	800282c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001c82:	f04f 31ff 	mov.w	r1, #4294967295
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <readPressure+0x38>)
 8001c88:	f000 fe5c 	bl	8002944 <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 8001c8c:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <readPressure+0x38>)
 8001c8e:	f000 fee9 	bl	8002a64 <HAL_ADC_GetValue>
 8001c92:	4603      	mov	r3, r0
 8001c94:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <readPressure+0x38>)
 8001c98:	f000 fe28 	bl	80028ec <HAL_ADC_Stop>
    return data;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200014cc 	.word	0x200014cc

08001cac <sampleMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void sampleMat(int data[], int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
    int array_cnt = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]

    if (len != NUM_NODES) 
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 8001cc0:	d17b      	bne.n	8001dba <sampleMat+0x10e>
    {
        /* Wrongly sized array */ 
        return;
    }

    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e074      	b.n	8001db2 <sampleMat+0x106>
    {
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001cc8:	4a3e      	ldr	r2, [pc, #248]	; (8001dc4 <sampleMat+0x118>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd0:	493d      	ldr	r1, [pc, #244]	; (8001dc8 <sampleMat+0x11c>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f7ff ffa8 	bl	8001c30 <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	e053      	b.n	8001d8e <sampleMat+0xe2>
        {
			selectChannel(pwr_sel, pwrMuxSelect);
 8001ce6:	4939      	ldr	r1, [pc, #228]	; (8001dcc <sampleMat+0x120>)
 8001ce8:	6978      	ldr	r0, [r7, #20]
 8001cea:	f7ff fea7 	bl	8001a3c <selectChannel>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e046      	b.n	8001d82 <sampleMat+0xd6>
            {
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001cf4:	4a36      	ldr	r2, [pc, #216]	; (8001dd0 <sampleMat+0x124>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cfc:	4935      	ldr	r1, [pc, #212]	; (8001dd4 <sampleMat+0x128>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff ff92 	bl	8001c30 <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e025      	b.n	8001d5e <sampleMat+0xb2>
                {
				    if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <sampleMat+0x78>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <sampleMat+0xa6>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d016      	beq.n	8001d52 <sampleMat+0xa6>
				    {
				       continue;
				    }

				    if ((sense_mux == 7) && (sense_sel > 2))
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b07      	cmp	r3, #7
 8001d28:	d102      	bne.n	8001d30 <sampleMat+0x84>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	dc12      	bgt.n	8001d56 <sampleMat+0xaa>
				    {
				       continue;
				    }

					selectChannel(sense_sel, senseMuxSelect);
 8001d30:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <sampleMat+0x12c>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fe82 	bl	8001a3c <selectChannel>

					/* Read voltage */
					int raw_ADC_pressure = readPressure();
 8001d38:	f7ff ff9a 	bl	8001c70 <readPressure>
 8001d3c:	60b8      	str	r0, [r7, #8]

					data[array_cnt] = raw_ADC_pressure;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	601a      	str	r2, [r3, #0]
					array_cnt++;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	e002      	b.n	8001d58 <sampleMat+0xac>
				       continue;
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <sampleMat+0xac>
				       continue;
 8001d56:	bf00      	nop
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) 
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b07      	cmp	r3, #7
 8001d62:	ddd6      	ble.n	8001d12 <sampleMat+0x66>
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <sampleMat+0x124>)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6c:	4919      	ldr	r1, [pc, #100]	; (8001dd4 <sampleMat+0x128>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f7ff ff6a 	bl	8001c50 <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) 
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b07      	cmp	r3, #7
 8001d86:	ddb5      	ble.n	8001cf4 <sampleMat+0x48>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) 
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b07      	cmp	r3, #7
 8001d92:	dda8      	ble.n	8001ce6 <sampleMat+0x3a>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001d94:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <sampleMat+0x118>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d9c:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <sampleMat+0x11c>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f7ff ff52 	bl	8001c50 <disableMux>
    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) 
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	3301      	adds	r3, #1
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	dd87      	ble.n	8001cc8 <sampleMat+0x1c>
 8001db8:	e000      	b.n	8001dbc <sampleMat+0x110>
        return;
 8001dba:	bf00      	nop
	}
}
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000024 	.word	0x20000024
 8001dc8:	0800bbd8 	.word	0x0800bbd8
 8001dcc:	20000060 	.word	0x20000060
 8001dd0:	20000034 	.word	0x20000034
 8001dd4:	0800bbe8 	.word	0x0800bbe8
 8001dd8:	20000054 	.word	0x20000054

08001ddc <calibrateMat>:
    * @brief  :
    * @param  :
    * @retval :
    */
void calibrateMat(int data[], int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
    int array_cnt = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]

    if (len != NUM_NODES)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 8001df0:	f040 8082 	bne.w	8001ef8 <calibrateMat+0x11c>
    {
        /* Wrongly sized array */
        return;
    }

    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	e07a      	b.n	8001ef0 <calibrateMat+0x114>
    {
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001dfa:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <calibrateMat+0x124>)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e02:	4940      	ldr	r1, [pc, #256]	; (8001f04 <calibrateMat+0x128>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	f7ff ff0f 	bl	8001c30 <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	e059      	b.n	8001ecc <calibrateMat+0xf0>
        {
			selectChannel(pwr_sel, pwrMuxSelect);
 8001e18:	493b      	ldr	r1, [pc, #236]	; (8001f08 <calibrateMat+0x12c>)
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff fe0e 	bl	8001a3c <selectChannel>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e04c      	b.n	8001ec0 <calibrateMat+0xe4>
            {
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001e26:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <calibrateMat+0x130>)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e2e:	4938      	ldr	r1, [pc, #224]	; (8001f10 <calibrateMat+0x134>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e36:	4619      	mov	r1, r3
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f7ff fef9 	bl	8001c30 <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	e02b      	b.n	8001e9c <calibrateMat+0xc0>
                {
				    if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <calibrateMat+0x7a>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01f      	beq.n	8001e90 <calibrateMat+0xb4>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d01c      	beq.n	8001e90 <calibrateMat+0xb4>
				    {
				       continue;
				    }

				    if ((sense_mux == 7) && (sense_sel > 2))
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b07      	cmp	r3, #7
 8001e5a:	d102      	bne.n	8001e62 <calibrateMat+0x86>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	dc18      	bgt.n	8001e94 <calibrateMat+0xb8>
				    {
				       continue;
				    }

					selectChannel(sense_sel, senseMuxSelect);
 8001e62:	492c      	ldr	r1, [pc, #176]	; (8001f14 <calibrateMat+0x138>)
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fde9 	bl	8001a3c <selectChannel>

					/* Read voltage */
					int raw_ADC_pressure = readPressure();
 8001e6a:	f7ff ff01 	bl	8001c70 <readPressure>
 8001e6e:	60b8      	str	r0, [r7, #8]
					data[array_cnt] += raw_ADC_pressure;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	6819      	ldr	r1, [r3, #0]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	440a      	add	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
					array_cnt++;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e002      	b.n	8001e96 <calibrateMat+0xba>
				       continue;
 8001e90:	bf00      	nop
 8001e92:	e000      	b.n	8001e96 <calibrateMat+0xba>
				       continue;
 8001e94:	bf00      	nop
				for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b07      	cmp	r3, #7
 8001ea0:	ddd0      	ble.n	8001e44 <calibrateMat+0x68>
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <calibrateMat+0x130>)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eaa:	4919      	ldr	r1, [pc, #100]	; (8001f10 <calibrateMat+0x134>)
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	f7ff fecb 	bl	8001c50 <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b07      	cmp	r3, #7
 8001ec4:	ddaf      	ble.n	8001e26 <calibrateMat+0x4a>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2b07      	cmp	r3, #7
 8001ed0:	dda2      	ble.n	8001e18 <calibrateMat+0x3c>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <calibrateMat+0x124>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eda:	490a      	ldr	r1, [pc, #40]	; (8001f04 <calibrateMat+0x128>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	f7ff feb3 	bl	8001c50 <disableMux>
    for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	dd81      	ble.n	8001dfa <calibrateMat+0x1e>
 8001ef6:	e000      	b.n	8001efa <calibrateMat+0x11e>
        return;
 8001ef8:	bf00      	nop
	}
}
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000024 	.word	0x20000024
 8001f04:	0800bbd8 	.word	0x0800bbd8
 8001f08:	20000060 	.word	0x20000060
 8001f0c:	20000034 	.word	0x20000034
 8001f10:	0800bbe8 	.word	0x0800bbe8
 8001f14:	20000054 	.word	0x20000054

08001f18 <calibrate>:
/**
    * @brief  :
    * @param  :
    * @retval :
    */
void calibrate(int data[], int len) {
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
	/* Calibrate over 10 mat readings */
    /* Don't use time based calibration in case of overflow */

    for(int round = 0; round < CALIBRATION_CYCLES; round++)
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e006      	b.n	8001f36 <calibrate+0x1e>
    {
        calibrateMat(data, len); // Add up x rounds for each point
 8001f28:	6839      	ldr	r1, [r7, #0]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff56 	bl	8001ddc <calibrateMat>
    for(int round = 0; round < CALIBRATION_CYCLES; round++)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3301      	adds	r3, #1
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	ddf5      	ble.n	8001f28 <calibrate+0x10>
    }

    // Take mean
	for (int i = 0; i < len; i++) {
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	e01b      	b.n	8001f7a <calibrate+0x62>
		data[i] = round(data[i]/CALIBRATION_CYCLES); // take mean of each node over x rounds
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <calibrate+0x74>)
 8001f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f52:	17db      	asrs	r3, r3, #31
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fa62 	bl	8000420 <__aeabi_i2d>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	0089      	lsls	r1, r1, #2
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	1844      	adds	r4, r0, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fac2 	bl	80004f4 <__aeabi_d2iz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < len; i++) {
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbdf      	blt.n	8001f42 <calibrate+0x2a>
	}
}
 8001f82:	bf00      	nop
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd90      	pop	{r4, r7, pc}
 8001f8c:	55555556 	.word	0x55555556

08001f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f94:	b672      	cpsid	i
}
 8001f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001f98:	e7fe      	b.n	8001f98 <Error_Handler+0x8>
	...

08001f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_MspInit+0x68>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_MspInit+0x68>)
 8001fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fac:	6253      	str	r3, [r2, #36]	; 0x24
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_MspInit+0x68>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_MspInit+0x68>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_MspInit+0x68>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_MspInit+0x68>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_MspInit+0x68>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HAL_MspInit+0x68>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6253      	str	r3, [r2, #36]	; 0x24
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_MspInit+0x68>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2005      	movs	r0, #5
 8001ff0:	f001 f809 	bl	8003006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001ff4:	2005      	movs	r0, #5
 8001ff6:	f001 f822 	bl	800303e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_ADC_MspInit+0x74>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d123      	bne.n	8002072 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_ADC_MspInit+0x78>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 800205a:	2302      	movs	r3, #2
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_ADC_MspInit+0x7c>)
 800206e:	f001 f88b 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40012400 	.word	0x40012400
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_I2C_MspInit+0x9c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d138      	bne.n	800211c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	61d3      	str	r3, [r2, #28]
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c8:	2312      	movs	r3, #18
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d4:	2304      	movs	r3, #4
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4813      	ldr	r0, [pc, #76]	; (800212c <HAL_I2C_MspInit+0xa4>)
 80020e0:	f001 f852 	bl	8003188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ee:	6253      	str	r3, [r2, #36]	; 0x24
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_I2C_MspInit+0xa0>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	201f      	movs	r0, #31
 8002102:	f000 ff80 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002106:	201f      	movs	r0, #31
 8002108:	f000 ff99 	bl	800303e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2020      	movs	r0, #32
 8002112:	f000 ff78 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002116:	2020      	movs	r0, #32
 8002118:	f000 ff91 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40005400 	.word	0x40005400
 8002128:	40023800 	.word	0x40023800
 800212c:	40020400 	.word	0x40020400

08002130 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RTC_MspInit+0x30>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10a      	bne.n	8002158 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RTC_MspInit+0x34>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	2029      	movs	r0, #41	; 0x29
 800214e:	f000 ff5a 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002152:	2029      	movs	r0, #41	; 0x29
 8002154:	f000 ff73 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40002800 	.word	0x40002800
 8002164:	424706d8 	.word	0x424706d8

08002168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_SPI_MspInit+0x8c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d130      	bne.n	80021ec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6253      	str	r3, [r2, #36]	; 0x24
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	61d3      	str	r3, [r2, #28]
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_SPI_MspInit+0x90>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80021be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021cc:	2305      	movs	r3, #5
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <HAL_SPI_MspInit+0x94>)
 80021d8:	f000 ffd6 	bl	8003188 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2024      	movs	r0, #36	; 0x24
 80021e2:	f000 ff10 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80021e6:	2024      	movs	r0, #36	; 0x24
 80021e8:	f000 ff29 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40003800 	.word	0x40003800
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020400 	.word	0x40020400

08002200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_UART_MspInit+0x8c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d130      	bne.n	8002284 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_UART_MspInit+0x90>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_UART_MspInit+0x90>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6253      	str	r3, [r2, #36]	; 0x24
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_UART_MspInit+0x90>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_MspInit+0x90>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_UART_MspInit+0x90>)
 8002240:	f043 0304 	orr.w	r3, r3, #4
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_MspInit+0x90>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8002252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002260:	2303      	movs	r3, #3
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002264:	2307      	movs	r3, #7
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	4809      	ldr	r0, [pc, #36]	; (8002294 <HAL_UART_MspInit+0x94>)
 8002270:	f000 ff8a 	bl	8003188 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2027      	movs	r0, #39	; 0x27
 800227a:	f000 fec4 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800227e:	2027      	movs	r0, #39	; 0x27
 8002280:	f000 fedd 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40004800 	.word	0x40004800
 8002290:	40023800 	.word	0x40023800
 8002294:	40020800 	.word	0x40020800

08002298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800229c:	e7fe      	b.n	800229c <NMI_Handler+0x4>

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <SysTick_Handler+0x34>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <SysTick_Handler+0x18>
		Timer1--;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <SysTick_Handler+0x34>)
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <SysTick_Handler+0x34>)
 80022f2:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <SysTick_Handler+0x38>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d005      	beq.n	8002308 <SysTick_Handler+0x2c>
		Timer2--;
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <SysTick_Handler+0x38>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <SysTick_Handler+0x38>)
 8002306:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002308:	f000 f90c 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000352 	.word	0x20000352
 8002314:	20000350 	.word	0x20000350

08002318 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <I2C1_EV_IRQHandler+0x10>)
 800232a:	f001 fa21 	bl	8003770 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000142c 	.word	0x2000142c

08002338 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <I2C1_ER_IRQHandler+0x10>)
 800233e:	f001 fb88 	bl	8003a52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000142c 	.word	0x2000142c

0800234c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <SPI2_IRQHandler+0x10>)
 8002352:	f004 fd03 	bl	8006d5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000358 	.word	0x20000358

08002360 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART3_IRQHandler+0x10>)
 8002366:	f004 ff15 	bl	8007194 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200003b0 	.word	0x200003b0

08002374 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <RTC_Alarm_IRQHandler+0x10>)
 800237a:	f004 f8b3 	bl	80064e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	20001488 	.word	0x20001488

08002388 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002392:	f008 ff61 	bl	800b258 <__errno>
 8002396:	4603      	mov	r3, r0
 8002398:	2216      	movs	r2, #22
 800239a:	601a      	str	r2, [r3, #0]
	return -1;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_exit>:

void _exit (int status)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ffe7 	bl	8002388 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ba:	e7fe      	b.n	80023ba <_exit+0x12>

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f008 ff34 	bl	800b258 <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	220c      	movs	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20008000 	.word	0x20008000
 800241c:	00000800 	.word	0x00000800
 8002420:	20000110 	.word	0x20000110
 8002424:	200045d8 	.word	0x200045d8

08002428 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800245a:	f7ff ffe5 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f008 ff15 	bl	800b28c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002462:	f7fe feb1 	bl	80011c8 <main>
  bx lr
 8002466:	4770      	bx	lr
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8002470:	0800c0b4 	.word	0x0800c0b4
  ldr r2, =_sbss
 8002474:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8002478:	200045d4 	.word	0x200045d4

0800247c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC1_IRQHandler>

0800247e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fdb1 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800248e:	200f      	movs	r0, #15
 8002490:	f000 f80e 	bl	80024b0 <HAL_InitTick>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	e001      	b.n	80024a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024a0:	f7ff fd7c 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_InitTick+0x68>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d022      	beq.n	800250a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024c4:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_InitTick+0x6c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b13      	ldr	r3, [pc, #76]	; (8002518 <HAL_InitTick+0x68>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fdbe 	bl	800305a <HAL_SYSTICK_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10f      	bne.n	8002504 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b0f      	cmp	r3, #15
 80024e8:	d809      	bhi.n	80024fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ea:	2200      	movs	r2, #0
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	f04f 30ff 	mov.w	r0, #4294967295
 80024f2:	f000 fd88 	bl	8003006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_InitTick+0x70>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	e007      	b.n	800250e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e004      	b.n	800250e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e001      	b.n	800250e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000074 	.word	0x20000074
 800251c:	2000006c 	.word	0x2000006c
 8002520:	20000070 	.word	0x20000070

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_IncTick+0x1c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_IncTick+0x20>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4413      	add	r3, r2
 8002532:	4a03      	ldr	r2, [pc, #12]	; (8002540 <HAL_IncTick+0x1c>)
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20002550 	.word	0x20002550
 8002544:	20000074 	.word	0x20000074

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_GetTick+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20002550 	.word	0x20002550

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff fff0 	bl	8002548 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d004      	beq.n	8002580 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_Delay+0x40>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002580:	bf00      	nop
 8002582:	f7ff ffe1 	bl	8002548 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	429a      	cmp	r2, r3
 8002590:	d8f7      	bhi.n	8002582 <HAL_Delay+0x26>
  {
  }
}
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000074 	.word	0x20000074

080025a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e127      	b.n	8002810 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025dc:	4b8e      	ldr	r3, [pc, #568]	; (8002818 <HAL_ADC_Init+0x278>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4a8d      	ldr	r2, [pc, #564]	; (8002818 <HAL_ADC_Init+0x278>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	4b8b      	ldr	r3, [pc, #556]	; (8002818 <HAL_ADC_Init+0x278>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fd07 	bl	8002008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 80ff 	bne.w	8002806 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	f043 0202 	orr.w	r2, r3, #2
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800261c:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_ADC_Init+0x27c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	497c      	ldr	r1, [pc, #496]	; (800281c <HAL_ADC_Init+0x27c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002636:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	4619      	mov	r1, r3
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800265a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002660:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	2302      	movs	r3, #2
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002682:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002686:	4313      	orrs	r3, r2
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	2b10      	cmp	r3, #16
 8002690:	d007      	beq.n	80026a2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800269a:	4313      	orrs	r3, r2
 800269c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269e:	4313      	orrs	r3, r2
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d04f      	beq.n	8002750 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b6:	4313      	orrs	r3, r2
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80026c2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6912      	ldr	r2, [r2, #16]
 80026c8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80026cc:	d003      	beq.n	80026d6 <HAL_ADC_Init+0x136>
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6912      	ldr	r2, [r2, #16]
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d102      	bne.n	80026dc <HAL_ADC_Init+0x13c>
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	e000      	b.n	80026de <HAL_ADC_Init+0x13e>
 80026dc:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80026de:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80026e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e2:	4313      	orrs	r3, r2
 80026e4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d125      	bne.n	800273c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d114      	bne.n	8002724 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	3b01      	subs	r3, #1
 8002700:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	fa92 f2a2 	rbit	r2, r2
 800270c:	617a      	str	r2, [r7, #20]
  return result;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	fab2 f282 	clz	r2, r2
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4093      	lsls	r3, r2
 8002718:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800271c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271e:	4313      	orrs	r3, r2
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
 8002722:	e00b      	b.n	800273c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4b37      	ldr	r3, [pc, #220]	; (8002820 <HAL_ADC_Init+0x280>)
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800274c:	430b      	orrs	r3, r1
 800274e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	4b33      	ldr	r3, [pc, #204]	; (8002824 <HAL_ADC_Init+0x284>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002760:	430b      	orrs	r3, r1
 8002762:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800276c:	d003      	beq.n	8002776 <HAL_ADC_Init+0x1d6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d119      	bne.n	80027aa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	3b01      	subs	r3, #1
 8002786:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800278a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	fa92 f2a2 	rbit	r2, r2
 8002792:	60fa      	str	r2, [r7, #12]
  return result;
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	fa03 f202 	lsl.w	r2, r3, r2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
 80027a8:	e007      	b.n	80027ba <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_ADC_Init+0x288>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d10b      	bne.n	80027e2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f023 0303 	bic.w	r3, r3, #3
 80027d8:	f043 0201 	orr.w	r2, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	64da      	str	r2, [r3, #76]	; 0x4c
 80027e0:	e014      	b.n	800280c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	f023 0312 	bic.w	r3, r3, #18
 80027ea:	f043 0210 	orr.w	r2, r3, #16
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	f043 0201 	orr.w	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002804:	e002      	b.n	800280c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800280c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002810:	4618      	mov	r0, r3
 8002812:	3738      	adds	r7, #56	; 0x38
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40023800 	.word	0x40023800
 800281c:	40012700 	.word	0x40012700
 8002820:	fcfc16ff 	.word	0xfcfc16ff
 8002824:	c0fff18d 	.word	0xc0fff18d
 8002828:	bf80fffe 	.word	0xbf80fffe

0800282c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_ADC_Start+0x1a>
 8002842:	2302      	movs	r3, #2
 8002844:	e04e      	b.n	80028e4 <HAL_ADC_Start+0xb8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa64 	bl	8002d1c <ADC_Enable>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d141      	bne.n	80028e2 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d106      	bne.n	80028ac <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	f023 0206 	bic.w	r2, r3, #6
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	651a      	str	r2, [r3, #80]	; 0x50
 80028aa:	e002      	b.n	80028b2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028c2:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028e0:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Stop+0x1a>
 8002902:	2302      	movs	r3, #2
 8002904:	e01a      	b.n	800293c <HAL_ADC_Stop+0x50>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa60 	bl	8002dd4 <ADC_ConversionStop_Disable>
 8002914:	4603      	mov	r3, r0
 8002916:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002960:	d113      	bne.n	800298a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800296c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002970:	d10b      	bne.n	800298a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e068      	b.n	8002a5c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800298a:	f7ff fddd 	bl	8002548 <HAL_GetTick>
 800298e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002990:	e021      	b.n	80029d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d01d      	beq.n	80029d6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_ADC_PollForConversion+0x6c>
 80029a0:	f7ff fdd2 	bl	8002548 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d212      	bcs.n	80029d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e042      	b.n	8002a5c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0d6      	beq.n	8002992 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0212 	mvn.w	r2, #18
 80029f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d124      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d111      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x20>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e134      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x28a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d81c      	bhi.n	8002ae6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b05      	subs	r3, #5
 8002abe:	221f      	movs	r2, #31
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4019      	ands	r1, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3b05      	subs	r3, #5
 8002ad8:	fa00 f203 	lsl.w	r2, r0, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae4:	e07e      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d81c      	bhi.n	8002b28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	3b23      	subs	r3, #35	; 0x23
 8002b00:	221f      	movs	r2, #31
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4019      	ands	r1, r3
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	3b23      	subs	r3, #35	; 0x23
 8002b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b26:	e05d      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b12      	cmp	r3, #18
 8002b2e:	d81c      	bhi.n	8002b6a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b41      	subs	r3, #65	; 0x41
 8002b42:	221f      	movs	r2, #31
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b41      	subs	r3, #65	; 0x41
 8002b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
 8002b68:	e03c      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b18      	cmp	r3, #24
 8002b70:	d81c      	bhi.n	8002bac <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	3b5f      	subs	r3, #95	; 0x5f
 8002b84:	221f      	movs	r2, #31
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	4019      	ands	r1, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b5f      	subs	r3, #95	; 0x5f
 8002b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8002baa:	e01b      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	3b7d      	subs	r3, #125	; 0x7d
 8002bbe:	221f      	movs	r2, #31
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b7d      	subs	r3, #125	; 0x7d
 8002bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d81a      	bhi.n	8002c22 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	4019      	ands	r1, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6898      	ldr	r0, [r3, #8]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	fa00 f203 	lsl.w	r2, r0, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	615a      	str	r2, [r3, #20]
 8002c20:	e042      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b13      	cmp	r3, #19
 8002c28:	d81c      	bhi.n	8002c64 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b1e      	subs	r3, #30
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4019      	ands	r1, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6898      	ldr	r0, [r3, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	3b1e      	subs	r3, #30
 8002c56:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	611a      	str	r2, [r3, #16]
 8002c62:	e021      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b1a      	cmp	r3, #26
 8002c6a:	d81c      	bhi.n	8002ca6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68d9      	ldr	r1, [r3, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b3c      	subs	r3, #60	; 0x3c
 8002c7e:	2207      	movs	r2, #7
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	4019      	ands	r1, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6898      	ldr	r0, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	3b3c      	subs	r3, #60	; 0x3c
 8002c98:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e000      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ca6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d003      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cb4:	2b11      	cmp	r3, #17
 8002cb6:	d121      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_ADC_ConfigChannel+0x294>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11b      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_ADC_ConfigChannel+0x294>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <HAL_ADC_ConfigChannel+0x294>)
 8002cca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cce:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d111      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_ADC_ConfigChannel+0x298>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_ADC_ConfigChannel+0x29c>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	0c9a      	lsrs	r2, r3, #18
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002cee:	e002      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f9      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40012700 	.word	0x40012700
 8002d14:	2000006c 	.word	0x2000006c
 8002d18:	431bde83 	.word	0x431bde83

08002d1c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d043      	beq.n	8002dc2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <ADC_Enable+0xb0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <ADC_Enable+0xb4>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0c9a      	lsrs	r2, r3, #18
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002d5e:	e002      	b.n	8002d66 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002d6c:	f7ff fbec 	bl	8002548 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d72:	e01f      	b.n	8002db4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002d74:	f7ff fbe8 	bl	8002548 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d918      	bls.n	8002db4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d011      	beq.n	8002db4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d94:	f043 0210 	orr.w	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002da0:	f043 0201 	orr.w	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e007      	b.n	8002dc4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d1d8      	bne.n	8002d74 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2000006c 	.word	0x2000006c
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b40      	cmp	r3, #64	; 0x40
 8002dec:	d12e      	bne.n	8002e4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dfe:	f7ff fba3 	bl	8002548 <HAL_GetTick>
 8002e02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e04:	e01b      	b.n	8002e3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002e06:	f7ff fb9f 	bl	8002548 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d914      	bls.n	8002e3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b40      	cmp	r3, #64	; 0x40
 8002e20:	d10d      	bne.n	8002e3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d0dc      	beq.n	8002e06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	; (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4906      	ldr	r1, [pc, #24]	; (8002ef0 <__NVIC_EnableIRQ+0x34>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
         );
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	f7ff ff90 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff2d 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff42 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff90 	bl	8002f48 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5f 	bl	8002ef4 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff35 	bl	8002ebc <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff ffa2 	bl	8002fac <SysTick_Config>
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d008      	beq.n	800309c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2204      	movs	r2, #4
 800308e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e022      	b.n	80030e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 020e 	bic.w	r2, r2, #14
 80030aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0201 	bic.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 021c 	and.w	r2, r3, #28
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d005      	beq.n	8003110 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2204      	movs	r2, #4
 8003108:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e029      	b.n	8003164 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020e 	bic.w	r2, r2, #14
 800311e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0201 	bic.w	r2, r2, #1
 800312e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f003 021c 	and.w	r2, r3, #28
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	2101      	movs	r1, #1
 800313e:	fa01 f202 	lsl.w	r2, r1, r2
 8003142:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	4798      	blx	r3
    }
  }
  return status;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800317c:	b2db      	uxtb	r3, r3
}
 800317e:	4618      	mov	r0, r3
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800319e:	e154      	b.n	800344a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	4013      	ands	r3, r2
 80031ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 8146 	beq.w	8003444 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d005      	beq.n	80031d0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d130      	bne.n	8003232 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	2203      	movs	r2, #3
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003206:	2201      	movs	r2, #1
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0201 	and.w	r2, r3, #1
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	2b03      	cmp	r3, #3
 800323c:	d017      	beq.n	800326e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d123      	bne.n	80032c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	08da      	lsrs	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3208      	adds	r2, #8
 8003282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003286:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	220f      	movs	r2, #15
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4013      	ands	r3, r2
 800329c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	6939      	ldr	r1, [r7, #16]
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0203 	and.w	r2, r3, #3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80a0 	beq.w	8003444 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003304:	4b58      	ldr	r3, [pc, #352]	; (8003468 <HAL_GPIO_Init+0x2e0>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_GPIO_Init+0x2e0>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	4b55      	ldr	r3, [pc, #340]	; (8003468 <HAL_GPIO_Init+0x2e0>)
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
 800331a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800331c:	4a53      	ldr	r2, [pc, #332]	; (800346c <HAL_GPIO_Init+0x2e4>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003328:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	220f      	movs	r2, #15
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a4b      	ldr	r2, [pc, #300]	; (8003470 <HAL_GPIO_Init+0x2e8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d019      	beq.n	800337c <HAL_GPIO_Init+0x1f4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_GPIO_Init+0x2ec>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <HAL_GPIO_Init+0x1f0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a49      	ldr	r2, [pc, #292]	; (8003478 <HAL_GPIO_Init+0x2f0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00d      	beq.n	8003374 <HAL_GPIO_Init+0x1ec>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a48      	ldr	r2, [pc, #288]	; (800347c <HAL_GPIO_Init+0x2f4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <HAL_GPIO_Init+0x1e8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <HAL_GPIO_Init+0x2f8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_GPIO_Init+0x1e4>
 8003368:	2304      	movs	r3, #4
 800336a:	e008      	b.n	800337e <HAL_GPIO_Init+0x1f6>
 800336c:	2305      	movs	r3, #5
 800336e:	e006      	b.n	800337e <HAL_GPIO_Init+0x1f6>
 8003370:	2303      	movs	r3, #3
 8003372:	e004      	b.n	800337e <HAL_GPIO_Init+0x1f6>
 8003374:	2302      	movs	r3, #2
 8003376:	e002      	b.n	800337e <HAL_GPIO_Init+0x1f6>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_GPIO_Init+0x1f6>
 800337c:	2300      	movs	r3, #0
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	f002 0203 	and.w	r2, r2, #3
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	4093      	lsls	r3, r2
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800338e:	4937      	ldr	r1, [pc, #220]	; (800346c <HAL_GPIO_Init+0x2e4>)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033c0:	4a30      	ldr	r2, [pc, #192]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033c6:	4b2f      	ldr	r3, [pc, #188]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033ea:	4a26      	ldr	r2, [pc, #152]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4013      	ands	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800343e:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_GPIO_Init+0x2fc>)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3301      	adds	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f aea3 	bne.w	80031a0 <HAL_GPIO_Init+0x18>
  }
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	40010000 	.word	0x40010000
 8003470:	40020000 	.word	0x40020000
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021000 	.word	0x40021000
 8003484:	40010400 	.word	0x40010400

08003488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e001      	b.n	80034aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]
 80034c2:	4613      	mov	r3, r2
 80034c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034c6:	787b      	ldrb	r3, [r7, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034cc:	887a      	ldrh	r2, [r7, #2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80034d2:	e003      	b.n	80034dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	041a      	lsls	r2, r3, #16
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e12b      	b.n	8003752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fe fdba 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800353a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800354c:	f002 fae6 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a81      	ldr	r2, [pc, #516]	; (800375c <HAL_I2C_Init+0x274>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d807      	bhi.n	800356c <HAL_I2C_Init+0x84>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a80      	ldr	r2, [pc, #512]	; (8003760 <HAL_I2C_Init+0x278>)
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	2301      	movls	r3, #1
 8003566:	2300      	movhi	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e006      	b.n	800357a <HAL_I2C_Init+0x92>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4a7d      	ldr	r2, [pc, #500]	; (8003764 <HAL_I2C_Init+0x27c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	bf94      	ite	ls
 8003574:	2301      	movls	r3, #1
 8003576:	2300      	movhi	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e0e7      	b.n	8003752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a78      	ldr	r2, [pc, #480]	; (8003768 <HAL_I2C_Init+0x280>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	0c9b      	lsrs	r3, r3, #18
 800358c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a6a      	ldr	r2, [pc, #424]	; (800375c <HAL_I2C_Init+0x274>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d802      	bhi.n	80035bc <HAL_I2C_Init+0xd4>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	3301      	adds	r3, #1
 80035ba:	e009      	b.n	80035d0 <HAL_I2C_Init+0xe8>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	4a69      	ldr	r2, [pc, #420]	; (800376c <HAL_I2C_Init+0x284>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	3301      	adds	r3, #1
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	495c      	ldr	r1, [pc, #368]	; (800375c <HAL_I2C_Init+0x274>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d819      	bhi.n	8003624 <HAL_I2C_Init+0x13c>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1e59      	subs	r1, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003604:	400b      	ands	r3, r1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_I2C_Init+0x138>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e59      	subs	r1, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fbb1 f3f3 	udiv	r3, r1, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361e:	e051      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 8003620:	2304      	movs	r3, #4
 8003622:	e04f      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d111      	bne.n	8003650 <HAL_I2C_Init+0x168>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e58      	subs	r0, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e012      	b.n	8003676 <HAL_I2C_Init+0x18e>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1e58      	subs	r0, r3, #1
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6859      	ldr	r1, [r3, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	fbb0 f3f3 	udiv	r3, r0, r3
 8003666:	3301      	adds	r3, #1
 8003668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Init+0x196>
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10e      	bne.n	80036a4 <HAL_I2C_Init+0x1bc>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1e58      	subs	r0, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	440b      	add	r3, r1
 8003694:	fbb0 f3f3 	udiv	r3, r0, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a2:	e00f      	b.n	80036c4 <HAL_I2C_Init+0x1dc>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	6809      	ldr	r1, [r1, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6911      	ldr	r1, [r2, #16]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	4311      	orrs	r1, r2
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	430b      	orrs	r3, r1
 8003706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	000186a0 	.word	0x000186a0
 8003760:	001e847f 	.word	0x001e847f
 8003764:	003d08ff 	.word	0x003d08ff
 8003768:	431bde83 	.word	0x431bde83
 800376c:	10624dd3 	.word	0x10624dd3

08003770 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003790:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b10      	cmp	r3, #16
 800379e:	d003      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x38>
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b40      	cmp	r3, #64	; 0x40
 80037a4:	f040 80c1 	bne.w	800392a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_I2C_EV_IRQHandler+0x6e>
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80037c8:	d003      	beq.n	80037d2 <HAL_I2C_EV_IRQHandler+0x62>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80037d0:	d101      	bne.n	80037d6 <HAL_I2C_EV_IRQHandler+0x66>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_I2C_EV_IRQHandler+0x68>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	f000 8132 	beq.w	8003a42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_I2C_EV_IRQHandler+0x92>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	0a5b      	lsrs	r3, r3, #9
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d006      	beq.n	8003802 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f001 fc63 	bl	80050c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fd6f 	bl	80042de <I2C_Master_SB>
 8003800:	e092      	b.n	8003928 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	08db      	lsrs	r3, r3, #3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_I2C_EV_IRQHandler+0xb2>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fde4 	bl	80043e8 <I2C_Master_ADD10>
 8003820:	e082      	b.n	8003928 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_I2C_EV_IRQHandler+0xd2>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	0a5b      	lsrs	r3, r3, #9
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fdfd 	bl	800443a <I2C_Master_ADDR>
 8003840:	e072      	b.n	8003928 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	089b      	lsrs	r3, r3, #2
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d03b      	beq.n	80038c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385c:	f000 80f3 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	09db      	lsrs	r3, r3, #7
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00f      	beq.n	800388c <HAL_I2C_EV_IRQHandler+0x11c>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	0a9b      	lsrs	r3, r3, #10
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d009      	beq.n	800388c <HAL_I2C_EV_IRQHandler+0x11c>
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d103      	bne.n	800388c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9e9 	bl	8003c5c <I2C_MasterTransmit_TXE>
 800388a:	e04d      	b.n	8003928 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80d6 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	0a5b      	lsrs	r3, r3, #9
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80cf 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038a8:	7bbb      	ldrb	r3, [r7, #14]
 80038aa:	2b21      	cmp	r3, #33	; 0x21
 80038ac:	d103      	bne.n	80038b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa70 	bl	8003d94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b4:	e0c7      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	2b40      	cmp	r3, #64	; 0x40
 80038ba:	f040 80c4 	bne.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fade 	bl	8003e80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038c4:	e0bf      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d4:	f000 80b7 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	099b      	lsrs	r3, r3, #6
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00f      	beq.n	8003904 <HAL_I2C_EV_IRQHandler+0x194>
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	0a9b      	lsrs	r3, r3, #10
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <HAL_I2C_EV_IRQHandler+0x194>
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fb53 	bl	8003fa8 <I2C_MasterReceive_RXNE>
 8003902:	e011      	b.n	8003928 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 809a 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	0a5b      	lsrs	r3, r3, #9
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 8093 	beq.w	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fbf2 	bl	800410a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003926:	e08e      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003928:	e08d      	b.n	8003a46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d004      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e007      	b.n	800394c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x20e>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00c      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003974:	69b9      	ldr	r1, [r7, #24]
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 ffab 	bl	80048d2 <I2C_Slave_ADDR>
 800397c:	e066      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d009      	beq.n	800399e <HAL_I2C_EV_IRQHandler+0x22e>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	0a5b      	lsrs	r3, r3, #9
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 ffe6 	bl	8004968 <I2C_Slave_STOPF>
 800399c:	e056      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800399e:	7bbb      	ldrb	r3, [r7, #14]
 80039a0:	2b21      	cmp	r3, #33	; 0x21
 80039a2:	d002      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x23a>
 80039a4:	7bbb      	ldrb	r3, [r7, #14]
 80039a6:	2b29      	cmp	r3, #41	; 0x29
 80039a8:	d125      	bne.n	80039f6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	09db      	lsrs	r3, r3, #7
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <HAL_I2C_EV_IRQHandler+0x266>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	0a9b      	lsrs	r3, r3, #10
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_I2C_EV_IRQHandler+0x266>
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fec3 	bl	800475a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039d4:	e039      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d033      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2da>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	0a5b      	lsrs	r3, r3, #9
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02d      	beq.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fef0 	bl	80047d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f4:	e029      	b.n	8003a4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00f      	beq.n	8003a22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	0a9b      	lsrs	r3, r3, #10
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 fefa 	bl	8004814 <I2C_SlaveReceive_RXNE>
 8003a20:	e014      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00e      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	0a5b      	lsrs	r3, r3, #9
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 ff28 	bl	8004890 <I2C_SlaveReceive_BTF>
 8003a40:	e004      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a4c:	3720      	adds	r7, #32
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b08a      	sub	sp, #40	; 0x28
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	0a1b      	lsrs	r3, r3, #8
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00e      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x4e>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	0a5b      	lsrs	r3, r3, #9
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00e      	beq.n	8003aca <HAL_I2C_ER_IRQHandler+0x78>
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ac8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	0a9b      	lsrs	r3, r3, #10
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03f      	beq.n	8003b56 <HAL_I2C_ER_IRQHandler+0x104>
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d039      	beq.n	8003b56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003ae2:	7efb      	ldrb	r3, [r7, #27]
 8003ae4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003afc:	7ebb      	ldrb	r3, [r7, #26]
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d112      	bne.n	8003b28 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <HAL_I2C_ER_IRQHandler+0xd6>
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b21      	cmp	r3, #33	; 0x21
 8003b0c:	d008      	beq.n	8003b20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b29      	cmp	r3, #41	; 0x29
 8003b12:	d005      	beq.n	8003b20 <HAL_I2C_ER_IRQHandler+0xce>
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	2b28      	cmp	r3, #40	; 0x28
 8003b18:	d106      	bne.n	8003b28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b21      	cmp	r3, #33	; 0x21
 8003b1e:	d103      	bne.n	8003b28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f851 	bl	8004bc8 <I2C_Slave_AF>
 8003b26:	e016      	b.n	8003b56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b3a:	7efb      	ldrb	r3, [r7, #27]
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d002      	beq.n	8003b46 <HAL_I2C_ER_IRQHandler+0xf4>
 8003b40:	7efb      	ldrb	r3, [r7, #27]
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d107      	bne.n	8003b56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	0adb      	lsrs	r3, r3, #11
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0x12e>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003b7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f001 f888 	bl	8004ca8 <I2C_ITError>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3728      	adds	r7, #40	; 0x28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	70fb      	strb	r3, [r7, #3]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr

08003c02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d150      	bne.n	8003d24 <I2C_MasterTransmit_TXE+0xc8>
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b21      	cmp	r3, #33	; 0x21
 8003c86:	d14d      	bne.n	8003d24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d01d      	beq.n	8003cca <I2C_MasterTransmit_TXE+0x6e>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d01a      	beq.n	8003cca <I2C_MasterTransmit_TXE+0x6e>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c9a:	d016      	beq.n	8003cca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003caa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2211      	movs	r2, #17
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff ff6c 	bl	8003ba0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cc8:	e060      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b40      	cmp	r3, #64	; 0x40
 8003d02:	d107      	bne.n	8003d14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff ff81 	bl	8003c14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d12:	e03b      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff3f 	bl	8003ba0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d22:	e033      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b21      	cmp	r3, #33	; 0x21
 8003d28:	d005      	beq.n	8003d36 <I2C_MasterTransmit_TXE+0xda>
 8003d2a:	7bbb      	ldrb	r3, [r7, #14]
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d12d      	bne.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	2b22      	cmp	r3, #34	; 0x22
 8003d34:	d12a      	bne.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d50:	e01c      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d103      	bne.n	8003d66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f88e 	bl	8003e80 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d64:	e012      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d8a:	e7ff      	b.n	8003d8c <I2C_MasterTransmit_TXE+0x130>
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b21      	cmp	r3, #33	; 0x21
 8003dac:	d164      	bne.n	8003e78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d012      	beq.n	8003dde <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ddc:	e04c      	b.n	8003e78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d01d      	beq.n	8003e20 <I2C_MasterTransmit_BTF+0x8c>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d01a      	beq.n	8003e20 <I2C_MasterTransmit_BTF+0x8c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df0:	d016      	beq.n	8003e20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2211      	movs	r2, #17
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fec1 	bl	8003ba0 <HAL_I2C_MasterTxCpltCallback>
}
 8003e1e:	e02b      	b.n	8003e78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d107      	bne.n	8003e6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fed6 	bl	8003c14 <HAL_I2C_MemTxCpltCallback>
}
 8003e68:	e006      	b.n	8003e78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fe94 	bl	8003ba0 <HAL_I2C_MasterTxCpltCallback>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d11d      	bne.n	8003ed4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10b      	bne.n	8003eb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003eb6:	e073      	b.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	121b      	asrs	r3, r3, #8
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ed2:	e065      	b.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10b      	bne.n	8003ef4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ef2:	e055      	b.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d151      	bne.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b22      	cmp	r3, #34	; 0x22
 8003f00:	d10d      	bne.n	8003f1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f1c:	e040      	b.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d015      	beq.n	8003f54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d112      	bne.n	8003f54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f52:	e025      	b.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d120      	bne.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	2b21      	cmp	r3, #33	; 0x21
 8003f62:	d11d      	bne.n	8003fa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fe3a 	bl	8003c14 <HAL_I2C_MemTxCpltCallback>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b22      	cmp	r3, #34	; 0x22
 8003fba:	f040 80a2 	bne.w	8004102 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d921      	bls.n	8004010 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	f040 8082 	bne.w	8004102 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800400e:	e078      	b.n	8004102 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2b02      	cmp	r3, #2
 8004016:	d074      	beq.n	8004102 <I2C_MasterReceive_RXNE+0x15a>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d002      	beq.n	8004024 <I2C_MasterReceive_RXNE+0x7c>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d16e      	bne.n	8004102 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 f819 	bl	800505c <I2C_WaitOnSTOPRequestThroughIT>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d142      	bne.n	80040b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800404e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	3b01      	subs	r3, #1
 8004070:	b29a      	uxth	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d10a      	bne.n	80040a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fdc4 	bl	8003c26 <HAL_I2C_MemRxCpltCallback>
}
 800409e:	e030      	b.n	8004102 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2212      	movs	r2, #18
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fd7f 	bl	8003bb2 <HAL_I2C_MasterRxCpltCallback>
}
 80040b4:	e025      	b.n	8004102 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fd9b 	bl	8003c38 <HAL_I2C_ErrorCallback>
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b04      	cmp	r3, #4
 8004120:	d11b      	bne.n	800415a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004158:	e0bd      	b.n	80042d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b03      	cmp	r3, #3
 8004162:	d129      	bne.n	80041b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004172:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b04      	cmp	r3, #4
 8004178:	d00a      	beq.n	8004190 <I2C_MasterReceive_BTF+0x86>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d007      	beq.n	8004190 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80041b6:	e08e      	b.n	80042d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d176      	bne.n	80042b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d002      	beq.n	80041ce <I2C_MasterReceive_BTF+0xc4>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d108      	bne.n	80041e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e019      	b.n	8004214 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d002      	beq.n	80041ec <I2C_MasterReceive_BTF+0xe2>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d108      	bne.n	80041fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e00a      	b.n	8004214 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b10      	cmp	r3, #16
 8004202:	d007      	beq.n	8004214 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800426e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d10a      	bne.n	800429a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fcc7 	bl	8003c26 <HAL_I2C_MemRxCpltCallback>
}
 8004298:	e01d      	b.n	80042d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2212      	movs	r2, #18
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fc82 	bl	8003bb2 <HAL_I2C_MasterRxCpltCallback>
}
 80042ae:	e012      	b.n	80042d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d117      	bne.n	8004322 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800430a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800430c:	e067      	b.n	80043de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]
}
 8004320:	e05d      	b.n	80043de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432a:	d133      	bne.n	8004394 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b21      	cmp	r3, #33	; 0x21
 8004336:	d109      	bne.n	800434c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	b2db      	uxtb	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	e008      	b.n	800435e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	b2db      	uxtb	r3, r3
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <I2C_Master_SB+0x92>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d108      	bne.n	8004382 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d032      	beq.n	80043de <I2C_Master_SB+0x100>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02d      	beq.n	80043de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004390:	605a      	str	r2, [r3, #4]
}
 8004392:	e024      	b.n	80043de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10e      	bne.n	80043ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	11db      	asrs	r3, r3, #7
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	f003 0306 	and.w	r3, r3, #6
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f063 030f 	orn	r3, r3, #15
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	611a      	str	r2, [r3, #16]
}
 80043b8:	e011      	b.n	80043de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d10d      	bne.n	80043de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	11db      	asrs	r3, r3, #7
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 0306 	and.w	r3, r3, #6
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f063 030e 	orn	r3, r3, #14
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	611a      	str	r2, [r3, #16]
}
 80043de:	bf00      	nop
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d004      	beq.n	800440e <I2C_Master_ADD10+0x26>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00c      	beq.n	8004430 <I2C_Master_ADD10+0x48>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442e:	605a      	str	r2, [r3, #4]
  }
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800443a:	b480      	push	{r7}
 800443c:	b091      	sub	sp, #68	; 0x44
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b22      	cmp	r3, #34	; 0x22
 8004462:	f040 8169 	bne.w	8004738 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <I2C_Master_ADDR+0x54>
 800446e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004472:	2b40      	cmp	r3, #64	; 0x40
 8004474:	d10b      	bne.n	800448e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	633b      	str	r3, [r7, #48]	; 0x30
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	e160      	b.n	8004750 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11d      	bne.n	80044d2 <I2C_Master_ADDR+0x98>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800449e:	d118      	bne.n	80044d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	651a      	str	r2, [r3, #80]	; 0x50
 80044d0:	e13e      	b.n	8004750 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d113      	bne.n	8004504 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044dc:	2300      	movs	r3, #0
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e115      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	f040 808a 	bne.w	8004624 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004512:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004516:	d137      	bne.n	8004588 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004526:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004536:	d113      	bne.n	8004560 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	e0e7      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	623b      	str	r3, [r7, #32]
 8004574:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e0d3      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b08      	cmp	r3, #8
 800458c:	d02e      	beq.n	80045ec <I2C_Master_ADDR+0x1b2>
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b20      	cmp	r3, #32
 8004592:	d02b      	beq.n	80045ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	2b12      	cmp	r3, #18
 8004598:	d102      	bne.n	80045a0 <I2C_Master_ADDR+0x166>
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459c:	2b01      	cmp	r3, #1
 800459e:	d125      	bne.n	80045ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d00e      	beq.n	80045c4 <I2C_Master_ADDR+0x18a>
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d00b      	beq.n	80045c4 <I2C_Master_ADDR+0x18a>
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d008      	beq.n	80045c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e007      	b.n	80045d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	e0a1      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e085      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d14d      	bne.n	80046ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	2b04      	cmp	r3, #4
 8004632:	d016      	beq.n	8004662 <I2C_Master_ADDR+0x228>
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	2b02      	cmp	r3, #2
 8004638:	d013      	beq.n	8004662 <I2C_Master_ADDR+0x228>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b10      	cmp	r3, #16
 800463e:	d010      	beq.n	8004662 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	e007      	b.n	8004672 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004670:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d117      	bne.n	80046b2 <I2C_Master_ADDR+0x278>
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004688:	d00b      	beq.n	80046a2 <I2C_Master_ADDR+0x268>
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	2b01      	cmp	r3, #1
 800468e:	d008      	beq.n	80046a2 <I2C_Master_ADDR+0x268>
 8004690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004692:	2b08      	cmp	r3, #8
 8004694:	d005      	beq.n	80046a2 <I2C_Master_ADDR+0x268>
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b10      	cmp	r3, #16
 800469a:	d002      	beq.n	80046a2 <I2C_Master_ADDR+0x268>
 800469c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469e:	2b20      	cmp	r3, #32
 80046a0:	d107      	bne.n	80046b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	e032      	b.n	8004730 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e8:	d117      	bne.n	800471a <I2C_Master_ADDR+0x2e0>
 80046ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046f0:	d00b      	beq.n	800470a <I2C_Master_ADDR+0x2d0>
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d008      	beq.n	800470a <I2C_Master_ADDR+0x2d0>
 80046f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d005      	beq.n	800470a <I2C_Master_ADDR+0x2d0>
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	2b10      	cmp	r3, #16
 8004702:	d002      	beq.n	800470a <I2C_Master_ADDR+0x2d0>
 8004704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004706:	2b20      	cmp	r3, #32
 8004708:	d107      	bne.n	800471a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004718:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004736:	e00b      	b.n	8004750 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
}
 800474e:	e7ff      	b.n	8004750 <I2C_Master_ADDR+0x316>
 8004750:	bf00      	nop
 8004752:	3744      	adds	r7, #68	; 0x44
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr

0800475a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29b      	uxth	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d02b      	beq.n	80047cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d114      	bne.n	80047cc <I2C_SlaveTransmit_TXE+0x72>
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	2b29      	cmp	r3, #41	; 0x29
 80047a6:	d111      	bne.n	80047cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2221      	movs	r2, #33	; 0x21
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2228      	movs	r2, #40	; 0x28
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff f9fc 	bl	8003bc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d011      	beq.n	800480a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d02c      	beq.n	8004888 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	1c5a      	adds	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d114      	bne.n	8004888 <I2C_SlaveReceive_RXNE+0x74>
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b2a      	cmp	r3, #42	; 0x2a
 8004862:	d111      	bne.n	8004888 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2222      	movs	r2, #34	; 0x22
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff f9a7 	bl	8003bd6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048dc:	2300      	movs	r3, #0
 80048de:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048ec:	2b28      	cmp	r3, #40	; 0x28
 80048ee:	d127      	bne.n	8004940 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048fe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	09db      	lsrs	r3, r3, #7
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d103      	bne.n	8004924 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	81bb      	strh	r3, [r7, #12]
 8004922:	e002      	b.n	800492a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004932:	89ba      	ldrh	r2, [r7, #12]
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff f955 	bl	8003be8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800493e:	e00e      	b.n	800495e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004940:	2300      	movs	r3, #0
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	60bb      	str	r3, [r7, #8]
 8004954:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800495e:	bf00      	nop
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004976:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004986:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c4:	d172      	bne.n	8004aac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b22      	cmp	r3, #34	; 0x22
 80049ca:	d002      	beq.n	80049d2 <I2C_Slave_STOPF+0x6a>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d135      	bne.n	8004a3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fbaf 	bl	800316e <HAL_DMA_GetState>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d049      	beq.n	8004aaa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	4a69      	ldr	r2, [pc, #420]	; (8004bc0 <I2C_Slave_STOPF+0x258>)
 8004a1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fb62 	bl	80030ec <HAL_DMA_Abort_IT>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d03d      	beq.n	8004aaa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a3c:	e035      	b.n	8004aaa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0204 	orr.w	r2, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe fb79 	bl	800316e <HAL_DMA_GetState>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d014      	beq.n	8004aac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	4a4e      	ldr	r2, [pc, #312]	; (8004bc0 <I2C_Slave_STOPF+0x258>)
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fe fb2c 	bl	80030ec <HAL_DMA_Abort_IT>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4798      	blx	r3
 8004aa8:	e000      	b.n	8004aac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aaa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d03e      	beq.n	8004b34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d112      	bne.n	8004aea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691a      	ldr	r2, [r3, #16]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d112      	bne.n	8004b1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8b3 	bl	8004ca8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b42:	e039      	b.n	8004bb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b2a      	cmp	r3, #42	; 0x2a
 8004b48:	d109      	bne.n	8004b5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2228      	movs	r2, #40	; 0x28
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff f83c 	bl	8003bd6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b28      	cmp	r3, #40	; 0x28
 8004b68:	d111      	bne.n	8004b8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <I2C_Slave_STOPF+0x25c>)
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff f83b 	bl	8003c02 <HAL_I2C_ListenCpltCallback>
}
 8004b8c:	e014      	b.n	8004bb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	d002      	beq.n	8004b9c <I2C_Slave_STOPF+0x234>
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b22      	cmp	r3, #34	; 0x22
 8004b9a:	d10d      	bne.n	8004bb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff f80f 	bl	8003bd6 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	08004f0d 	.word	0x08004f0d
 8004bc4:	ffff0000 	.word	0xffff0000

08004bc8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d002      	beq.n	8004bea <I2C_Slave_AF+0x22>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b20      	cmp	r3, #32
 8004be8:	d129      	bne.n	8004c3e <I2C_Slave_AF+0x76>
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b28      	cmp	r3, #40	; 0x28
 8004bee:	d126      	bne.n	8004c3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a2c      	ldr	r2, [pc, #176]	; (8004ca4 <I2C_Slave_AF+0xdc>)
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fe ffe3 	bl	8003c02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c3c:	e02e      	b.n	8004c9c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	2b21      	cmp	r3, #33	; 0x21
 8004c42:	d126      	bne.n	8004c92 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <I2C_Slave_AF+0xdc>)
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2221      	movs	r2, #33	; 0x21
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c88:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fe ff9a 	bl	8003bc4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c90:	e004      	b.n	8004c9c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c9a:	615a      	str	r2, [r3, #20]
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	ffff0000 	.word	0xffff0000

08004ca8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d002      	beq.n	8004ccc <I2C_ITError+0x24>
 8004cc6:	7bbb      	ldrb	r3, [r7, #14]
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d10a      	bne.n	8004ce2 <I2C_ITError+0x3a>
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b22      	cmp	r3, #34	; 0x22
 8004cd0:	d107      	bne.n	8004ce2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce8:	2b28      	cmp	r3, #40	; 0x28
 8004cea:	d107      	bne.n	8004cfc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2228      	movs	r2, #40	; 0x28
 8004cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004cfa:	e015      	b.n	8004d28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d00a      	beq.n	8004d22 <I2C_ITError+0x7a>
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b60      	cmp	r3, #96	; 0x60
 8004d10:	d007      	beq.n	8004d22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d162      	bne.n	8004dfe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d020      	beq.n	8004d98 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5a:	4a6a      	ldr	r2, [pc, #424]	; (8004f04 <I2C_ITError+0x25c>)
 8004d5c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe f9c2 	bl	80030ec <HAL_DMA_Abort_IT>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 8089 	beq.w	8004e82 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d92:	4610      	mov	r0, r2
 8004d94:	4798      	blx	r3
 8004d96:	e074      	b.n	8004e82 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	4a59      	ldr	r2, [pc, #356]	; (8004f04 <I2C_ITError+0x25c>)
 8004d9e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe f9a1 	bl	80030ec <HAL_DMA_Abort_IT>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d068      	beq.n	8004e82 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dba:	2b40      	cmp	r3, #64	; 0x40
 8004dbc:	d10b      	bne.n	8004dd6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4798      	blx	r3
 8004dfc:	e041      	b.n	8004e82 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b60      	cmp	r3, #96	; 0x60
 8004e08:	d125      	bne.n	8004e56 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d10b      	bne.n	8004e3e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe fefb 	bl	8003c4a <HAL_I2C_AbortCpltCallback>
 8004e54:	e015      	b.n	8004e82 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d10b      	bne.n	8004e7c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fe fedb 	bl	8003c38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10e      	bne.n	8004eb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d104      	bne.n	8004eb0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d007      	beq.n	8004ec0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d113      	bne.n	8004efc <I2C_ITError+0x254>
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b28      	cmp	r3, #40	; 0x28
 8004ed8:	d110      	bne.n	8004efc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a0a      	ldr	r2, [pc, #40]	; (8004f08 <I2C_ITError+0x260>)
 8004ede:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fe fe83 	bl	8003c02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	08004f0d 	.word	0x08004f0d
 8004f08:	ffff0000 	.word	0xffff0000

08004f0c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f26:	4b4b      	ldr	r3, [pc, #300]	; (8005054 <I2C_DMAAbort+0x148>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	08db      	lsrs	r3, r3, #3
 8004f2c:	4a4a      	ldr	r2, [pc, #296]	; (8005058 <I2C_DMAAbort+0x14c>)
 8004f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f32:	0a1a      	lsrs	r2, r3, #8
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00da      	lsls	r2, r3, #3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f043 0220 	orr.w	r2, r3, #32
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004f52:	e00a      	b.n	8004f6a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f68:	d0ea      	beq.n	8004f40 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	2200      	movs	r2, #0
 8004f78:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	2200      	movs	r2, #0
 8004f88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	2200      	movs	r2, #0
 8004fae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b60      	cmp	r3, #96	; 0x60
 8004fda:	d10e      	bne.n	8004ffa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7fe fe29 	bl	8003c4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ff8:	e027      	b.n	800504a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005000:	2b28      	cmp	r3, #40	; 0x28
 8005002:	d117      	bne.n	8005034 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005022:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2228      	movs	r2, #40	; 0x28
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005032:	e007      	b.n	8005044 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005044:	6978      	ldr	r0, [r7, #20]
 8005046:	f7fe fdf7 	bl	8003c38 <HAL_I2C_ErrorCallback>
}
 800504a:	bf00      	nop
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	2000006c 	.word	0x2000006c
 8005058:	14f8b589 	.word	0x14f8b589

0800505c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005068:	4b13      	ldr	r3, [pc, #76]	; (80050b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	0a1a      	lsrs	r2, r3, #8
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3b01      	subs	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e008      	b.n	80050ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d0e9      	beq.n	800507e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	2000006c 	.word	0x2000006c
 80050bc:	14f8b589 	.word	0x14f8b589

080050c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050d0:	d103      	bne.n	80050da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050d8:	e007      	b.n	80050ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050e2:	d102      	bne.n	80050ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2208      	movs	r2, #8
 80050e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e31d      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005106:	4b94      	ldr	r3, [pc, #592]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005110:	4b91      	ldr	r3, [pc, #580]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005118:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07b      	beq.n	800521e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b08      	cmp	r3, #8
 800512a:	d006      	beq.n	800513a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d10f      	bne.n	8005152 <HAL_RCC_OscConfig+0x5e>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005138:	d10b      	bne.n	8005152 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513a:	4b87      	ldr	r3, [pc, #540]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d06a      	beq.n	800521c <HAL_RCC_OscConfig+0x128>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d166      	bne.n	800521c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e2f7      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d106      	bne.n	8005168 <HAL_RCC_OscConfig+0x74>
 800515a:	4b7f      	ldr	r3, [pc, #508]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a7e      	ldr	r2, [pc, #504]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	e02d      	b.n	80051c4 <HAL_RCC_OscConfig+0xd0>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10c      	bne.n	800518a <HAL_RCC_OscConfig+0x96>
 8005170:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a78      	ldr	r2, [pc, #480]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b76      	ldr	r3, [pc, #472]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a75      	ldr	r2, [pc, #468]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e01c      	b.n	80051c4 <HAL_RCC_OscConfig+0xd0>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b05      	cmp	r3, #5
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0xb8>
 8005192:	4b71      	ldr	r3, [pc, #452]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a70      	ldr	r2, [pc, #448]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b6e      	ldr	r3, [pc, #440]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a6d      	ldr	r2, [pc, #436]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xd0>
 80051ac:	4b6a      	ldr	r3, [pc, #424]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a69      	ldr	r2, [pc, #420]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b67      	ldr	r3, [pc, #412]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a66      	ldr	r2, [pc, #408]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd f9bc 	bl	8002548 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd f9b8 	bl	8002548 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	; 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e2ad      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e6:	4b5c      	ldr	r3, [pc, #368]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0xe0>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd f9a8 	bl	8002548 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fd f9a4 	bl	8002548 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e299      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800520e:	4b52      	ldr	r3, [pc, #328]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x108>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d05a      	beq.n	80052e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	d119      	bne.n	800526a <HAL_RCC_OscConfig+0x176>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d116      	bne.n	800526a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523c:	4b46      	ldr	r3, [pc, #280]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x160>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e276      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b40      	ldr	r3, [pc, #256]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	493d      	ldr	r1, [pc, #244]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005268:	e03a      	b.n	80052e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d020      	beq.n	80052b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005272:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCC_OscConfig+0x268>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fd f966 	bl	8002548 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005280:	f7fd f962 	bl	8002548 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e257      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005292:	4b31      	ldr	r3, [pc, #196]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	492a      	ldr	r1, [pc, #168]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	604b      	str	r3, [r1, #4]
 80052b2:	e015      	b.n	80052e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052b4:	4b29      	ldr	r3, [pc, #164]	; (800535c <HAL_RCC_OscConfig+0x268>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ba:	f7fd f945 	bl	8002548 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052c2:	f7fd f941 	bl	8002548 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e236      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80052d4:	4b20      	ldr	r3, [pc, #128]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80b8 	beq.w	800545e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d170      	bne.n	80053d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_OscConfig+0x218>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e21a      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1a      	ldr	r2, [r3, #32]
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005318:	429a      	cmp	r2, r3
 800531a:	d921      	bls.n	8005360 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fc23 	bl	8005b6c <RCC_SetFlashLatencyFromMSIRange>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e208      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4906      	ldr	r1, [pc, #24]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 800533e:	4313      	orrs	r3, r2
 8005340:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	4901      	ldr	r1, [pc, #4]	; (8005358 <HAL_RCC_OscConfig+0x264>)
 8005352:	4313      	orrs	r3, r2
 8005354:	604b      	str	r3, [r1, #4]
 8005356:	e020      	b.n	800539a <HAL_RCC_OscConfig+0x2a6>
 8005358:	40023800 	.word	0x40023800
 800535c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005360:	4ba4      	ldr	r3, [pc, #656]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	49a1      	ldr	r1, [pc, #644]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800536e:	4313      	orrs	r3, r2
 8005370:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005372:	4ba0      	ldr	r3, [pc, #640]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	061b      	lsls	r3, r3, #24
 8005380:	499c      	ldr	r1, [pc, #624]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005382:	4313      	orrs	r3, r2
 8005384:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fbee 	bl	8005b6c <RCC_SetFlashLatencyFromMSIRange>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e1d3      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	0b5b      	lsrs	r3, r3, #13
 80053a0:	3301      	adds	r3, #1
 80053a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80053aa:	4a92      	ldr	r2, [pc, #584]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80053ac:	6892      	ldr	r2, [r2, #8]
 80053ae:	0912      	lsrs	r2, r2, #4
 80053b0:	f002 020f 	and.w	r2, r2, #15
 80053b4:	4990      	ldr	r1, [pc, #576]	; (80055f8 <HAL_RCC_OscConfig+0x504>)
 80053b6:	5c8a      	ldrb	r2, [r1, r2]
 80053b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80053ba:	4a90      	ldr	r2, [pc, #576]	; (80055fc <HAL_RCC_OscConfig+0x508>)
 80053bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053be:	4b90      	ldr	r3, [pc, #576]	; (8005600 <HAL_RCC_OscConfig+0x50c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fd f874 	bl	80024b0 <HAL_InitTick>
 80053c8:	4603      	mov	r3, r0
 80053ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d045      	beq.n	800545e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	e1b5      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d029      	beq.n	8005432 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053de:	4b89      	ldr	r3, [pc, #548]	; (8005604 <HAL_RCC_OscConfig+0x510>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e4:	f7fd f8b0 	bl	8002548 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053ec:	f7fd f8ac 	bl	8002548 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e1a1      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053fe:	4b7d      	ldr	r3, [pc, #500]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540a:	4b7a      	ldr	r3, [pc, #488]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	4977      	ldr	r1, [pc, #476]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800541c:	4b75      	ldr	r3, [pc, #468]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	4972      	ldr	r1, [pc, #456]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	e015      	b.n	800545e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005432:	4b74      	ldr	r3, [pc, #464]	; (8005604 <HAL_RCC_OscConfig+0x510>)
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fd f886 	bl	8002548 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005440:	f7fd f882 	bl	8002548 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e177      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005452:	4b68      	ldr	r3, [pc, #416]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d030      	beq.n	80054cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005472:	4b65      	ldr	r3, [pc, #404]	; (8005608 <HAL_RCC_OscConfig+0x514>)
 8005474:	2201      	movs	r2, #1
 8005476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005478:	f7fd f866 	bl	8002548 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005480:	f7fd f862 	bl	8002548 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e157      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005492:	4b58      	ldr	r3, [pc, #352]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x38c>
 800549e:	e015      	b.n	80054cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b59      	ldr	r3, [pc, #356]	; (8005608 <HAL_RCC_OscConfig+0x514>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a6:	f7fd f84f 	bl	8002548 <HAL_GetTick>
 80054aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ae:	f7fd f84b 	bl	8002548 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e140      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054c0:	4b4c      	ldr	r3, [pc, #304]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80054c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1f0      	bne.n	80054ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80b5 	beq.w	8005644 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054da:	2300      	movs	r3, #0
 80054dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054de:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10d      	bne.n	8005506 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ea:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	4a41      	ldr	r2, [pc, #260]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6253      	str	r3, [r2, #36]	; 0x24
 80054f6:	4b3f      	ldr	r3, [pc, #252]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005502:	2301      	movs	r3, #1
 8005504:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005506:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCC_OscConfig+0x518>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550e:	2b00      	cmp	r3, #0
 8005510:	d118      	bne.n	8005544 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005512:	4b3e      	ldr	r3, [pc, #248]	; (800560c <HAL_RCC_OscConfig+0x518>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a3d      	ldr	r2, [pc, #244]	; (800560c <HAL_RCC_OscConfig+0x518>)
 8005518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800551e:	f7fd f813 	bl	8002548 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005526:	f7fd f80f 	bl	8002548 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e104      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <HAL_RCC_OscConfig+0x518>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x466>
 800554c:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800554e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005550:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005556:	6353      	str	r3, [r2, #52]	; 0x34
 8005558:	e02d      	b.n	80055b6 <HAL_RCC_OscConfig+0x4c2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x488>
 8005562:	4b24      	ldr	r3, [pc, #144]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005566:	4a23      	ldr	r2, [pc, #140]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800556c:	6353      	str	r3, [r2, #52]	; 0x34
 800556e:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005572:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005574:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005578:	6353      	str	r3, [r2, #52]	; 0x34
 800557a:	e01c      	b.n	80055b6 <HAL_RCC_OscConfig+0x4c2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d10c      	bne.n	800559e <HAL_RCC_OscConfig+0x4aa>
 8005584:	4b1b      	ldr	r3, [pc, #108]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	4a1a      	ldr	r2, [pc, #104]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 800558a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800558e:	6353      	str	r3, [r2, #52]	; 0x34
 8005590:	4b18      	ldr	r3, [pc, #96]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	6353      	str	r3, [r2, #52]	; 0x34
 800559c:	e00b      	b.n	80055b6 <HAL_RCC_OscConfig+0x4c2>
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80055a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a8:	6353      	str	r3, [r2, #52]	; 0x34
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80055b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055be:	f7fc ffc3 	bl	8002548 <HAL_GetTick>
 80055c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c4:	e00a      	b.n	80055dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fc ffbf 	bl	8002548 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0b2      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_OscConfig+0x500>)
 80055de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCC_OscConfig+0x4d2>
 80055e8:	e023      	b.n	8005632 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ea:	f7fc ffad 	bl	8002548 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055f0:	e019      	b.n	8005626 <HAL_RCC_OscConfig+0x532>
 80055f2:	bf00      	nop
 80055f4:	40023800 	.word	0x40023800
 80055f8:	0800bc14 	.word	0x0800bc14
 80055fc:	2000006c 	.word	0x2000006c
 8005600:	20000070 	.word	0x20000070
 8005604:	42470020 	.word	0x42470020
 8005608:	42470680 	.word	0x42470680
 800560c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005610:	f7fc ff9a 	bl	8002548 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	f241 3288 	movw	r2, #5000	; 0x1388
 800561e:	4293      	cmp	r3, r2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e08d      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005626:	4b49      	ldr	r3, [pc, #292]	; (800574c <HAL_RCC_OscConfig+0x658>)
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1ee      	bne.n	8005610 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4b44      	ldr	r3, [pc, #272]	; (800574c <HAL_RCC_OscConfig+0x658>)
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	4a43      	ldr	r2, [pc, #268]	; (800574c <HAL_RCC_OscConfig+0x658>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d079      	beq.n	8005740 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d056      	beq.n	8005700 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b02      	cmp	r3, #2
 8005658:	d13b      	bne.n	80056d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565a:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <HAL_RCC_OscConfig+0x65c>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fc ff72 	bl	8002548 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005668:	f7fc ff6e 	bl	8002548 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e063      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800567a:	4b34      	ldr	r3, [pc, #208]	; (800574c <HAL_RCC_OscConfig+0x658>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005686:	4b31      	ldr	r3, [pc, #196]	; (800574c <HAL_RCC_OscConfig+0x658>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	4319      	orrs	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	430b      	orrs	r3, r1
 800569e:	492b      	ldr	r1, [pc, #172]	; (800574c <HAL_RCC_OscConfig+0x658>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a4:	4b2a      	ldr	r3, [pc, #168]	; (8005750 <HAL_RCC_OscConfig+0x65c>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056aa:	f7fc ff4d 	bl	8002548 <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b2:	f7fc ff49 	bl	8002548 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e03e      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <HAL_RCC_OscConfig+0x658>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x5be>
 80056d0:	e036      	b.n	8005740 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d2:	4b1f      	ldr	r3, [pc, #124]	; (8005750 <HAL_RCC_OscConfig+0x65c>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fc ff36 	bl	8002548 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056e0:	f7fc ff32 	bl	8002548 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e027      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056f2:	4b16      	ldr	r3, [pc, #88]	; (800574c <HAL_RCC_OscConfig+0x658>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1f0      	bne.n	80056e0 <HAL_RCC_OscConfig+0x5ec>
 80056fe:	e01f      	b.n	8005740 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e01a      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800570c:	4b0f      	ldr	r3, [pc, #60]	; (800574c <HAL_RCC_OscConfig+0x658>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	429a      	cmp	r2, r3
 800571e:	d10d      	bne.n	800573c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d106      	bne.n	800573c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005738:	429a      	cmp	r2, r3
 800573a:	d001      	beq.n	8005740 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	42470060 	.word	0x42470060

08005754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e11a      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005768:	4b8f      	ldr	r3, [pc, #572]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d919      	bls.n	80057aa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <HAL_RCC_ClockConfig+0x34>
 800577c:	4b8a      	ldr	r3, [pc, #552]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a89      	ldr	r2, [pc, #548]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 8005782:	f043 0304 	orr.w	r3, r3, #4
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4b87      	ldr	r3, [pc, #540]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 0201 	bic.w	r2, r3, #1
 8005790:	4985      	ldr	r1, [pc, #532]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	4313      	orrs	r3, r2
 8005796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005798:	4b83      	ldr	r3, [pc, #524]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d001      	beq.n	80057aa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0f9      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b6:	4b7d      	ldr	r3, [pc, #500]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	497a      	ldr	r1, [pc, #488]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 808e 	beq.w	80058f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057de:	4b73      	ldr	r3, [pc, #460]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d121      	bne.n	800582e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e0d7      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f6:	4b6d      	ldr	r3, [pc, #436]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d115      	bne.n	800582e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e0cb      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800580e:	4b67      	ldr	r3, [pc, #412]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e0bf      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800581e:	4b63      	ldr	r3, [pc, #396]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e0b7      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	495c      	ldr	r1, [pc, #368]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 800583c:	4313      	orrs	r3, r2
 800583e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005840:	f7fc fe82 	bl	8002548 <HAL_GetTick>
 8005844:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d112      	bne.n	8005874 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800584e:	e00a      	b.n	8005866 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005850:	f7fc fe7a 	bl	8002548 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e09b      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005866:	4b51      	ldr	r3, [pc, #324]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b08      	cmp	r3, #8
 8005870:	d1ee      	bne.n	8005850 <HAL_RCC_ClockConfig+0xfc>
 8005872:	e03e      	b.n	80058f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b03      	cmp	r3, #3
 800587a:	d112      	bne.n	80058a2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800587c:	e00a      	b.n	8005894 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800587e:	f7fc fe63 	bl	8002548 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	f241 3288 	movw	r2, #5000	; 0x1388
 800588c:	4293      	cmp	r3, r2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e084      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005894:	4b45      	ldr	r3, [pc, #276]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 030c 	and.w	r3, r3, #12
 800589c:	2b0c      	cmp	r3, #12
 800589e:	d1ee      	bne.n	800587e <HAL_RCC_ClockConfig+0x12a>
 80058a0:	e027      	b.n	80058f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d11d      	bne.n	80058e6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ac:	f7fc fe4c 	bl	8002548 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e06d      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058c2:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d1ee      	bne.n	80058ac <HAL_RCC_ClockConfig+0x158>
 80058ce:	e010      	b.n	80058f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d0:	f7fc fe3a 	bl	8002548 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	f241 3288 	movw	r2, #5000	; 0x1388
 80058de:	4293      	cmp	r3, r2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e05b      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058e6:	4b31      	ldr	r3, [pc, #196]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1ee      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f2:	4b2d      	ldr	r3, [pc, #180]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d219      	bcs.n	8005934 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d105      	bne.n	8005912 <HAL_RCC_ClockConfig+0x1be>
 8005906:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800590c:	f043 0304 	orr.w	r3, r3, #4
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 0201 	bic.w	r2, r3, #1
 800591a:	4923      	ldr	r1, [pc, #140]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <HAL_RCC_ClockConfig+0x254>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e034      	b.n	800599e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4917      	ldr	r1, [pc, #92]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 800594e:	4313      	orrs	r3, r2
 8005950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800595e:	4b13      	ldr	r3, [pc, #76]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	490f      	ldr	r1, [pc, #60]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 800596e:	4313      	orrs	r3, r2
 8005970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005972:	f000 f823 	bl	80059bc <HAL_RCC_GetSysClockFreq>
 8005976:	4602      	mov	r2, r0
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <HAL_RCC_ClockConfig+0x258>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	091b      	lsrs	r3, r3, #4
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	490b      	ldr	r1, [pc, #44]	; (80059b0 <HAL_RCC_ClockConfig+0x25c>)
 8005984:	5ccb      	ldrb	r3, [r1, r3]
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <HAL_RCC_ClockConfig+0x260>)
 800598c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_RCC_ClockConfig+0x264>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fc fd8c 	bl	80024b0 <HAL_InitTick>
 8005998:	4603      	mov	r3, r0
 800599a:	72fb      	strb	r3, [r7, #11]

  return status;
 800599c:	7afb      	ldrb	r3, [r7, #11]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40023c00 	.word	0x40023c00
 80059ac:	40023800 	.word	0x40023800
 80059b0:	0800bc14 	.word	0x0800bc14
 80059b4:	2000006c 	.word	0x2000006c
 80059b8:	20000070 	.word	0x20000070

080059bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059bc:	b5b0      	push	{r4, r5, r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80059c2:	4b4d      	ldr	r3, [pc, #308]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b0c      	cmp	r3, #12
 80059d0:	d00c      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0x30>
 80059d2:	2b0c      	cmp	r3, #12
 80059d4:	d87c      	bhi.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x114>
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d002      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0x24>
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d003      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0x2a>
 80059de:	e077      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059e0:	4b46      	ldr	r3, [pc, #280]	; (8005afc <HAL_RCC_GetSysClockFreq+0x140>)
 80059e2:	613b      	str	r3, [r7, #16]
      break;
 80059e4:	e082      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059e6:	4b46      	ldr	r3, [pc, #280]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x144>)
 80059e8:	613b      	str	r3, [r7, #16]
      break;
 80059ea:	e07f      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	0c9b      	lsrs	r3, r3, #18
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	4a43      	ldr	r2, [pc, #268]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x148>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	0d9b      	lsrs	r3, r3, #22
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	3301      	adds	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a06:	4b3c      	ldr	r3, [pc, #240]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	461a      	mov	r2, r3
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	4939      	ldr	r1, [pc, #228]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x144>)
 8005a1c:	fb01 f003 	mul.w	r0, r1, r3
 8005a20:	2100      	movs	r1, #0
 8005a22:	fb01 f102 	mul.w	r1, r1, r2
 8005a26:	1844      	adds	r4, r0, r1
 8005a28:	4935      	ldr	r1, [pc, #212]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x144>)
 8005a2a:	fba2 0101 	umull	r0, r1, r2, r1
 8005a2e:	1863      	adds	r3, r4, r1
 8005a30:	4619      	mov	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f04f 0300 	mov.w	r3, #0
 8005a3a:	f7fa fd83 	bl	8000544 <__aeabi_uldivmod>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4613      	mov	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	e040      	b.n	8005aca <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	461c      	mov	r4, r3
 8005a4c:	f04f 0500 	mov.w	r5, #0
 8005a50:	4620      	mov	r0, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	014b      	lsls	r3, r1, #5
 8005a5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a62:	0142      	lsls	r2, r0, #5
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	1b00      	subs	r0, r0, r4
 8005a6a:	eb61 0105 	sbc.w	r1, r1, r5
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	018b      	lsls	r3, r1, #6
 8005a78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a7c:	0182      	lsls	r2, r0, #6
 8005a7e:	1a12      	subs	r2, r2, r0
 8005a80:	eb63 0301 	sbc.w	r3, r3, r1
 8005a84:	f04f 0000 	mov.w	r0, #0
 8005a88:	f04f 0100 	mov.w	r1, #0
 8005a8c:	00d9      	lsls	r1, r3, #3
 8005a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a92:	00d0      	lsls	r0, r2, #3
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	1912      	adds	r2, r2, r4
 8005a9a:	eb45 0303 	adc.w	r3, r5, r3
 8005a9e:	f04f 0000 	mov.w	r0, #0
 8005aa2:	f04f 0100 	mov.w	r1, #0
 8005aa6:	0299      	lsls	r1, r3, #10
 8005aa8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005aac:	0290      	lsls	r0, r2, #10
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	f7fa fd41 	bl	8000544 <__aeabi_uldivmod>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	613b      	str	r3, [r7, #16]
      break;
 8005ace:	e00d      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	0b5b      	lsrs	r3, r3, #13
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	613b      	str	r3, [r7, #16]
      break;
 8005aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aec:	693b      	ldr	r3, [r7, #16]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}
 8005af6:	bf00      	nop
 8005af8:	40023800 	.word	0x40023800
 8005afc:	00f42400 	.word	0x00f42400
 8005b00:	01312d00 	.word	0x01312d00
 8005b04:	0800bc08 	.word	0x0800bc08

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr
 8005b18:	2000006c 	.word	0x2000006c

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b20:	f7ff fff2 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b24:	4602      	mov	r2, r0
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4903      	ldr	r1, [pc, #12]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b32:	5ccb      	ldrb	r3, [r1, r3]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	0800bc24 	.word	0x0800bc24

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b48:	f7ff ffde 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	0adb      	lsrs	r3, r3, #11
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4903      	ldr	r1, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5a:	5ccb      	ldrb	r3, [r1, r3]
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40023800 	.word	0x40023800
 8005b68:	0800bc24 	.word	0x0800bc24

08005b6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005b78:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d12c      	bne.n	8005bde <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b84:	4b26      	ldr	r3, [pc, #152]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005b90:	4b24      	ldr	r3, [pc, #144]	; (8005c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	e016      	b.n	8005bca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9c:	4b20      	ldr	r3, [pc, #128]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	6253      	str	r3, [r2, #36]	; 0x24
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005bbc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bbe:	4b18      	ldr	r3, [pc, #96]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc2:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005bd0:	d105      	bne.n	8005bde <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005bd8:	d101      	bne.n	8005bde <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005bda:	2301      	movs	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d105      	bne.n	8005bf0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005be4:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bea:	f043 0304 	orr.w	r3, r3, #4
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f023 0201 	bic.w	r2, r3, #1
 8005bf8:	490b      	ldr	r1, [pc, #44]	; (8005c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d001      	beq.n	8005c12 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800
 8005c24:	40007000 	.word	0x40007000
 8005c28:	40023c00 	.word	0x40023c00

08005c2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80ed 	beq.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c52:	4b78      	ldr	r3, [pc, #480]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10d      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c5e:	4b75      	ldr	r3, [pc, #468]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	4a74      	ldr	r2, [pc, #464]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6253      	str	r3, [r2, #36]	; 0x24
 8005c6a:	4b72      	ldr	r3, [pc, #456]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c7a:	4b6f      	ldr	r3, [pc, #444]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d118      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c86:	4b6c      	ldr	r3, [pc, #432]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6b      	ldr	r2, [pc, #428]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c92:	f7fc fc59 	bl	8002548 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9a:	f7fc fc55 	bl	8002548 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b64      	cmp	r3, #100	; 0x64
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e0be      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cac:	4b62      	ldr	r3, [pc, #392]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005cb8:	4b5e      	ldr	r3, [pc, #376]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005cc0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d106      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d00f      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ce6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cea:	d108      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005cec:	4b51      	ldr	r3, [pc, #324]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e095      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005cfe:	4b4d      	ldr	r3, [pc, #308]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d06:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d041      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d005      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10c      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d02d      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d027      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005d42:	4b3c      	ldr	r3, [pc, #240]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005d4a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d52:	4b3a      	ldr	r3, [pc, #232]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005d58:	4a36      	ldr	r2, [pc, #216]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d014      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fc fbee 	bl	8002548 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fc fbea 	bl	8002548 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e051      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d86:	4b2b      	ldr	r3, [pc, #172]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ee      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dac:	4b21      	ldr	r3, [pc, #132]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005dbc:	491d      	ldr	r1, [pc, #116]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
 8005dc2:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dce:	4919      	ldr	r1, [pc, #100]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005de8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005dec:	d10a      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005dfe:	490d      	ldr	r1, [pc, #52]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	600b      	str	r3, [r1, #0]
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e10:	4908      	ldr	r1, [pc, #32]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	4a04      	ldr	r2, [pc, #16]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e26:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40007000 	.word	0x40007000
 8005e3c:	424706dc 	.word	0x424706dc

08005e40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e07c      	b.n	8005f4c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	7f5b      	ldrb	r3, [r3, #29]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fc f964 	bl	8002130 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	22ca      	movs	r2, #202	; 0xca
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2253      	movs	r2, #83	; 0x53
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fba5 	bl	80065ce <RTC_EnterInitMode>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	22ff      	movs	r2, #255	; 0xff
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2204      	movs	r2, #4
 8005e96:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e057      	b.n	8005f4c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6899      	ldr	r1, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68d2      	ldr	r2, [r2, #12]
 8005ed6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6919      	ldr	r1, [r3, #16]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041a      	lsls	r2, r3, #16
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005efa:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fb40 	bl	8006582 <HAL_RTC_WaitForSynchro>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	22ff      	movs	r2, #255	; 0xff
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2204      	movs	r2, #4
 8005f14:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e018      	b.n	8005f4c <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	22ff      	movs	r2, #255	; 0xff
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
  }
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f54:	b590      	push	{r4, r7, lr}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	7f1b      	ldrb	r3, [r3, #28]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_RTC_SetTime+0x18>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e0a3      	b.n	80060b4 <HAL_RTC_SetTime+0x160>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2202      	movs	r2, #2
 8005f76:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d126      	bne.n	8005fcc <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fb43 	bl	8006622 <RTC_ByteToBcd2>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	785b      	ldrb	r3, [r3, #1]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fb3c 	bl	8006622 <RTC_ByteToBcd2>
 8005faa:	4603      	mov	r3, r0
 8005fac:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fae:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	789b      	ldrb	r3, [r3, #2]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 fb34 	bl	8006622 <RTC_ByteToBcd2>
 8005fba:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005fbc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	78db      	ldrb	r3, [r3, #3]
 8005fc4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	e018      	b.n	8005ffe <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	785b      	ldrb	r3, [r3, #1]
 8005fea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005fec:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005ff2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	22ca      	movs	r2, #202	; 0xca
 8006004:	625a      	str	r2, [r3, #36]	; 0x24
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2253      	movs	r2, #83	; 0x53
 800600c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 fadd 	bl	80065ce <RTC_EnterInitMode>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	22ff      	movs	r2, #255	; 0xff
 8006020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2204      	movs	r2, #4
 8006026:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e040      	b.n	80060b4 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800603c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006040:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006050:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6899      	ldr	r1, [r3, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	431a      	orrs	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006078:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f000 fa81 	bl	8006582 <HAL_RTC_WaitForSynchro>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2204      	movs	r2, #4
 8006092:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e00a      	b.n	80060b4 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	22ff      	movs	r2, #255	; 0xff
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
  }
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd90      	pop	{r4, r7, pc}

080060bc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80060d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80060d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006100:	b2da      	uxtb	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	0c1b      	lsrs	r3, r3, #16
 800610a:	b2db      	uxtb	r3, r3
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d11a      	bne.n	8006152 <HAL_RTC_GetTime+0x96>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fa9d 	bl	8006660 <RTC_Bcd2ToByte>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa94 	bl	8006660 <RTC_Bcd2ToByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	789b      	ldrb	r3, [r3, #2]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fa8b 	bl	8006660 <RTC_Bcd2ToByte>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	7f1b      	ldrb	r3, [r3, #28]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_RTC_SetDate+0x18>
 8006170:	2302      	movs	r3, #2
 8006172:	e08d      	b.n	8006290 <HAL_RTC_SetDate+0x134>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2202      	movs	r2, #2
 800617e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10e      	bne.n	80061a4 <HAL_RTC_SetDate+0x48>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	f003 0310 	and.w	r3, r3, #16
 800618e:	2b00      	cmp	r3, #0
 8006190:	d008      	beq.n	80061a4 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	785b      	ldrb	r3, [r3, #1]
 8006196:	f023 0310 	bic.w	r3, r3, #16
 800619a:	b2db      	uxtb	r3, r3
 800619c:	330a      	adds	r3, #10
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d11c      	bne.n	80061e4 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fa37 	bl	8006622 <RTC_ByteToBcd2>
 80061b4:	4603      	mov	r3, r0
 80061b6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fa30 	bl	8006622 <RTC_ByteToBcd2>
 80061c2:	4603      	mov	r3, r0
 80061c4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061c6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	789b      	ldrb	r3, [r3, #2]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fa28 	bl	8006622 <RTC_ByteToBcd2>
 80061d2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80061d4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e00e      	b.n	8006202 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	78db      	ldrb	r3, [r3, #3]
 80061e8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	785b      	ldrb	r3, [r3, #1]
 80061ee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061f0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80061f6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	22ca      	movs	r2, #202	; 0xca
 8006208:	625a      	str	r2, [r3, #36]	; 0x24
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2253      	movs	r2, #83	; 0x53
 8006210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f9db 	bl	80065ce <RTC_EnterInitMode>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	22ff      	movs	r2, #255	; 0xff
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2204      	movs	r2, #4
 800622a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e02c      	b.n	8006290 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006240:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006244:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006254:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f993 	bl	8006582 <HAL_RTC_WaitForSynchro>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00b      	beq.n	800627a <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2204      	movs	r2, #4
 800626e:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e00a      	b.n	8006290 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800628e:	2300      	movs	r3, #0
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	bd90      	pop	{r4, r7, pc}

08006298 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	7f1b      	ldrb	r3, [r3, #28]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d101      	bne.n	80062b8 <HAL_RTC_SetAlarm_IT+0x20>
 80062b4:	2302      	movs	r3, #2
 80062b6:	e10f      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x240>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2201      	movs	r2, #1
 80062bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d136      	bne.n	8006338 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f99d 	bl	8006622 <RTC_ByteToBcd2>
 80062e8:	4603      	mov	r3, r0
 80062ea:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f996 	bl	8006622 <RTC_ByteToBcd2>
 80062f6:	4603      	mov	r3, r0
 80062f8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80062fa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	789b      	ldrb	r3, [r3, #2]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f98e 	bl	8006622 <RTC_ByteToBcd2>
 8006306:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006308:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	78db      	ldrb	r3, [r3, #3]
 8006310:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006312:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7d1b      	ldrb	r3, [r3, #20]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f981 	bl	8006622 <RTC_ByteToBcd2>
 8006320:	4603      	mov	r3, r0
 8006322:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006324:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800632c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	e022      	b.n	800637e <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d102      	bne.n	800634c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2200      	movs	r2, #0
 800634a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006358:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800635e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	78db      	ldrb	r3, [r3, #3]
 8006364:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006366:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	7d1b      	ldrb	r3, [r3, #20]
 800636c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800636e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006374:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	22ca      	movs	r2, #202	; 0xca
 8006384:	625a      	str	r2, [r3, #36]	; 0x24
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2253      	movs	r2, #83	; 0x53
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006396:	d144      	bne.n	8006422 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80063b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063ba:	f7fc f8c5 	bl	8002548 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80063c0:	e013      	b.n	80063ea <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80063c2:	f7fc f8c1 	bl	8002548 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	d90b      	bls.n	80063ea <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2203      	movs	r2, #3
 80063de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e076      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0e4      	beq.n	80063c2 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	e043      	b.n	80064aa <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006430:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	b2da      	uxtb	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006442:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006444:	f7fc f880 	bl	8002548 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800644a:	e013      	b.n	8006474 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800644c:	f7fc f87c 	bl	8002548 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645a:	d90b      	bls.n	8006474 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ff      	movs	r2, #255	; 0xff
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2203      	movs	r2, #3
 8006468:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e031      	b.n	80064d8 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0e4      	beq.n	800644c <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006498:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x248>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a0c      	ldr	r2, [pc, #48]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x248>)
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b4:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80064b6:	4b0a      	ldr	r3, [pc, #40]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x248>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <HAL_RTC_SetAlarm_IT+0x248>)
 80064bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	22ff      	movs	r2, #255	; 0xff
 80064c8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd90      	pop	{r4, r7, pc}
 80064e0:	40010400 	.word	0x40010400

080064e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d012      	beq.n	8006520 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f831 	bl	8006570 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800651e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d012      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f8aa 	bl	8006696 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8006552:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RTC_AlarmIRQHandler+0x88>)
 8006556:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800655a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	775a      	strb	r2, [r3, #29]
}
 8006562:	bf00      	nop
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40010400 	.word	0x40010400

08006570 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr

08006582 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006598:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800659a:	f7fb ffd5 	bl	8002548 <HAL_GetTick>
 800659e:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065a0:	e009      	b.n	80065b6 <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80065a2:	f7fb ffd1 	bl	8002548 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b0:	d901      	bls.n	80065b6 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e007      	b.n	80065c6 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f003 0320 	and.w	r3, r3, #32
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0ee      	beq.n	80065a2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d119      	bne.n	8006618 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f04f 32ff 	mov.w	r2, #4294967295
 80065ec:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065ee:	f7fb ffab 	bl	8002548 <HAL_GetTick>
 80065f2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065f4:	e009      	b.n	800660a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80065f6:	f7fb ffa7 	bl	8002548 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006604:	d901      	bls.n	800660a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e007      	b.n	800661a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0ee      	beq.n	80065f6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	4603      	mov	r3, r0
 800662a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006634:	e005      	b.n	8006642 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800663c:	7afb      	ldrb	r3, [r7, #11]
 800663e:	3b0a      	subs	r3, #10
 8006640:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006642:	7afb      	ldrb	r3, [r7, #11]
 8006644:	2b09      	cmp	r3, #9
 8006646:	d8f6      	bhi.n	8006636 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	b2da      	uxtb	r2, r3
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	4313      	orrs	r3, r2
 8006654:	b2db      	uxtb	r3, r3
}
 8006656:	4618      	mov	r0, r3
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	b2db      	uxtb	r3, r3
 8006688:	4413      	add	r3, r2
 800668a:	b2db      	uxtb	r3, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr

080066a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e06e      	b.n	8006798 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d108      	bne.n	80066d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ca:	d009      	beq.n	80066e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	61da      	str	r2, [r3, #28]
 80066d2:	e005      	b.n	80066e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb fd34 	bl	8002168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006764:	ea42 0103 	orr.w	r1, r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	0c1a      	lsrs	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f002 0204 	and.w	r2, r2, #4
 8006786:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_Transmit+0x22>
 80067be:	2302      	movs	r3, #2
 80067c0:	e126      	b.n	8006a10 <HAL_SPI_Transmit+0x270>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ca:	f7fb febd 	bl	8002548 <HAL_GetTick>
 80067ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
 80067e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067e4:	e10b      	b.n	80069fe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_Transmit+0x52>
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f6:	e102      	b.n	80069fe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2203      	movs	r2, #3
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d10f      	bne.n	8006860 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800685e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d007      	beq.n	800687e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006886:	d14b      	bne.n	8006920 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d002      	beq.n	8006896 <HAL_SPI_Transmit+0xf6>
 8006890:	8afb      	ldrh	r3, [r7, #22]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d13e      	bne.n	8006914 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	881a      	ldrh	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068ba:	e02b      	b.n	8006914 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d112      	bne.n	80068f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	881a      	ldrh	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	3b01      	subs	r3, #1
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80068ee:	e011      	b.n	8006914 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068f0:	f7fb fe2a 	bl	8002548 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d803      	bhi.n	8006908 <HAL_SPI_Transmit+0x168>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d102      	bne.n	800690e <HAL_SPI_Transmit+0x16e>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006912:	e074      	b.n	80069fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ce      	bne.n	80068bc <HAL_SPI_Transmit+0x11c>
 800691e:	e04c      	b.n	80069ba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_SPI_Transmit+0x18e>
 8006928:	8afb      	ldrh	r3, [r7, #22]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d140      	bne.n	80069b0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	7812      	ldrb	r2, [r2, #0]
 800693a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	1c5a      	adds	r2, r3, #1
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006954:	e02c      	b.n	80069b0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d113      	bne.n	800698c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	7812      	ldrb	r2, [r2, #0]
 8006970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	86da      	strh	r2, [r3, #54]	; 0x36
 800698a:	e011      	b.n	80069b0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698c:	f7fb fddc 	bl	8002548 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d803      	bhi.n	80069a4 <HAL_SPI_Transmit+0x204>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d102      	bne.n	80069aa <HAL_SPI_Transmit+0x20a>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d102      	bne.n	80069b0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069ae:	e026      	b.n	80069fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1cd      	bne.n	8006956 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fb58 	bl	8007074 <SPI_EndRxTxTransaction>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10a      	bne.n	80069ee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	613b      	str	r3, [r7, #16]
 80069ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e000      	b.n	80069fe <HAL_SPI_Transmit+0x25e>
  }

error:
 80069fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08c      	sub	sp, #48	; 0x30
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a26:	2301      	movs	r3, #1
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_SPI_TransmitReceive+0x26>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e18a      	b.n	8006d54 <HAL_SPI_TransmitReceive+0x33c>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a46:	f7fb fd7f 	bl	8002548 <HAL_GetTick>
 8006a4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d00f      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x70>
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a6e:	d107      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x68>
 8006a78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d003      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a86:	e15b      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x82>
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006aa0:	e14e      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d003      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	887a      	ldrh	r2, [r7, #2]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	887a      	ldrh	r2, [r7, #2]
 8006ad8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	887a      	ldrh	r2, [r7, #2]
 8006ade:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d007      	beq.n	8006b0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b12:	d178      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x10a>
 8006b1c:	8b7b      	ldrh	r3, [r7, #26]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d166      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	881a      	ldrh	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	1c9a      	adds	r2, r3, #2
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	e053      	b.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d11b      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x176>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d016      	beq.n	8006b8e <HAL_SPI_TransmitReceive+0x176>
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d113      	bne.n	8006b8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	881a      	ldrh	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	1c9a      	adds	r2, r3, #2
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d119      	bne.n	8006bd0 <HAL_SPI_TransmitReceive+0x1b8>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d014      	beq.n	8006bd0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	b292      	uxth	r2, r2
 8006bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	1c9a      	adds	r2, r3, #2
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bd0:	f7fb fcba 	bl	8002548 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d807      	bhi.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d8>
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be6:	d003      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bee:	e0a7      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1a6      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x130>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1a1      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x130>
 8006c04:	e07c      	b.n	8006d00 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_SPI_TransmitReceive+0x1fc>
 8006c0e:	8b7b      	ldrh	r3, [r7, #26]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d16b      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	330c      	adds	r3, #12
 8006c1e:	7812      	ldrb	r2, [r2, #0]
 8006c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c3a:	e057      	b.n	8006cec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d11c      	bne.n	8006c84 <HAL_SPI_TransmitReceive+0x26c>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d017      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x26c>
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d114      	bne.n	8006c84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d119      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x2ae>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d014      	beq.n	8006cc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cc6:	f7fb fc3f 	bl	8002548 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d803      	bhi.n	8006cde <HAL_SPI_TransmitReceive+0x2c6>
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x2cc>
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006cea:	e029      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1a2      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x224>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d19d      	bne.n	8006c3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f9b5 	bl	8007074 <SPI_EndRxTxTransaction>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d006      	beq.n	8006d1e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006d1c:	e010      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	e000      	b.n	8006d40 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006d3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3730      	adds	r7, #48	; 0x30
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10f      	bne.n	8006da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	099b      	lsrs	r3, r3, #6
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
    return;
 8006d9e:	e0be      	b.n	8006f1e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <HAL_SPI_IRQHandler+0x66>
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	09db      	lsrs	r3, r3, #7
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
    return;
 8006dc0:	e0ad      	b.n	8006f1e <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_SPI_IRQHandler+0x80>
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	099b      	lsrs	r3, r3, #6
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80a1 	beq.w	8006f1e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 809a 	beq.w	8006f1e <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	099b      	lsrs	r3, r3, #6
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d023      	beq.n	8006e3e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d011      	beq.n	8006e26 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f043 0204 	orr.w	r2, r3, #4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	617b      	str	r3, [r7, #20]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	e00b      	b.n	8006e3e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	693b      	ldr	r3, [r7, #16]
        return;
 8006e3c:	e06f      	b.n	8006f1e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	095b      	lsrs	r3, r3, #5
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4e:	f043 0201 	orr.w	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d04f      	beq.n	8006f1c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d104      	bne.n	8006ea8 <HAL_SPI_IRQHandler+0x14c>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d034      	beq.n	8006f12 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f022 0203 	bic.w	r2, r2, #3
 8006eb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d011      	beq.n	8006ee4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	4a17      	ldr	r2, [pc, #92]	; (8006f24 <HAL_SPI_IRQHandler+0x1c8>)
 8006ec6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fc f90d 	bl	80030ec <HAL_DMA_Abort_IT>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d005      	beq.n	8006ee4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d016      	beq.n	8006f1a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <HAL_SPI_IRQHandler+0x1c8>)
 8006ef2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fc f8f7 	bl	80030ec <HAL_DMA_Abort_IT>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006f10:	e003      	b.n	8006f1a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f808 	bl	8006f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006f18:	e000      	b.n	8006f1c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006f1a:	bf00      	nop
    return;
 8006f1c:	bf00      	nop
  }
}
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	08006f3b 	.word	0x08006f3b

08006f28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f7ff ffe7 	bl	8006f28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	4613      	mov	r3, r2
 8006f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f74:	f7fb fae8 	bl	8002548 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4413      	add	r3, r2
 8006f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f84:	f7fb fae0 	bl	8002548 <HAL_GetTick>
 8006f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f8a:	4b39      	ldr	r3, [pc, #228]	; (8007070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	0d1b      	lsrs	r3, r3, #20
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	e054      	b.n	8007046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	d050      	beq.n	8007046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fa4:	f7fb fad0 	bl	8002548 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d902      	bls.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d13d      	bne.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd2:	d111      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d004      	beq.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe6:	d107      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007000:	d10f      	bne.n	8007022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e017      	b.n	8007066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3b01      	subs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	bf0c      	ite	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	2300      	movne	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	429a      	cmp	r2, r3
 8007062:	d19b      	bne.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	2000006c 	.word	0x2000006c

08007074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <SPI_EndRxTxTransaction+0x7c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1b      	ldr	r2, [pc, #108]	; (80070f4 <SPI_EndRxTxTransaction+0x80>)
 8007086:	fba2 2303 	umull	r2, r3, r2, r3
 800708a:	0d5b      	lsrs	r3, r3, #21
 800708c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007090:	fb02 f303 	mul.w	r3, r2, r3
 8007094:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800709e:	d112      	bne.n	80070c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2180      	movs	r1, #128	; 0x80
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff ff5a 	bl	8006f64 <SPI_WaitFlagStateUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d016      	beq.n	80070e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ba:	f043 0220 	orr.w	r2, r3, #32
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070dc:	2b80      	cmp	r3, #128	; 0x80
 80070de:	d0f2      	beq.n	80070c6 <SPI_EndRxTxTransaction+0x52>
 80070e0:	e000      	b.n	80070e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80070e2:	bf00      	nop
  }

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	2000006c 	.word	0x2000006c
 80070f4:	165e9f81 	.word	0x165e9f81

080070f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e03f      	b.n	800718a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d106      	bne.n	8007124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fb f86e 	bl	8002200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2224      	movs	r2, #36	; 0x24
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68da      	ldr	r2, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800713a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fb49 	bl	80077d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	695a      	ldr	r2, [r3, #20]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_UART_IRQHandler+0x52>
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa4f 	bl	8007682 <UART_Receive_IT>
      return;
 80071e4:	e17b      	b.n	80074de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80b1 	beq.w	8007350 <HAL_UART_IRQHandler+0x1bc>
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <HAL_UART_IRQHandler+0x70>
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 80a6 	beq.w	8007350 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00a      	beq.n	8007224 <HAL_UART_IRQHandler+0x90>
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	f043 0201 	orr.w	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <HAL_UART_IRQHandler+0xb0>
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f043 0202 	orr.w	r2, r3, #2
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_UART_IRQHandler+0xd0>
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	f043 0204 	orr.w	r2, r3, #4
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	f003 0308 	and.w	r3, r3, #8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00f      	beq.n	800728e <HAL_UART_IRQHandler+0xfa>
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	f003 0320 	and.w	r3, r3, #32
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <HAL_UART_IRQHandler+0xee>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	f043 0208 	orr.w	r2, r3, #8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 811e 	beq.w	80074d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <HAL_UART_IRQHandler+0x11e>
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d002      	beq.n	80072b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f9e8 	bl	8007682 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072bc:	2b40      	cmp	r3, #64	; 0x40
 80072be:	bf0c      	ite	eq
 80072c0:	2301      	moveq	r3, #1
 80072c2:	2300      	movne	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <HAL_UART_IRQHandler+0x146>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d031      	beq.n	800733e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f92a 	bl	8007534 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d123      	bne.n	8007336 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695a      	ldr	r2, [r3, #20]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d013      	beq.n	800732e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	4a76      	ldr	r2, [pc, #472]	; (80074e4 <HAL_UART_IRQHandler+0x350>)
 800730c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	4618      	mov	r0, r3
 8007314:	f7fb feea 	bl	80030ec <HAL_DMA_Abort_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d016      	beq.n	800734c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800732c:	e00e      	b.n	800734c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8ec 	bl	800750c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	e00a      	b.n	800734c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8e8 	bl	800750c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e006      	b.n	800734c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8e4 	bl	800750c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800734a:	e0c3      	b.n	80074d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800734c:	bf00      	nop
    return;
 800734e:	e0c1      	b.n	80074d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	2b01      	cmp	r3, #1
 8007356:	f040 80a1 	bne.w	800749c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 809b 	beq.w	800749c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 8095 	beq.w	800749c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d14e      	bne.n	8007434 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80073a0:	8a3b      	ldrh	r3, [r7, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8098 	beq.w	80074d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ac:	8a3a      	ldrh	r2, [r7, #16]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	f080 8092 	bcs.w	80074d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8a3a      	ldrh	r2, [r7, #16]
 80073b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	d02b      	beq.n	800741c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695a      	ldr	r2, [r3, #20]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0201 	bic.w	r2, r2, #1
 80073e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695a      	ldr	r2, [r3, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 0210 	bic.w	r2, r2, #16
 8007410:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	4618      	mov	r0, r3
 8007418:	f7fb fe2b 	bl	8003072 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007424:	b29b      	uxth	r3, r3
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	b29b      	uxth	r3, r3
 800742a:	4619      	mov	r1, r3
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f876 	bl	800751e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007432:	e051      	b.n	80074d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743c:	b29b      	uxth	r3, r3
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d047      	beq.n	80074dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d044      	beq.n	80074dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007460:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0210 	bic.w	r2, r2, #16
 800748e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007490:	8a7b      	ldrh	r3, [r7, #18]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f842 	bl	800751e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800749a:	e01f      	b.n	80074dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <HAL_UART_IRQHandler+0x324>
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f87f 	bl	80075b4 <UART_Transmit_IT>
    return;
 80074b6:	e012      	b.n	80074de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00d      	beq.n	80074de <HAL_UART_IRQHandler+0x34a>
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8c0 	bl	8007652 <UART_EndTransmit_IT>
    return;
 80074d2:	e004      	b.n	80074de <HAL_UART_IRQHandler+0x34a>
    return;
 80074d4:	bf00      	nop
 80074d6:	e002      	b.n	80074de <HAL_UART_IRQHandler+0x34a>
      return;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <HAL_UART_IRQHandler+0x34a>
      return;
 80074dc:	bf00      	nop
  }
}
 80074de:	3728      	adds	r7, #40	; 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	0800758d 	.word	0x0800758d

080074e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	bc80      	pop	{r7}
 800750a:	4770      	bx	lr

0800750c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800754a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695a      	ldr	r2, [r3, #20]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	2b01      	cmp	r3, #1
 8007562:	d107      	bne.n	8007574 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0210 	bic.w	r2, r2, #16
 8007572:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bc80      	pop	{r7}
 800758a:	4770      	bx	lr

0800758c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ffb0 	bl	800750c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b21      	cmp	r3, #33	; 0x21
 80075c6:	d13e      	bne.n	8007646 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d0:	d114      	bne.n	80075fc <UART_Transmit_IT+0x48>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d110      	bne.n	80075fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	461a      	mov	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	1c9a      	adds	r2, r3, #2
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	621a      	str	r2, [r3, #32]
 80075fa:	e008      	b.n	800760e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	1c59      	adds	r1, r3, #1
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6211      	str	r1, [r2, #32]
 8007606:	781a      	ldrb	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29b      	uxth	r3, r3
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	4619      	mov	r1, r3
 800761c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10f      	bne.n	8007642 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007630:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007640:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	e000      	b.n	8007648 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007646:	2302      	movs	r3, #2
  }
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	bc80      	pop	{r7}
 8007650:	4770      	bx	lr

08007652 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007668:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff ff38 	bl	80074e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b086      	sub	sp, #24
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b22      	cmp	r3, #34	; 0x22
 8007694:	f040 8099 	bne.w	80077ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a0:	d117      	bne.n	80076d2 <UART_Receive_IT+0x50>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d113      	bne.n	80076d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ca:	1c9a      	adds	r2, r3, #2
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	629a      	str	r2, [r3, #40]	; 0x28
 80076d0:	e026      	b.n	8007720 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e4:	d007      	beq.n	80076f6 <UART_Receive_IT+0x74>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <UART_Receive_IT+0x82>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	e008      	b.n	8007716 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007710:	b2da      	uxtb	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007724:	b29b      	uxth	r3, r3
 8007726:	3b01      	subs	r3, #1
 8007728:	b29b      	uxth	r3, r3
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	4619      	mov	r1, r3
 800772e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007730:	2b00      	cmp	r3, #0
 8007732:	d148      	bne.n	80077c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0220 	bic.w	r2, r2, #32
 8007742:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007752:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695a      	ldr	r2, [r3, #20]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007770:	2b01      	cmp	r3, #1
 8007772:	d123      	bne.n	80077bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0210 	bic.w	r2, r2, #16
 8007788:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0310 	and.w	r3, r3, #16
 8007794:	2b10      	cmp	r3, #16
 8007796:	d10a      	bne.n	80077ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff feb2 	bl	800751e <HAL_UARTEx_RxEventCallback>
 80077ba:	e002      	b.n	80077c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fe9c 	bl	80074fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e002      	b.n	80077cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e000      	b.n	80077cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	431a      	orrs	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4313      	orrs	r3, r2
 8007808:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007814:	f023 030c 	bic.w	r3, r3, #12
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	430b      	orrs	r3, r1
 8007820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a55      	ldr	r2, [pc, #340]	; (8007994 <UART_SetConfig+0x1c0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d103      	bne.n	800784a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007842:	f7fe f97f 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	e002      	b.n	8007850 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fe f967 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 800784e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007858:	d14c      	bne.n	80078f4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	4613      	mov	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	009a      	lsls	r2, r3, #2
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	4a49      	ldr	r2, [pc, #292]	; (8007998 <UART_SetConfig+0x1c4>)
 8007872:	fba2 2303 	umull	r2, r3, r2, r3
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	0119      	lsls	r1, r3, #4
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	4613      	mov	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	441a      	add	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007890:	4b41      	ldr	r3, [pc, #260]	; (8007998 <UART_SetConfig+0x1c4>)
 8007892:	fba3 0302 	umull	r0, r3, r3, r2
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	2064      	movs	r0, #100	; 0x64
 800789a:	fb00 f303 	mul.w	r3, r0, r3
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	3332      	adds	r3, #50	; 0x32
 80078a4:	4a3c      	ldr	r2, [pc, #240]	; (8007998 <UART_SetConfig+0x1c4>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078b2:	4419      	add	r1, r3
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009a      	lsls	r2, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80078ca:	4b33      	ldr	r3, [pc, #204]	; (8007998 <UART_SetConfig+0x1c4>)
 80078cc:	fba3 0302 	umull	r0, r3, r3, r2
 80078d0:	095b      	lsrs	r3, r3, #5
 80078d2:	2064      	movs	r0, #100	; 0x64
 80078d4:	fb00 f303 	mul.w	r3, r0, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	3332      	adds	r3, #50	; 0x32
 80078de:	4a2e      	ldr	r2, [pc, #184]	; (8007998 <UART_SetConfig+0x1c4>)
 80078e0:	fba2 2303 	umull	r2, r3, r2, r3
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	f003 0207 	and.w	r2, r3, #7
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	440a      	add	r2, r1
 80078f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078f2:	e04a      	b.n	800798a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009a      	lsls	r2, r3, #2
 80078fe:	441a      	add	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	4a23      	ldr	r2, [pc, #140]	; (8007998 <UART_SetConfig+0x1c4>)
 800790c:	fba2 2303 	umull	r2, r3, r2, r3
 8007910:	095b      	lsrs	r3, r3, #5
 8007912:	0119      	lsls	r1, r3, #4
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009a      	lsls	r2, r3, #2
 800791e:	441a      	add	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	fbb2 f2f3 	udiv	r2, r2, r3
 800792a:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <UART_SetConfig+0x1c4>)
 800792c:	fba3 0302 	umull	r0, r3, r3, r2
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	2064      	movs	r0, #100	; 0x64
 8007934:	fb00 f303 	mul.w	r3, r0, r3
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	3332      	adds	r3, #50	; 0x32
 800793e:	4a16      	ldr	r2, [pc, #88]	; (8007998 <UART_SetConfig+0x1c4>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	095b      	lsrs	r3, r3, #5
 8007946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800794a:	4419      	add	r1, r3
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4613      	mov	r3, r2
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	009a      	lsls	r2, r3, #2
 8007956:	441a      	add	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007962:	4b0d      	ldr	r3, [pc, #52]	; (8007998 <UART_SetConfig+0x1c4>)
 8007964:	fba3 0302 	umull	r0, r3, r3, r2
 8007968:	095b      	lsrs	r3, r3, #5
 800796a:	2064      	movs	r0, #100	; 0x64
 800796c:	fb00 f303 	mul.w	r3, r0, r3
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	3332      	adds	r3, #50	; 0x32
 8007976:	4a08      	ldr	r2, [pc, #32]	; (8007998 <UART_SetConfig+0x1c4>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	095b      	lsrs	r3, r3, #5
 800797e:	f003 020f 	and.w	r2, r3, #15
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	440a      	add	r2, r1
 8007988:	609a      	str	r2, [r3, #8]
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	40013800 	.word	0x40013800
 8007998:	51eb851f 	.word	0x51eb851f

0800799c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80079a0:	4904      	ldr	r1, [pc, #16]	; (80079b4 <MX_FATFS_Init+0x18>)
 80079a2:	4805      	ldr	r0, [pc, #20]	; (80079b8 <MX_FATFS_Init+0x1c>)
 80079a4:	f003 fb86 	bl	800b0b4 <FATFS_LinkDriver>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	4b03      	ldr	r3, [pc, #12]	; (80079bc <MX_FATFS_Init+0x20>)
 80079ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80079b0:	bf00      	nop
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20002554 	.word	0x20002554
 80079b8:	20000078 	.word	0x20000078
 80079bc:	20002558 	.word	0x20002558

080079c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80079c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr

080079ce <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	4603      	mov	r3, r0
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7f9 f8e0 	bl	8000ba0 <SD_disk_initialize>
 80079e0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	4603      	mov	r3, r0
 80079f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7f9 f9b8 	bl	8000d6c <SD_disk_status>
 80079fc:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8007a16:	7bf8      	ldrb	r0, [r7, #15]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68b9      	ldr	r1, [r7, #8]
 8007a1e:	f7f9 f9b9 	bl	8000d94 <SD_disk_read>
 8007a22:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007a3c:	7bf8      	ldrb	r0, [r7, #15]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	f7f9 fa10 	bl	8000e68 <SD_disk_write>
 8007a48:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	4603      	mov	r3, r0
 8007a5a:	603a      	str	r2, [r7, #0]
 8007a5c:	71fb      	strb	r3, [r7, #7]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007a62:	79b9      	ldrb	r1, [r7, #6]
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7f9 fa81 	bl	8000f70 <SD_disk_ioctl>
 8007a6e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <disk_status+0x30>)
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	79fa      	ldrb	r2, [r7, #7]
 8007a90:	4905      	ldr	r1, [pc, #20]	; (8007aa8 <disk_status+0x30>)
 8007a92:	440a      	add	r2, r1
 8007a94:	7a12      	ldrb	r2, [r2, #8]
 8007a96:	4610      	mov	r0, r2
 8007a98:	4798      	blx	r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	2000033c 	.word	0x2000033c

08007aac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	4a0d      	ldr	r2, [pc, #52]	; (8007af4 <disk_initialize+0x48>)
 8007abe:	5cd3      	ldrb	r3, [r2, r3]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d111      	bne.n	8007ae8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	4a0b      	ldr	r2, [pc, #44]	; (8007af4 <disk_initialize+0x48>)
 8007ac8:	2101      	movs	r1, #1
 8007aca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	4a09      	ldr	r2, [pc, #36]	; (8007af4 <disk_initialize+0x48>)
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	79fa      	ldrb	r2, [r7, #7]
 8007ada:	4906      	ldr	r1, [pc, #24]	; (8007af4 <disk_initialize+0x48>)
 8007adc:	440a      	add	r2, r1
 8007ade:	7a12      	ldrb	r2, [r2, #8]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	2000033c 	.word	0x2000033c

08007af8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007af8:	b590      	push	{r4, r7, lr}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	607a      	str	r2, [r7, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4a0a      	ldr	r2, [pc, #40]	; (8007b34 <disk_read+0x3c>)
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	689c      	ldr	r4, [r3, #8]
 8007b14:	7bfb      	ldrb	r3, [r7, #15]
 8007b16:	4a07      	ldr	r2, [pc, #28]	; (8007b34 <disk_read+0x3c>)
 8007b18:	4413      	add	r3, r2
 8007b1a:	7a18      	ldrb	r0, [r3, #8]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68b9      	ldr	r1, [r7, #8]
 8007b22:	47a0      	blx	r4
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd90      	pop	{r4, r7, pc}
 8007b32:	bf00      	nop
 8007b34:	2000033c 	.word	0x2000033c

08007b38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <disk_write+0x3c>)
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	68dc      	ldr	r4, [r3, #12]
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4a07      	ldr	r2, [pc, #28]	; (8007b74 <disk_write+0x3c>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	7a18      	ldrb	r0, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	47a0      	blx	r4
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2000033c 	.word	0x2000033c

08007b78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	603a      	str	r2, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
 8007b84:	460b      	mov	r3, r1
 8007b86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	4a09      	ldr	r2, [pc, #36]	; (8007bb0 <disk_ioctl+0x38>)
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	79fa      	ldrb	r2, [r7, #7]
 8007b96:	4906      	ldr	r1, [pc, #24]	; (8007bb0 <disk_ioctl+0x38>)
 8007b98:	440a      	add	r2, r1
 8007b9a:	7a10      	ldrb	r0, [r2, #8]
 8007b9c:	79b9      	ldrb	r1, [r7, #6]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000033c 	.word	0x2000033c

08007bb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007bc4:	89fb      	ldrh	r3, [r7, #14]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	b21a      	sxth	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	b21b      	sxth	r3, r3
 8007bd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007bd6:	89fb      	ldrh	r3, [r7, #14]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr

08007be2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3303      	adds	r3, #3
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	3202      	adds	r2, #2
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	3201      	adds	r2, #1
 8007c08:	7812      	ldrb	r2, [r2, #0]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	021b      	lsls	r3, r3, #8
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	7812      	ldrb	r2, [r2, #0]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
	return rv;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bc80      	pop	{r7}
 8007c24:	4770      	bx	lr

08007c26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1c5a      	adds	r2, r3, #1
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	887a      	ldrh	r2, [r7, #2]
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	887b      	ldrh	r3, [r7, #2]
 8007c40:	0a1b      	lsrs	r3, r3, #8
 8007c42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	607a      	str	r2, [r7, #4]
 8007c4a:	887a      	ldrh	r2, [r7, #2]
 8007c4c:	b2d2      	uxtb	r2, r2
 8007c4e:	701a      	strb	r2, [r3, #0]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	1c5a      	adds	r2, r3, #1
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	701a      	strb	r2, [r3, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bc80      	pop	{r7}
 8007cae:	4770      	bx	lr

08007cb0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00d      	beq.n	8007ce6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	1c53      	adds	r3, r2, #1
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	6179      	str	r1, [r7, #20]
 8007cd6:	7812      	ldrb	r2, [r2, #0]
 8007cd8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	607b      	str	r3, [r7, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f1      	bne.n	8007cca <mem_cpy+0x1a>
	}
}
 8007ce6:	bf00      	nop
 8007ce8:	371c      	adds	r7, #28
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	1c5a      	adds	r2, r3, #1
 8007d04:	617a      	str	r2, [r7, #20]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	607b      	str	r3, [r7, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1f3      	bne.n	8007d00 <mem_set+0x10>
}
 8007d18:	bf00      	nop
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bc80      	pop	{r7}
 8007d22:	4770      	bx	lr

08007d24 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007d24:	b480      	push	{r7}
 8007d26:	b089      	sub	sp, #36	; 0x24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	61fa      	str	r2, [r7, #28]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	4619      	mov	r1, r3
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	61ba      	str	r2, [r7, #24]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	1acb      	subs	r3, r1, r3
 8007d50:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <mem_cmp+0x40>
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0eb      	beq.n	8007d3c <mem_cmp+0x18>

	return r;
 8007d64:	697b      	ldr	r3, [r7, #20]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3724      	adds	r7, #36	; 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr

08007d70 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007d7a:	e002      	b.n	8007d82 <chk_chr+0x12>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <chk_chr+0x26>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d1f2      	bne.n	8007d7c <chk_chr+0xc>
	return *str;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	781b      	ldrb	r3, [r3, #0]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	e029      	b.n	8007e0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007db8:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <chk_lock+0xb0>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01d      	beq.n	8007e02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007dc6:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <chk_lock+0xb0>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	4413      	add	r3, r2
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d116      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007dd8:	4a1e      	ldr	r2, [pc, #120]	; (8007e54 <chk_lock+0xb0>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	4413      	add	r3, r2
 8007de0:	3304      	adds	r3, #4
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d10c      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007dec:	4a19      	ldr	r2, [pc, #100]	; (8007e54 <chk_lock+0xb0>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	4413      	add	r3, r2
 8007df4:	3308      	adds	r3, #8
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d102      	bne.n	8007e06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e00:	e007      	b.n	8007e12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d9d2      	bls.n	8007db8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d109      	bne.n	8007e2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <chk_lock+0x80>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d101      	bne.n	8007e28 <chk_lock+0x84>
 8007e24:	2300      	movs	r3, #0
 8007e26:	e010      	b.n	8007e4a <chk_lock+0xa6>
 8007e28:	2312      	movs	r3, #18
 8007e2a:	e00e      	b.n	8007e4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d108      	bne.n	8007e44 <chk_lock+0xa0>
 8007e32:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <chk_lock+0xb0>)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	011b      	lsls	r3, r3, #4
 8007e38:	4413      	add	r3, r2
 8007e3a:	330c      	adds	r3, #12
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e42:	d101      	bne.n	8007e48 <chk_lock+0xa4>
 8007e44:	2310      	movs	r3, #16
 8007e46:	e000      	b.n	8007e4a <chk_lock+0xa6>
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr
 8007e54:	2000011c 	.word	0x2000011c

08007e58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	e002      	b.n	8007e6a <enq_lock+0x12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3301      	adds	r3, #1
 8007e68:	607b      	str	r3, [r7, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d806      	bhi.n	8007e7e <enq_lock+0x26>
 8007e70:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <enq_lock+0x3c>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	011b      	lsls	r3, r3, #4
 8007e76:	4413      	add	r3, r2
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f2      	bne.n	8007e64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	bf14      	ite	ne
 8007e84:	2301      	movne	r3, #1
 8007e86:	2300      	moveq	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr
 8007e94:	2000011c 	.word	0x2000011c

08007e98 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	e01f      	b.n	8007ee8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007ea8:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <inc_lock+0x118>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	4413      	add	r3, r2
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d113      	bne.n	8007ee2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007eba:	4a3d      	ldr	r2, [pc, #244]	; (8007fb0 <inc_lock+0x118>)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	4413      	add	r3, r2
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d109      	bne.n	8007ee2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007ece:	4a38      	ldr	r2, [pc, #224]	; (8007fb0 <inc_lock+0x118>)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	011b      	lsls	r3, r3, #4
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3308      	adds	r3, #8
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d006      	beq.n	8007ef0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d9dc      	bls.n	8007ea8 <inc_lock+0x10>
 8007eee:	e000      	b.n	8007ef2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007ef0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d132      	bne.n	8007f5e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e002      	b.n	8007f04 <inc_lock+0x6c>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	3301      	adds	r3, #1
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d806      	bhi.n	8007f18 <inc_lock+0x80>
 8007f0a:	4a29      	ldr	r2, [pc, #164]	; (8007fb0 <inc_lock+0x118>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	4413      	add	r3, r2
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1f2      	bne.n	8007efe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d101      	bne.n	8007f22 <inc_lock+0x8a>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e040      	b.n	8007fa4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	4922      	ldr	r1, [pc, #136]	; (8007fb0 <inc_lock+0x118>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	440b      	add	r3, r1
 8007f2e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	491e      	ldr	r1, [pc, #120]	; (8007fb0 <inc_lock+0x118>)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	440b      	add	r3, r1
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	695a      	ldr	r2, [r3, #20]
 8007f44:	491a      	ldr	r1, [pc, #104]	; (8007fb0 <inc_lock+0x118>)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	440b      	add	r3, r1
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007f50:	4a17      	ldr	r2, [pc, #92]	; (8007fb0 <inc_lock+0x118>)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	011b      	lsls	r3, r3, #4
 8007f56:	4413      	add	r3, r2
 8007f58:	330c      	adds	r3, #12
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <inc_lock+0xe0>
 8007f64:	4a12      	ldr	r2, [pc, #72]	; (8007fb0 <inc_lock+0x118>)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	011b      	lsls	r3, r3, #4
 8007f6a:	4413      	add	r3, r2
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <inc_lock+0xe0>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e015      	b.n	8007fa4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <inc_lock+0xf8>
 8007f7e:	4a0c      	ldr	r2, [pc, #48]	; (8007fb0 <inc_lock+0x118>)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	4413      	add	r3, r2
 8007f86:	330c      	adds	r3, #12
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	e001      	b.n	8007f94 <inc_lock+0xfc>
 8007f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f94:	4906      	ldr	r1, [pc, #24]	; (8007fb0 <inc_lock+0x118>)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	440b      	add	r3, r1
 8007f9c:	330c      	adds	r3, #12
 8007f9e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	3301      	adds	r3, #1
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	2000011c 	.word	0x2000011c

08007fb4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	607b      	str	r3, [r7, #4]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d825      	bhi.n	8008014 <dec_lock+0x60>
		n = Files[i].ctr;
 8007fc8:	4a16      	ldr	r2, [pc, #88]	; (8008024 <dec_lock+0x70>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	4413      	add	r3, r2
 8007fd0:	330c      	adds	r3, #12
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fdc:	d101      	bne.n	8007fe2 <dec_lock+0x2e>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <dec_lock+0x3a>
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007fee:	4a0d      	ldr	r2, [pc, #52]	; (8008024 <dec_lock+0x70>)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	4413      	add	r3, r2
 8007ff6:	330c      	adds	r3, #12
 8007ff8:	89fa      	ldrh	r2, [r7, #14]
 8007ffa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007ffc:	89fb      	ldrh	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <dec_lock+0x5a>
 8008002:	4a08      	ldr	r2, [pc, #32]	; (8008024 <dec_lock+0x70>)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	011b      	lsls	r3, r3, #4
 8008008:	4413      	add	r3, r2
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	737b      	strb	r3, [r7, #13]
 8008012:	e001      	b.n	8008018 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008014:	2302      	movs	r3, #2
 8008016:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008018:	7b7b      	ldrb	r3, [r7, #13]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr
 8008024:	2000011c 	.word	0x2000011c

08008028 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	e010      	b.n	8008058 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008036:	4a0d      	ldr	r2, [pc, #52]	; (800806c <clear_lock+0x44>)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	4413      	add	r3, r2
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	429a      	cmp	r2, r3
 8008044:	d105      	bne.n	8008052 <clear_lock+0x2a>
 8008046:	4a09      	ldr	r2, [pc, #36]	; (800806c <clear_lock+0x44>)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	3301      	adds	r3, #1
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d9eb      	bls.n	8008036 <clear_lock+0xe>
	}
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	2000011c 	.word	0x2000011c

08008070 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	78db      	ldrb	r3, [r3, #3]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d034      	beq.n	80080ee <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7858      	ldrb	r0, [r3, #1]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008094:	2301      	movs	r3, #1
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	f7ff fd4e 	bl	8007b38 <disk_write>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
 80080a6:	e022      	b.n	80080ee <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	1ad2      	subs	r2, r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d217      	bcs.n	80080ee <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	789b      	ldrb	r3, [r3, #2]
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	e010      	b.n	80080e8 <sync_window+0x78>
					wsect += fs->fsize;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4413      	add	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7858      	ldrb	r0, [r3, #1]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80080da:	2301      	movs	r3, #1
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	f7ff fd2b 	bl	8007b38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d8eb      	bhi.n	80080c6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d01b      	beq.n	8008148 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff ffad 	bl	8008070 <sync_window>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d113      	bne.n	8008148 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7858      	ldrb	r0, [r3, #1]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800812a:	2301      	movs	r3, #1
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	f7ff fce3 	bl	8007af8 <disk_read>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008138:	f04f 33ff 	mov.w	r3, #4294967295
 800813c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800813e:	2301      	movs	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff87 	bl	8008070 <sync_window>
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d159      	bne.n	8008220 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b03      	cmp	r3, #3
 8008172:	d149      	bne.n	8008208 <sync_fs+0xb4>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	791b      	ldrb	r3, [r3, #4]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d145      	bne.n	8008208 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	899b      	ldrh	r3, [r3, #12]
 8008186:	461a      	mov	r2, r3
 8008188:	2100      	movs	r1, #0
 800818a:	f7ff fdb1 	bl	8007cf0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3338      	adds	r3, #56	; 0x38
 8008192:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008196:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fd43 	bl	8007c26 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3338      	adds	r3, #56	; 0x38
 80081a4:	4921      	ldr	r1, [pc, #132]	; (800822c <sync_fs+0xd8>)
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff fd57 	bl	8007c5a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3338      	adds	r3, #56	; 0x38
 80081b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80081b4:	491e      	ldr	r1, [pc, #120]	; (8008230 <sync_fs+0xdc>)
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fd4f 	bl	8007c5a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3338      	adds	r3, #56	; 0x38
 80081c0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f7ff fd45 	bl	8007c5a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3338      	adds	r3, #56	; 0x38
 80081d4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	4619      	mov	r1, r3
 80081de:	4610      	mov	r0, r2
 80081e0:	f7ff fd3b 	bl	8007c5a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7858      	ldrb	r0, [r3, #1]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081fc:	2301      	movs	r3, #1
 80081fe:	f7ff fc9b 	bl	8007b38 <disk_write>
			fs->fsi_flag = 0;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2200      	movs	r2, #0
 800820e:	2100      	movs	r1, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fcb1 	bl	8007b78 <disk_ioctl>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <sync_fs+0xcc>
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	41615252 	.word	0x41615252
 8008230:	61417272 	.word	0x61417272

08008234 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3b02      	subs	r3, #2
 8008242:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	3b02      	subs	r3, #2
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d301      	bcc.n	8008254 <clust2sect+0x20>
 8008250:	2300      	movs	r3, #0
 8008252:	e008      	b.n	8008266 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	895b      	ldrh	r3, [r3, #10]
 8008258:	461a      	mov	r2, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	fb03 f202 	mul.w	r2, r3, r2
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	4413      	add	r3, r2
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d904      	bls.n	8008290 <get_fat+0x20>
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d302      	bcc.n	8008296 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008290:	2301      	movs	r3, #1
 8008292:	617b      	str	r3, [r7, #20]
 8008294:	e0bb      	b.n	800840e <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008296:	f04f 33ff 	mov.w	r3, #4294967295
 800829a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	f000 8083 	beq.w	80083ac <get_fat+0x13c>
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f300 80a7 	bgt.w	80083fa <get_fat+0x18a>
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d002      	beq.n	80082b6 <get_fat+0x46>
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d056      	beq.n	8008362 <get_fat+0xf2>
 80082b4:	e0a1      	b.n	80083fa <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	085b      	lsrs	r3, r3, #1
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	899b      	ldrh	r3, [r3, #12]
 80082cc:	4619      	mov	r1, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80082d4:	4413      	add	r3, r2
 80082d6:	4619      	mov	r1, r3
 80082d8:	6938      	ldr	r0, [r7, #16]
 80082da:	f7ff ff0d 	bl	80080f8 <move_window>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f040 808d 	bne.w	8008400 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	60fa      	str	r2, [r7, #12]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	8992      	ldrh	r2, [r2, #12]
 80082f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80082f4:	fb02 f201 	mul.w	r2, r2, r1
 80082f8:	1a9b      	subs	r3, r3, r2
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4413      	add	r3, r2
 80082fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008302:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	899b      	ldrh	r3, [r3, #12]
 800830c:	4619      	mov	r1, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	fbb3 f3f1 	udiv	r3, r3, r1
 8008314:	4413      	add	r3, r2
 8008316:	4619      	mov	r1, r3
 8008318:	6938      	ldr	r0, [r7, #16]
 800831a:	f7ff feed 	bl	80080f8 <move_window>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d16f      	bne.n	8008404 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	899b      	ldrh	r3, [r3, #12]
 8008328:	461a      	mov	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008330:	fb02 f201 	mul.w	r2, r2, r1
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4413      	add	r3, r2
 800833a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	461a      	mov	r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	4313      	orrs	r3, r2
 8008346:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <get_fat+0xe8>
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	091b      	lsrs	r3, r3, #4
 8008356:	e002      	b.n	800835e <get_fat+0xee>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800835e:	617b      	str	r3, [r7, #20]
			break;
 8008360:	e055      	b.n	800840e <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	899b      	ldrh	r3, [r3, #12]
 800836a:	085b      	lsrs	r3, r3, #1
 800836c:	b29b      	uxth	r3, r3
 800836e:	4619      	mov	r1, r3
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	fbb3 f3f1 	udiv	r3, r3, r1
 8008376:	4413      	add	r3, r2
 8008378:	4619      	mov	r1, r3
 800837a:	6938      	ldr	r0, [r7, #16]
 800837c:	f7ff febc 	bl	80080f8 <move_window>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d140      	bne.n	8008408 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	8992      	ldrh	r2, [r2, #12]
 8008394:	fbb3 f0f2 	udiv	r0, r3, r2
 8008398:	fb02 f200 	mul.w	r2, r2, r0
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	440b      	add	r3, r1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff fc07 	bl	8007bb4 <ld_word>
 80083a6:	4603      	mov	r3, r0
 80083a8:	617b      	str	r3, [r7, #20]
			break;
 80083aa:	e030      	b.n	800840e <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	899b      	ldrh	r3, [r3, #12]
 80083b4:	089b      	lsrs	r3, r3, #2
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4619      	mov	r1, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80083c0:	4413      	add	r3, r2
 80083c2:	4619      	mov	r1, r3
 80083c4:	6938      	ldr	r0, [r7, #16]
 80083c6:	f7ff fe97 	bl	80080f8 <move_window>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11d      	bne.n	800840c <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	8992      	ldrh	r2, [r2, #12]
 80083de:	fbb3 f0f2 	udiv	r0, r3, r2
 80083e2:	fb02 f200 	mul.w	r2, r2, r0
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	440b      	add	r3, r1
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7ff fbf9 	bl	8007be2 <ld_dword>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083f6:	617b      	str	r3, [r7, #20]
			break;
 80083f8:	e009      	b.n	800840e <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80083fa:	2301      	movs	r3, #1
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e006      	b.n	800840e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008400:	bf00      	nop
 8008402:	e004      	b.n	800840e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008404:	bf00      	nop
 8008406:	e002      	b.n	800840e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008408:	bf00      	nop
 800840a:	e000      	b.n	800840e <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800840c:	bf00      	nop
		}
	}

	return val;
 800840e:	697b      	ldr	r3, [r7, #20]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008424:	2302      	movs	r3, #2
 8008426:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2b01      	cmp	r3, #1
 800842c:	f240 8102 	bls.w	8008634 <put_fat+0x21c>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	429a      	cmp	r2, r3
 8008438:	f080 80fc 	bcs.w	8008634 <put_fat+0x21c>
		switch (fs->fs_type) {
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b03      	cmp	r3, #3
 8008442:	f000 80b6 	beq.w	80085b2 <put_fat+0x19a>
 8008446:	2b03      	cmp	r3, #3
 8008448:	f300 80fd 	bgt.w	8008646 <put_fat+0x22e>
 800844c:	2b01      	cmp	r3, #1
 800844e:	d003      	beq.n	8008458 <put_fat+0x40>
 8008450:	2b02      	cmp	r3, #2
 8008452:	f000 8083 	beq.w	800855c <put_fat+0x144>
 8008456:	e0f6      	b.n	8008646 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	4413      	add	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	899b      	ldrh	r3, [r3, #12]
 800846e:	4619      	mov	r1, r3
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	fbb3 f3f1 	udiv	r3, r3, r1
 8008476:	4413      	add	r3, r2
 8008478:	4619      	mov	r1, r3
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f7ff fe3c 	bl	80080f8 <move_window>
 8008480:	4603      	mov	r3, r0
 8008482:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008484:	7ffb      	ldrb	r3, [r7, #31]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f040 80d6 	bne.w	8008638 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	61ba      	str	r2, [r7, #24]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	8992      	ldrh	r2, [r2, #12]
 800849c:	fbb3 f0f2 	udiv	r0, r3, r2
 80084a0:	fb02 f200 	mul.w	r2, r2, r0
 80084a4:	1a9b      	subs	r3, r3, r2
 80084a6:	440b      	add	r3, r1
 80084a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00d      	beq.n	80084d0 <put_fat+0xb8>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	b25a      	sxtb	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	b25b      	sxtb	r3, r3
 80084c8:	4313      	orrs	r3, r2
 80084ca:	b25b      	sxtb	r3, r3
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	e001      	b.n	80084d4 <put_fat+0xbc>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2201      	movs	r2, #1
 80084dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	899b      	ldrh	r3, [r3, #12]
 80084e6:	4619      	mov	r1, r3
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80084ee:	4413      	add	r3, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fe00 	bl	80080f8 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084fc:	7ffb      	ldrb	r3, [r7, #31]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f040 809c 	bne.w	800863c <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	899b      	ldrh	r3, [r3, #12]
 800850e:	461a      	mov	r2, r3
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	fbb3 f0f2 	udiv	r0, r3, r2
 8008516:	fb02 f200 	mul.w	r2, r2, r0
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	440b      	add	r3, r1
 800851e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <put_fat+0x11a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	091b      	lsrs	r3, r3, #4
 800852e:	b2db      	uxtb	r3, r3
 8008530:	e00e      	b.n	8008550 <put_fat+0x138>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	b25b      	sxtb	r3, r3
 8008538:	f023 030f 	bic.w	r3, r3, #15
 800853c:	b25a      	sxtb	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	b25b      	sxtb	r3, r3
 8008544:	f003 030f 	and.w	r3, r3, #15
 8008548:	b25b      	sxtb	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b25b      	sxtb	r3, r3
 800854e:	b2db      	uxtb	r3, r3
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	70da      	strb	r2, [r3, #3]
			break;
 800855a:	e074      	b.n	8008646 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	899b      	ldrh	r3, [r3, #12]
 8008564:	085b      	lsrs	r3, r3, #1
 8008566:	b29b      	uxth	r3, r3
 8008568:	4619      	mov	r1, r3
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008570:	4413      	add	r3, r2
 8008572:	4619      	mov	r1, r3
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff fdbf 	bl	80080f8 <move_window>
 800857a:	4603      	mov	r3, r0
 800857c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800857e:	7ffb      	ldrb	r3, [r7, #31]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d15d      	bne.n	8008640 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	005b      	lsls	r3, r3, #1
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	8992      	ldrh	r2, [r2, #12]
 8008592:	fbb3 f0f2 	udiv	r0, r3, r2
 8008596:	fb02 f200 	mul.w	r2, r2, r0
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	440b      	add	r3, r1
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	b292      	uxth	r2, r2
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fb3e 	bl	8007c26 <st_word>
			fs->wflag = 1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2201      	movs	r2, #1
 80085ae:	70da      	strb	r2, [r3, #3]
			break;
 80085b0:	e049      	b.n	8008646 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	899b      	ldrh	r3, [r3, #12]
 80085ba:	089b      	lsrs	r3, r3, #2
 80085bc:	b29b      	uxth	r3, r3
 80085be:	4619      	mov	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80085c6:	4413      	add	r3, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7ff fd94 	bl	80080f8 <move_window>
 80085d0:	4603      	mov	r3, r0
 80085d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085d4:	7ffb      	ldrb	r3, [r7, #31]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d134      	bne.n	8008644 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	8992      	ldrh	r2, [r2, #12]
 80085ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80085f2:	fb02 f200 	mul.w	r2, r2, r0
 80085f6:	1a9b      	subs	r3, r3, r2
 80085f8:	440b      	add	r3, r1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff faf1 	bl	8007be2 <ld_dword>
 8008600:	4603      	mov	r3, r0
 8008602:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008606:	4323      	orrs	r3, r4
 8008608:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	8992      	ldrh	r2, [r2, #12]
 8008618:	fbb3 f0f2 	udiv	r0, r3, r2
 800861c:	fb02 f200 	mul.w	r2, r2, r0
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	440b      	add	r3, r1
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff fb17 	bl	8007c5a <st_dword>
			fs->wflag = 1;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	70da      	strb	r2, [r3, #3]
			break;
 8008632:	e008      	b.n	8008646 <put_fat+0x22e>
		}
	}
 8008634:	bf00      	nop
 8008636:	e006      	b.n	8008646 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008638:	bf00      	nop
 800863a:	e004      	b.n	8008646 <put_fat+0x22e>
			if (res != FR_OK) break;
 800863c:	bf00      	nop
 800863e:	e002      	b.n	8008646 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008640:	bf00      	nop
 8008642:	e000      	b.n	8008646 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008644:	bf00      	nop
	return res;
 8008646:	7ffb      	ldrb	r3, [r7, #31]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3724      	adds	r7, #36	; 0x24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd90      	pop	{r4, r7, pc}

08008650 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b01      	cmp	r3, #1
 800866a:	d904      	bls.n	8008676 <remove_chain+0x26>
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	429a      	cmp	r2, r3
 8008674:	d301      	bcc.n	800867a <remove_chain+0x2a>
 8008676:	2302      	movs	r3, #2
 8008678:	e04b      	b.n	8008712 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00c      	beq.n	800869a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008680:	f04f 32ff 	mov.w	r2, #4294967295
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	69b8      	ldr	r0, [r7, #24]
 8008688:	f7ff fec6 	bl	8008418 <put_fat>
 800868c:	4603      	mov	r3, r0
 800868e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008690:	7ffb      	ldrb	r3, [r7, #31]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <remove_chain+0x4a>
 8008696:	7ffb      	ldrb	r3, [r7, #31]
 8008698:	e03b      	b.n	8008712 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fde7 	bl	8008270 <get_fat>
 80086a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d031      	beq.n	800870e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <remove_chain+0x64>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e02e      	b.n	8008712 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d101      	bne.n	80086c0 <remove_chain+0x70>
 80086bc:	2301      	movs	r3, #1
 80086be:	e028      	b.n	8008712 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80086c0:	2200      	movs	r2, #0
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	69b8      	ldr	r0, [r7, #24]
 80086c6:	f7ff fea7 	bl	8008418 <put_fat>
 80086ca:	4603      	mov	r3, r0
 80086cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80086ce:	7ffb      	ldrb	r3, [r7, #31]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <remove_chain+0x88>
 80086d4:	7ffb      	ldrb	r3, [r7, #31]
 80086d6:	e01c      	b.n	8008712 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	69db      	ldr	r3, [r3, #28]
 80086e0:	3b02      	subs	r3, #2
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d20b      	bcs.n	80086fe <remove_chain+0xae>
			fs->free_clst++;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	791b      	ldrb	r3, [r3, #4]
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008702:	69bb      	ldr	r3, [r7, #24]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	429a      	cmp	r2, r3
 800870a:	d3c6      	bcc.n	800869a <remove_chain+0x4a>
 800870c:	e000      	b.n	8008710 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800870e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}

0800871a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b088      	sub	sp, #32
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10d      	bne.n	800874c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d004      	beq.n	8008746 <create_chain+0x2c>
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	429a      	cmp	r2, r3
 8008744:	d31b      	bcc.n	800877e <create_chain+0x64>
 8008746:	2301      	movs	r3, #1
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e018      	b.n	800877e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7ff fd8e 	bl	8008270 <get_fat>
 8008754:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d801      	bhi.n	8008760 <create_chain+0x46>
 800875c:	2301      	movs	r3, #1
 800875e:	e070      	b.n	8008842 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d101      	bne.n	800876c <create_chain+0x52>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e06a      	b.n	8008842 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	429a      	cmp	r2, r3
 8008774:	d201      	bcs.n	800877a <create_chain+0x60>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	e063      	b.n	8008842 <create_chain+0x128>
		scl = clst;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	429a      	cmp	r2, r3
 8008790:	d307      	bcc.n	80087a2 <create_chain+0x88>
				ncl = 2;
 8008792:	2302      	movs	r3, #2
 8008794:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	429a      	cmp	r2, r3
 800879c:	d901      	bls.n	80087a2 <create_chain+0x88>
 800879e:	2300      	movs	r3, #0
 80087a0:	e04f      	b.n	8008842 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80087a2:	69f9      	ldr	r1, [r7, #28]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7ff fd63 	bl	8008270 <get_fat>
 80087aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d003      	beq.n	80087c0 <create_chain+0xa6>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087be:	d101      	bne.n	80087c4 <create_chain+0xaa>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	e03e      	b.n	8008842 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d1da      	bne.n	8008782 <create_chain+0x68>
 80087cc:	2300      	movs	r3, #0
 80087ce:	e038      	b.n	8008842 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80087d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	69f9      	ldr	r1, [r7, #28]
 80087d8:	6938      	ldr	r0, [r7, #16]
 80087da:	f7ff fe1d 	bl	8008418 <put_fat>
 80087de:	4603      	mov	r3, r0
 80087e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d109      	bne.n	80087fc <create_chain+0xe2>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d006      	beq.n	80087fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6938      	ldr	r0, [r7, #16]
 80087f4:	f7ff fe10 	bl	8008418 <put_fat>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d116      	bne.n	8008830 <create_chain+0x116>
		fs->last_clst = ncl;
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	3b02      	subs	r3, #2
 8008812:	429a      	cmp	r2, r3
 8008814:	d804      	bhi.n	8008820 <create_chain+0x106>
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	1e5a      	subs	r2, r3, #1
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	b2da      	uxtb	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	711a      	strb	r2, [r3, #4]
 800882e:	e007      	b.n	8008840 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d102      	bne.n	800883c <create_chain+0x122>
 8008836:	f04f 33ff 	mov.w	r3, #4294967295
 800883a:	e000      	b.n	800883e <create_chain+0x124>
 800883c:	2301      	movs	r3, #1
 800883e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008840:	69fb      	ldr	r3, [r7, #28]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3720      	adds	r7, #32
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	3304      	adds	r3, #4
 8008860:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	899b      	ldrh	r3, [r3, #12]
 8008866:	461a      	mov	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	fbb3 f3f2 	udiv	r3, r3, r2
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	8952      	ldrh	r2, [r2, #10]
 8008872:	fbb3 f3f2 	udiv	r3, r3, r2
 8008876:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	1d1a      	adds	r2, r3, #4
 800887c:	613a      	str	r2, [r7, #16]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <clmt_clust+0x42>
 8008888:	2300      	movs	r3, #0
 800888a:	e010      	b.n	80088ae <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	429a      	cmp	r2, r3
 8008892:	d307      	bcc.n	80088a4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	3304      	adds	r3, #4
 80088a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088a2:	e7e9      	b.n	8008878 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80088a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4413      	add	r3, r2
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	371c      	adds	r7, #28
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80088ce:	d204      	bcs.n	80088da <dir_sdi+0x22>
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <dir_sdi+0x26>
		return FR_INT_ERR;
 80088da:	2302      	movs	r3, #2
 80088dc:	e071      	b.n	80089c2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d106      	bne.n	80088fe <dir_sdi+0x46>
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d902      	bls.n	80088fe <dir_sdi+0x46>
		clst = fs->dirbase;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10c      	bne.n	800891e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	095b      	lsrs	r3, r3, #5
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	8912      	ldrh	r2, [r2, #8]
 800890c:	4293      	cmp	r3, r2
 800890e:	d301      	bcc.n	8008914 <dir_sdi+0x5c>
 8008910:	2302      	movs	r3, #2
 8008912:	e056      	b.n	80089c2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	61da      	str	r2, [r3, #28]
 800891c:	e02d      	b.n	800897a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	895b      	ldrh	r3, [r3, #10]
 8008922:	461a      	mov	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	899b      	ldrh	r3, [r3, #12]
 8008928:	fb03 f302 	mul.w	r3, r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800892e:	e019      	b.n	8008964 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6979      	ldr	r1, [r7, #20]
 8008934:	4618      	mov	r0, r3
 8008936:	f7ff fc9b 	bl	8008270 <get_fat>
 800893a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d101      	bne.n	8008948 <dir_sdi+0x90>
 8008944:	2301      	movs	r3, #1
 8008946:	e03c      	b.n	80089c2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d904      	bls.n	8008958 <dir_sdi+0xa0>
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	429a      	cmp	r2, r3
 8008956:	d301      	bcc.n	800895c <dir_sdi+0xa4>
 8008958:	2302      	movs	r3, #2
 800895a:	e032      	b.n	80089c2 <dir_sdi+0x10a>
			ofs -= csz;
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	429a      	cmp	r2, r3
 800896a:	d2e1      	bcs.n	8008930 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800896c:	6979      	ldr	r1, [r7, #20]
 800896e:	6938      	ldr	r0, [r7, #16]
 8008970:	f7ff fc60 	bl	8008234 <clust2sect>
 8008974:	4602      	mov	r2, r0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	69db      	ldr	r3, [r3, #28]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <dir_sdi+0xd4>
 8008988:	2302      	movs	r3, #2
 800898a:	e01a      	b.n	80089c2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	69da      	ldr	r2, [r3, #28]
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	899b      	ldrh	r3, [r3, #12]
 8008994:	4619      	mov	r1, r3
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	fbb3 f3f1 	udiv	r3, r3, r1
 800899c:	441a      	add	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	899b      	ldrh	r3, [r3, #12]
 80089ac:	461a      	mov	r2, r3
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80089b4:	fb02 f200 	mul.w	r2, r2, r0
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	18ca      	adds	r2, r1, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	3320      	adds	r3, #32
 80089e0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <dir_next+0x28>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089f0:	d301      	bcc.n	80089f6 <dir_next+0x2c>
 80089f2:	2304      	movs	r3, #4
 80089f4:	e0bb      	b.n	8008b6e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	899b      	ldrh	r3, [r3, #12]
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a02:	fb02 f201 	mul.w	r2, r2, r1
 8008a06:	1a9b      	subs	r3, r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 809d 	bne.w	8008b48 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10b      	bne.n	8008a38 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	095b      	lsrs	r3, r3, #5
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	8912      	ldrh	r2, [r2, #8]
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	f0c0 808d 	bcc.w	8008b48 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	61da      	str	r2, [r3, #28]
 8008a34:	2304      	movs	r3, #4
 8008a36:	e09a      	b.n	8008b6e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	899b      	ldrh	r3, [r3, #12]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	8952      	ldrh	r2, [r2, #10]
 8008a48:	3a01      	subs	r2, #1
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d17b      	bne.n	8008b48 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	4619      	mov	r1, r3
 8008a58:	4610      	mov	r0, r2
 8008a5a:	f7ff fc09 	bl	8008270 <get_fat>
 8008a5e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d801      	bhi.n	8008a6a <dir_next+0xa0>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e081      	b.n	8008b6e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d101      	bne.n	8008a76 <dir_next+0xac>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e07b      	b.n	8008b6e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d359      	bcc.n	8008b34 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d104      	bne.n	8008a90 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	61da      	str	r2, [r3, #28]
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	e06e      	b.n	8008b6e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	4619      	mov	r1, r3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	f7ff fe3e 	bl	800871a <create_chain>
 8008a9e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <dir_next+0xe0>
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	e061      	b.n	8008b6e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d101      	bne.n	8008ab4 <dir_next+0xea>
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	e05c      	b.n	8008b6e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aba:	d101      	bne.n	8008ac0 <dir_next+0xf6>
 8008abc:	2301      	movs	r3, #1
 8008abe:	e056      	b.n	8008b6e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fad5 	bl	8008070 <sync_window>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <dir_next+0x106>
 8008acc:	2301      	movs	r3, #1
 8008ace:	e04e      	b.n	8008b6e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	899b      	ldrh	r3, [r3, #12]
 8008ada:	461a      	mov	r2, r3
 8008adc:	2100      	movs	r1, #0
 8008ade:	f7ff f907 	bl	8007cf0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	613b      	str	r3, [r7, #16]
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f7ff fba3 	bl	8008234 <clust2sect>
 8008aee:	4602      	mov	r2, r0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	635a      	str	r2, [r3, #52]	; 0x34
 8008af4:	e012      	b.n	8008b1c <dir_next+0x152>
						fs->wflag = 1;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fab7 	bl	8008070 <sync_window>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <dir_next+0x142>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e030      	b.n	8008b6e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	635a      	str	r2, [r3, #52]	; 0x34
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	895b      	ldrh	r3, [r3, #10]
 8008b20:	461a      	mov	r2, r3
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d3e6      	bcc.n	8008af6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	1ad2      	subs	r2, r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008b3a:	6979      	ldr	r1, [r7, #20]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fb79 	bl	8008234 <clust2sect>
 8008b42:	4602      	mov	r2, r0
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	899b      	ldrh	r3, [r3, #12]
 8008b58:	461a      	mov	r2, r3
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b60:	fb02 f200 	mul.w	r2, r2, r0
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	18ca      	adds	r2, r1, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b086      	sub	sp, #24
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b86:	2100      	movs	r1, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f7ff fe95 	bl	80088b8 <dir_sdi>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d12b      	bne.n	8008bf0 <dir_alloc+0x7a>
		n = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f7ff faa8 	bl	80080f8 <move_window>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d11d      	bne.n	8008bee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2be5      	cmp	r3, #229	; 0xe5
 8008bba:	d004      	beq.n	8008bc6 <dir_alloc+0x50>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d107      	bne.n	8008bd6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d102      	bne.n	8008bda <dir_alloc+0x64>
 8008bd4:	e00c      	b.n	8008bf0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff fef4 	bl	80089ca <dir_next>
 8008be2:	4603      	mov	r3, r0
 8008be4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d0d7      	beq.n	8008b9c <dir_alloc+0x26>
 8008bec:	e000      	b.n	8008bf0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008bee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008bf0:	7dfb      	ldrb	r3, [r7, #23]
 8008bf2:	2b04      	cmp	r3, #4
 8008bf4:	d101      	bne.n	8008bfa <dir_alloc+0x84>
 8008bf6:	2307      	movs	r3, #7
 8008bf8:	75fb      	strb	r3, [r7, #23]
	return res;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	331a      	adds	r3, #26
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe ffce 	bl	8007bb4 <ld_word>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d109      	bne.n	8008c38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	3314      	adds	r3, #20
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe ffc3 	bl	8007bb4 <ld_word>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	041b      	lsls	r3, r3, #16
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c38:	68fb      	ldr	r3, [r7, #12]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	331a      	adds	r3, #26
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	b292      	uxth	r2, r2
 8008c56:	4611      	mov	r1, r2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fe ffe4 	bl	8007c26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d109      	bne.n	8008c7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f103 0214 	add.w	r2, r3, #20
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	0c1b      	lsrs	r3, r3, #16
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4619      	mov	r1, r3
 8008c74:	4610      	mov	r0, r2
 8008c76:	f7fe ffd6 	bl	8007c26 <st_word>
	}
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	331a      	adds	r3, #26
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fe ff8e 	bl	8007bb4 <ld_word>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <cmp_lfn+0x1e>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e059      	b.n	8008d56 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008caa:	1e5a      	subs	r2, r3, #1
 8008cac:	4613      	mov	r3, r2
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008cb8:	2301      	movs	r3, #1
 8008cba:	81fb      	strh	r3, [r7, #14]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	e033      	b.n	8008d2a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008cc2:	4a27      	ldr	r2, [pc, #156]	; (8008d60 <cmp_lfn+0xdc>)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	4413      	add	r3, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fe ff6f 	bl	8007bb4 <ld_word>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008cda:	89fb      	ldrh	r3, [r7, #14]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01a      	beq.n	8008d16 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	2bfe      	cmp	r3, #254	; 0xfe
 8008ce4:	d812      	bhi.n	8008d0c <cmp_lfn+0x88>
 8008ce6:	89bb      	ldrh	r3, [r7, #12]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f002 fa2d 	bl	800b148 <ff_wtoupper>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	461c      	mov	r4, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	617a      	str	r2, [r7, #20]
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f002 fa21 	bl	800b148 <ff_wtoupper>
 8008d06:	4603      	mov	r3, r0
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d001      	beq.n	8008d10 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e022      	b.n	8008d56 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008d10:	89bb      	ldrh	r3, [r7, #12]
 8008d12:	81fb      	strh	r3, [r7, #14]
 8008d14:	e006      	b.n	8008d24 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008d16:	89bb      	ldrh	r3, [r7, #12]
 8008d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d001      	beq.n	8008d24 <cmp_lfn+0xa0>
 8008d20:	2300      	movs	r3, #0
 8008d22:	e018      	b.n	8008d56 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	3301      	adds	r3, #1
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b0c      	cmp	r3, #12
 8008d2e:	d9c8      	bls.n	8008cc2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <cmp_lfn+0xd0>
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d008      	beq.n	8008d54 <cmp_lfn+0xd0>
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <cmp_lfn+0xd0>
 8008d50:	2300      	movs	r3, #0
 8008d52:	e000      	b.n	8008d56 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008d54:	2301      	movs	r3, #1
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	371c      	adds	r7, #28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd90      	pop	{r4, r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	0800bcac 	.word	0x0800bcac

08008d64 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	460b      	mov	r3, r1
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	4613      	mov	r3, r2
 8008d78:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	330d      	adds	r3, #13
 8008d7e:	79ba      	ldrb	r2, [r7, #6]
 8008d80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	330b      	adds	r3, #11
 8008d86:	220f      	movs	r2, #15
 8008d88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	330c      	adds	r3, #12
 8008d8e:	2200      	movs	r2, #0
 8008d90:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	331a      	adds	r3, #26
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fe ff44 	bl	8007c26 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008d9e:	79fb      	ldrb	r3, [r7, #7]
 8008da0:	1e5a      	subs	r2, r3, #1
 8008da2:	4613      	mov	r3, r2
 8008da4:	005b      	lsls	r3, r3, #1
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	82fb      	strh	r3, [r7, #22]
 8008db2:	2300      	movs	r3, #0
 8008db4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008db6:	8afb      	ldrh	r3, [r7, #22]
 8008db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d007      	beq.n	8008dd0 <put_lfn+0x6c>
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	1c5a      	adds	r2, r3, #1
 8008dc4:	61fa      	str	r2, [r7, #28]
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008dd0:	4a17      	ldr	r2, [pc, #92]	; (8008e30 <put_lfn+0xcc>)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	4413      	add	r3, r2
 8008dde:	8afa      	ldrh	r2, [r7, #22]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fe ff1f 	bl	8007c26 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008de8:	8afb      	ldrh	r3, [r7, #22]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d102      	bne.n	8008df4 <put_lfn+0x90>
 8008dee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008df2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61bb      	str	r3, [r7, #24]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b0c      	cmp	r3, #12
 8008dfe:	d9da      	bls.n	8008db6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008e00:	8afb      	ldrh	r3, [r7, #22]
 8008e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d006      	beq.n	8008e18 <put_lfn+0xb4>
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4413      	add	r3, r2
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d103      	bne.n	8008e20 <put_lfn+0xbc>
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e1e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	79fa      	ldrb	r2, [r7, #7]
 8008e24:	701a      	strb	r2, [r3, #0]
}
 8008e26:	bf00      	nop
 8008e28:	3720      	adds	r7, #32
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	0800bcac 	.word	0x0800bcac

08008e34 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08c      	sub	sp, #48	; 0x30
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008e42:	220b      	movs	r2, #11
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f7fe ff32 	bl	8007cb0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b05      	cmp	r3, #5
 8008e50:	d92b      	bls.n	8008eaa <gen_numname+0x76>
		sr = seq;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008e56:	e022      	b.n	8008e9e <gen_numname+0x6a>
			wc = *lfn++;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	1c9a      	adds	r2, r3, #2
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	881b      	ldrh	r3, [r3, #0]
 8008e60:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008e62:	2300      	movs	r3, #0
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e66:	e017      	b.n	8008e98 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	005a      	lsls	r2, r3, #1
 8008e6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	4413      	add	r3, r2
 8008e74:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <gen_numname+0x5e>
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008e8c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008e90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	3301      	adds	r3, #1
 8008e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	2b0f      	cmp	r3, #15
 8008e9c:	d9e4      	bls.n	8008e68 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1d8      	bne.n	8008e58 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008eaa:	2307      	movs	r3, #7
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	3330      	adds	r3, #48	; 0x30
 8008eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ec2:	2b39      	cmp	r3, #57	; 0x39
 8008ec4:	d904      	bls.n	8008ed0 <gen_numname+0x9c>
 8008ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008eca:	3307      	adds	r3, #7
 8008ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed2:	1e5a      	subs	r2, r3, #1
 8008ed4:	62ba      	str	r2, [r7, #40]	; 0x28
 8008ed6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008eda:	4413      	add	r3, r2
 8008edc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008ee0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	091b      	lsrs	r3, r3, #4
 8008ee8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1de      	bne.n	8008eae <gen_numname+0x7a>
	ns[i] = '~';
 8008ef0:	f107 0214 	add.w	r2, r7, #20
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	4413      	add	r3, r2
 8008ef8:	227e      	movs	r2, #126	; 0x7e
 8008efa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008efc:	2300      	movs	r3, #0
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
 8008f00:	e002      	b.n	8008f08 <gen_numname+0xd4>
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	3301      	adds	r3, #1
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
 8008f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d205      	bcs.n	8008f1c <gen_numname+0xe8>
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f14:	4413      	add	r3, r2
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	d1f2      	bne.n	8008f02 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	2b07      	cmp	r3, #7
 8008f20:	d808      	bhi.n	8008f34 <gen_numname+0x100>
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	62ba      	str	r2, [r7, #40]	; 0x28
 8008f28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008f32:	e000      	b.n	8008f36 <gen_numname+0x102>
 8008f34:	2120      	movs	r1, #32
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	460a      	mov	r2, r1
 8008f42:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	2b07      	cmp	r3, #7
 8008f48:	d9e8      	bls.n	8008f1c <gen_numname+0xe8>
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	3730      	adds	r7, #48	; 0x30
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008f60:	230b      	movs	r3, #11
 8008f62:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	0852      	lsrs	r2, r2, #1
 8008f6a:	01db      	lsls	r3, r3, #7
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	6079      	str	r1, [r7, #4]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	4413      	add	r3, r2
 8008f7a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	60bb      	str	r3, [r7, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ed      	bne.n	8008f64 <sum_sfn+0x10>
	return sum;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bc80      	pop	{r7}
 8008f92:	4770      	bx	lr

08008f94 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fc87 	bl	80088b8 <dir_sdi>
 8008faa:	4603      	mov	r3, r0
 8008fac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <dir_find+0x24>
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
 8008fb6:	e0a9      	b.n	800910c <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008fb8:	23ff      	movs	r3, #255	; 0xff
 8008fba:	753b      	strb	r3, [r7, #20]
 8008fbc:	7d3b      	ldrb	r3, [r7, #20]
 8008fbe:	757b      	strb	r3, [r7, #21]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f7ff f892 	bl	80080f8 <move_window>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f040 8090 	bne.w	8009100 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008fe8:	7dbb      	ldrb	r3, [r7, #22]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <dir_find+0x60>
 8008fee:	2304      	movs	r3, #4
 8008ff0:	75fb      	strb	r3, [r7, #23]
 8008ff2:	e08a      	b.n	800910a <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	330b      	adds	r3, #11
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009000:	73fb      	strb	r3, [r7, #15]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7bfa      	ldrb	r2, [r7, #15]
 8009006:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009008:	7dbb      	ldrb	r3, [r7, #22]
 800900a:	2be5      	cmp	r3, #229	; 0xe5
 800900c:	d007      	beq.n	800901e <dir_find+0x8a>
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <dir_find+0x98>
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	2b0f      	cmp	r3, #15
 800901c:	d006      	beq.n	800902c <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800901e:	23ff      	movs	r3, #255	; 0xff
 8009020:	757b      	strb	r3, [r7, #21]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f04f 32ff 	mov.w	r2, #4294967295
 8009028:	631a      	str	r2, [r3, #48]	; 0x30
 800902a:	e05e      	b.n	80090ea <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d136      	bne.n	80090a0 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d154      	bne.n	80090ea <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009040:	7dbb      	ldrb	r3, [r7, #22]
 8009042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a1b      	ldr	r3, [r3, #32]
 800904e:	7b5b      	ldrb	r3, [r3, #13]
 8009050:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009052:	7dbb      	ldrb	r3, [r7, #22]
 8009054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009058:	75bb      	strb	r3, [r7, #22]
 800905a:	7dbb      	ldrb	r3, [r7, #22]
 800905c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695a      	ldr	r2, [r3, #20]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009066:	7dba      	ldrb	r2, [r7, #22]
 8009068:	7d7b      	ldrb	r3, [r7, #21]
 800906a:	429a      	cmp	r2, r3
 800906c:	d115      	bne.n	800909a <dir_find+0x106>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	330d      	adds	r3, #13
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	7d3a      	ldrb	r2, [r7, #20]
 8009078:	429a      	cmp	r2, r3
 800907a:	d10e      	bne.n	800909a <dir_find+0x106>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7ff fdfc 	bl	8008c84 <cmp_lfn>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <dir_find+0x106>
 8009092:	7d7b      	ldrb	r3, [r7, #21]
 8009094:	3b01      	subs	r3, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	e000      	b.n	800909c <dir_find+0x108>
 800909a:	23ff      	movs	r3, #255	; 0xff
 800909c:	757b      	strb	r3, [r7, #21]
 800909e:	e024      	b.n	80090ea <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80090a0:	7d7b      	ldrb	r3, [r7, #21]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <dir_find+0x126>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff ff52 	bl	8008f54 <sum_sfn>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	7d3b      	ldrb	r3, [r7, #20]
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d024      	beq.n	8009104 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090c0:	f003 0301 	and.w	r3, r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <dir_find+0x14a>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a18      	ldr	r0, [r3, #32]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3324      	adds	r3, #36	; 0x24
 80090d0:	220b      	movs	r2, #11
 80090d2:	4619      	mov	r1, r3
 80090d4:	f7fe fe26 	bl	8007d24 <mem_cmp>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d014      	beq.n	8009108 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80090de:	23ff      	movs	r3, #255	; 0xff
 80090e0:	757b      	strb	r3, [r7, #21]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80090ea:	2100      	movs	r1, #0
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff fc6c 	bl	80089ca <dir_next>
 80090f2:	4603      	mov	r3, r0
 80090f4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f43f af65 	beq.w	8008fc8 <dir_find+0x34>
 80090fe:	e004      	b.n	800910a <dir_find+0x176>
		if (res != FR_OK) break;
 8009100:	bf00      	nop
 8009102:	e002      	b.n	800910a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009104:	bf00      	nop
 8009106:	e000      	b.n	800910a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009108:	bf00      	nop

	return res;
 800910a:	7dfb      	ldrb	r3, [r7, #23]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	; 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009128:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <dir_register+0x20>
 8009130:	2306      	movs	r3, #6
 8009132:	e0e0      	b.n	80092f6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009134:	2300      	movs	r3, #0
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
 8009138:	e002      	b.n	8009140 <dir_register+0x2c>
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	3301      	adds	r3, #1
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	4413      	add	r3, r2
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f4      	bne.n	800913a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009156:	f107 030c 	add.w	r3, r7, #12
 800915a:	220c      	movs	r2, #12
 800915c:	4618      	mov	r0, r3
 800915e:	f7fe fda7 	bl	8007cb0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009162:	7dfb      	ldrb	r3, [r7, #23]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d032      	beq.n	80091d2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	; 0x40
 8009170:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009174:	2301      	movs	r3, #1
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
 8009178:	e016      	b.n	80091a8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	f107 010c 	add.w	r1, r7, #12
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	f7ff fe53 	bl	8008e34 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff ff00 	bl	8008f94 <dir_find>
 8009194:	4603      	mov	r3, r0
 8009196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800919a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	3301      	adds	r3, #1
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b63      	cmp	r3, #99	; 0x63
 80091ac:	d9e5      	bls.n	800917a <dir_register+0x66>
 80091ae:	e000      	b.n	80091b2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80091b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	2b64      	cmp	r3, #100	; 0x64
 80091b6:	d101      	bne.n	80091bc <dir_register+0xa8>
 80091b8:	2307      	movs	r3, #7
 80091ba:	e09c      	b.n	80092f6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80091bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d002      	beq.n	80091ca <dir_register+0xb6>
 80091c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091c8:	e095      	b.n	80092f6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80091ca:	7dfa      	ldrb	r2, [r7, #23]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d007      	beq.n	80091ec <dir_register+0xd8>
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	330c      	adds	r3, #12
 80091e0:	4a47      	ldr	r2, [pc, #284]	; (8009300 <dir_register+0x1ec>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	089b      	lsrs	r3, r3, #2
 80091e8:	3301      	adds	r3, #1
 80091ea:	e000      	b.n	80091ee <dir_register+0xda>
 80091ec:	2301      	movs	r3, #1
 80091ee:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80091f0:	6a39      	ldr	r1, [r7, #32]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff fcbf 	bl	8008b76 <dir_alloc>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80091fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009202:	2b00      	cmp	r3, #0
 8009204:	d148      	bne.n	8009298 <dir_register+0x184>
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	3b01      	subs	r3, #1
 800920a:	623b      	str	r3, [r7, #32]
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d042      	beq.n	8009298 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	015b      	lsls	r3, r3, #5
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fb4a 	bl	80088b8 <dir_sdi>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800922a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800922e:	2b00      	cmp	r3, #0
 8009230:	d132      	bne.n	8009298 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	3324      	adds	r3, #36	; 0x24
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff fe8c 	bl	8008f54 <sum_sfn>
 800923c:	4603      	mov	r3, r0
 800923e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	4619      	mov	r1, r3
 8009246:	69f8      	ldr	r0, [r7, #28]
 8009248:	f7fe ff56 	bl	80080f8 <move_window>
 800924c:	4603      	mov	r3, r0
 800924e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8009252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11d      	bne.n	8009296 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	6918      	ldr	r0, [r3, #16]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a19      	ldr	r1, [r3, #32]
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	7efb      	ldrb	r3, [r7, #27]
 8009268:	f7ff fd7c 	bl	8008d64 <put_lfn>
				fs->wflag = 1;
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	2201      	movs	r2, #1
 8009270:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009272:	2100      	movs	r1, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff fba8 	bl	80089ca <dir_next>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8009280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009284:	2b00      	cmp	r3, #0
 8009286:	d107      	bne.n	8009298 <dir_register+0x184>
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	3b01      	subs	r3, #1
 800928c:	623b      	str	r3, [r7, #32]
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1d5      	bne.n	8009240 <dir_register+0x12c>
 8009294:	e000      	b.n	8009298 <dir_register+0x184>
				if (res != FR_OK) break;
 8009296:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d128      	bne.n	80092f2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4619      	mov	r1, r3
 80092a6:	69f8      	ldr	r0, [r7, #28]
 80092a8:	f7fe ff26 	bl	80080f8 <move_window>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80092b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d11b      	bne.n	80092f2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	2220      	movs	r2, #32
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe fd14 	bl	8007cf0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6a18      	ldr	r0, [r3, #32]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3324      	adds	r3, #36	; 0x24
 80092d0:	220b      	movs	r2, #11
 80092d2:	4619      	mov	r1, r3
 80092d4:	f7fe fcec 	bl	8007cb0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	330c      	adds	r3, #12
 80092e4:	f002 0218 	and.w	r2, r2, #24
 80092e8:	b2d2      	uxtb	r2, r2
 80092ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2201      	movs	r2, #1
 80092f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80092f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3730      	adds	r7, #48	; 0x30
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	4ec4ec4f 	.word	0x4ec4ec4f

08009304 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b08a      	sub	sp, #40	; 0x28
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	60fb      	str	r3, [r7, #12]
 800931c:	2300      	movs	r3, #0
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	61ba      	str	r2, [r7, #24]
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009334:	2b1f      	cmp	r3, #31
 8009336:	d940      	bls.n	80093ba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800933a:	2b2f      	cmp	r3, #47	; 0x2f
 800933c:	d006      	beq.n	800934c <create_name+0x48>
 800933e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009340:	2b5c      	cmp	r3, #92	; 0x5c
 8009342:	d110      	bne.n	8009366 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009344:	e002      	b.n	800934c <create_name+0x48>
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	3301      	adds	r3, #1
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	4413      	add	r3, r2
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b2f      	cmp	r3, #47	; 0x2f
 8009356:	d0f6      	beq.n	8009346 <create_name+0x42>
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	4413      	add	r3, r2
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b5c      	cmp	r3, #92	; 0x5c
 8009362:	d0f0      	beq.n	8009346 <create_name+0x42>
			break;
 8009364:	e02a      	b.n	80093bc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2bfe      	cmp	r3, #254	; 0xfe
 800936a:	d901      	bls.n	8009370 <create_name+0x6c>
 800936c:	2306      	movs	r3, #6
 800936e:	e177      	b.n	8009660 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009370:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009372:	b2db      	uxtb	r3, r3
 8009374:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009378:	2101      	movs	r1, #1
 800937a:	4618      	mov	r0, r3
 800937c:	f001 feaa 	bl	800b0d4 <ff_convert>
 8009380:	4603      	mov	r3, r0
 8009382:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <create_name+0x8a>
 800938a:	2306      	movs	r3, #6
 800938c:	e168      	b.n	8009660 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800938e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009390:	2b7f      	cmp	r3, #127	; 0x7f
 8009392:	d809      	bhi.n	80093a8 <create_name+0xa4>
 8009394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009396:	4619      	mov	r1, r3
 8009398:	48b3      	ldr	r0, [pc, #716]	; (8009668 <create_name+0x364>)
 800939a:	f7fe fce9 	bl	8007d70 <chk_chr>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <create_name+0xa4>
 80093a4:	2306      	movs	r3, #6
 80093a6:	e15b      	b.n	8009660 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	617a      	str	r2, [r7, #20]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80093b6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80093b8:	e7b4      	b.n	8009324 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80093ba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	441a      	add	r2, r3
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80093c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093c8:	2b1f      	cmp	r3, #31
 80093ca:	d801      	bhi.n	80093d0 <create_name+0xcc>
 80093cc:	2304      	movs	r3, #4
 80093ce:	e000      	b.n	80093d2 <create_name+0xce>
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80093d6:	e011      	b.n	80093fc <create_name+0xf8>
		w = lfn[di - 1];
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80093de:	3b01      	subs	r3, #1
 80093e0:	005b      	lsls	r3, r3, #1
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80093ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093ec:	2b20      	cmp	r3, #32
 80093ee:	d002      	beq.n	80093f6 <create_name+0xf2>
 80093f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093f2:	2b2e      	cmp	r3, #46	; 0x2e
 80093f4:	d106      	bne.n	8009404 <create_name+0x100>
		di--;
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1ea      	bne.n	80093d8 <create_name+0xd4>
 8009402:	e000      	b.n	8009406 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009404:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4413      	add	r3, r2
 800940e:	2200      	movs	r2, #0
 8009410:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <create_name+0x118>
 8009418:	2306      	movs	r3, #6
 800941a:	e121      	b.n	8009660 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	220b      	movs	r2, #11
 8009422:	2120      	movs	r1, #32
 8009424:	4618      	mov	r0, r3
 8009426:	f7fe fc63 	bl	8007cf0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800942a:	2300      	movs	r3, #0
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	e002      	b.n	8009436 <create_name+0x132>
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	3301      	adds	r3, #1
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	2b20      	cmp	r3, #32
 8009442:	d0f5      	beq.n	8009430 <create_name+0x12c>
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	2b2e      	cmp	r3, #46	; 0x2e
 8009450:	d0ee      	beq.n	8009430 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <create_name+0x168>
 8009458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800945c:	f043 0303 	orr.w	r3, r3, #3
 8009460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009464:	e002      	b.n	800946c <create_name+0x168>
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	3b01      	subs	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d009      	beq.n	8009486 <create_name+0x182>
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009478:	3b01      	subs	r3, #1
 800947a:	005b      	lsls	r3, r3, #1
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	2b2e      	cmp	r3, #46	; 0x2e
 8009484:	d1ef      	bne.n	8009466 <create_name+0x162>

	i = b = 0; ni = 8;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800948c:	2300      	movs	r3, #0
 800948e:	623b      	str	r3, [r7, #32]
 8009490:	2308      	movs	r3, #8
 8009492:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	61ba      	str	r2, [r7, #24]
 800949a:	005b      	lsls	r3, r3, #1
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80094a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8090 	beq.w	80095cc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80094ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094ae:	2b20      	cmp	r3, #32
 80094b0:	d006      	beq.n	80094c0 <create_name+0x1bc>
 80094b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094b4:	2b2e      	cmp	r3, #46	; 0x2e
 80094b6:	d10a      	bne.n	80094ce <create_name+0x1ca>
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d006      	beq.n	80094ce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80094c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c4:	f043 0303 	orr.w	r3, r3, #3
 80094c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094cc:	e07d      	b.n	80095ca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d203      	bcs.n	80094de <create_name+0x1da>
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d123      	bne.n	8009526 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	2b0b      	cmp	r3, #11
 80094e2:	d106      	bne.n	80094f2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	f043 0303 	orr.w	r3, r3, #3
 80094ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094f0:	e06f      	b.n	80095d2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d005      	beq.n	8009506 <create_name+0x202>
 80094fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094fe:	f043 0303 	orr.w	r3, r3, #3
 8009502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009506:	69ba      	ldr	r2, [r7, #24]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	429a      	cmp	r2, r3
 800950c:	d860      	bhi.n	80095d0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	61bb      	str	r3, [r7, #24]
 8009512:	2308      	movs	r3, #8
 8009514:	623b      	str	r3, [r7, #32]
 8009516:	230b      	movs	r3, #11
 8009518:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800951a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009524:	e051      	b.n	80095ca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009528:	2b7f      	cmp	r3, #127	; 0x7f
 800952a:	d914      	bls.n	8009556 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800952c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f001 fdcf 	bl	800b0d4 <ff_convert>
 8009536:	4603      	mov	r3, r0
 8009538:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800953a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <create_name+0x246>
 8009540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009542:	3b80      	subs	r3, #128	; 0x80
 8009544:	4a49      	ldr	r2, [pc, #292]	; (800966c <create_name+0x368>)
 8009546:	5cd3      	ldrb	r3, [r2, r3]
 8009548:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800954a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800954e:	f043 0302 	orr.w	r3, r3, #2
 8009552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <create_name+0x268>
 800955c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800955e:	4619      	mov	r1, r3
 8009560:	4843      	ldr	r0, [pc, #268]	; (8009670 <create_name+0x36c>)
 8009562:	f7fe fc05 	bl	8007d70 <chk_chr>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800956c:	235f      	movs	r3, #95	; 0x5f
 800956e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009574:	f043 0303 	orr.w	r3, r3, #3
 8009578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800957c:	e01b      	b.n	80095b6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800957e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009580:	2b40      	cmp	r3, #64	; 0x40
 8009582:	d909      	bls.n	8009598 <create_name+0x294>
 8009584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009586:	2b5a      	cmp	r3, #90	; 0x5a
 8009588:	d806      	bhi.n	8009598 <create_name+0x294>
					b |= 2;
 800958a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800958e:	f043 0302 	orr.w	r3, r3, #2
 8009592:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009596:	e00e      	b.n	80095b6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800959a:	2b60      	cmp	r3, #96	; 0x60
 800959c:	d90b      	bls.n	80095b6 <create_name+0x2b2>
 800959e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a0:	2b7a      	cmp	r3, #122	; 0x7a
 80095a2:	d808      	bhi.n	80095b6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80095a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095a8:	f043 0301 	orr.w	r3, r3, #1
 80095ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80095b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095b2:	3b20      	subs	r3, #32
 80095b4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	623a      	str	r2, [r7, #32]
 80095bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80095be:	b2d1      	uxtb	r1, r2
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	460a      	mov	r2, r1
 80095c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80095ca:	e763      	b.n	8009494 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80095cc:	bf00      	nop
 80095ce:	e000      	b.n	80095d2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80095d0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095d8:	2be5      	cmp	r3, #229	; 0xe5
 80095da:	d103      	bne.n	80095e4 <create_name+0x2e0>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2205      	movs	r2, #5
 80095e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d104      	bne.n	80095f4 <create_name+0x2f0>
 80095ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80095f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80095f8:	f003 030c 	and.w	r3, r3, #12
 80095fc:	2b0c      	cmp	r3, #12
 80095fe:	d005      	beq.n	800960c <create_name+0x308>
 8009600:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009604:	f003 0303 	and.w	r3, r3, #3
 8009608:	2b03      	cmp	r3, #3
 800960a:	d105      	bne.n	8009618 <create_name+0x314>
 800960c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009610:	f043 0302 	orr.w	r3, r3, #2
 8009614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d117      	bne.n	8009654 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d105      	bne.n	800963c <create_name+0x338>
 8009630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009634:	f043 0310 	orr.w	r3, r3, #16
 8009638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800963c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009640:	f003 030c 	and.w	r3, r3, #12
 8009644:	2b04      	cmp	r3, #4
 8009646:	d105      	bne.n	8009654 <create_name+0x350>
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800964c:	f043 0308 	orr.w	r3, r3, #8
 8009650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800965a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800965e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009660:	4618      	mov	r0, r3
 8009662:	3728      	adds	r7, #40	; 0x28
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	0800bb90 	.word	0x0800bb90
 800966c:	0800bc2c 	.word	0x0800bc2c
 8009670:	0800bb9c 	.word	0x0800bb9c

08009674 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009688:	e002      	b.n	8009690 <follow_path+0x1c>
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	3301      	adds	r3, #1
 800968e:	603b      	str	r3, [r7, #0]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b2f      	cmp	r3, #47	; 0x2f
 8009696:	d0f8      	beq.n	800968a <follow_path+0x16>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	2b5c      	cmp	r3, #92	; 0x5c
 800969e:	d0f4      	beq.n	800968a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2200      	movs	r2, #0
 80096a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b1f      	cmp	r3, #31
 80096ac:	d80a      	bhi.n	80096c4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2280      	movs	r2, #128	; 0x80
 80096b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff f8fd 	bl	80088b8 <dir_sdi>
 80096be:	4603      	mov	r3, r0
 80096c0:	75fb      	strb	r3, [r7, #23]
 80096c2:	e048      	b.n	8009756 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80096c4:	463b      	mov	r3, r7
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff fe1b 	bl	8009304 <create_name>
 80096ce:	4603      	mov	r3, r0
 80096d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d139      	bne.n	800974c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff fc5b 	bl	8008f94 <dir_find>
 80096de:	4603      	mov	r3, r0
 80096e0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096e8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096ea:	7dfb      	ldrb	r3, [r7, #23]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80096f0:	7dfb      	ldrb	r3, [r7, #23]
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d12c      	bne.n	8009750 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096f6:	7afb      	ldrb	r3, [r7, #11]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d127      	bne.n	8009750 <follow_path+0xdc>
 8009700:	2305      	movs	r3, #5
 8009702:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009704:	e024      	b.n	8009750 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	f003 0304 	and.w	r3, r3, #4
 800970c:	2b00      	cmp	r3, #0
 800970e:	d121      	bne.n	8009754 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	799b      	ldrb	r3, [r3, #6]
 8009714:	f003 0310 	and.w	r3, r3, #16
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800971c:	2305      	movs	r3, #5
 800971e:	75fb      	strb	r3, [r7, #23]
 8009720:	e019      	b.n	8009756 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	8992      	ldrh	r2, [r2, #12]
 8009730:	fbb3 f0f2 	udiv	r0, r3, r2
 8009734:	fb02 f200 	mul.w	r2, r2, r0
 8009738:	1a9b      	subs	r3, r3, r2
 800973a:	440b      	add	r3, r1
 800973c:	4619      	mov	r1, r3
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff fa60 	bl	8008c04 <ld_clust>
 8009744:	4602      	mov	r2, r0
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800974a:	e7bb      	b.n	80096c4 <follow_path+0x50>
			if (res != FR_OK) break;
 800974c:	bf00      	nop
 800974e:	e002      	b.n	8009756 <follow_path+0xe2>
				break;
 8009750:	bf00      	nop
 8009752:	e000      	b.n	8009756 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009754:	bf00      	nop
			}
		}
	}

	return res;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009760:	b480      	push	{r7}
 8009762:	b087      	sub	sp, #28
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009768:	f04f 33ff 	mov.w	r3, #4294967295
 800976c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d031      	beq.n	80097da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	e002      	b.n	8009784 <get_ldnumber+0x24>
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	3301      	adds	r3, #1
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b1f      	cmp	r3, #31
 800978a:	d903      	bls.n	8009794 <get_ldnumber+0x34>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b3a      	cmp	r3, #58	; 0x3a
 8009792:	d1f4      	bne.n	800977e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b3a      	cmp	r3, #58	; 0x3a
 800979a:	d11c      	bne.n	80097d6 <get_ldnumber+0x76>
			tp = *path;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	60fa      	str	r2, [r7, #12]
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	3b30      	subs	r3, #48	; 0x30
 80097ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d80e      	bhi.n	80097d2 <get_ldnumber+0x72>
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d10a      	bne.n	80097d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d107      	bne.n	80097d2 <get_ldnumber+0x72>
					vol = (int)i;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	3301      	adds	r3, #1
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	e002      	b.n	80097dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80097d6:	2300      	movs	r3, #0
 80097d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80097da:	693b      	ldr	r3, [r7, #16]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	371c      	adds	r7, #28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr
	...

080097e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b082      	sub	sp, #8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	70da      	strb	r2, [r3, #3]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f04f 32ff 	mov.w	r2, #4294967295
 80097fe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7fe fc78 	bl	80080f8 <move_window>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <check_fs+0x2a>
 800980e:	2304      	movs	r3, #4
 8009810:	e038      	b.n	8009884 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3338      	adds	r3, #56	; 0x38
 8009816:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800981a:	4618      	mov	r0, r3
 800981c:	f7fe f9ca 	bl	8007bb4 <ld_word>
 8009820:	4603      	mov	r3, r0
 8009822:	461a      	mov	r2, r3
 8009824:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009828:	429a      	cmp	r2, r3
 800982a:	d001      	beq.n	8009830 <check_fs+0x48>
 800982c:	2303      	movs	r3, #3
 800982e:	e029      	b.n	8009884 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009836:	2be9      	cmp	r3, #233	; 0xe9
 8009838:	d009      	beq.n	800984e <check_fs+0x66>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009840:	2beb      	cmp	r3, #235	; 0xeb
 8009842:	d11e      	bne.n	8009882 <check_fs+0x9a>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800984a:	2b90      	cmp	r3, #144	; 0x90
 800984c:	d119      	bne.n	8009882 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	3338      	adds	r3, #56	; 0x38
 8009852:	3336      	adds	r3, #54	; 0x36
 8009854:	4618      	mov	r0, r3
 8009856:	f7fe f9c4 	bl	8007be2 <ld_dword>
 800985a:	4603      	mov	r3, r0
 800985c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <check_fs+0xa4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d101      	bne.n	800986a <check_fs+0x82>
 8009866:	2300      	movs	r3, #0
 8009868:	e00c      	b.n	8009884 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3338      	adds	r3, #56	; 0x38
 800986e:	3352      	adds	r3, #82	; 0x52
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe f9b6 	bl	8007be2 <ld_dword>
 8009876:	4603      	mov	r3, r0
 8009878:	4a05      	ldr	r2, [pc, #20]	; (8009890 <check_fs+0xa8>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d101      	bne.n	8009882 <check_fs+0x9a>
 800987e:	2300      	movs	r3, #0
 8009880:	e000      	b.n	8009884 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009882:	2302      	movs	r3, #2
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	00544146 	.word	0x00544146
 8009890:	33544146 	.word	0x33544146

08009894 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b096      	sub	sp, #88	; 0x58
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2200      	movs	r2, #0
 80098a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff ff59 	bl	8009760 <get_ldnumber>
 80098ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80098b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da01      	bge.n	80098ba <find_volume+0x26>
 80098b6:	230b      	movs	r3, #11
 80098b8:	e268      	b.n	8009d8c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80098ba:	4ab0      	ldr	r2, [pc, #704]	; (8009b7c <find_volume+0x2e8>)
 80098bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <find_volume+0x3a>
 80098ca:	230c      	movs	r3, #12
 80098cc:	e25e      	b.n	8009d8c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d01a      	beq.n	800991a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe f8c5 	bl	8007a78 <disk_status>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80098f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10c      	bne.n	800991a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d007      	beq.n	8009916 <find_volume+0x82>
 8009906:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009912:	230a      	movs	r3, #10
 8009914:	e23a      	b.n	8009d8c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8009916:	2300      	movs	r3, #0
 8009918:	e238      	b.n	8009d8c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	b2da      	uxtb	r2, r3
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe f8bd 	bl	8007aac <disk_initialize>
 8009932:	4603      	mov	r3, r0
 8009934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009944:	2303      	movs	r3, #3
 8009946:	e221      	b.n	8009d8c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <find_volume+0xca>
 800994e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800995a:	230a      	movs	r3, #10
 800995c:	e216      	b.n	8009d8c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800995e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009960:	7858      	ldrb	r0, [r3, #1]
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	330c      	adds	r3, #12
 8009966:	461a      	mov	r2, r3
 8009968:	2102      	movs	r1, #2
 800996a:	f7fe f905 	bl	8007b78 <disk_ioctl>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <find_volume+0xe4>
 8009974:	2301      	movs	r3, #1
 8009976:	e209      	b.n	8009d8c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	899b      	ldrh	r3, [r3, #12]
 800997c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009980:	d80d      	bhi.n	800999e <find_volume+0x10a>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	899b      	ldrh	r3, [r3, #12]
 8009986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998a:	d308      	bcc.n	800999e <find_volume+0x10a>
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	899b      	ldrh	r3, [r3, #12]
 8009990:	461a      	mov	r2, r3
 8009992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009994:	899b      	ldrh	r3, [r3, #12]
 8009996:	3b01      	subs	r3, #1
 8009998:	4013      	ands	r3, r2
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <find_volume+0x10e>
 800999e:	2301      	movs	r3, #1
 80099a0:	e1f4      	b.n	8009d8c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80099a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099aa:	f7ff ff1d 	bl	80097e8 <check_fs>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80099b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d14b      	bne.n	8009a54 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099bc:	2300      	movs	r3, #0
 80099be:	643b      	str	r3, [r7, #64]	; 0x40
 80099c0:	e01f      	b.n	8009a02 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80099c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80099d0:	4413      	add	r3, r2
 80099d2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80099d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d6:	3304      	adds	r3, #4
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d006      	beq.n	80099ec <find_volume+0x158>
 80099de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e0:	3308      	adds	r3, #8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe f8fd 	bl	8007be2 <ld_dword>
 80099e8:	4602      	mov	r2, r0
 80099ea:	e000      	b.n	80099ee <find_volume+0x15a>
 80099ec:	2200      	movs	r2, #0
 80099ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80099f6:	440b      	add	r3, r1
 80099f8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80099fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099fe:	3301      	adds	r3, #1
 8009a00:	643b      	str	r3, [r7, #64]	; 0x40
 8009a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d9dc      	bls.n	80099c2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009a08:	2300      	movs	r3, #0
 8009a0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <find_volume+0x184>
 8009a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a14:	3b01      	subs	r3, #1
 8009a16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009a20:	4413      	add	r3, r2
 8009a22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009a26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <find_volume+0x1a6>
 8009a2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a32:	f7ff fed9 	bl	80097e8 <check_fs>
 8009a36:	4603      	mov	r3, r0
 8009a38:	e000      	b.n	8009a3c <find_volume+0x1a8>
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d905      	bls.n	8009a54 <find_volume+0x1c0>
 8009a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d9e1      	bls.n	8009a18 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d101      	bne.n	8009a60 <find_volume+0x1cc>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e195      	b.n	8009d8c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d901      	bls.n	8009a6c <find_volume+0x1d8>
 8009a68:	230d      	movs	r3, #13
 8009a6a:	e18f      	b.n	8009d8c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	3338      	adds	r3, #56	; 0x38
 8009a70:	330b      	adds	r3, #11
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe f89e 	bl	8007bb4 <ld_word>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	899b      	ldrh	r3, [r3, #12]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d001      	beq.n	8009a88 <find_volume+0x1f4>
 8009a84:	230d      	movs	r3, #13
 8009a86:	e181      	b.n	8009d8c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	3338      	adds	r3, #56	; 0x38
 8009a8c:	3316      	adds	r3, #22
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe f890 	bl	8007bb4 <ld_word>
 8009a94:	4603      	mov	r3, r0
 8009a96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d106      	bne.n	8009aac <find_volume+0x218>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	3338      	adds	r3, #56	; 0x38
 8009aa2:	3324      	adds	r3, #36	; 0x24
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe f89c 	bl	8007be2 <ld_dword>
 8009aaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ab0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	789b      	ldrb	r3, [r3, #2]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d005      	beq.n	8009ad0 <find_volume+0x23c>
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	789b      	ldrb	r3, [r3, #2]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d001      	beq.n	8009ad0 <find_volume+0x23c>
 8009acc:	230d      	movs	r3, #13
 8009ace:	e15d      	b.n	8009d8c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	789b      	ldrb	r3, [r3, #2]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad8:	fb02 f303 	mul.w	r3, r2, r3
 8009adc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	895b      	ldrh	r3, [r3, #10]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <find_volume+0x270>
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	895b      	ldrh	r3, [r3, #10]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	895b      	ldrh	r3, [r3, #10]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	4013      	ands	r3, r2
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <find_volume+0x274>
 8009b04:	230d      	movs	r3, #13
 8009b06:	e141      	b.n	8009d8c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0a:	3338      	adds	r3, #56	; 0x38
 8009b0c:	3311      	adds	r3, #17
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fe f850 	bl	8007bb4 <ld_word>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	891b      	ldrh	r3, [r3, #8]
 8009b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b22:	8992      	ldrh	r2, [r2, #12]
 8009b24:	0952      	lsrs	r2, r2, #5
 8009b26:	b292      	uxth	r2, r2
 8009b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b2c:	fb02 f201 	mul.w	r2, r2, r1
 8009b30:	1a9b      	subs	r3, r3, r2
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <find_volume+0x2a8>
 8009b38:	230d      	movs	r3, #13
 8009b3a:	e127      	b.n	8009d8c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3e:	3338      	adds	r3, #56	; 0x38
 8009b40:	3313      	adds	r3, #19
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe f836 	bl	8007bb4 <ld_word>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <find_volume+0x2cc>
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	3338      	adds	r3, #56	; 0x38
 8009b56:	3320      	adds	r3, #32
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe f842 	bl	8007be2 <ld_dword>
 8009b5e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b62:	3338      	adds	r3, #56	; 0x38
 8009b64:	330e      	adds	r3, #14
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe f824 	bl	8007bb4 <ld_word>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009b70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d104      	bne.n	8009b80 <find_volume+0x2ec>
 8009b76:	230d      	movs	r3, #13
 8009b78:	e108      	b.n	8009d8c <find_volume+0x4f8>
 8009b7a:	bf00      	nop
 8009b7c:	20000114 	.word	0x20000114

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009b80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b84:	4413      	add	r3, r2
 8009b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b88:	8911      	ldrh	r1, [r2, #8]
 8009b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b8c:	8992      	ldrh	r2, [r2, #12]
 8009b8e:	0952      	lsrs	r2, r2, #5
 8009b90:	b292      	uxth	r2, r2
 8009b92:	fbb1 f2f2 	udiv	r2, r1, r2
 8009b96:	b292      	uxth	r2, r2
 8009b98:	4413      	add	r3, r2
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d201      	bcs.n	8009ba8 <find_volume+0x314>
 8009ba4:	230d      	movs	r3, #13
 8009ba6:	e0f1      	b.n	8009d8c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bb0:	8952      	ldrh	r2, [r2, #10]
 8009bb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <find_volume+0x32e>
 8009bbe:	230d      	movs	r3, #13
 8009bc0:	e0e4      	b.n	8009d8c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d802      	bhi.n	8009bd8 <find_volume+0x344>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d802      	bhi.n	8009be8 <find_volume+0x354>
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bee:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009bf4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009bf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfa:	441a      	add	r2, r3
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	441a      	add	r2, r3
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d11e      	bne.n	8009c50 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	3338      	adds	r3, #56	; 0x38
 8009c16:	332a      	adds	r3, #42	; 0x2a
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fd ffcb 	bl	8007bb4 <ld_word>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <find_volume+0x394>
 8009c24:	230d      	movs	r3, #13
 8009c26:	e0b1      	b.n	8009d8c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	891b      	ldrh	r3, [r3, #8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <find_volume+0x3a0>
 8009c30:	230d      	movs	r3, #13
 8009c32:	e0ab      	b.n	8009d8c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	3338      	adds	r3, #56	; 0x38
 8009c38:	332c      	adds	r3, #44	; 0x2c
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fd ffd1 	bl	8007be2 <ld_dword>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c44:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8009c4e:	e01f      	b.n	8009c90 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c52:	891b      	ldrh	r3, [r3, #8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <find_volume+0x3c8>
 8009c58:	230d      	movs	r3, #13
 8009c5a:	e097      	b.n	8009d8c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c62:	441a      	add	r2, r3
 8009c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c66:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d103      	bne.n	8009c78 <find_volume+0x3e4>
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	e00a      	b.n	8009c8e <find_volume+0x3fa>
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	4413      	add	r3, r2
 8009c82:	085a      	lsrs	r2, r3, #1
 8009c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009c8e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	6a1a      	ldr	r2, [r3, #32]
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	899b      	ldrh	r3, [r3, #12]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ca2:	8989      	ldrh	r1, [r1, #12]
 8009ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d201      	bcs.n	8009cb0 <find_volume+0x41c>
 8009cac:	230d      	movs	r3, #13
 8009cae:	e06d      	b.n	8009d8c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb6:	619a      	str	r2, [r3, #24]
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	2280      	movs	r2, #128	; 0x80
 8009cc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d149      	bne.n	8009d62 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	3338      	adds	r3, #56	; 0x38
 8009cd2:	3330      	adds	r3, #48	; 0x30
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7fd ff6d 	bl	8007bb4 <ld_word>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d140      	bne.n	8009d62 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ce8:	f7fe fa06 	bl	80080f8 <move_window>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d137      	bne.n	8009d62 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	3338      	adds	r3, #56	; 0x38
 8009cfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fd ff57 	bl	8007bb4 <ld_word>
 8009d06:	4603      	mov	r3, r0
 8009d08:	461a      	mov	r2, r3
 8009d0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d127      	bne.n	8009d62 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d14:	3338      	adds	r3, #56	; 0x38
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fd ff63 	bl	8007be2 <ld_dword>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4a1d      	ldr	r2, [pc, #116]	; (8009d94 <find_volume+0x500>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d11e      	bne.n	8009d62 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	3338      	adds	r3, #56	; 0x38
 8009d28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fd ff58 	bl	8007be2 <ld_dword>
 8009d32:	4603      	mov	r3, r0
 8009d34:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <find_volume+0x504>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d113      	bne.n	8009d62 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	3338      	adds	r3, #56	; 0x38
 8009d3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fd ff4d 	bl	8007be2 <ld_dword>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	3338      	adds	r3, #56	; 0x38
 8009d52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd ff43 	bl	8007be2 <ld_dword>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d64:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009d68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <find_volume+0x508>)
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	4b0a      	ldr	r3, [pc, #40]	; (8009d9c <find_volume+0x508>)
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <find_volume+0x508>)
 8009d78:	881a      	ldrh	r2, [r3, #0]
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	4a07      	ldr	r2, [pc, #28]	; (8009da0 <find_volume+0x50c>)
 8009d82:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009d84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d86:	f7fe f94f 	bl	8008028 <clear_lock>
#endif
	return FR_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3758      	adds	r7, #88	; 0x58
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	41615252 	.word	0x41615252
 8009d98:	61417272 	.word	0x61417272
 8009d9c:	20000118 	.word	0x20000118
 8009da0:	2000013c 	.word	0x2000013c

08009da4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009dae:	2309      	movs	r3, #9
 8009db0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d01c      	beq.n	8009df2 <validate+0x4e>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d018      	beq.n	8009df2 <validate+0x4e>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d013      	beq.n	8009df2 <validate+0x4e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	889a      	ldrh	r2, [r3, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	88db      	ldrh	r3, [r3, #6]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d10c      	bne.n	8009df2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fd fe4a 	bl	8007a78 <disk_status>
 8009de4:	4603      	mov	r3, r0
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <validate+0x4e>
			res = FR_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d102      	bne.n	8009dfe <validate+0x5a>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	e000      	b.n	8009e00 <validate+0x5c>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	6013      	str	r3, [r2, #0]
	return res;
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009e22:	f107 0310 	add.w	r3, r7, #16
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7ff fc9a 	bl	8009760 <get_ldnumber>
 8009e2c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da01      	bge.n	8009e38 <f_mount+0x28>
 8009e34:	230b      	movs	r3, #11
 8009e36:	e02b      	b.n	8009e90 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009e38:	4a17      	ldr	r2, [pc, #92]	; (8009e98 <f_mount+0x88>)
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e40:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009e48:	69b8      	ldr	r0, [r7, #24]
 8009e4a:	f7fe f8ed 	bl	8008028 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	490d      	ldr	r1, [pc, #52]	; (8009e98 <f_mount+0x88>)
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <f_mount+0x66>
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d001      	beq.n	8009e7a <f_mount+0x6a>
 8009e76:	2300      	movs	r3, #0
 8009e78:	e00a      	b.n	8009e90 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009e7a:	f107 010c 	add.w	r1, r7, #12
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	2200      	movs	r2, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fd05 	bl	8009894 <find_volume>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000114 	.word	0x20000114

08009e9c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b09a      	sub	sp, #104	; 0x68
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <f_open+0x18>
 8009eb0:	2309      	movs	r3, #9
 8009eb2:	e1bb      	b.n	800a22c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009eba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009ebc:	79fa      	ldrb	r2, [r7, #7]
 8009ebe:	f107 0114 	add.w	r1, r7, #20
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fce4 	bl	8009894 <find_volume>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009ed2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 819f 	bne.w	800a21a <f_open+0x37e>
		dj.obj.fs = fs;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f107 0318 	add.w	r3, r7, #24
 8009ee6:	4611      	mov	r1, r2
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff fbc3 	bl	8009674 <follow_path>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009ef4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11a      	bne.n	8009f32 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009efc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009f00:	b25b      	sxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	da03      	bge.n	8009f0e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009f06:	2306      	movs	r3, #6
 8009f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f0c:	e011      	b.n	8009f32 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bf14      	ite	ne
 8009f18:	2301      	movne	r3, #1
 8009f1a:	2300      	moveq	r3, #0
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f107 0318 	add.w	r3, r7, #24
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fd ff3c 	bl	8007da4 <chk_lock>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	f003 031c 	and.w	r3, r3, #28
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d07f      	beq.n	800a03c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d017      	beq.n	8009f74 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009f44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d10e      	bne.n	8009f6a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009f4c:	f7fd ff84 	bl	8007e58 <enq_lock>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d006      	beq.n	8009f64 <f_open+0xc8>
 8009f56:	f107 0318 	add.w	r3, r7, #24
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff f8da 	bl	8009114 <dir_register>
 8009f60:	4603      	mov	r3, r0
 8009f62:	e000      	b.n	8009f66 <f_open+0xca>
 8009f64:	2312      	movs	r3, #18
 8009f66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	71fb      	strb	r3, [r7, #7]
 8009f72:	e010      	b.n	8009f96 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009f74:	7fbb      	ldrb	r3, [r7, #30]
 8009f76:	f003 0311 	and.w	r3, r3, #17
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <f_open+0xea>
					res = FR_DENIED;
 8009f7e:	2307      	movs	r3, #7
 8009f80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009f84:	e007      	b.n	8009f96 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d002      	beq.n	8009f96 <f_open+0xfa>
 8009f90:	2308      	movs	r3, #8
 8009f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d168      	bne.n	800a070 <f_open+0x1d4>
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d063      	beq.n	800a070 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009fa8:	f7fd fd0a 	bl	80079c0 <get_fattime>
 8009fac:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb0:	330e      	adds	r3, #14
 8009fb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fd fe50 	bl	8007c5a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	3316      	adds	r3, #22
 8009fbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd fe4a 	bl	8007c5a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	330b      	adds	r3, #11
 8009fca:	2220      	movs	r2, #32
 8009fcc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f7fe fe15 	bl	8008c04 <ld_clust>
 8009fda:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fe2d 	bl	8008c42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	331c      	adds	r3, #28
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fd fe33 	bl	8007c5a <st_dword>
					fs->wflag = 1;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d037      	beq.n	800a070 <f_open+0x1d4>
						dw = fs->winsect;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a004:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a006:	f107 0318 	add.w	r3, r7, #24
 800a00a:	2200      	movs	r2, #0
 800a00c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fe fb1e 	bl	8008650 <remove_chain>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a01a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d126      	bne.n	800a070 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a026:	4618      	mov	r0, r3
 800a028:	f7fe f866 	bl	80080f8 <move_window>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a036:	3a01      	subs	r2, #1
 800a038:	615a      	str	r2, [r3, #20]
 800a03a:	e019      	b.n	800a070 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a03c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a040:	2b00      	cmp	r3, #0
 800a042:	d115      	bne.n	800a070 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a044:	7fbb      	ldrb	r3, [r7, #30]
 800a046:	f003 0310 	and.w	r3, r3, #16
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a04e:	2304      	movs	r3, #4
 800a050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a054:	e00c      	b.n	800a070 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <f_open+0x1d4>
 800a060:	7fbb      	ldrb	r3, [r7, #30]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <f_open+0x1d4>
						res = FR_DENIED;
 800a06a:	2307      	movs	r3, #7
 800a06c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a070:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a074:	2b00      	cmp	r3, #0
 800a076:	d128      	bne.n	800a0ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	f003 0308 	and.w	r3, r3, #8
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a088:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a098:	79fb      	ldrb	r3, [r7, #7]
 800a09a:	f023 0301 	bic.w	r3, r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bf14      	ite	ne
 800a0a2:	2301      	movne	r3, #1
 800a0a4:	2300      	moveq	r3, #0
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f107 0318 	add.w	r3, r7, #24
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fd fef1 	bl	8007e98 <inc_lock>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d102      	bne.n	800a0ca <f_open+0x22e>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a0ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f040 80a3 	bne.w	800a21a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0d8:	4611      	mov	r1, r2
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fd92 	bl	8008c04 <ld_clust>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e8:	331c      	adds	r3, #28
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd fd79 	bl	8007be2 <ld_dword>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	88da      	ldrh	r2, [r3, #6]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	3330      	adds	r3, #48	; 0x30
 800a126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fd fddf 	bl	8007cf0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	f003 0320 	and.w	r3, r3, #32
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d06e      	beq.n	800a21a <f_open+0x37e>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d06a      	beq.n	800a21a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	895b      	ldrh	r3, [r3, #10]
 800a150:	461a      	mov	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	899b      	ldrh	r3, [r3, #12]
 800a156:	fb03 f302 	mul.w	r3, r3, r2
 800a15a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a168:	e016      	b.n	800a198 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe f87e 	bl	8008270 <get_fat>
 800a174:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d802      	bhi.n	800a182 <f_open+0x2e6>
 800a17c:	2302      	movs	r3, #2
 800a17e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d102      	bne.n	800a190 <f_open+0x2f4>
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a198:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d103      	bne.n	800a1a8 <f_open+0x30c>
 800a1a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d8e0      	bhi.n	800a16a <f_open+0x2ce>
				}
				fp->clust = clst;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a1ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d131      	bne.n	800a21a <f_open+0x37e>
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	899b      	ldrh	r3, [r3, #12]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1be:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1c2:	fb02 f201 	mul.w	r2, r2, r1
 800a1c6:	1a9b      	subs	r3, r3, r2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d026      	beq.n	800a21a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe f82f 	bl	8008234 <clust2sect>
 800a1d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d103      	bne.n	800a1e6 <f_open+0x34a>
						res = FR_INT_ERR;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a1e4:	e019      	b.n	800a21a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	899b      	ldrh	r3, [r3, #12]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1f4:	441a      	add	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	7858      	ldrb	r0, [r3, #1]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a1a      	ldr	r2, [r3, #32]
 800a208:	2301      	movs	r3, #1
 800a20a:	f7fd fc75 	bl	8007af8 <disk_read>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d002      	beq.n	800a21a <f_open+0x37e>
 800a214:	2301      	movs	r3, #1
 800a216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a21a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <f_open+0x38c>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a228:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3768      	adds	r7, #104	; 0x68
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08c      	sub	sp, #48	; 0x30
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2200      	movs	r2, #0
 800a24a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f107 0210 	add.w	r2, r7, #16
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f7ff fda5 	bl	8009da4 <validate>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a264:	2b00      	cmp	r3, #0
 800a266:	d107      	bne.n	800a278 <f_write+0x44>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	7d5b      	ldrb	r3, [r3, #21]
 800a26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a274:	2b00      	cmp	r3, #0
 800a276:	d002      	beq.n	800a27e <f_write+0x4a>
 800a278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a27c:	e16a      	b.n	800a554 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	f003 0302 	and.w	r3, r3, #2
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <f_write+0x5a>
 800a28a:	2307      	movs	r3, #7
 800a28c:	e162      	b.n	800a554 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	441a      	add	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	429a      	cmp	r2, r3
 800a29c:	f080 814c 	bcs.w	800a538 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a2a8:	e146      	b.n	800a538 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	8992      	ldrh	r2, [r2, #12]
 800a2b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2b6:	fb02 f201 	mul.w	r2, r2, r1
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	f040 80f1 	bne.w	800a4a4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	8992      	ldrh	r2, [r2, #12]
 800a2ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	8952      	ldrh	r2, [r2, #10]
 800a2d2:	3a01      	subs	r2, #1
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d143      	bne.n	800a366 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10c      	bne.n	800a300 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d11a      	bne.n	800a328 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fa0f 	bl	800871a <create_chain>
 800a2fc:	62b8      	str	r0, [r7, #40]	; 0x28
 800a2fe:	e013      	b.n	800a328 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	4619      	mov	r1, r3
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7fe fa9b 	bl	800884a <clmt_clust>
 800a314:	62b8      	str	r0, [r7, #40]	; 0x28
 800a316:	e007      	b.n	800a328 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	4619      	mov	r1, r3
 800a320:	4610      	mov	r0, r2
 800a322:	f7fe f9fa 	bl	800871a <create_chain>
 800a326:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 8109 	beq.w	800a542 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a332:	2b01      	cmp	r3, #1
 800a334:	d104      	bne.n	800a340 <f_write+0x10c>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2202      	movs	r2, #2
 800a33a:	755a      	strb	r2, [r3, #21]
 800a33c:	2302      	movs	r3, #2
 800a33e:	e109      	b.n	800a554 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d104      	bne.n	800a352 <f_write+0x11e>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2201      	movs	r2, #1
 800a34c:	755a      	strb	r2, [r3, #21]
 800a34e:	2301      	movs	r3, #1
 800a350:	e100      	b.n	800a554 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a356:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d102      	bne.n	800a366 <f_write+0x132>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a364:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	7d1b      	ldrb	r3, [r3, #20]
 800a36a:	b25b      	sxtb	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	da18      	bge.n	800a3a2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	7858      	ldrb	r0, [r3, #1]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	2301      	movs	r3, #1
 800a380:	f7fd fbda 	bl	8007b38 <disk_write>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d004      	beq.n	800a394 <f_write+0x160>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2201      	movs	r2, #1
 800a38e:	755a      	strb	r2, [r3, #21]
 800a390:	2301      	movs	r3, #1
 800a392:	e0df      	b.n	800a554 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	7d1b      	ldrb	r3, [r3, #20]
 800a398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f7fd ff42 	bl	8008234 <clust2sect>
 800a3b0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <f_write+0x18e>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	755a      	strb	r2, [r3, #21]
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e0c8      	b.n	800a554 <f_write+0x320>
			sect += csect;
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	899b      	ldrh	r3, [r3, #12]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3d6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d043      	beq.n	800a466 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	6a3b      	ldr	r3, [r7, #32]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	8952      	ldrh	r2, [r2, #10]
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d905      	bls.n	800a3f8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	895b      	ldrh	r3, [r3, #10]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	7858      	ldrb	r0, [r3, #1]
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	69f9      	ldr	r1, [r7, #28]
 800a402:	f7fd fb99 	bl	8007b38 <disk_write>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <f_write+0x1e2>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2201      	movs	r2, #1
 800a410:	755a      	strb	r2, [r3, #21]
 800a412:	2301      	movs	r3, #1
 800a414:	e09e      	b.n	800a554 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6a1a      	ldr	r2, [r3, #32]
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	1ad3      	subs	r3, r2, r3
 800a41e:	6a3a      	ldr	r2, [r7, #32]
 800a420:	429a      	cmp	r2, r3
 800a422:	d918      	bls.n	800a456 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1a      	ldr	r2, [r3, #32]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	8992      	ldrh	r2, [r2, #12]
 800a436:	fb02 f303 	mul.w	r3, r2, r3
 800a43a:	69fa      	ldr	r2, [r7, #28]
 800a43c:	18d1      	adds	r1, r2, r3
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	899b      	ldrh	r3, [r3, #12]
 800a442:	461a      	mov	r2, r3
 800a444:	f7fd fc34 	bl	8007cb0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	7d1b      	ldrb	r3, [r3, #20]
 800a44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a450:	b2da      	uxtb	r2, r3
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	899b      	ldrh	r3, [r3, #12]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6a3b      	ldr	r3, [r7, #32]
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a464:	e04b      	b.n	800a4fe <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	697a      	ldr	r2, [r7, #20]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d016      	beq.n	800a49e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	699a      	ldr	r2, [r3, #24]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a478:	429a      	cmp	r2, r3
 800a47a:	d210      	bcs.n	800a49e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	7858      	ldrb	r0, [r3, #1]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a486:	2301      	movs	r3, #1
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	f7fd fb35 	bl	8007af8 <disk_read>
 800a48e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a490:	2b00      	cmp	r3, #0
 800a492:	d004      	beq.n	800a49e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2201      	movs	r2, #1
 800a498:	755a      	strb	r2, [r3, #21]
 800a49a:	2301      	movs	r3, #1
 800a49c:	e05a      	b.n	800a554 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	899b      	ldrh	r3, [r3, #12]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	8992      	ldrh	r2, [r2, #12]
 800a4b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4b6:	fb02 f201 	mul.w	r2, r2, r1
 800a4ba:	1a9b      	subs	r3, r3, r2
 800a4bc:	1ac3      	subs	r3, r0, r3
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d901      	bls.n	800a4cc <f_write+0x298>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	8992      	ldrh	r2, [r2, #12]
 800a4da:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4de:	fb02 f200 	mul.w	r2, r2, r0
 800a4e2:	1a9b      	subs	r3, r3, r2
 800a4e4:	440b      	add	r3, r1
 800a4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e8:	69f9      	ldr	r1, [r7, #28]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fd fbe0 	bl	8007cb0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	7d1b      	ldrb	r3, [r3, #20]
 800a4f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a4f8:	b2da      	uxtb	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	4413      	add	r3, r2
 800a504:	61fb      	str	r3, [r7, #28]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	441a      	add	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	619a      	str	r2, [r3, #24]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	68da      	ldr	r2, [r3, #12]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	bf38      	it	cc
 800a51e:	461a      	movcc	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	60da      	str	r2, [r3, #12]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	441a      	add	r2, r3
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f47f aeb5 	bne.w	800a2aa <f_write+0x76>
 800a540:	e000      	b.n	800a544 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a542:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	7d1b      	ldrb	r3, [r3, #20]
 800a548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a552:	2300      	movs	r3, #0
}
 800a554:	4618      	mov	r0, r3
 800a556:	3730      	adds	r7, #48	; 0x30
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f107 0208 	add.w	r2, r7, #8
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7ff fc19 	bl	8009da4 <validate>
 800a572:	4603      	mov	r3, r0
 800a574:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a576:	7dfb      	ldrb	r3, [r7, #23]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d168      	bne.n	800a64e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7d1b      	ldrb	r3, [r3, #20]
 800a580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d062      	beq.n	800a64e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	7d1b      	ldrb	r3, [r3, #20]
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	da15      	bge.n	800a5be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	7858      	ldrb	r0, [r3, #1]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1a      	ldr	r2, [r3, #32]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	f7fd fac9 	bl	8007b38 <disk_write>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <f_sync+0x54>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e04f      	b.n	800a650 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	7d1b      	ldrb	r3, [r3, #20]
 800a5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a5be:	f7fd f9ff 	bl	80079c0 <get_fattime>
 800a5c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	f7fd fd93 	bl	80080f8 <move_window>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d138      	bne.n	800a64e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	330b      	adds	r3, #11
 800a5e6:	781a      	ldrb	r2, [r3, #0]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	330b      	adds	r3, #11
 800a5ec:	f042 0220 	orr.w	r2, r2, #32
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	f7fe fb1f 	bl	8008c42 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f103 021c 	add.w	r2, r3, #28
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7fd fb22 	bl	8007c5a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3316      	adds	r3, #22
 800a61a:	6939      	ldr	r1, [r7, #16]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fd fb1c 	bl	8007c5a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3312      	adds	r3, #18
 800a626:	2100      	movs	r1, #0
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fd fafc 	bl	8007c26 <st_word>
					fs->wflag = 1;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2201      	movs	r2, #1
 800a632:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4618      	mov	r0, r3
 800a638:	f7fd fd8c 	bl	8008154 <sync_fs>
 800a63c:	4603      	mov	r3, r0
 800a63e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7d1b      	ldrb	r3, [r3, #20]
 800a644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a64e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff ff7b 	bl	800a55c <f_sync>
 800a666:	4603      	mov	r3, r0
 800a668:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d118      	bne.n	800a6a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f107 0208 	add.w	r2, r7, #8
 800a676:	4611      	mov	r1, r2
 800a678:	4618      	mov	r0, r3
 800a67a:	f7ff fb93 	bl	8009da4 <validate>
 800a67e:	4603      	mov	r3, r0
 800a680:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a682:	7bfb      	ldrb	r3, [r7, #15]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10c      	bne.n	800a6a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fd fc91 	bl	8007fb4 <dec_lock>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b090      	sub	sp, #64	; 0x40
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f107 0208 	add.w	r2, r7, #8
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f7ff fb70 	bl	8009da4 <validate>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a6ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d103      	bne.n	800a6da <f_lseek+0x2e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7d5b      	ldrb	r3, [r3, #21]
 800a6d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a6da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <f_lseek+0x3c>
 800a6e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6e6:	e201      	b.n	800aaec <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f000 80d9 	beq.w	800a8a4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f8:	d15a      	bne.n	800a7b0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	1d1a      	adds	r2, r3, #4
 800a704:	627a      	str	r2, [r7, #36]	; 0x24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	617b      	str	r3, [r7, #20]
 800a70a:	2302      	movs	r3, #2
 800a70c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	d03a      	beq.n	800a790 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71c:	613b      	str	r3, [r7, #16]
 800a71e:	2300      	movs	r3, #0
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	3302      	adds	r3, #2
 800a726:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	3301      	adds	r3, #1
 800a730:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a736:	4618      	mov	r0, r3
 800a738:	f7fd fd9a 	bl	8008270 <get_fat>
 800a73c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	2b01      	cmp	r3, #1
 800a742:	d804      	bhi.n	800a74e <f_lseek+0xa2>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	755a      	strb	r2, [r3, #21]
 800a74a:	2302      	movs	r3, #2
 800a74c:	e1ce      	b.n	800aaec <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d104      	bne.n	800a760 <f_lseek+0xb4>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	755a      	strb	r2, [r3, #21]
 800a75c:	2301      	movs	r3, #1
 800a75e:	e1c5      	b.n	800aaec <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	3301      	adds	r3, #1
 800a764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a766:	429a      	cmp	r2, r3
 800a768:	d0de      	beq.n	800a728 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d809      	bhi.n	800a786 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	1d1a      	adds	r2, r3, #4
 800a776:	627a      	str	r2, [r7, #36]	; 0x24
 800a778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	1d1a      	adds	r2, r3, #4
 800a780:	627a      	str	r2, [r7, #36]	; 0x24
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3c4      	bcc.n	800a71a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a796:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d803      	bhi.n	800a7a8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	e19f      	b.n	800aae8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a7a8:	2311      	movs	r3, #17
 800a7aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a7ae:	e19b      	b.n	800aae8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d902      	bls.n	800a7c0 <f_lseek+0x114>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f000 818d 	beq.w	800aae8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f7fe f838 	bl	800884a <clmt_clust>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	f7fd fd23 	bl	8008234 <clust2sect>
 800a7ee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d104      	bne.n	800a800 <f_lseek+0x154>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	755a      	strb	r2, [r3, #21]
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e175      	b.n	800aaec <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	3b01      	subs	r3, #1
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	8992      	ldrh	r2, [r2, #12]
 800a808:	fbb3 f3f2 	udiv	r3, r3, r2
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	8952      	ldrh	r2, [r2, #10]
 800a810:	3a01      	subs	r2, #1
 800a812:	4013      	ands	r3, r2
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	4413      	add	r3, r2
 800a818:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	8992      	ldrh	r2, [r2, #12]
 800a822:	fbb3 f1f2 	udiv	r1, r3, r2
 800a826:	fb02 f201 	mul.w	r2, r2, r1
 800a82a:	1a9b      	subs	r3, r3, r2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 815b 	beq.w	800aae8 <f_lseek+0x43c>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	69ba      	ldr	r2, [r7, #24]
 800a838:	429a      	cmp	r2, r3
 800a83a:	f000 8155 	beq.w	800aae8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	7d1b      	ldrb	r3, [r3, #20]
 800a842:	b25b      	sxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	da18      	bge.n	800a87a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	7858      	ldrb	r0, [r3, #1]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a1a      	ldr	r2, [r3, #32]
 800a856:	2301      	movs	r3, #1
 800a858:	f7fd f96e 	bl	8007b38 <disk_write>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <f_lseek+0x1c0>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	755a      	strb	r2, [r3, #21]
 800a868:	2301      	movs	r3, #1
 800a86a:	e13f      	b.n	800aaec <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	7d1b      	ldrb	r3, [r3, #20]
 800a870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a874:	b2da      	uxtb	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	7858      	ldrb	r0, [r3, #1]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a884:	2301      	movs	r3, #1
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	f7fd f936 	bl	8007af8 <disk_read>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <f_lseek+0x1f0>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	755a      	strb	r2, [r3, #21]
 800a898:	2301      	movs	r3, #1
 800a89a:	e127      	b.n	800aaec <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	621a      	str	r2, [r3, #32]
 800a8a2:	e121      	b.n	800aae8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d908      	bls.n	800a8c0 <f_lseek+0x214>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7d1b      	ldrb	r3, [r3, #20]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d102      	bne.n	800a8c0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8ce:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 80b5 	beq.w	800aa42 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	895b      	ldrh	r3, [r3, #10]
 800a8dc:	461a      	mov	r2, r3
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	899b      	ldrh	r3, [r3, #12]
 800a8e2:	fb03 f302 	mul.w	r3, r3, r2
 800a8e6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d01b      	beq.n	800a926 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	1e5a      	subs	r2, r3, #1
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	1e59      	subs	r1, r3, #1
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a902:	429a      	cmp	r2, r3
 800a904:	d30f      	bcc.n	800a926 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a906:	6a3b      	ldr	r3, [r7, #32]
 800a908:	1e5a      	subs	r2, r3, #1
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	425b      	negs	r3, r3
 800a90e:	401a      	ands	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	63bb      	str	r3, [r7, #56]	; 0x38
 800a924:	e022      	b.n	800a96c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d119      	bne.n	800a966 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f7fd feef 	bl	800871a <create_chain>
 800a93c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	2b01      	cmp	r3, #1
 800a942:	d104      	bne.n	800a94e <f_lseek+0x2a2>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	755a      	strb	r2, [r3, #21]
 800a94a:	2302      	movs	r3, #2
 800a94c:	e0ce      	b.n	800aaec <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a954:	d104      	bne.n	800a960 <f_lseek+0x2b4>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	755a      	strb	r2, [r3, #21]
 800a95c:	2301      	movs	r3, #1
 800a95e:	e0c5      	b.n	800aaec <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a964:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a96a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d067      	beq.n	800aa42 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a972:	e03a      	b.n	800a9ea <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	1ad3      	subs	r3, r2, r3
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	441a      	add	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	7d1b      	ldrb	r3, [r3, #20]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00b      	beq.n	800a9ac <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a998:	4618      	mov	r0, r3
 800a99a:	f7fd febe 	bl	800871a <create_chain>
 800a99e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d108      	bne.n	800a9b8 <f_lseek+0x30c>
							ofs = 0; break;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	603b      	str	r3, [r7, #0]
 800a9aa:	e022      	b.n	800a9f2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fd fc5d 	bl	8008270 <get_fat>
 800a9b6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d104      	bne.n	800a9ca <f_lseek+0x31e>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	755a      	strb	r2, [r3, #21]
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e090      	b.n	800aaec <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d904      	bls.n	800a9da <f_lseek+0x32e>
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d304      	bcc.n	800a9e4 <f_lseek+0x338>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2202      	movs	r2, #2
 800a9de:	755a      	strb	r2, [r3, #21]
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e083      	b.n	800aaec <f_lseek+0x440>
					fp->clust = clst;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d8c0      	bhi.n	800a974 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	899b      	ldrh	r3, [r3, #12]
 800aa02:	461a      	mov	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa0a:	fb02 f201 	mul.w	r2, r2, r1
 800aa0e:	1a9b      	subs	r3, r3, r2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d016      	beq.n	800aa42 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fd fc0b 	bl	8008234 <clust2sect>
 800aa1e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d104      	bne.n	800aa30 <f_lseek+0x384>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	755a      	strb	r2, [r3, #21]
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	e05d      	b.n	800aaec <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	899b      	ldrh	r3, [r3, #12]
 800aa34:	461a      	mov	r2, r3
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa3e:	4413      	add	r3, r2
 800aa40:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d90a      	bls.n	800aa64 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699a      	ldr	r2, [r3, #24]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7d1b      	ldrb	r3, [r3, #20]
 800aa5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	8992      	ldrh	r2, [r2, #12]
 800aa6c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa70:	fb02 f201 	mul.w	r2, r2, r1
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d036      	beq.n	800aae8 <f_lseek+0x43c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d031      	beq.n	800aae8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7d1b      	ldrb	r3, [r3, #20]
 800aa88:	b25b      	sxtb	r3, r3
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da18      	bge.n	800aac0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	7858      	ldrb	r0, [r3, #1]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a1a      	ldr	r2, [r3, #32]
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	f7fd f84b 	bl	8007b38 <disk_write>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <f_lseek+0x406>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	755a      	strb	r2, [r3, #21]
 800aaae:	2301      	movs	r3, #1
 800aab0:	e01c      	b.n	800aaec <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	7d1b      	ldrb	r3, [r3, #20]
 800aab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	7858      	ldrb	r0, [r3, #1]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaca:	2301      	movs	r3, #1
 800aacc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aace:	f7fd f813 	bl	8007af8 <disk_read>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <f_lseek+0x436>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	755a      	strb	r2, [r3, #21]
 800aade:	2301      	movs	r3, #1
 800aae0:	e004      	b.n	800aaec <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aae6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3740      	adds	r7, #64	; 0x40
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ab00:	78fb      	ldrb	r3, [r7, #3]
 800ab02:	2b0a      	cmp	r3, #10
 800ab04:	d103      	bne.n	800ab0e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ab06:	210d      	movs	r1, #13
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff fff3 	bl	800aaf4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	db25      	blt.n	800ab66 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	60fa      	str	r2, [r7, #12]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2b3c      	cmp	r3, #60	; 0x3c
 800ab2c:	dd12      	ble.n	800ab54 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f103 010c 	add.w	r1, r3, #12
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	f7ff fb79 	bl	800a234 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d101      	bne.n	800ab4e <putc_bfd+0x5a>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e001      	b.n	800ab52 <putc_bfd+0x5e>
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	609a      	str	r2, [r3, #8]
 800ab64:	e000      	b.n	800ab68 <putc_bfd+0x74>
	if (i < 0) return;
 800ab66:	bf00      	nop
}
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	db16      	blt.n	800abac <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f103 010c 	add.w	r1, r3, #12
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	f107 030c 	add.w	r3, r7, #12
 800ab92:	f7ff fb4f 	bl	800a234 <f_write>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d107      	bne.n	800abac <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d102      	bne.n	800abac <putc_flush+0x3e>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	e001      	b.n	800abb0 <putc_flush+0x42>
	return EOF;
 800abac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2200      	movs	r2, #0
 800abcc:	605a      	str	r2, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	609a      	str	r2, [r3, #8]
}
 800abd6:	bf00      	nop
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	bc80      	pop	{r7}
 800abde:	4770      	bx	lr

0800abe0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800abe0:	b40e      	push	{r1, r2, r3}
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b0a7      	sub	sp, #156	; 0x9c
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800abea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff ffe1 	bl	800abb8 <putc_init>

	va_start(arp, fmt);
 800abf6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800abfa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800abfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ac0c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 81f4 	beq.w	800affe <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800ac16:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac1a:	2b25      	cmp	r3, #37	; 0x25
 800ac1c:	d008      	beq.n	800ac30 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ac1e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ac22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac26:	4611      	mov	r1, r2
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ff63 	bl	800aaf4 <putc_bfd>
			continue;
 800ac2e:	e1e5      	b.n	800affc <f_printf+0x41c>
		}
		w = f = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac36:	2300      	movs	r3, #0
 800ac38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800ac3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac40:	1c5a      	adds	r2, r3, #1
 800ac42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ac4c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac50:	2b30      	cmp	r3, #48	; 0x30
 800ac52:	d10b      	bne.n	800ac6c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ac6a:	e024      	b.n	800acb6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ac6c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac70:	2b2d      	cmp	r3, #45	; 0x2d
 800ac72:	d120      	bne.n	800acb6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ac74:	2302      	movs	r3, #2
 800ac76:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ac7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ac8a:	e014      	b.n	800acb6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ac8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ac9e:	4413      	add	r3, r2
 800aca0:	3b30      	subs	r3, #48	; 0x30
 800aca2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800aca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acaa:	1c5a      	adds	r2, r3, #1
 800acac:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800acb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acba:	2b2f      	cmp	r3, #47	; 0x2f
 800acbc:	d903      	bls.n	800acc6 <f_printf+0xe6>
 800acbe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acc2:	2b39      	cmp	r3, #57	; 0x39
 800acc4:	d9e2      	bls.n	800ac8c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800acc6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acca:	2b6c      	cmp	r3, #108	; 0x6c
 800accc:	d003      	beq.n	800acd6 <f_printf+0xf6>
 800acce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acd2:	2b4c      	cmp	r3, #76	; 0x4c
 800acd4:	d10d      	bne.n	800acf2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800acd6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800acda:	f043 0304 	orr.w	r3, r3, #4
 800acde:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ace2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800acf2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8183 	beq.w	800b002 <f_printf+0x422>
		d = c;
 800acfc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ad00:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ad04:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad08:	2b60      	cmp	r3, #96	; 0x60
 800ad0a:	d908      	bls.n	800ad1e <f_printf+0x13e>
 800ad0c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad10:	2b7a      	cmp	r3, #122	; 0x7a
 800ad12:	d804      	bhi.n	800ad1e <f_printf+0x13e>
 800ad14:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad18:	3b20      	subs	r3, #32
 800ad1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800ad1e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ad22:	3b42      	subs	r3, #66	; 0x42
 800ad24:	2b16      	cmp	r3, #22
 800ad26:	f200 8098 	bhi.w	800ae5a <f_printf+0x27a>
 800ad2a:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <f_printf+0x150>)
 800ad2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad30:	0800ae3b 	.word	0x0800ae3b
 800ad34:	0800ae23 	.word	0x0800ae23
 800ad38:	0800ae4b 	.word	0x0800ae4b
 800ad3c:	0800ae5b 	.word	0x0800ae5b
 800ad40:	0800ae5b 	.word	0x0800ae5b
 800ad44:	0800ae5b 	.word	0x0800ae5b
 800ad48:	0800ae5b 	.word	0x0800ae5b
 800ad4c:	0800ae5b 	.word	0x0800ae5b
 800ad50:	0800ae5b 	.word	0x0800ae5b
 800ad54:	0800ae5b 	.word	0x0800ae5b
 800ad58:	0800ae5b 	.word	0x0800ae5b
 800ad5c:	0800ae5b 	.word	0x0800ae5b
 800ad60:	0800ae5b 	.word	0x0800ae5b
 800ad64:	0800ae43 	.word	0x0800ae43
 800ad68:	0800ae5b 	.word	0x0800ae5b
 800ad6c:	0800ae5b 	.word	0x0800ae5b
 800ad70:	0800ae5b 	.word	0x0800ae5b
 800ad74:	0800ad8d 	.word	0x0800ad8d
 800ad78:	0800ae5b 	.word	0x0800ae5b
 800ad7c:	0800ae4b 	.word	0x0800ae4b
 800ad80:	0800ae5b 	.word	0x0800ae5b
 800ad84:	0800ae5b 	.word	0x0800ae5b
 800ad88:	0800ae53 	.word	0x0800ae53
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ad8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	67ba      	str	r2, [r7, #120]	; 0x78
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad9c:	e004      	b.n	800ada8 <f_printf+0x1c8>
 800ad9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ada2:	3301      	adds	r3, #1
 800ada4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ada8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800adaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adae:	4413      	add	r3, r2
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1f3      	bne.n	800ad9e <f_printf+0x1be>
			if (!(f & 2)) {
 800adb6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800adba:	f003 0302 	and.w	r3, r3, #2
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d11a      	bne.n	800adf8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800adc2:	e005      	b.n	800add0 <f_printf+0x1f0>
 800adc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adc8:	2120      	movs	r1, #32
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fe92 	bl	800aaf4 <putc_bfd>
 800add0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800adda:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800adde:	429a      	cmp	r2, r3
 800ade0:	d8f0      	bhi.n	800adc4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800ade2:	e009      	b.n	800adf8 <f_printf+0x218>
 800ade4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ade6:	1c5a      	adds	r2, r3, #1
 800ade8:	67fa      	str	r2, [r7, #124]	; 0x7c
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adf0:	4611      	mov	r1, r2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7ff fe7e 	bl	800aaf4 <putc_bfd>
 800adf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1f1      	bne.n	800ade4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ae00:	e005      	b.n	800ae0e <f_printf+0x22e>
 800ae02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae06:	2120      	movs	r1, #32
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff fe73 	bl	800aaf4 <putc_bfd>
 800ae0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ae18:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d8f0      	bhi.n	800ae02 <f_printf+0x222>
			continue;
 800ae20:	e0ec      	b.n	800affc <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ae22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae24:	1d1a      	adds	r2, r3, #4
 800ae26:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae30:	4611      	mov	r1, r2
 800ae32:	4618      	mov	r0, r3
 800ae34:	f7ff fe5e 	bl	800aaf4 <putc_bfd>
 800ae38:	e0e0      	b.n	800affc <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae40:	e014      	b.n	800ae6c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ae42:	2308      	movs	r3, #8
 800ae44:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae48:	e010      	b.n	800ae6c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ae4a:	230a      	movs	r3, #10
 800ae4c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae50:	e00c      	b.n	800ae6c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ae52:	2310      	movs	r3, #16
 800ae54:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ae58:	e008      	b.n	800ae6c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ae5a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ae5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ae62:	4611      	mov	r1, r2
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7ff fe45 	bl	800aaf4 <putc_bfd>
 800ae6a:	e0c7      	b.n	800affc <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ae6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <f_printf+0x2a2>
 800ae78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae7a:	1d1a      	adds	r2, r3, #4
 800ae7c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	e00c      	b.n	800ae9c <f_printf+0x2bc>
 800ae82:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ae86:	2b44      	cmp	r3, #68	; 0x44
 800ae88:	d104      	bne.n	800ae94 <f_printf+0x2b4>
 800ae8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	e003      	b.n	800ae9c <f_printf+0x2bc>
 800ae94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	67ba      	str	r2, [r7, #120]	; 0x78
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800aea0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aea4:	2b44      	cmp	r3, #68	; 0x44
 800aea6:	d10e      	bne.n	800aec6 <f_printf+0x2e6>
 800aea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	da0a      	bge.n	800aec6 <f_printf+0x2e6>
			v = 0 - v;
 800aeb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aeb4:	425b      	negs	r3, r3
 800aeb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800aeba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aebe:	f043 0308 	orr.w	r3, r3, #8
 800aec2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800aecc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800aed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aed4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aed8:	fb02 f201 	mul.w	r2, r2, r1
 800aedc:	1a9b      	subs	r3, r3, r2
 800aede:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800aee2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800aee6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aeea:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800aef2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800aef6:	2b09      	cmp	r3, #9
 800aef8:	d90b      	bls.n	800af12 <f_printf+0x332>
 800aefa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800aefe:	2b78      	cmp	r3, #120	; 0x78
 800af00:	d101      	bne.n	800af06 <f_printf+0x326>
 800af02:	2227      	movs	r2, #39	; 0x27
 800af04:	e000      	b.n	800af08 <f_printf+0x328>
 800af06:	2207      	movs	r2, #7
 800af08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800af0c:	4413      	add	r3, r2
 800af0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800af12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800af1c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800af20:	3230      	adds	r2, #48	; 0x30
 800af22:	b2d2      	uxtb	r2, r2
 800af24:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800af28:	440b      	add	r3, r1
 800af2a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800af2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af32:	2b00      	cmp	r3, #0
 800af34:	d003      	beq.n	800af3e <f_printf+0x35e>
 800af36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af3a:	2b1f      	cmp	r3, #31
 800af3c:	d9c6      	bls.n	800aecc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800af3e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af42:	f003 0308 	and.w	r3, r3, #8
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <f_printf+0x380>
 800af4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af4e:	1c5a      	adds	r2, r3, #1
 800af50:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800af54:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800af58:	4413      	add	r3, r2
 800af5a:	222d      	movs	r2, #45	; 0x2d
 800af5c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800af60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800af68:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <f_printf+0x398>
 800af74:	2330      	movs	r3, #48	; 0x30
 800af76:	e000      	b.n	800af7a <f_printf+0x39a>
 800af78:	2320      	movs	r3, #32
 800af7a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800af7e:	e007      	b.n	800af90 <f_printf+0x3b0>
 800af80:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800af84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff fdb2 	bl	800aaf4 <putc_bfd>
 800af90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800af94:	f003 0302 	and.w	r3, r3, #2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d108      	bne.n	800afae <f_printf+0x3ce>
 800af9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800afa6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800afaa:	429a      	cmp	r2, r3
 800afac:	d8e8      	bhi.n	800af80 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800afae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afb2:	3b01      	subs	r3, #1
 800afb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afb8:	f107 020c 	add.w	r2, r7, #12
 800afbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afc0:	4413      	add	r3, r2
 800afc2:	781a      	ldrb	r2, [r3, #0]
 800afc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afc8:	4611      	mov	r1, r2
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff fd92 	bl	800aaf4 <putc_bfd>
		} while (i);
 800afd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1ea      	bne.n	800afae <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800afd8:	e007      	b.n	800afea <f_printf+0x40a>
 800afda:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800afde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800afe2:	4611      	mov	r1, r2
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fd85 	bl	800aaf4 <putc_bfd>
 800afea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aff4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800aff8:	429a      	cmp	r2, r3
 800affa:	d8ee      	bhi.n	800afda <f_printf+0x3fa>
		c = *fmt++;
 800affc:	e5fe      	b.n	800abfc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800affe:	bf00      	nop
 800b000:	e000      	b.n	800b004 <f_printf+0x424>
		if (!c) break;
 800b002:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800b004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fdb0 	bl	800ab6e <putc_flush>
 800b00e:	4603      	mov	r3, r0
}
 800b010:	4618      	mov	r0, r3
 800b012:	379c      	adds	r7, #156	; 0x9c
 800b014:	46bd      	mov	sp, r7
 800b016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b01a:	b003      	add	sp, #12
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop

0800b020 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b020:	b480      	push	{r7}
 800b022:	b087      	sub	sp, #28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b02e:	2301      	movs	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b036:	4b1e      	ldr	r3, [pc, #120]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d131      	bne.n	800b0a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b040:	4b1b      	ldr	r3, [pc, #108]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b042:	7a5b      	ldrb	r3, [r3, #9]
 800b044:	b2db      	uxtb	r3, r3
 800b046:	461a      	mov	r2, r3
 800b048:	4b19      	ldr	r3, [pc, #100]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b04a:	2100      	movs	r1, #0
 800b04c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b04e:	4b18      	ldr	r3, [pc, #96]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b050:	7a5b      	ldrb	r3, [r3, #9]
 800b052:	b2db      	uxtb	r3, r3
 800b054:	4a16      	ldr	r2, [pc, #88]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b05e:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b060:	7a5b      	ldrb	r3, [r3, #9]
 800b062:	b2db      	uxtb	r3, r3
 800b064:	461a      	mov	r2, r3
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b068:	4413      	add	r3, r2
 800b06a:	79fa      	ldrb	r2, [r7, #7]
 800b06c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b06e:	4b10      	ldr	r3, [pc, #64]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b070:	7a5b      	ldrb	r3, [r3, #9]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	1c5a      	adds	r2, r3, #1
 800b076:	b2d1      	uxtb	r1, r2
 800b078:	4a0d      	ldr	r2, [pc, #52]	; (800b0b0 <FATFS_LinkDriverEx+0x90>)
 800b07a:	7251      	strb	r1, [r2, #9]
 800b07c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b07e:	7dbb      	ldrb	r3, [r7, #22]
 800b080:	3330      	adds	r3, #48	; 0x30
 800b082:	b2da      	uxtb	r2, r3
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3301      	adds	r3, #1
 800b08c:	223a      	movs	r2, #58	; 0x3a
 800b08e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	3302      	adds	r3, #2
 800b094:	222f      	movs	r2, #47	; 0x2f
 800b096:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	3303      	adds	r3, #3
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	371c      	adds	r7, #28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bc80      	pop	{r7}
 800b0ae:	4770      	bx	lr
 800b0b0:	2000033c 	.word	0x2000033c

0800b0b4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b0be:	2200      	movs	r2, #0
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7ff ffac 	bl	800b020 <FATFS_LinkDriverEx>
 800b0c8:	4603      	mov	r3, r0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
	...

0800b0d4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	4603      	mov	r3, r0
 800b0dc:	6039      	str	r1, [r7, #0]
 800b0de:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b0e0:	88fb      	ldrh	r3, [r7, #6]
 800b0e2:	2b7f      	cmp	r3, #127	; 0x7f
 800b0e4:	d802      	bhi.n	800b0ec <ff_convert+0x18>
		c = chr;
 800b0e6:	88fb      	ldrh	r3, [r7, #6]
 800b0e8:	81fb      	strh	r3, [r7, #14]
 800b0ea:	e025      	b.n	800b138 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00b      	beq.n	800b10a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	2bff      	cmp	r3, #255	; 0xff
 800b0f6:	d805      	bhi.n	800b104 <ff_convert+0x30>
 800b0f8:	88fb      	ldrh	r3, [r7, #6]
 800b0fa:	3b80      	subs	r3, #128	; 0x80
 800b0fc:	4a11      	ldr	r2, [pc, #68]	; (800b144 <ff_convert+0x70>)
 800b0fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b102:	e000      	b.n	800b106 <ff_convert+0x32>
 800b104:	2300      	movs	r3, #0
 800b106:	81fb      	strh	r3, [r7, #14]
 800b108:	e016      	b.n	800b138 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b10a:	2300      	movs	r3, #0
 800b10c:	81fb      	strh	r3, [r7, #14]
 800b10e:	e009      	b.n	800b124 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b110:	89fb      	ldrh	r3, [r7, #14]
 800b112:	4a0c      	ldr	r2, [pc, #48]	; (800b144 <ff_convert+0x70>)
 800b114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b118:	88fa      	ldrh	r2, [r7, #6]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d006      	beq.n	800b12c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b11e:	89fb      	ldrh	r3, [r7, #14]
 800b120:	3301      	adds	r3, #1
 800b122:	81fb      	strh	r3, [r7, #14]
 800b124:	89fb      	ldrh	r3, [r7, #14]
 800b126:	2b7f      	cmp	r3, #127	; 0x7f
 800b128:	d9f2      	bls.n	800b110 <ff_convert+0x3c>
 800b12a:	e000      	b.n	800b12e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b12c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b12e:	89fb      	ldrh	r3, [r7, #14]
 800b130:	3380      	adds	r3, #128	; 0x80
 800b132:	b29b      	uxth	r3, r3
 800b134:	b2db      	uxtb	r3, r3
 800b136:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b138:	89fb      	ldrh	r3, [r7, #14]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3714      	adds	r7, #20
 800b13e:	46bd      	mov	sp, r7
 800b140:	bc80      	pop	{r7}
 800b142:	4770      	bx	lr
 800b144:	0800bcbc 	.word	0x0800bcbc

0800b148 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b148:	b480      	push	{r7}
 800b14a:	b087      	sub	sp, #28
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b152:	88fb      	ldrh	r3, [r7, #6]
 800b154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b158:	d201      	bcs.n	800b15e <ff_wtoupper+0x16>
 800b15a:	4b3d      	ldr	r3, [pc, #244]	; (800b250 <ff_wtoupper+0x108>)
 800b15c:	e000      	b.n	800b160 <ff_wtoupper+0x18>
 800b15e:	4b3d      	ldr	r3, [pc, #244]	; (800b254 <ff_wtoupper+0x10c>)
 800b160:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	1c9a      	adds	r2, r3, #2
 800b166:	617a      	str	r2, [r7, #20]
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b16c:	8a7b      	ldrh	r3, [r7, #18]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d068      	beq.n	800b244 <ff_wtoupper+0xfc>
 800b172:	88fa      	ldrh	r2, [r7, #6]
 800b174:	8a7b      	ldrh	r3, [r7, #18]
 800b176:	429a      	cmp	r2, r3
 800b178:	d364      	bcc.n	800b244 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	1c9a      	adds	r2, r3, #2
 800b17e:	617a      	str	r2, [r7, #20]
 800b180:	881b      	ldrh	r3, [r3, #0]
 800b182:	823b      	strh	r3, [r7, #16]
 800b184:	8a3b      	ldrh	r3, [r7, #16]
 800b186:	0a1b      	lsrs	r3, r3, #8
 800b188:	81fb      	strh	r3, [r7, #14]
 800b18a:	8a3b      	ldrh	r3, [r7, #16]
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b190:	88fa      	ldrh	r2, [r7, #6]
 800b192:	8a79      	ldrh	r1, [r7, #18]
 800b194:	8a3b      	ldrh	r3, [r7, #16]
 800b196:	440b      	add	r3, r1
 800b198:	429a      	cmp	r2, r3
 800b19a:	da49      	bge.n	800b230 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b19c:	89fb      	ldrh	r3, [r7, #14]
 800b19e:	2b08      	cmp	r3, #8
 800b1a0:	d84f      	bhi.n	800b242 <ff_wtoupper+0xfa>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <ff_wtoupper+0x60>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1cd 	.word	0x0800b1cd
 800b1ac:	0800b1df 	.word	0x0800b1df
 800b1b0:	0800b1f5 	.word	0x0800b1f5
 800b1b4:	0800b1fd 	.word	0x0800b1fd
 800b1b8:	0800b205 	.word	0x0800b205
 800b1bc:	0800b20d 	.word	0x0800b20d
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b21d 	.word	0x0800b21d
 800b1c8:	0800b225 	.word	0x0800b225
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b1cc:	88fa      	ldrh	r2, [r7, #6]
 800b1ce:	8a7b      	ldrh	r3, [r7, #18]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	005b      	lsls	r3, r3, #1
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	80fb      	strh	r3, [r7, #6]
 800b1dc:	e027      	b.n	800b22e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b1de:	88fa      	ldrh	r2, [r7, #6]
 800b1e0:	8a7b      	ldrh	r3, [r7, #18]
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	88fa      	ldrh	r2, [r7, #6]
 800b1ee:	1ad3      	subs	r3, r2, r3
 800b1f0:	80fb      	strh	r3, [r7, #6]
 800b1f2:	e01c      	b.n	800b22e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b1f4:	88fb      	ldrh	r3, [r7, #6]
 800b1f6:	3b10      	subs	r3, #16
 800b1f8:	80fb      	strh	r3, [r7, #6]
 800b1fa:	e018      	b.n	800b22e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	3b20      	subs	r3, #32
 800b200:	80fb      	strh	r3, [r7, #6]
 800b202:	e014      	b.n	800b22e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	3b30      	subs	r3, #48	; 0x30
 800b208:	80fb      	strh	r3, [r7, #6]
 800b20a:	e010      	b.n	800b22e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b20c:	88fb      	ldrh	r3, [r7, #6]
 800b20e:	3b1a      	subs	r3, #26
 800b210:	80fb      	strh	r3, [r7, #6]
 800b212:	e00c      	b.n	800b22e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	3308      	adds	r3, #8
 800b218:	80fb      	strh	r3, [r7, #6]
 800b21a:	e008      	b.n	800b22e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	3b50      	subs	r3, #80	; 0x50
 800b220:	80fb      	strh	r3, [r7, #6]
 800b222:	e004      	b.n	800b22e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b224:	88fb      	ldrh	r3, [r7, #6]
 800b226:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800b22a:	80fb      	strh	r3, [r7, #6]
 800b22c:	bf00      	nop
			}
			break;
 800b22e:	e008      	b.n	800b242 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b230:	89fb      	ldrh	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d195      	bne.n	800b162 <ff_wtoupper+0x1a>
 800b236:	8a3b      	ldrh	r3, [r7, #16]
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4413      	add	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b240:	e78f      	b.n	800b162 <ff_wtoupper+0x1a>
			break;
 800b242:	bf00      	nop
	}

	return chr;
 800b244:	88fb      	ldrh	r3, [r7, #6]
}
 800b246:	4618      	mov	r0, r3
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bc80      	pop	{r7}
 800b24e:	4770      	bx	lr
 800b250:	0800bdbc 	.word	0x0800bdbc
 800b254:	0800bfb0 	.word	0x0800bfb0

0800b258 <__errno>:
 800b258:	4b01      	ldr	r3, [pc, #4]	; (800b260 <__errno+0x8>)
 800b25a:	6818      	ldr	r0, [r3, #0]
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	2000008c 	.word	0x2000008c

0800b264 <exit>:
 800b264:	b508      	push	{r3, lr}
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <exit+0x20>)
 800b268:	4604      	mov	r4, r0
 800b26a:	b113      	cbz	r3, 800b272 <exit+0xe>
 800b26c:	2100      	movs	r1, #0
 800b26e:	f3af 8000 	nop.w
 800b272:	4b05      	ldr	r3, [pc, #20]	; (800b288 <exit+0x24>)
 800b274:	6818      	ldr	r0, [r3, #0]
 800b276:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b278:	b103      	cbz	r3, 800b27c <exit+0x18>
 800b27a:	4798      	blx	r3
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7f7 f893 	bl	80023a8 <_exit>
 800b282:	bf00      	nop
 800b284:	00000000 	.word	0x00000000
 800b288:	0800c06c 	.word	0x0800c06c

0800b28c <__libc_init_array>:
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	2600      	movs	r6, #0
 800b290:	4d0c      	ldr	r5, [pc, #48]	; (800b2c4 <__libc_init_array+0x38>)
 800b292:	4c0d      	ldr	r4, [pc, #52]	; (800b2c8 <__libc_init_array+0x3c>)
 800b294:	1b64      	subs	r4, r4, r5
 800b296:	10a4      	asrs	r4, r4, #2
 800b298:	42a6      	cmp	r6, r4
 800b29a:	d109      	bne.n	800b2b0 <__libc_init_array+0x24>
 800b29c:	f000 fc5c 	bl	800bb58 <_init>
 800b2a0:	2600      	movs	r6, #0
 800b2a2:	4d0a      	ldr	r5, [pc, #40]	; (800b2cc <__libc_init_array+0x40>)
 800b2a4:	4c0a      	ldr	r4, [pc, #40]	; (800b2d0 <__libc_init_array+0x44>)
 800b2a6:	1b64      	subs	r4, r4, r5
 800b2a8:	10a4      	asrs	r4, r4, #2
 800b2aa:	42a6      	cmp	r6, r4
 800b2ac:	d105      	bne.n	800b2ba <__libc_init_array+0x2e>
 800b2ae:	bd70      	pop	{r4, r5, r6, pc}
 800b2b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2b4:	4798      	blx	r3
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	e7ee      	b.n	800b298 <__libc_init_array+0xc>
 800b2ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2be:	4798      	blx	r3
 800b2c0:	3601      	adds	r6, #1
 800b2c2:	e7f2      	b.n	800b2aa <__libc_init_array+0x1e>
 800b2c4:	0800c0ac 	.word	0x0800c0ac
 800b2c8:	0800c0ac 	.word	0x0800c0ac
 800b2cc:	0800c0ac 	.word	0x0800c0ac
 800b2d0:	0800c0b0 	.word	0x0800c0b0

0800b2d4 <memset>:
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	4402      	add	r2, r0
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d100      	bne.n	800b2de <memset+0xa>
 800b2dc:	4770      	bx	lr
 800b2de:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e2:	e7f9      	b.n	800b2d8 <memset+0x4>

0800b2e4 <siprintf>:
 800b2e4:	b40e      	push	{r1, r2, r3}
 800b2e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2ea:	b500      	push	{lr}
 800b2ec:	b09c      	sub	sp, #112	; 0x70
 800b2ee:	ab1d      	add	r3, sp, #116	; 0x74
 800b2f0:	9002      	str	r0, [sp, #8]
 800b2f2:	9006      	str	r0, [sp, #24]
 800b2f4:	9107      	str	r1, [sp, #28]
 800b2f6:	9104      	str	r1, [sp, #16]
 800b2f8:	4808      	ldr	r0, [pc, #32]	; (800b31c <siprintf+0x38>)
 800b2fa:	4909      	ldr	r1, [pc, #36]	; (800b320 <siprintf+0x3c>)
 800b2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b300:	9105      	str	r1, [sp, #20]
 800b302:	6800      	ldr	r0, [r0, #0]
 800b304:	a902      	add	r1, sp, #8
 800b306:	9301      	str	r3, [sp, #4]
 800b308:	f000 f868 	bl	800b3dc <_svfiprintf_r>
 800b30c:	2200      	movs	r2, #0
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	701a      	strb	r2, [r3, #0]
 800b312:	b01c      	add	sp, #112	; 0x70
 800b314:	f85d eb04 	ldr.w	lr, [sp], #4
 800b318:	b003      	add	sp, #12
 800b31a:	4770      	bx	lr
 800b31c:	2000008c 	.word	0x2000008c
 800b320:	ffff0208 	.word	0xffff0208

0800b324 <__ssputs_r>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	688e      	ldr	r6, [r1, #8]
 800b32a:	4682      	mov	sl, r0
 800b32c:	429e      	cmp	r6, r3
 800b32e:	460c      	mov	r4, r1
 800b330:	4690      	mov	r8, r2
 800b332:	461f      	mov	r7, r3
 800b334:	d838      	bhi.n	800b3a8 <__ssputs_r+0x84>
 800b336:	898a      	ldrh	r2, [r1, #12]
 800b338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b33c:	d032      	beq.n	800b3a4 <__ssputs_r+0x80>
 800b33e:	6825      	ldr	r5, [r4, #0]
 800b340:	6909      	ldr	r1, [r1, #16]
 800b342:	3301      	adds	r3, #1
 800b344:	eba5 0901 	sub.w	r9, r5, r1
 800b348:	6965      	ldr	r5, [r4, #20]
 800b34a:	444b      	add	r3, r9
 800b34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b354:	106d      	asrs	r5, r5, #1
 800b356:	429d      	cmp	r5, r3
 800b358:	bf38      	it	cc
 800b35a:	461d      	movcc	r5, r3
 800b35c:	0553      	lsls	r3, r2, #21
 800b35e:	d531      	bpl.n	800b3c4 <__ssputs_r+0xa0>
 800b360:	4629      	mov	r1, r5
 800b362:	f000 fb53 	bl	800ba0c <_malloc_r>
 800b366:	4606      	mov	r6, r0
 800b368:	b950      	cbnz	r0, 800b380 <__ssputs_r+0x5c>
 800b36a:	230c      	movs	r3, #12
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	f8ca 3000 	str.w	r3, [sl]
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	464a      	mov	r2, r9
 800b382:	6921      	ldr	r1, [r4, #16]
 800b384:	f000 face 	bl	800b924 <memcpy>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b392:	81a3      	strh	r3, [r4, #12]
 800b394:	6126      	str	r6, [r4, #16]
 800b396:	444e      	add	r6, r9
 800b398:	6026      	str	r6, [r4, #0]
 800b39a:	463e      	mov	r6, r7
 800b39c:	6165      	str	r5, [r4, #20]
 800b39e:	eba5 0509 	sub.w	r5, r5, r9
 800b3a2:	60a5      	str	r5, [r4, #8]
 800b3a4:	42be      	cmp	r6, r7
 800b3a6:	d900      	bls.n	800b3aa <__ssputs_r+0x86>
 800b3a8:	463e      	mov	r6, r7
 800b3aa:	4632      	mov	r2, r6
 800b3ac:	4641      	mov	r1, r8
 800b3ae:	6820      	ldr	r0, [r4, #0]
 800b3b0:	f000 fac6 	bl	800b940 <memmove>
 800b3b4:	68a3      	ldr	r3, [r4, #8]
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	1b9b      	subs	r3, r3, r6
 800b3ba:	4432      	add	r2, r6
 800b3bc:	2000      	movs	r0, #0
 800b3be:	60a3      	str	r3, [r4, #8]
 800b3c0:	6022      	str	r2, [r4, #0]
 800b3c2:	e7db      	b.n	800b37c <__ssputs_r+0x58>
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	f000 fb7b 	bl	800bac0 <_realloc_r>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d1e1      	bne.n	800b394 <__ssputs_r+0x70>
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	6921      	ldr	r1, [r4, #16]
 800b3d4:	f000 face 	bl	800b974 <_free_r>
 800b3d8:	e7c7      	b.n	800b36a <__ssputs_r+0x46>
	...

0800b3dc <_svfiprintf_r>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	4698      	mov	r8, r3
 800b3e2:	898b      	ldrh	r3, [r1, #12]
 800b3e4:	4607      	mov	r7, r0
 800b3e6:	061b      	lsls	r3, r3, #24
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	4614      	mov	r4, r2
 800b3ec:	b09d      	sub	sp, #116	; 0x74
 800b3ee:	d50e      	bpl.n	800b40e <_svfiprintf_r+0x32>
 800b3f0:	690b      	ldr	r3, [r1, #16]
 800b3f2:	b963      	cbnz	r3, 800b40e <_svfiprintf_r+0x32>
 800b3f4:	2140      	movs	r1, #64	; 0x40
 800b3f6:	f000 fb09 	bl	800ba0c <_malloc_r>
 800b3fa:	6028      	str	r0, [r5, #0]
 800b3fc:	6128      	str	r0, [r5, #16]
 800b3fe:	b920      	cbnz	r0, 800b40a <_svfiprintf_r+0x2e>
 800b400:	230c      	movs	r3, #12
 800b402:	603b      	str	r3, [r7, #0]
 800b404:	f04f 30ff 	mov.w	r0, #4294967295
 800b408:	e0d1      	b.n	800b5ae <_svfiprintf_r+0x1d2>
 800b40a:	2340      	movs	r3, #64	; 0x40
 800b40c:	616b      	str	r3, [r5, #20]
 800b40e:	2300      	movs	r3, #0
 800b410:	9309      	str	r3, [sp, #36]	; 0x24
 800b412:	2320      	movs	r3, #32
 800b414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b418:	2330      	movs	r3, #48	; 0x30
 800b41a:	f04f 0901 	mov.w	r9, #1
 800b41e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b422:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b5c8 <_svfiprintf_r+0x1ec>
 800b426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b42a:	4623      	mov	r3, r4
 800b42c:	469a      	mov	sl, r3
 800b42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b432:	b10a      	cbz	r2, 800b438 <_svfiprintf_r+0x5c>
 800b434:	2a25      	cmp	r2, #37	; 0x25
 800b436:	d1f9      	bne.n	800b42c <_svfiprintf_r+0x50>
 800b438:	ebba 0b04 	subs.w	fp, sl, r4
 800b43c:	d00b      	beq.n	800b456 <_svfiprintf_r+0x7a>
 800b43e:	465b      	mov	r3, fp
 800b440:	4622      	mov	r2, r4
 800b442:	4629      	mov	r1, r5
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff ff6d 	bl	800b324 <__ssputs_r>
 800b44a:	3001      	adds	r0, #1
 800b44c:	f000 80aa 	beq.w	800b5a4 <_svfiprintf_r+0x1c8>
 800b450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b452:	445a      	add	r2, fp
 800b454:	9209      	str	r2, [sp, #36]	; 0x24
 800b456:	f89a 3000 	ldrb.w	r3, [sl]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 80a2 	beq.w	800b5a4 <_svfiprintf_r+0x1c8>
 800b460:	2300      	movs	r3, #0
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b46a:	f10a 0a01 	add.w	sl, sl, #1
 800b46e:	9304      	str	r3, [sp, #16]
 800b470:	9307      	str	r3, [sp, #28]
 800b472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b476:	931a      	str	r3, [sp, #104]	; 0x68
 800b478:	4654      	mov	r4, sl
 800b47a:	2205      	movs	r2, #5
 800b47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b480:	4851      	ldr	r0, [pc, #324]	; (800b5c8 <_svfiprintf_r+0x1ec>)
 800b482:	f000 fa41 	bl	800b908 <memchr>
 800b486:	9a04      	ldr	r2, [sp, #16]
 800b488:	b9d8      	cbnz	r0, 800b4c2 <_svfiprintf_r+0xe6>
 800b48a:	06d0      	lsls	r0, r2, #27
 800b48c:	bf44      	itt	mi
 800b48e:	2320      	movmi	r3, #32
 800b490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b494:	0711      	lsls	r1, r2, #28
 800b496:	bf44      	itt	mi
 800b498:	232b      	movmi	r3, #43	; 0x2b
 800b49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b49e:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4a4:	d015      	beq.n	800b4d2 <_svfiprintf_r+0xf6>
 800b4a6:	4654      	mov	r4, sl
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	f04f 0c0a 	mov.w	ip, #10
 800b4ae:	9a07      	ldr	r2, [sp, #28]
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4b6:	3b30      	subs	r3, #48	; 0x30
 800b4b8:	2b09      	cmp	r3, #9
 800b4ba:	d94e      	bls.n	800b55a <_svfiprintf_r+0x17e>
 800b4bc:	b1b0      	cbz	r0, 800b4ec <_svfiprintf_r+0x110>
 800b4be:	9207      	str	r2, [sp, #28]
 800b4c0:	e014      	b.n	800b4ec <_svfiprintf_r+0x110>
 800b4c2:	eba0 0308 	sub.w	r3, r0, r8
 800b4c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	46a2      	mov	sl, r4
 800b4ce:	9304      	str	r3, [sp, #16]
 800b4d0:	e7d2      	b.n	800b478 <_svfiprintf_r+0x9c>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	1d19      	adds	r1, r3, #4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	9103      	str	r1, [sp, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfbb      	ittet	lt
 800b4de:	425b      	neglt	r3, r3
 800b4e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4e4:	9307      	strge	r3, [sp, #28]
 800b4e6:	9307      	strlt	r3, [sp, #28]
 800b4e8:	bfb8      	it	lt
 800b4ea:	9204      	strlt	r2, [sp, #16]
 800b4ec:	7823      	ldrb	r3, [r4, #0]
 800b4ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b4f0:	d10c      	bne.n	800b50c <_svfiprintf_r+0x130>
 800b4f2:	7863      	ldrb	r3, [r4, #1]
 800b4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f6:	d135      	bne.n	800b564 <_svfiprintf_r+0x188>
 800b4f8:	9b03      	ldr	r3, [sp, #12]
 800b4fa:	3402      	adds	r4, #2
 800b4fc:	1d1a      	adds	r2, r3, #4
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	9203      	str	r2, [sp, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	bfb8      	it	lt
 800b506:	f04f 33ff 	movlt.w	r3, #4294967295
 800b50a:	9305      	str	r3, [sp, #20]
 800b50c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5d8 <_svfiprintf_r+0x1fc>
 800b510:	2203      	movs	r2, #3
 800b512:	4650      	mov	r0, sl
 800b514:	7821      	ldrb	r1, [r4, #0]
 800b516:	f000 f9f7 	bl	800b908 <memchr>
 800b51a:	b140      	cbz	r0, 800b52e <_svfiprintf_r+0x152>
 800b51c:	2340      	movs	r3, #64	; 0x40
 800b51e:	eba0 000a 	sub.w	r0, r0, sl
 800b522:	fa03 f000 	lsl.w	r0, r3, r0
 800b526:	9b04      	ldr	r3, [sp, #16]
 800b528:	3401      	adds	r4, #1
 800b52a:	4303      	orrs	r3, r0
 800b52c:	9304      	str	r3, [sp, #16]
 800b52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b532:	2206      	movs	r2, #6
 800b534:	4825      	ldr	r0, [pc, #148]	; (800b5cc <_svfiprintf_r+0x1f0>)
 800b536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b53a:	f000 f9e5 	bl	800b908 <memchr>
 800b53e:	2800      	cmp	r0, #0
 800b540:	d038      	beq.n	800b5b4 <_svfiprintf_r+0x1d8>
 800b542:	4b23      	ldr	r3, [pc, #140]	; (800b5d0 <_svfiprintf_r+0x1f4>)
 800b544:	bb1b      	cbnz	r3, 800b58e <_svfiprintf_r+0x1b2>
 800b546:	9b03      	ldr	r3, [sp, #12]
 800b548:	3307      	adds	r3, #7
 800b54a:	f023 0307 	bic.w	r3, r3, #7
 800b54e:	3308      	adds	r3, #8
 800b550:	9303      	str	r3, [sp, #12]
 800b552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b554:	4433      	add	r3, r6
 800b556:	9309      	str	r3, [sp, #36]	; 0x24
 800b558:	e767      	b.n	800b42a <_svfiprintf_r+0x4e>
 800b55a:	460c      	mov	r4, r1
 800b55c:	2001      	movs	r0, #1
 800b55e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b562:	e7a5      	b.n	800b4b0 <_svfiprintf_r+0xd4>
 800b564:	2300      	movs	r3, #0
 800b566:	f04f 0c0a 	mov.w	ip, #10
 800b56a:	4619      	mov	r1, r3
 800b56c:	3401      	adds	r4, #1
 800b56e:	9305      	str	r3, [sp, #20]
 800b570:	4620      	mov	r0, r4
 800b572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b576:	3a30      	subs	r2, #48	; 0x30
 800b578:	2a09      	cmp	r2, #9
 800b57a:	d903      	bls.n	800b584 <_svfiprintf_r+0x1a8>
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d0c5      	beq.n	800b50c <_svfiprintf_r+0x130>
 800b580:	9105      	str	r1, [sp, #20]
 800b582:	e7c3      	b.n	800b50c <_svfiprintf_r+0x130>
 800b584:	4604      	mov	r4, r0
 800b586:	2301      	movs	r3, #1
 800b588:	fb0c 2101 	mla	r1, ip, r1, r2
 800b58c:	e7f0      	b.n	800b570 <_svfiprintf_r+0x194>
 800b58e:	ab03      	add	r3, sp, #12
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	462a      	mov	r2, r5
 800b594:	4638      	mov	r0, r7
 800b596:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <_svfiprintf_r+0x1f8>)
 800b598:	a904      	add	r1, sp, #16
 800b59a:	f3af 8000 	nop.w
 800b59e:	1c42      	adds	r2, r0, #1
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	d1d6      	bne.n	800b552 <_svfiprintf_r+0x176>
 800b5a4:	89ab      	ldrh	r3, [r5, #12]
 800b5a6:	065b      	lsls	r3, r3, #25
 800b5a8:	f53f af2c 	bmi.w	800b404 <_svfiprintf_r+0x28>
 800b5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5ae:	b01d      	add	sp, #116	; 0x74
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	ab03      	add	r3, sp, #12
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	462a      	mov	r2, r5
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	4b05      	ldr	r3, [pc, #20]	; (800b5d4 <_svfiprintf_r+0x1f8>)
 800b5be:	a904      	add	r1, sp, #16
 800b5c0:	f000 f87c 	bl	800b6bc <_printf_i>
 800b5c4:	e7eb      	b.n	800b59e <_svfiprintf_r+0x1c2>
 800b5c6:	bf00      	nop
 800b5c8:	0800c070 	.word	0x0800c070
 800b5cc:	0800c07a 	.word	0x0800c07a
 800b5d0:	00000000 	.word	0x00000000
 800b5d4:	0800b325 	.word	0x0800b325
 800b5d8:	0800c076 	.word	0x0800c076

0800b5dc <_printf_common>:
 800b5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e0:	4616      	mov	r6, r2
 800b5e2:	4699      	mov	r9, r3
 800b5e4:	688a      	ldr	r2, [r1, #8]
 800b5e6:	690b      	ldr	r3, [r1, #16]
 800b5e8:	4607      	mov	r7, r0
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	bfb8      	it	lt
 800b5ee:	4613      	movlt	r3, r2
 800b5f0:	6033      	str	r3, [r6, #0]
 800b5f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5fc:	b10a      	cbz	r2, 800b602 <_printf_common+0x26>
 800b5fe:	3301      	adds	r3, #1
 800b600:	6033      	str	r3, [r6, #0]
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	0699      	lsls	r1, r3, #26
 800b606:	bf42      	ittt	mi
 800b608:	6833      	ldrmi	r3, [r6, #0]
 800b60a:	3302      	addmi	r3, #2
 800b60c:	6033      	strmi	r3, [r6, #0]
 800b60e:	6825      	ldr	r5, [r4, #0]
 800b610:	f015 0506 	ands.w	r5, r5, #6
 800b614:	d106      	bne.n	800b624 <_printf_common+0x48>
 800b616:	f104 0a19 	add.w	sl, r4, #25
 800b61a:	68e3      	ldr	r3, [r4, #12]
 800b61c:	6832      	ldr	r2, [r6, #0]
 800b61e:	1a9b      	subs	r3, r3, r2
 800b620:	42ab      	cmp	r3, r5
 800b622:	dc28      	bgt.n	800b676 <_printf_common+0x9a>
 800b624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b628:	1e13      	subs	r3, r2, #0
 800b62a:	6822      	ldr	r2, [r4, #0]
 800b62c:	bf18      	it	ne
 800b62e:	2301      	movne	r3, #1
 800b630:	0692      	lsls	r2, r2, #26
 800b632:	d42d      	bmi.n	800b690 <_printf_common+0xb4>
 800b634:	4649      	mov	r1, r9
 800b636:	4638      	mov	r0, r7
 800b638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b63c:	47c0      	blx	r8
 800b63e:	3001      	adds	r0, #1
 800b640:	d020      	beq.n	800b684 <_printf_common+0xa8>
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	68e5      	ldr	r5, [r4, #12]
 800b646:	f003 0306 	and.w	r3, r3, #6
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	bf18      	it	ne
 800b64e:	2500      	movne	r5, #0
 800b650:	6832      	ldr	r2, [r6, #0]
 800b652:	f04f 0600 	mov.w	r6, #0
 800b656:	68a3      	ldr	r3, [r4, #8]
 800b658:	bf08      	it	eq
 800b65a:	1aad      	subeq	r5, r5, r2
 800b65c:	6922      	ldr	r2, [r4, #16]
 800b65e:	bf08      	it	eq
 800b660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b664:	4293      	cmp	r3, r2
 800b666:	bfc4      	itt	gt
 800b668:	1a9b      	subgt	r3, r3, r2
 800b66a:	18ed      	addgt	r5, r5, r3
 800b66c:	341a      	adds	r4, #26
 800b66e:	42b5      	cmp	r5, r6
 800b670:	d11a      	bne.n	800b6a8 <_printf_common+0xcc>
 800b672:	2000      	movs	r0, #0
 800b674:	e008      	b.n	800b688 <_printf_common+0xac>
 800b676:	2301      	movs	r3, #1
 800b678:	4652      	mov	r2, sl
 800b67a:	4649      	mov	r1, r9
 800b67c:	4638      	mov	r0, r7
 800b67e:	47c0      	blx	r8
 800b680:	3001      	adds	r0, #1
 800b682:	d103      	bne.n	800b68c <_printf_common+0xb0>
 800b684:	f04f 30ff 	mov.w	r0, #4294967295
 800b688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b68c:	3501      	adds	r5, #1
 800b68e:	e7c4      	b.n	800b61a <_printf_common+0x3e>
 800b690:	2030      	movs	r0, #48	; 0x30
 800b692:	18e1      	adds	r1, r4, r3
 800b694:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b698:	1c5a      	adds	r2, r3, #1
 800b69a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b69e:	4422      	add	r2, r4
 800b6a0:	3302      	adds	r3, #2
 800b6a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6a6:	e7c5      	b.n	800b634 <_printf_common+0x58>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	4649      	mov	r1, r9
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	47c0      	blx	r8
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	d0e6      	beq.n	800b684 <_printf_common+0xa8>
 800b6b6:	3601      	adds	r6, #1
 800b6b8:	e7d9      	b.n	800b66e <_printf_common+0x92>
	...

0800b6bc <_printf_i>:
 800b6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	7e27      	ldrb	r7, [r4, #24]
 800b6c4:	4691      	mov	r9, r2
 800b6c6:	2f78      	cmp	r7, #120	; 0x78
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	469a      	mov	sl, r3
 800b6cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b6ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6d2:	d807      	bhi.n	800b6e4 <_printf_i+0x28>
 800b6d4:	2f62      	cmp	r7, #98	; 0x62
 800b6d6:	d80a      	bhi.n	800b6ee <_printf_i+0x32>
 800b6d8:	2f00      	cmp	r7, #0
 800b6da:	f000 80d9 	beq.w	800b890 <_printf_i+0x1d4>
 800b6de:	2f58      	cmp	r7, #88	; 0x58
 800b6e0:	f000 80a4 	beq.w	800b82c <_printf_i+0x170>
 800b6e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6ec:	e03a      	b.n	800b764 <_printf_i+0xa8>
 800b6ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6f2:	2b15      	cmp	r3, #21
 800b6f4:	d8f6      	bhi.n	800b6e4 <_printf_i+0x28>
 800b6f6:	a001      	add	r0, pc, #4	; (adr r0, 800b6fc <_printf_i+0x40>)
 800b6f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6fc:	0800b755 	.word	0x0800b755
 800b700:	0800b769 	.word	0x0800b769
 800b704:	0800b6e5 	.word	0x0800b6e5
 800b708:	0800b6e5 	.word	0x0800b6e5
 800b70c:	0800b6e5 	.word	0x0800b6e5
 800b710:	0800b6e5 	.word	0x0800b6e5
 800b714:	0800b769 	.word	0x0800b769
 800b718:	0800b6e5 	.word	0x0800b6e5
 800b71c:	0800b6e5 	.word	0x0800b6e5
 800b720:	0800b6e5 	.word	0x0800b6e5
 800b724:	0800b6e5 	.word	0x0800b6e5
 800b728:	0800b877 	.word	0x0800b877
 800b72c:	0800b799 	.word	0x0800b799
 800b730:	0800b859 	.word	0x0800b859
 800b734:	0800b6e5 	.word	0x0800b6e5
 800b738:	0800b6e5 	.word	0x0800b6e5
 800b73c:	0800b899 	.word	0x0800b899
 800b740:	0800b6e5 	.word	0x0800b6e5
 800b744:	0800b799 	.word	0x0800b799
 800b748:	0800b6e5 	.word	0x0800b6e5
 800b74c:	0800b6e5 	.word	0x0800b6e5
 800b750:	0800b861 	.word	0x0800b861
 800b754:	680b      	ldr	r3, [r1, #0]
 800b756:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b75a:	1d1a      	adds	r2, r3, #4
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	600a      	str	r2, [r1, #0]
 800b760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b764:	2301      	movs	r3, #1
 800b766:	e0a4      	b.n	800b8b2 <_printf_i+0x1f6>
 800b768:	6825      	ldr	r5, [r4, #0]
 800b76a:	6808      	ldr	r0, [r1, #0]
 800b76c:	062e      	lsls	r6, r5, #24
 800b76e:	f100 0304 	add.w	r3, r0, #4
 800b772:	d50a      	bpl.n	800b78a <_printf_i+0xce>
 800b774:	6805      	ldr	r5, [r0, #0]
 800b776:	600b      	str	r3, [r1, #0]
 800b778:	2d00      	cmp	r5, #0
 800b77a:	da03      	bge.n	800b784 <_printf_i+0xc8>
 800b77c:	232d      	movs	r3, #45	; 0x2d
 800b77e:	426d      	negs	r5, r5
 800b780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b784:	230a      	movs	r3, #10
 800b786:	485e      	ldr	r0, [pc, #376]	; (800b900 <_printf_i+0x244>)
 800b788:	e019      	b.n	800b7be <_printf_i+0x102>
 800b78a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b78e:	6805      	ldr	r5, [r0, #0]
 800b790:	600b      	str	r3, [r1, #0]
 800b792:	bf18      	it	ne
 800b794:	b22d      	sxthne	r5, r5
 800b796:	e7ef      	b.n	800b778 <_printf_i+0xbc>
 800b798:	680b      	ldr	r3, [r1, #0]
 800b79a:	6825      	ldr	r5, [r4, #0]
 800b79c:	1d18      	adds	r0, r3, #4
 800b79e:	6008      	str	r0, [r1, #0]
 800b7a0:	0628      	lsls	r0, r5, #24
 800b7a2:	d501      	bpl.n	800b7a8 <_printf_i+0xec>
 800b7a4:	681d      	ldr	r5, [r3, #0]
 800b7a6:	e002      	b.n	800b7ae <_printf_i+0xf2>
 800b7a8:	0669      	lsls	r1, r5, #25
 800b7aa:	d5fb      	bpl.n	800b7a4 <_printf_i+0xe8>
 800b7ac:	881d      	ldrh	r5, [r3, #0]
 800b7ae:	2f6f      	cmp	r7, #111	; 0x6f
 800b7b0:	bf0c      	ite	eq
 800b7b2:	2308      	moveq	r3, #8
 800b7b4:	230a      	movne	r3, #10
 800b7b6:	4852      	ldr	r0, [pc, #328]	; (800b900 <_printf_i+0x244>)
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7be:	6866      	ldr	r6, [r4, #4]
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	bfa8      	it	ge
 800b7c4:	6821      	ldrge	r1, [r4, #0]
 800b7c6:	60a6      	str	r6, [r4, #8]
 800b7c8:	bfa4      	itt	ge
 800b7ca:	f021 0104 	bicge.w	r1, r1, #4
 800b7ce:	6021      	strge	r1, [r4, #0]
 800b7d0:	b90d      	cbnz	r5, 800b7d6 <_printf_i+0x11a>
 800b7d2:	2e00      	cmp	r6, #0
 800b7d4:	d04d      	beq.n	800b872 <_printf_i+0x1b6>
 800b7d6:	4616      	mov	r6, r2
 800b7d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7dc:	fb03 5711 	mls	r7, r3, r1, r5
 800b7e0:	5dc7      	ldrb	r7, [r0, r7]
 800b7e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7e6:	462f      	mov	r7, r5
 800b7e8:	42bb      	cmp	r3, r7
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	d9f4      	bls.n	800b7d8 <_printf_i+0x11c>
 800b7ee:	2b08      	cmp	r3, #8
 800b7f0:	d10b      	bne.n	800b80a <_printf_i+0x14e>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	07df      	lsls	r7, r3, #31
 800b7f6:	d508      	bpl.n	800b80a <_printf_i+0x14e>
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	6861      	ldr	r1, [r4, #4]
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	bfde      	ittt	le
 800b800:	2330      	movle	r3, #48	; 0x30
 800b802:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b806:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b80a:	1b92      	subs	r2, r2, r6
 800b80c:	6122      	str	r2, [r4, #16]
 800b80e:	464b      	mov	r3, r9
 800b810:	4621      	mov	r1, r4
 800b812:	4640      	mov	r0, r8
 800b814:	f8cd a000 	str.w	sl, [sp]
 800b818:	aa03      	add	r2, sp, #12
 800b81a:	f7ff fedf 	bl	800b5dc <_printf_common>
 800b81e:	3001      	adds	r0, #1
 800b820:	d14c      	bne.n	800b8bc <_printf_i+0x200>
 800b822:	f04f 30ff 	mov.w	r0, #4294967295
 800b826:	b004      	add	sp, #16
 800b828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b82c:	4834      	ldr	r0, [pc, #208]	; (800b900 <_printf_i+0x244>)
 800b82e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b832:	680e      	ldr	r6, [r1, #0]
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	f856 5b04 	ldr.w	r5, [r6], #4
 800b83a:	061f      	lsls	r7, r3, #24
 800b83c:	600e      	str	r6, [r1, #0]
 800b83e:	d514      	bpl.n	800b86a <_printf_i+0x1ae>
 800b840:	07d9      	lsls	r1, r3, #31
 800b842:	bf44      	itt	mi
 800b844:	f043 0320 	orrmi.w	r3, r3, #32
 800b848:	6023      	strmi	r3, [r4, #0]
 800b84a:	b91d      	cbnz	r5, 800b854 <_printf_i+0x198>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	f023 0320 	bic.w	r3, r3, #32
 800b852:	6023      	str	r3, [r4, #0]
 800b854:	2310      	movs	r3, #16
 800b856:	e7af      	b.n	800b7b8 <_printf_i+0xfc>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	f043 0320 	orr.w	r3, r3, #32
 800b85e:	6023      	str	r3, [r4, #0]
 800b860:	2378      	movs	r3, #120	; 0x78
 800b862:	4828      	ldr	r0, [pc, #160]	; (800b904 <_printf_i+0x248>)
 800b864:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b868:	e7e3      	b.n	800b832 <_printf_i+0x176>
 800b86a:	065e      	lsls	r6, r3, #25
 800b86c:	bf48      	it	mi
 800b86e:	b2ad      	uxthmi	r5, r5
 800b870:	e7e6      	b.n	800b840 <_printf_i+0x184>
 800b872:	4616      	mov	r6, r2
 800b874:	e7bb      	b.n	800b7ee <_printf_i+0x132>
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	6826      	ldr	r6, [r4, #0]
 800b87a:	1d1d      	adds	r5, r3, #4
 800b87c:	6960      	ldr	r0, [r4, #20]
 800b87e:	600d      	str	r5, [r1, #0]
 800b880:	0635      	lsls	r5, r6, #24
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	d501      	bpl.n	800b88a <_printf_i+0x1ce>
 800b886:	6018      	str	r0, [r3, #0]
 800b888:	e002      	b.n	800b890 <_printf_i+0x1d4>
 800b88a:	0671      	lsls	r1, r6, #25
 800b88c:	d5fb      	bpl.n	800b886 <_printf_i+0x1ca>
 800b88e:	8018      	strh	r0, [r3, #0]
 800b890:	2300      	movs	r3, #0
 800b892:	4616      	mov	r6, r2
 800b894:	6123      	str	r3, [r4, #16]
 800b896:	e7ba      	b.n	800b80e <_printf_i+0x152>
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	1d1a      	adds	r2, r3, #4
 800b89c:	600a      	str	r2, [r1, #0]
 800b89e:	681e      	ldr	r6, [r3, #0]
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	6862      	ldr	r2, [r4, #4]
 800b8a6:	f000 f82f 	bl	800b908 <memchr>
 800b8aa:	b108      	cbz	r0, 800b8b0 <_printf_i+0x1f4>
 800b8ac:	1b80      	subs	r0, r0, r6
 800b8ae:	6060      	str	r0, [r4, #4]
 800b8b0:	6863      	ldr	r3, [r4, #4]
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8ba:	e7a8      	b.n	800b80e <_printf_i+0x152>
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4649      	mov	r1, r9
 800b8c0:	4640      	mov	r0, r8
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	47d0      	blx	sl
 800b8c6:	3001      	adds	r0, #1
 800b8c8:	d0ab      	beq.n	800b822 <_printf_i+0x166>
 800b8ca:	6823      	ldr	r3, [r4, #0]
 800b8cc:	079b      	lsls	r3, r3, #30
 800b8ce:	d413      	bmi.n	800b8f8 <_printf_i+0x23c>
 800b8d0:	68e0      	ldr	r0, [r4, #12]
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	4298      	cmp	r0, r3
 800b8d6:	bfb8      	it	lt
 800b8d8:	4618      	movlt	r0, r3
 800b8da:	e7a4      	b.n	800b826 <_printf_i+0x16a>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	4632      	mov	r2, r6
 800b8e0:	4649      	mov	r1, r9
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	47d0      	blx	sl
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	d09b      	beq.n	800b822 <_printf_i+0x166>
 800b8ea:	3501      	adds	r5, #1
 800b8ec:	68e3      	ldr	r3, [r4, #12]
 800b8ee:	9903      	ldr	r1, [sp, #12]
 800b8f0:	1a5b      	subs	r3, r3, r1
 800b8f2:	42ab      	cmp	r3, r5
 800b8f4:	dcf2      	bgt.n	800b8dc <_printf_i+0x220>
 800b8f6:	e7eb      	b.n	800b8d0 <_printf_i+0x214>
 800b8f8:	2500      	movs	r5, #0
 800b8fa:	f104 0619 	add.w	r6, r4, #25
 800b8fe:	e7f5      	b.n	800b8ec <_printf_i+0x230>
 800b900:	0800c081 	.word	0x0800c081
 800b904:	0800c092 	.word	0x0800c092

0800b908 <memchr>:
 800b908:	4603      	mov	r3, r0
 800b90a:	b510      	push	{r4, lr}
 800b90c:	b2c9      	uxtb	r1, r1
 800b90e:	4402      	add	r2, r0
 800b910:	4293      	cmp	r3, r2
 800b912:	4618      	mov	r0, r3
 800b914:	d101      	bne.n	800b91a <memchr+0x12>
 800b916:	2000      	movs	r0, #0
 800b918:	e003      	b.n	800b922 <memchr+0x1a>
 800b91a:	7804      	ldrb	r4, [r0, #0]
 800b91c:	3301      	adds	r3, #1
 800b91e:	428c      	cmp	r4, r1
 800b920:	d1f6      	bne.n	800b910 <memchr+0x8>
 800b922:	bd10      	pop	{r4, pc}

0800b924 <memcpy>:
 800b924:	440a      	add	r2, r1
 800b926:	4291      	cmp	r1, r2
 800b928:	f100 33ff 	add.w	r3, r0, #4294967295
 800b92c:	d100      	bne.n	800b930 <memcpy+0xc>
 800b92e:	4770      	bx	lr
 800b930:	b510      	push	{r4, lr}
 800b932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b936:	4291      	cmp	r1, r2
 800b938:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b93c:	d1f9      	bne.n	800b932 <memcpy+0xe>
 800b93e:	bd10      	pop	{r4, pc}

0800b940 <memmove>:
 800b940:	4288      	cmp	r0, r1
 800b942:	b510      	push	{r4, lr}
 800b944:	eb01 0402 	add.w	r4, r1, r2
 800b948:	d902      	bls.n	800b950 <memmove+0x10>
 800b94a:	4284      	cmp	r4, r0
 800b94c:	4623      	mov	r3, r4
 800b94e:	d807      	bhi.n	800b960 <memmove+0x20>
 800b950:	1e43      	subs	r3, r0, #1
 800b952:	42a1      	cmp	r1, r4
 800b954:	d008      	beq.n	800b968 <memmove+0x28>
 800b956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b95e:	e7f8      	b.n	800b952 <memmove+0x12>
 800b960:	4601      	mov	r1, r0
 800b962:	4402      	add	r2, r0
 800b964:	428a      	cmp	r2, r1
 800b966:	d100      	bne.n	800b96a <memmove+0x2a>
 800b968:	bd10      	pop	{r4, pc}
 800b96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b972:	e7f7      	b.n	800b964 <memmove+0x24>

0800b974 <_free_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4605      	mov	r5, r0
 800b978:	2900      	cmp	r1, #0
 800b97a:	d043      	beq.n	800ba04 <_free_r+0x90>
 800b97c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b980:	1f0c      	subs	r4, r1, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	bfb8      	it	lt
 800b986:	18e4      	addlt	r4, r4, r3
 800b988:	f000 f8d0 	bl	800bb2c <__malloc_lock>
 800b98c:	4a1e      	ldr	r2, [pc, #120]	; (800ba08 <_free_r+0x94>)
 800b98e:	6813      	ldr	r3, [r2, #0]
 800b990:	4610      	mov	r0, r2
 800b992:	b933      	cbnz	r3, 800b9a2 <_free_r+0x2e>
 800b994:	6063      	str	r3, [r4, #4]
 800b996:	6014      	str	r4, [r2, #0]
 800b998:	4628      	mov	r0, r5
 800b99a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b99e:	f000 b8cb 	b.w	800bb38 <__malloc_unlock>
 800b9a2:	42a3      	cmp	r3, r4
 800b9a4:	d90a      	bls.n	800b9bc <_free_r+0x48>
 800b9a6:	6821      	ldr	r1, [r4, #0]
 800b9a8:	1862      	adds	r2, r4, r1
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	bf01      	itttt	eq
 800b9ae:	681a      	ldreq	r2, [r3, #0]
 800b9b0:	685b      	ldreq	r3, [r3, #4]
 800b9b2:	1852      	addeq	r2, r2, r1
 800b9b4:	6022      	streq	r2, [r4, #0]
 800b9b6:	6063      	str	r3, [r4, #4]
 800b9b8:	6004      	str	r4, [r0, #0]
 800b9ba:	e7ed      	b.n	800b998 <_free_r+0x24>
 800b9bc:	461a      	mov	r2, r3
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	b10b      	cbz	r3, 800b9c6 <_free_r+0x52>
 800b9c2:	42a3      	cmp	r3, r4
 800b9c4:	d9fa      	bls.n	800b9bc <_free_r+0x48>
 800b9c6:	6811      	ldr	r1, [r2, #0]
 800b9c8:	1850      	adds	r0, r2, r1
 800b9ca:	42a0      	cmp	r0, r4
 800b9cc:	d10b      	bne.n	800b9e6 <_free_r+0x72>
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	4401      	add	r1, r0
 800b9d2:	1850      	adds	r0, r2, r1
 800b9d4:	4283      	cmp	r3, r0
 800b9d6:	6011      	str	r1, [r2, #0]
 800b9d8:	d1de      	bne.n	800b998 <_free_r+0x24>
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4401      	add	r1, r0
 800b9e0:	6011      	str	r1, [r2, #0]
 800b9e2:	6053      	str	r3, [r2, #4]
 800b9e4:	e7d8      	b.n	800b998 <_free_r+0x24>
 800b9e6:	d902      	bls.n	800b9ee <_free_r+0x7a>
 800b9e8:	230c      	movs	r3, #12
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	e7d4      	b.n	800b998 <_free_r+0x24>
 800b9ee:	6820      	ldr	r0, [r4, #0]
 800b9f0:	1821      	adds	r1, r4, r0
 800b9f2:	428b      	cmp	r3, r1
 800b9f4:	bf01      	itttt	eq
 800b9f6:	6819      	ldreq	r1, [r3, #0]
 800b9f8:	685b      	ldreq	r3, [r3, #4]
 800b9fa:	1809      	addeq	r1, r1, r0
 800b9fc:	6021      	streq	r1, [r4, #0]
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6054      	str	r4, [r2, #4]
 800ba02:	e7c9      	b.n	800b998 <_free_r+0x24>
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	bf00      	nop
 800ba08:	20000348 	.word	0x20000348

0800ba0c <_malloc_r>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	1ccd      	adds	r5, r1, #3
 800ba10:	f025 0503 	bic.w	r5, r5, #3
 800ba14:	3508      	adds	r5, #8
 800ba16:	2d0c      	cmp	r5, #12
 800ba18:	bf38      	it	cc
 800ba1a:	250c      	movcc	r5, #12
 800ba1c:	2d00      	cmp	r5, #0
 800ba1e:	4606      	mov	r6, r0
 800ba20:	db01      	blt.n	800ba26 <_malloc_r+0x1a>
 800ba22:	42a9      	cmp	r1, r5
 800ba24:	d903      	bls.n	800ba2e <_malloc_r+0x22>
 800ba26:	230c      	movs	r3, #12
 800ba28:	6033      	str	r3, [r6, #0]
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba2e:	f000 f87d 	bl	800bb2c <__malloc_lock>
 800ba32:	4921      	ldr	r1, [pc, #132]	; (800bab8 <_malloc_r+0xac>)
 800ba34:	680a      	ldr	r2, [r1, #0]
 800ba36:	4614      	mov	r4, r2
 800ba38:	b99c      	cbnz	r4, 800ba62 <_malloc_r+0x56>
 800ba3a:	4f20      	ldr	r7, [pc, #128]	; (800babc <_malloc_r+0xb0>)
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	b923      	cbnz	r3, 800ba4a <_malloc_r+0x3e>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4630      	mov	r0, r6
 800ba44:	f000 f862 	bl	800bb0c <_sbrk_r>
 800ba48:	6038      	str	r0, [r7, #0]
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f000 f85d 	bl	800bb0c <_sbrk_r>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	d123      	bne.n	800ba9e <_malloc_r+0x92>
 800ba56:	230c      	movs	r3, #12
 800ba58:	4630      	mov	r0, r6
 800ba5a:	6033      	str	r3, [r6, #0]
 800ba5c:	f000 f86c 	bl	800bb38 <__malloc_unlock>
 800ba60:	e7e3      	b.n	800ba2a <_malloc_r+0x1e>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	1b5b      	subs	r3, r3, r5
 800ba66:	d417      	bmi.n	800ba98 <_malloc_r+0x8c>
 800ba68:	2b0b      	cmp	r3, #11
 800ba6a:	d903      	bls.n	800ba74 <_malloc_r+0x68>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	441c      	add	r4, r3
 800ba70:	6025      	str	r5, [r4, #0]
 800ba72:	e004      	b.n	800ba7e <_malloc_r+0x72>
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	42a2      	cmp	r2, r4
 800ba78:	bf0c      	ite	eq
 800ba7a:	600b      	streq	r3, [r1, #0]
 800ba7c:	6053      	strne	r3, [r2, #4]
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f000 f85a 	bl	800bb38 <__malloc_unlock>
 800ba84:	f104 000b 	add.w	r0, r4, #11
 800ba88:	1d23      	adds	r3, r4, #4
 800ba8a:	f020 0007 	bic.w	r0, r0, #7
 800ba8e:	1ac2      	subs	r2, r0, r3
 800ba90:	d0cc      	beq.n	800ba2c <_malloc_r+0x20>
 800ba92:	1a1b      	subs	r3, r3, r0
 800ba94:	50a3      	str	r3, [r4, r2]
 800ba96:	e7c9      	b.n	800ba2c <_malloc_r+0x20>
 800ba98:	4622      	mov	r2, r4
 800ba9a:	6864      	ldr	r4, [r4, #4]
 800ba9c:	e7cc      	b.n	800ba38 <_malloc_r+0x2c>
 800ba9e:	1cc4      	adds	r4, r0, #3
 800baa0:	f024 0403 	bic.w	r4, r4, #3
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d0e3      	beq.n	800ba70 <_malloc_r+0x64>
 800baa8:	1a21      	subs	r1, r4, r0
 800baaa:	4630      	mov	r0, r6
 800baac:	f000 f82e 	bl	800bb0c <_sbrk_r>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d1dd      	bne.n	800ba70 <_malloc_r+0x64>
 800bab4:	e7cf      	b.n	800ba56 <_malloc_r+0x4a>
 800bab6:	bf00      	nop
 800bab8:	20000348 	.word	0x20000348
 800babc:	2000034c 	.word	0x2000034c

0800bac0 <_realloc_r>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	4607      	mov	r7, r0
 800bac4:	4614      	mov	r4, r2
 800bac6:	460e      	mov	r6, r1
 800bac8:	b921      	cbnz	r1, 800bad4 <_realloc_r+0x14>
 800baca:	4611      	mov	r1, r2
 800bacc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bad0:	f7ff bf9c 	b.w	800ba0c <_malloc_r>
 800bad4:	b922      	cbnz	r2, 800bae0 <_realloc_r+0x20>
 800bad6:	f7ff ff4d 	bl	800b974 <_free_r>
 800bada:	4625      	mov	r5, r4
 800badc:	4628      	mov	r0, r5
 800bade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae0:	f000 f830 	bl	800bb44 <_malloc_usable_size_r>
 800bae4:	42a0      	cmp	r0, r4
 800bae6:	d20f      	bcs.n	800bb08 <_realloc_r+0x48>
 800bae8:	4621      	mov	r1, r4
 800baea:	4638      	mov	r0, r7
 800baec:	f7ff ff8e 	bl	800ba0c <_malloc_r>
 800baf0:	4605      	mov	r5, r0
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d0f2      	beq.n	800badc <_realloc_r+0x1c>
 800baf6:	4631      	mov	r1, r6
 800baf8:	4622      	mov	r2, r4
 800bafa:	f7ff ff13 	bl	800b924 <memcpy>
 800bafe:	4631      	mov	r1, r6
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff ff37 	bl	800b974 <_free_r>
 800bb06:	e7e9      	b.n	800badc <_realloc_r+0x1c>
 800bb08:	4635      	mov	r5, r6
 800bb0a:	e7e7      	b.n	800badc <_realloc_r+0x1c>

0800bb0c <_sbrk_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	2300      	movs	r3, #0
 800bb10:	4d05      	ldr	r5, [pc, #20]	; (800bb28 <_sbrk_r+0x1c>)
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7f6 fc50 	bl	80023bc <_sbrk>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_sbrk_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_sbrk_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	200045c4 	.word	0x200045c4

0800bb2c <__malloc_lock>:
 800bb2c:	4801      	ldr	r0, [pc, #4]	; (800bb34 <__malloc_lock+0x8>)
 800bb2e:	f000 b811 	b.w	800bb54 <__retarget_lock_acquire_recursive>
 800bb32:	bf00      	nop
 800bb34:	200045cc 	.word	0x200045cc

0800bb38 <__malloc_unlock>:
 800bb38:	4801      	ldr	r0, [pc, #4]	; (800bb40 <__malloc_unlock+0x8>)
 800bb3a:	f000 b80c 	b.w	800bb56 <__retarget_lock_release_recursive>
 800bb3e:	bf00      	nop
 800bb40:	200045cc 	.word	0x200045cc

0800bb44 <_malloc_usable_size_r>:
 800bb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb48:	1f18      	subs	r0, r3, #4
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	bfbc      	itt	lt
 800bb4e:	580b      	ldrlt	r3, [r1, r0]
 800bb50:	18c0      	addlt	r0, r0, r3
 800bb52:	4770      	bx	lr

0800bb54 <__retarget_lock_acquire_recursive>:
 800bb54:	4770      	bx	lr

0800bb56 <__retarget_lock_release_recursive>:
 800bb56:	4770      	bx	lr

0800bb58 <_init>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr

0800bb64 <_fini>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr
