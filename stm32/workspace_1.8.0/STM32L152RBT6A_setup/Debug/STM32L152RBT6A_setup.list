
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057cc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800595c  0800595c  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005964  08005964  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  0800596c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000054  080059c0  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080059c0  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea2c  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002250  00000000  00000000  0002eaa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00030d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c57  00000000  00000000  00032718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee25  00000000  00000000  0004736f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081747  00000000  00000000  00056194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d78db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000383c  00000000  00000000  000d7930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000054 	.word	0x20000054
 8000158:	00000000 	.word	0x00000000
 800015c:	080058f0 	.word	0x080058f0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000058 	.word	0x20000058
 8000178:	080058f0 	.word	0x080058f0

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_frsub>:
 80002e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__addsf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_fsub>:
 80002ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f0 <__addsf3>:
 80002f0:	0042      	lsls	r2, r0, #1
 80002f2:	bf1f      	itttt	ne
 80002f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f8:	ea92 0f03 	teqne	r2, r3
 80002fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000300:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000304:	d06a      	beq.n	80003dc <__addsf3+0xec>
 8000306:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030e:	bfc1      	itttt	gt
 8000310:	18d2      	addgt	r2, r2, r3
 8000312:	4041      	eorgt	r1, r0
 8000314:	4048      	eorgt	r0, r1
 8000316:	4041      	eorgt	r1, r0
 8000318:	bfb8      	it	lt
 800031a:	425b      	neglt	r3, r3
 800031c:	2b19      	cmp	r3, #25
 800031e:	bf88      	it	hi
 8000320:	4770      	bxhi	lr
 8000322:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4240      	negne	r0, r0
 8000332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000336:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800033a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4249      	negne	r1, r1
 8000342:	ea92 0f03 	teq	r2, r3
 8000346:	d03f      	beq.n	80003c8 <__addsf3+0xd8>
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
 800034c:	fa41 fc03 	asr.w	ip, r1, r3
 8000350:	eb10 000c 	adds.w	r0, r0, ip
 8000354:	f1c3 0320 	rsb	r3, r3, #32
 8000358:	fa01 f103 	lsl.w	r1, r1, r3
 800035c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000360:	d502      	bpl.n	8000368 <__addsf3+0x78>
 8000362:	4249      	negs	r1, r1
 8000364:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800036c:	d313      	bcc.n	8000396 <__addsf3+0xa6>
 800036e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000372:	d306      	bcc.n	8000382 <__addsf3+0x92>
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	ea4f 0131 	mov.w	r1, r1, rrx
 800037a:	f102 0201 	add.w	r2, r2, #1
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	d251      	bcs.n	8000426 <__addsf3+0x136>
 8000382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000386:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038a:	bf08      	it	eq
 800038c:	f020 0001 	biceq.w	r0, r0, #1
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	4770      	bx	lr
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	eb40 0000 	adc.w	r0, r0, r0
 800039c:	3a01      	subs	r2, #1
 800039e:	bf28      	it	cs
 80003a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a4:	d2ed      	bcs.n	8000382 <__addsf3+0x92>
 80003a6:	fab0 fc80 	clz	ip, r0
 80003aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ae:	ebb2 020c 	subs.w	r2, r2, ip
 80003b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b6:	bfaa      	itet	ge
 80003b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003bc:	4252      	neglt	r2, r2
 80003be:	4318      	orrge	r0, r3
 80003c0:	bfbc      	itt	lt
 80003c2:	40d0      	lsrlt	r0, r2
 80003c4:	4318      	orrlt	r0, r3
 80003c6:	4770      	bx	lr
 80003c8:	f092 0f00 	teq	r2, #0
 80003cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d0:	bf06      	itte	eq
 80003d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d6:	3201      	addeq	r2, #1
 80003d8:	3b01      	subne	r3, #1
 80003da:	e7b5      	b.n	8000348 <__addsf3+0x58>
 80003dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e4:	bf18      	it	ne
 80003e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ea:	d021      	beq.n	8000430 <__addsf3+0x140>
 80003ec:	ea92 0f03 	teq	r2, r3
 80003f0:	d004      	beq.n	80003fc <__addsf3+0x10c>
 80003f2:	f092 0f00 	teq	r2, #0
 80003f6:	bf08      	it	eq
 80003f8:	4608      	moveq	r0, r1
 80003fa:	4770      	bx	lr
 80003fc:	ea90 0f01 	teq	r0, r1
 8000400:	bf1c      	itt	ne
 8000402:	2000      	movne	r0, #0
 8000404:	4770      	bxne	lr
 8000406:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800040a:	d104      	bne.n	8000416 <__addsf3+0x126>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	bf28      	it	cs
 8000410:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000414:	4770      	bx	lr
 8000416:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800041a:	bf3c      	itt	cc
 800041c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000420:	4770      	bxcc	lr
 8000422:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000426:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800042a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042e:	4770      	bx	lr
 8000430:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000434:	bf16      	itet	ne
 8000436:	4608      	movne	r0, r1
 8000438:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800043c:	4601      	movne	r1, r0
 800043e:	0242      	lsls	r2, r0, #9
 8000440:	bf06      	itte	eq
 8000442:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000446:	ea90 0f01 	teqeq	r0, r1
 800044a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044e:	4770      	bx	lr

08000450 <__aeabi_ui2f>:
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e004      	b.n	8000460 <__aeabi_i2f+0x8>
 8000456:	bf00      	nop

08000458 <__aeabi_i2f>:
 8000458:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800045c:	bf48      	it	mi
 800045e:	4240      	negmi	r0, r0
 8000460:	ea5f 0c00 	movs.w	ip, r0
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800046c:	4601      	mov	r1, r0
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	e01c      	b.n	80004ae <__aeabi_l2f+0x2a>

08000474 <__aeabi_ul2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e00a      	b.n	8000498 <__aeabi_l2f+0x14>
 8000482:	bf00      	nop

08000484 <__aeabi_l2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000490:	d502      	bpl.n	8000498 <__aeabi_l2f+0x14>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	ea5f 0c01 	movs.w	ip, r1
 800049c:	bf02      	ittt	eq
 800049e:	4684      	moveq	ip, r0
 80004a0:	4601      	moveq	r1, r0
 80004a2:	2000      	moveq	r0, #0
 80004a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a8:	bf08      	it	eq
 80004aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004b2:	fabc f28c 	clz	r2, ip
 80004b6:	3a08      	subs	r2, #8
 80004b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004bc:	db10      	blt.n	80004e0 <__aeabi_l2f+0x5c>
 80004be:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	fa20 f202 	lsr.w	r2, r0, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	f020 0001 	biceq.w	r0, r0, #1
 80004de:	4770      	bx	lr
 80004e0:	f102 0220 	add.w	r2, r2, #32
 80004e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e8:	f1c2 0220 	rsb	r2, r2, #32
 80004ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f0:	fa21 f202 	lsr.w	r2, r1, r2
 80004f4:	eb43 0002 	adc.w	r0, r3, r2
 80004f8:	bf08      	it	eq
 80004fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fe:	4770      	bx	lr

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b96e 	b.w	80007f4 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	468e      	mov	lr, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8083 	bne.w	8000648 <__udivmoddi4+0x118>
 8000542:	428a      	cmp	r2, r1
 8000544:	4617      	mov	r7, r2
 8000546:	d947      	bls.n	80005d8 <__udivmoddi4+0xa8>
 8000548:	fab2 f382 	clz	r3, r2
 800054c:	b14b      	cbz	r3, 8000562 <__udivmoddi4+0x32>
 800054e:	f1c3 0120 	rsb	r1, r3, #32
 8000552:	fa05 fe03 	lsl.w	lr, r5, r3
 8000556:	fa20 f101 	lsr.w	r1, r0, r1
 800055a:	409f      	lsls	r7, r3
 800055c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000560:	409c      	lsls	r4, r3
 8000562:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000566:	fbbe fcf8 	udiv	ip, lr, r8
 800056a:	fa1f f987 	uxth.w	r9, r7
 800056e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000572:	fb0c f009 	mul.w	r0, ip, r9
 8000576:	0c21      	lsrs	r1, r4, #16
 8000578:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800057c:	4290      	cmp	r0, r2
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x66>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000586:	f080 8118 	bcs.w	80007ba <__udivmoddi4+0x28a>
 800058a:	4290      	cmp	r0, r2
 800058c:	f240 8115 	bls.w	80007ba <__udivmoddi4+0x28a>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	443a      	add	r2, r7
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f8 	udiv	r0, r2, r8
 800059c:	fb08 2210 	mls	r2, r8, r0, r2
 80005a0:	fb00 f109 	mul.w	r1, r0, r9
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	d909      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	f080 8103 	bcs.w	80007be <__udivmoddi4+0x28e>
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	f240 8100 	bls.w	80007be <__udivmoddi4+0x28e>
 80005be:	3802      	subs	r0, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	1a64      	subs	r4, r4, r1
 80005c4:	2100      	movs	r1, #0
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	b11e      	cbz	r6, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	2200      	movs	r2, #0
 80005ce:	40dc      	lsrs	r4, r3
 80005d0:	e9c6 4200 	strd	r4, r2, [r6]
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xac>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f382 	clz	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d14f      	bne.n	8000684 <__udivmoddi4+0x154>
 80005e4:	1a8d      	subs	r5, r1, r2
 80005e6:	2101      	movs	r1, #1
 80005e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005ec:	fa1f f882 	uxth.w	r8, r2
 80005f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80005f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80005f8:	fb08 f00c 	mul.w	r0, r8, ip
 80005fc:	0c22      	lsrs	r2, r4, #16
 80005fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000602:	42a8      	cmp	r0, r5
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0xe6>
 8000606:	197d      	adds	r5, r7, r5
 8000608:	f10c 32ff 	add.w	r2, ip, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0xe4>
 800060e:	42a8      	cmp	r0, r5
 8000610:	f200 80e9 	bhi.w	80007e6 <__udivmoddi4+0x2b6>
 8000614:	4694      	mov	ip, r2
 8000616:	1a2d      	subs	r5, r5, r0
 8000618:	fbb5 f0fe 	udiv	r0, r5, lr
 800061c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000620:	fb08 f800 	mul.w	r8, r8, r0
 8000624:	b2a4      	uxth	r4, r4
 8000626:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800062a:	45a0      	cmp	r8, r4
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x10e>
 800062e:	193c      	adds	r4, r7, r4
 8000630:	f100 32ff 	add.w	r2, r0, #4294967295
 8000634:	d202      	bcs.n	800063c <__udivmoddi4+0x10c>
 8000636:	45a0      	cmp	r8, r4
 8000638:	f200 80d9 	bhi.w	80007ee <__udivmoddi4+0x2be>
 800063c:	4610      	mov	r0, r2
 800063e:	eba4 0408 	sub.w	r4, r4, r8
 8000642:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000646:	e7c0      	b.n	80005ca <__udivmoddi4+0x9a>
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x12e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	f000 80b1 	beq.w	80007b4 <__udivmoddi4+0x284>
 8000652:	2100      	movs	r1, #0
 8000654:	e9c6 0500 	strd	r0, r5, [r6]
 8000658:	4608      	mov	r0, r1
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	fab3 f183 	clz	r1, r3
 8000662:	2900      	cmp	r1, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0x1ce>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d302      	bcc.n	8000670 <__udivmoddi4+0x140>
 800066a:	4282      	cmp	r2, r0
 800066c:	f200 80b9 	bhi.w	80007e2 <__udivmoddi4+0x2b2>
 8000670:	1a84      	subs	r4, r0, r2
 8000672:	eb65 0303 	sbc.w	r3, r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	469e      	mov	lr, r3
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0aa      	beq.n	80005d4 <__udivmoddi4+0xa4>
 800067e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000682:	e7a7      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000684:	409f      	lsls	r7, r3
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	40d1      	lsrs	r1, r2
 800068c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000690:	fbb1 f0fe 	udiv	r0, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1110 	mls	r1, lr, r0, r1
 800069c:	fa24 f202 	lsr.w	r2, r4, r2
 80006a0:	409d      	lsls	r5, r3
 80006a2:	fb00 fc08 	mul.w	ip, r0, r8
 80006a6:	432a      	orrs	r2, r5
 80006a8:	0c15      	lsrs	r5, r2, #16
 80006aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	fa04 f403 	lsl.w	r4, r4, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x19a>
 80006b6:	197d      	adds	r5, r7, r5
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	f080 808f 	bcs.w	80007de <__udivmoddi4+0x2ae>
 80006c0:	45ac      	cmp	ip, r5
 80006c2:	f240 808c 	bls.w	80007de <__udivmoddi4+0x2ae>
 80006c6:	3802      	subs	r0, #2
 80006c8:	443d      	add	r5, r7
 80006ca:	eba5 050c 	sub.w	r5, r5, ip
 80006ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80006d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80006d6:	fb01 f908 	mul.w	r9, r1, r8
 80006da:	b295      	uxth	r5, r2
 80006dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006e0:	45a9      	cmp	r9, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x1c4>
 80006e4:	197d      	adds	r5, r7, r5
 80006e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80006ea:	d274      	bcs.n	80007d6 <__udivmoddi4+0x2a6>
 80006ec:	45a9      	cmp	r9, r5
 80006ee:	d972      	bls.n	80007d6 <__udivmoddi4+0x2a6>
 80006f0:	3902      	subs	r1, #2
 80006f2:	443d      	add	r5, r7
 80006f4:	eba5 0509 	sub.w	r5, r5, r9
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e778      	b.n	80005f0 <__udivmoddi4+0xc0>
 80006fe:	f1c1 0720 	rsb	r7, r1, #32
 8000702:	408b      	lsls	r3, r1
 8000704:	fa22 fc07 	lsr.w	ip, r2, r7
 8000708:	ea4c 0c03 	orr.w	ip, ip, r3
 800070c:	fa25 f407 	lsr.w	r4, r5, r7
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fbb4 f9fe 	udiv	r9, r4, lr
 8000718:	fa1f f88c 	uxth.w	r8, ip
 800071c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000720:	fa20 f307 	lsr.w	r3, r0, r7
 8000724:	fb09 fa08 	mul.w	sl, r9, r8
 8000728:	408d      	lsls	r5, r1
 800072a:	431d      	orrs	r5, r3
 800072c:	0c2b      	lsrs	r3, r5, #16
 800072e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000732:	45a2      	cmp	sl, r4
 8000734:	fa02 f201 	lsl.w	r2, r2, r1
 8000738:	fa00 f301 	lsl.w	r3, r0, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0x222>
 800073e:	eb1c 0404 	adds.w	r4, ip, r4
 8000742:	f109 30ff 	add.w	r0, r9, #4294967295
 8000746:	d248      	bcs.n	80007da <__udivmoddi4+0x2aa>
 8000748:	45a2      	cmp	sl, r4
 800074a:	d946      	bls.n	80007da <__udivmoddi4+0x2aa>
 800074c:	f1a9 0902 	sub.w	r9, r9, #2
 8000750:	4464      	add	r4, ip
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	fbb4 f0fe 	udiv	r0, r4, lr
 800075a:	fb0e 4410 	mls	r4, lr, r0, r4
 800075e:	fb00 fa08 	mul.w	sl, r0, r8
 8000762:	b2ad      	uxth	r5, r5
 8000764:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000768:	45a2      	cmp	sl, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x24e>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 35ff 	add.w	r5, r0, #4294967295
 8000774:	d22d      	bcs.n	80007d2 <__udivmoddi4+0x2a2>
 8000776:	45a2      	cmp	sl, r4
 8000778:	d92b      	bls.n	80007d2 <__udivmoddi4+0x2a2>
 800077a:	3802      	subs	r0, #2
 800077c:	4464      	add	r4, ip
 800077e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000782:	fba0 8902 	umull	r8, r9, r0, r2
 8000786:	eba4 040a 	sub.w	r4, r4, sl
 800078a:	454c      	cmp	r4, r9
 800078c:	46c6      	mov	lr, r8
 800078e:	464d      	mov	r5, r9
 8000790:	d319      	bcc.n	80007c6 <__udivmoddi4+0x296>
 8000792:	d016      	beq.n	80007c2 <__udivmoddi4+0x292>
 8000794:	b15e      	cbz	r6, 80007ae <__udivmoddi4+0x27e>
 8000796:	ebb3 020e 	subs.w	r2, r3, lr
 800079a:	eb64 0405 	sbc.w	r4, r4, r5
 800079e:	fa04 f707 	lsl.w	r7, r4, r7
 80007a2:	fa22 f301 	lsr.w	r3, r2, r1
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	e9c6 7400 	strd	r7, r4, [r6]
 80007ae:	2100      	movs	r1, #0
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	4631      	mov	r1, r6
 80007b6:	4630      	mov	r0, r6
 80007b8:	e70c      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007ba:	468c      	mov	ip, r1
 80007bc:	e6eb      	b.n	8000596 <__udivmoddi4+0x66>
 80007be:	4610      	mov	r0, r2
 80007c0:	e6ff      	b.n	80005c2 <__udivmoddi4+0x92>
 80007c2:	4543      	cmp	r3, r8
 80007c4:	d2e6      	bcs.n	8000794 <__udivmoddi4+0x264>
 80007c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80007ca:	eb69 050c 	sbc.w	r5, r9, ip
 80007ce:	3801      	subs	r0, #1
 80007d0:	e7e0      	b.n	8000794 <__udivmoddi4+0x264>
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7d3      	b.n	800077e <__udivmoddi4+0x24e>
 80007d6:	4611      	mov	r1, r2
 80007d8:	e78c      	b.n	80006f4 <__udivmoddi4+0x1c4>
 80007da:	4681      	mov	r9, r0
 80007dc:	e7b9      	b.n	8000752 <__udivmoddi4+0x222>
 80007de:	4608      	mov	r0, r1
 80007e0:	e773      	b.n	80006ca <__udivmoddi4+0x19a>
 80007e2:	4608      	mov	r0, r1
 80007e4:	e749      	b.n	800067a <__udivmoddi4+0x14a>
 80007e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80007ea:	443d      	add	r5, r7
 80007ec:	e713      	b.n	8000616 <__udivmoddi4+0xe6>
 80007ee:	3802      	subs	r0, #2
 80007f0:	443c      	add	r4, r7
 80007f2:	e724      	b.n	800063e <__udivmoddi4+0x10e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <store_char>:
  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	3301      	adds	r3, #1
 800080a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800080e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d007      	beq.n	800082a <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	79f9      	ldrb	r1, [r7, #7]
 8000822:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	2b00      	cmp	r3, #0
 8000854:	d013      	beq.n	800087e <Uart_isr+0x4a>
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00e      	beq.n	800087e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <Uart_isr+0xac>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	4611      	mov	r1, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffbe 	bl	80007f8 <store_char>
        return;
 800087c:	e02c      	b.n	80008d8 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000884:	2b00      	cmp	r3, #0
 8000886:	d027      	beq.n	80008d8 <Uart_isr+0xa4>
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <Uart_isr+0xb0>)
 8000894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <Uart_isr+0xb0>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	429a      	cmp	r2, r3
 800089c:	d108      	bne.n	80008b0 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	68da      	ldr	r2, [r3, #12]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008ac:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80008ae:	e012      	b.n	80008d6 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <Uart_isr+0xb0>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <Uart_isr+0xb0>)
 80008b6:	5cd3      	ldrb	r3, [r2, r3]
 80008b8:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <Uart_isr+0xb0>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	3301      	adds	r3, #1
 80008c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <Uart_isr+0xb0>)
 80008c6:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	7bba      	ldrb	r2, [r7, #14]
 80008d4:	605a      	str	r2, [r3, #4]
    	return;
 80008d6:	bf00      	nop
    }
}
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000100 	.word	0x20000100
 80008e4:	20000070 	.word	0x20000070

080008e8 <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e01f      	b.n	800093a <selectMux+0x52>
		if (pin & (i << 1)) {
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005a      	lsls	r2, r3, #1
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	4013      	ands	r3, r2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00b      	beq.n	800091e <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4413      	add	r3, r2
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <selectMux+0x64>)
 8000918:	f001 fe34 	bl	8002584 <HAL_GPIO_WritePin>
 800091c:	e00a      	b.n	8000934 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	4413      	add	r3, r2
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	b29b      	uxth	r3, r3
 800092a:	2200      	movs	r2, #0
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <selectMux+0x64>)
 8000930:	f001 fe28 	bl	8002584 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b02      	cmp	r3, #2
 800093e:	dddc      	ble.n	80008fa <selectMux+0x12>
		}
	}
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020000 	.word	0x40020000

08000950 <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	b29b      	uxth	r3, r3
 800095e:	2200      	movs	r2, #0
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f001 fe0e 	bl	8002584 <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <disableMux>:

void disableMux(GPIO_TypeDef *type, int pin) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b29b      	uxth	r3, r3
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f001 fdfe 	bl	8002584 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ADC_Select_CH3>:

void logSDCard(char* print_statement) {
	// TODO
}

void ADC_Select_CH3(void) { // Used for 3V3
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <ADC_Select_CH3+0x38>)
 80009b2:	f001 f8e1 	bl	8001b78 <HAL_ADC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <ADC_Select_CH3+0x30>
  {
	Error_Handler();
 80009bc:	f000 fbbe 	bl	800113c <Error_Handler>
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001b0 	.word	0x200001b0

080009cc <ADC_Select_CH9>:

void ADC_Select_CH9(void) { // Used for sense mux
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  ADC_ChannelConfTypeDef sConfig = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_9;
 80009dc:	2309      	movs	r3, #9
 80009de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <ADC_Select_CH9+0x38>)
 80009ee:	f001 f8c3 	bl	8001b78 <HAL_ADC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <ADC_Select_CH9+0x30>
  {
	Error_Handler();
 80009f8:	f000 fba0 	bl	800113c <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001b0 	.word	0x200001b0

08000a08 <read3V3>:

float read3V3() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  ADC_Select_CH3();
 8000a0e:	f7ff ffbf 	bl	8000990 <ADC_Select_CH3>
  HAL_ADC_Start(&hadc);
 8000a12:	4811      	ldr	r0, [pc, #68]	; (8000a58 <read3V3+0x50>)
 8000a14:	f000 ff88 	bl	8001928 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <read3V3+0x50>)
 8000a1e:	f001 f80f 	bl	8001a40 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc) * ADC_VOLTAGE_CONVERSION;
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <read3V3+0x50>)
 8000a24:	f001 f89c 	bl	8001b60 <HAL_ADC_GetValue>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fd10 	bl	8000450 <__aeabi_ui2f>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <read3V3+0x54>)
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fba0 	bl	800017c <__aeabi_fmul>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <read3V3+0x50>)
 8000a42:	f000 ffd1 	bl	80019e8 <HAL_ADC_Stop>
  HAL_Delay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f000 fe06 	bl	8001658 <HAL_Delay>
  return data;
 8000a4c:	687b      	ldr	r3, [r7, #4]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001b0 	.word	0x200001b0
 8000a5c:	3a533334 	.word	0x3a533334

08000a60 <readPressure>:

int readPressure() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  ADC_Select_CH9();
 8000a66:	f7ff ffb1 	bl	80009cc <ADC_Select_CH9>
  HAL_ADC_Start(&hadc);
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <readPressure+0x34>)
 8000a6c:	f000 ff5c 	bl	8001928 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <readPressure+0x34>)
 8000a76:	f000 ffe3 	bl	8001a40 <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <readPressure+0x34>)
 8000a7c:	f001 f870 	bl	8001b60 <HAL_ADC_GetValue>
 8000a80:	4603      	mov	r3, r0
 8000a82:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <readPressure+0x34>)
 8000a86:	f000 ffaf 	bl	80019e8 <HAL_ADC_Stop>
  return data;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001b0 	.word	0x200001b0

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 fd6a 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f969 	bl	8000d7c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000aaa:	4bab      	ldr	r3, [pc, #684]	; (8000d58 <main+0x2c0>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab0:	f000 fa84 	bl	8000fbc <MX_GPIO_Init>
  MX_ADC_Init();
 8000ab4:	f000 f9b2 	bl	8000e1c <MX_ADC_Init>
  MX_I2C1_Init();
 8000ab8:	f000 f9f2 	bl	8000ea0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000abc:	f000 fa1e 	bl	8000efc <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000ac0:	f000 fa52 	bl	8000f68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	48a4      	ldr	r0, [pc, #656]	; (8000d5c <main+0x2c4>)
 8000aca:	f001 fd5b 	bl	8002584 <HAL_GPIO_WritePin>
//  printf("Initialization complete \r\n");

  int init_cnt = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ad4:	f102 021c 	add.w	r2, r2, #28
 8000ad8:	6013      	str	r3, [r2, #0]
  while (init_cnt < 4) {
 8000ada:	e016      	b.n	8000b0a <main+0x72>
	  init_cnt++;
 8000adc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ae0:	f103 031c 	add.w	r3, r3, #28
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000aec:	f102 021c 	add.w	r2, r2, #28
 8000af0:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af8:	4898      	ldr	r0, [pc, #608]	; (8000d5c <main+0x2c4>)
 8000afa:	f001 fd43 	bl	8002584 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	4895      	ldr	r0, [pc, #596]	; (8000d5c <main+0x2c4>)
 8000b06:	f001 fd3d 	bl	8002584 <HAL_GPIO_WritePin>
  while (init_cnt < 4) {
 8000b0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b0e:	f103 031c 	add.w	r3, r3, #28
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	dde1      	ble.n	8000adc <main+0x44>
  }

  ITM_Port32(31) = 2;
 8000b18:	4b8f      	ldr	r3, [pc, #572]	; (8000d58 <main+0x2c0>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	601a      	str	r2, [r3, #0]

//  int voltage_thresh_count = 0;
  int pressure_data[NUM_NODES] = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	3b20      	subs	r3, #32
 8000b24:	4618      	mov	r0, r3
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f004 fed7 	bl	80058e0 <memset>
  int array_cnt = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b38:	f102 0218 	add.w	r2, r2, #24
 8000b3c:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read3V3();
 8000b3e:	f7ff ff63 	bl	8000a08 <read3V3>
//		  exit(EXIT_SUCCESS);
//	}

	// TODO: setup timer to read from SD card and send to database

	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b48:	f102 0214 	add.w	r2, r2, #20
 8000b4c:	6013      	str	r3, [r2, #0]
 8000b4e:	e0eb      	b.n	8000d28 <main+0x290>
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8000b50:	4a83      	ldr	r2, [pc, #524]	; (8000d60 <main+0x2c8>)
 8000b52:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b56:	f103 0314 	add.w	r3, r3, #20
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b60:	4980      	ldr	r1, [pc, #512]	; (8000d64 <main+0x2cc>)
 8000b62:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b66:	f103 0314 	add.w	r3, r3, #20
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f7ff feec 	bl	8000950 <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b7e:	f102 0210 	add.w	r2, r2, #16
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e0a9      	b.n	8000cda <main+0x242>
			selectMux(pwr_sel, pwrMuxSelect, 4);
 8000b86:	2204      	movs	r2, #4
 8000b88:	4977      	ldr	r1, [pc, #476]	; (8000d68 <main+0x2d0>)
 8000b8a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b8e:	f103 0310 	add.w	r3, r3, #16
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	f7ff fea8 	bl	80008e8 <selectMux>
			// TODO: Timer for 3v3 checking
//			if (belowVoltageThresh()) { // ADC channel for 3v3 sense
//				voltage_thresh_count++;
//			}

			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b9e:	f102 020c 	add.w	r2, r2, #12
 8000ba2:	6013      	str	r3, [r2, #0]
 8000ba4:	e086      	b.n	8000cb4 <main+0x21c>
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8000ba6:	4a71      	ldr	r2, [pc, #452]	; (8000d6c <main+0x2d4>)
 8000ba8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bac:	f103 030c 	add.w	r3, r3, #12
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bb6:	496e      	ldr	r1, [pc, #440]	; (8000d70 <main+0x2d8>)
 8000bb8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bbc:	f103 030c 	add.w	r3, r3, #12
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4610      	mov	r0, r2
 8000bca:	f7ff fec1 	bl	8000950 <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000bd4:	f102 0208 	add.w	r2, r2, #8
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	e045      	b.n	8000c68 <main+0x1d0>
					selectMux(sense_sel, senseMuxSelect, 8);
 8000bdc:	2208      	movs	r2, #8
 8000bde:	4965      	ldr	r1, [pc, #404]	; (8000d74 <main+0x2dc>)
 8000be0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000be4:	f103 0308 	add.w	r3, r3, #8
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	f7ff fe7d 	bl	80008e8 <selectMux>

					// Read voltage sense
					int raw_ADC_pressure = readPressure(); // ADC channel for voltage
 8000bee:	f7ff ff37 	bl	8000a60 <readPressure>
 8000bf2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000bf6:	f103 0304 	add.w	r3, r3, #4
 8000bfa:	6018      	str	r0, [r3, #0]
					float test_voltage = raw_ADC_pressure * ADC_VOLTAGE_CONVERSION;
 8000bfc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c00:	f103 0304 	add.w	r3, r3, #4
 8000c04:	6818      	ldr	r0, [r3, #0]
 8000c06:	f7ff fc27 	bl	8000458 <__aeabi_i2f>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a5a      	ldr	r2, [pc, #360]	; (8000d78 <main+0x2e0>)
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fab3 	bl	800017c <__aeabi_fmul>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000c1c:	6013      	str	r3, [r2, #0]
//					printf("raw pressure voltage: %d", raw_pressure_voltage);
					pressure_data[array_cnt] = raw_ADC_pressure;
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	3b20      	subs	r3, #32
 8000c24:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000c28:	f102 0218 	add.w	r2, r2, #24
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8000c32:	f101 0104 	add.w	r1, r1, #4
 8000c36:	6809      	ldr	r1, [r1, #0]
 8000c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
					array_cnt++;
 8000c3c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c40:	f103 0318 	add.w	r3, r3, #24
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000c4c:	f102 0218 	add.w	r2, r2, #24
 8000c50:	6013      	str	r3, [r2, #0]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000c52:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c56:	f103 0308 	add.w	r3, r3, #8
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000c62:	f102 0208 	add.w	r2, r2, #8
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c6c:	f103 0308 	add.w	r3, r3, #8
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb2      	ble.n	8000bdc <main+0x144>
					// TODO: write to SD card
				}
				disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8000c76:	4a3d      	ldr	r2, [pc, #244]	; (8000d6c <main+0x2d4>)
 8000c78:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c7c:	f103 030c 	add.w	r3, r3, #12
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c86:	493a      	ldr	r1, [pc, #232]	; (8000d70 <main+0x2d8>)
 8000c88:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000c8c:	f103 030c 	add.w	r3, r3, #12
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4610      	mov	r0, r2
 8000c9a:	f7ff fe69 	bl	8000970 <disableMux>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000c9e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ca2:	f103 030c 	add.w	r3, r3, #12
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000cae:	f102 020c 	add.w	r2, r2, #12
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cb8:	f103 030c 	add.w	r3, r3, #12
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	f77f af71 	ble.w	8000ba6 <main+0x10e>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000cc4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cc8:	f103 0310 	add.w	r3, r3, #16
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000cd4:	f102 0210 	add.w	r2, r2, #16
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cde:	f103 0310 	add.w	r3, r3, #16
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	f77f af4e 	ble.w	8000b86 <main+0xee>
			}
		}
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8000cea:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <main+0x2c8>)
 8000cec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000cf0:	f103 0314 	add.w	r3, r3, #20
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cfa:	491a      	ldr	r1, [pc, #104]	; (8000d64 <main+0x2cc>)
 8000cfc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d00:	f103 0314 	add.w	r3, r3, #20
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	f7ff fe2f 	bl	8000970 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000d12:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d16:	f103 0314 	add.w	r3, r3, #20
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000d22:	f102 0214 	add.w	r2, r2, #20
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000d2c:	f103 0314 	add.w	r3, r3, #20
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	f77f af0c 	ble.w	8000b50 <main+0xb8>
	 }
//	printf("array cnt: %d", array_cnt);
	array_cnt = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000d3e:	f102 0218 	add.w	r2, r2, #24
 8000d42:	6013      	str	r3, [r2, #0]
	memset(pressure_data, 0, sizeof(pressure_data));
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	3b20      	subs	r3, #32
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fdc5 	bl	80058e0 <memset>
	read3V3();
 8000d56:	e6f2      	b.n	8000b3e <main+0xa6>
 8000d58:	e000007c 	.word	0xe000007c
 8000d5c:	40020800 	.word	0x40020800
 8000d60:	20000000 	.word	0x20000000
 8000d64:	08005908 	.word	0x08005908
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	20000028 	.word	0x20000028
 8000d70:	08005918 	.word	0x08005918
 8000d74:	20000010 	.word	0x20000010
 8000d78:	3a533334 	.word	0x3a533334

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b092      	sub	sp, #72	; 0x48
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fda8 	bl	80058e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <SystemClock_Config+0x9c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000da6:	4a1c      	ldr	r2, [pc, #112]	; (8000e18 <SystemClock_Config+0x9c>)
 8000da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dac:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000dae:	2303      	movs	r3, #3
 8000db0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db6:	2301      	movs	r3, #1
 8000db8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f003 f9f2 	bl	80041c0 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000de2:	f000 f9ab 	bl	800113c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2303      	movs	r3, #3
 8000dec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fd0e 	bl	8004820 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e0a:	f000 f997 	bl	800113c <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3748      	adds	r7, #72	; 0x48
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40007000 	.word	0x40007000

08000e1c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e22:	4a1e      	ldr	r2, [pc, #120]	; (8000e9c <MX_ADC_Init+0x80>)
 8000e24:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e38:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e70:	2210      	movs	r2, #16
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_ADC_Init+0x7c>)
 8000e84:	f000 fc0a 	bl	800169c <HAL_ADC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8000e8e:	f000 f955 	bl	800113c <Error_Handler>
//  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001b0 	.word	0x200001b0
 8000e9c:	40012400 	.word	0x40012400

08000ea0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_I2C1_Init+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_I2C1_Init+0x58>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_I2C1_Init+0x50>)
 8000ede:	f001 fb69 	bl	80025b4 <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 f928 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000015c 	.word	0x2000015c
 8000ef4:	40005400 	.word	0x40005400
 8000ef8:	000186a0 	.word	0x000186a0

08000efc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f02:	4a18      	ldr	r2, [pc, #96]	; (8000f64 <MX_SPI2_Init+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f06:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f40:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f48:	220a      	movs	r2, #10
 8000f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <MX_SPI2_Init+0x64>)
 8000f4e:	f003 fed3 	bl	8004cf8 <HAL_SPI_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f58:	f000 f8f0 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000104 	.word	0x20000104
 8000f64:	40003800 	.word	0x40003800

08000f68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <MX_USART3_UART_Init+0x50>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART3_UART_Init+0x4c>)
 8000fa0:	f004 f829 	bl	8004ff6 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000faa:	f000 f8c7 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000b8 	.word	0x200000b8
 8000fb8:	40004800 	.word	0x40004800

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b55      	ldr	r3, [pc, #340]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a54      	ldr	r2, [pc, #336]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b52      	ldr	r3, [pc, #328]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a4e      	ldr	r2, [pc, #312]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b4c      	ldr	r3, [pc, #304]	; (8001128 <MX_GPIO_Init+0x16c>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b49      	ldr	r3, [pc, #292]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	4a48      	ldr	r2, [pc, #288]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	61d3      	str	r3, [r2, #28]
 800100e:	4b46      	ldr	r3, [pc, #280]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b43      	ldr	r3, [pc, #268]	; (8001128 <MX_GPIO_Init+0x16c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a42      	ldr	r2, [pc, #264]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	4a3c      	ldr	r2, [pc, #240]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	61d3      	str	r3, [r2, #28]
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_GPIO_Init+0x16c>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 800104a:	2200      	movs	r2, #0
 800104c:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001050:	4836      	ldr	r0, [pc, #216]	; (800112c <MX_GPIO_Init+0x170>)
 8001052:	f001 fa97 	bl	8002584 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001056:	2200      	movs	r2, #0
 8001058:	f241 01f7 	movw	r1, #4343	; 0x10f7
 800105c:	4834      	ldr	r0, [pc, #208]	; (8001130 <MX_GPIO_Init+0x174>)
 800105e:	f001 fa91 	bl	8002584 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8001062:	2200      	movs	r2, #0
 8001064:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001068:	4832      	ldr	r0, [pc, #200]	; (8001134 <MX_GPIO_Init+0x178>)
 800106a:	f001 fa8b 	bl	8002584 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	2104      	movs	r1, #4
 8001072:	4831      	ldr	r0, [pc, #196]	; (8001138 <MX_GPIO_Init+0x17c>)
 8001074:	f001 fa86 	bl	8002584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001078:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 800107c:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4826      	ldr	r0, [pc, #152]	; (800112c <MX_GPIO_Init+0x170>)
 8001092:	f001 f8f7 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001096:	f241 03f7 	movw	r3, #4343	; 0x10f7
 800109a:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <MX_GPIO_Init+0x174>)
 80010b0:	f001 f8e8 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80010b4:	f641 4365 	movw	r3, #7269	; 0x1c65
 80010b8:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <MX_GPIO_Init+0x178>)
 80010ce:	f001 f8d9 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_GPIO_Init+0x170>)
 80010e6:	f001 f8cd 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_GPIO_Init+0x174>)
 8001100:	f001 f8c0 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001104:	2304      	movs	r3, #4
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <MX_GPIO_Init+0x17c>)
 800111c:	f001 f8b2 	bl	8002284 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020c00 	.word	0x40020c00

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_MspInit+0x68>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_MspInit+0x68>)
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	6253      	str	r3, [r2, #36]	; 0x24
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_MspInit+0x68>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_MspInit+0x68>)
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_MspInit+0x68>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6213      	str	r3, [r2, #32]
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x68>)
 8001174:	6a1b      	ldr	r3, [r3, #32]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x68>)
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <HAL_MspInit+0x68>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6253      	str	r3, [r2, #36]	; 0x24
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x68>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2005      	movs	r0, #5
 800119c:	f000 ffb1 	bl	8002102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011a0:	2005      	movs	r0, #5
 80011a2:	f000 ffca 	bl	800213a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <HAL_ADC_MspInit+0xd4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d153      	bne.n	800127e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4a2c      	ldr	r2, [pc, #176]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e0:	6213      	str	r3, [r2, #32]
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ea:	61bb      	str	r3, [r7, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	4b27      	ldr	r3, [pc, #156]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a26      	ldr	r2, [pc, #152]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_ADC_MspInit+0xd8>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <HAL_ADC_MspInit+0xd8>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_ADC_MspInit+0xd8>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b1e      	ldr	r3, [pc, #120]	; (800128c <HAL_ADC_MspInit+0xd8>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_ADC_MspInit+0xd8>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_ADC_MspInit+0xd8>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_ADC_MspInit+0xd8>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001236:	2304      	movs	r3, #4
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <HAL_ADC_MspInit+0xdc>)
 800124a:	f001 f81b 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_3V3_Pin;
 800124e:	2308      	movs	r3, #8
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_3V3_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <HAL_ADC_MspInit+0xe0>)
 8001262:	f001 f80f 	bl	8002284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 8001266:	2302      	movs	r3, #2
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <HAL_ADC_MspInit+0xe4>)
 800127a:	f001 f803 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800127e:	bf00      	nop
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40012400 	.word	0x40012400
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_I2C_MspInit+0x9c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d138      	bne.n	8001330 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 80012d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4813      	ldr	r0, [pc, #76]	; (8001340 <HAL_I2C_MspInit+0xa4>)
 80012f4:	f000 ffc6 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <HAL_I2C_MspInit+0xa0>)
 80012fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001302:	6253      	str	r3, [r2, #36]	; 0x24
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <HAL_I2C_MspInit+0xa0>)
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	201f      	movs	r0, #31
 8001316:	f000 fef4 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800131a:	201f      	movs	r0, #31
 800131c:	f000 ff0d 	bl	800213a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2020      	movs	r0, #32
 8001326:	f000 feec 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800132a:	2020      	movs	r0, #32
 800132c:	f000 ff05 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_SPI_MspInit+0x8c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d130      	bne.n	80013c8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6253      	str	r3, [r2, #36]	; 0x24
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_SPI_MspInit+0x90>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001396:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a8:	2305      	movs	r3, #5
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_SPI_MspInit+0x94>)
 80013b4:	f000 ff66 	bl	8002284 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	2024      	movs	r0, #36	; 0x24
 80013be:	f000 fea0 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80013c2:	2024      	movs	r0, #36	; 0x24
 80013c4:	f000 feb9 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40003800 	.word	0x40003800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_UART_MspInit+0x8c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d130      	bne.n	8001460 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_UART_MspInit+0x90>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_UART_MspInit+0x90>)
 8001404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001408:	6253      	str	r3, [r2, #36]	; 0x24
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_UART_MspInit+0x90>)
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_UART_MspInit+0x90>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_UART_MspInit+0x90>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	61d3      	str	r3, [r2, #28]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_UART_MspInit+0x90>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800142e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001440:	2307      	movs	r3, #7
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <HAL_UART_MspInit+0x94>)
 800144c:	f000 ff1a 	bl	8002284 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2027      	movs	r0, #39	; 0x27
 8001456:	f000 fe54 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800145a:	2027      	movs	r0, #39	; 0x27
 800145c:	f000 fe6d 	bl	800213a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40004800 	.word	0x40004800
 800146c:	40023800 	.word	0x40023800
 8001470:	40020800 	.word	0x40020800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f8b1 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <I2C1_EV_IRQHandler+0x10>)
 80014d6:	f001 f9b1 	bl	800283c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	2000015c 	.word	0x2000015c

080014e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <I2C1_ER_IRQHandler+0x10>)
 80014ea:	f001 fb18 	bl	8002b1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000015c 	.word	0x2000015c

080014f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <SPI2_IRQHandler+0x10>)
 80014fe:	f003 fc77 	bl	8004df0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000104 	.word	0x20000104

0800150c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001510:	4803      	ldr	r0, [pc, #12]	; (8001520 <USART3_IRQHandler+0x14>)
 8001512:	f7ff f98f 	bl	8000834 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001516:	4802      	ldr	r0, [pc, #8]	; (8001520 <USART3_IRQHandler+0x14>)
 8001518:	f003 fdba 	bl	8005090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000b8 	.word	0x200000b8

08001524 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001534:	4a0d      	ldr	r2, [pc, #52]	; (800156c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001556:	f7ff ffe5 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f004 f99d 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fa9b 	bl	8000a98 <main>
  bx lr
 8001562:	4770      	bx	lr
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800156c:	0800596c 	.word	0x0800596c
  ldr r2, =_sbss
 8001570:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001574:	20000208 	.word	0x20000208

08001578 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC1_IRQHandler>

0800157a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fdb1 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f80e 	bl	80015ac <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	e001      	b.n	80015a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800159c:	f7ff fdd4 	bl	8001148 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d022      	beq.n	8001606 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_InitTick+0x6c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_InitTick+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 fdbe 	bl	8002156 <HAL_SYSTICK_Config>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10f      	bne.n	8001600 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d809      	bhi.n	80015fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e6:	2200      	movs	r2, #0
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	f04f 30ff 	mov.w	r0, #4294967295
 80015ee:	f000 fd88 	bl	8002102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_InitTick+0x70>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	e007      	b.n	800160a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e004      	b.n	800160a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e001      	b.n	800160a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800160a:	7bfb      	ldrb	r3, [r7, #15]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000050 	.word	0x20000050
 8001618:	20000048 	.word	0x20000048
 800161c:	2000004c 	.word	0x2000004c

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <HAL_IncTick+0x1c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_IncTick+0x20>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4413      	add	r3, r2
 800162e:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x1c>)
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000204 	.word	0x20000204
 8001640:	20000050 	.word	0x20000050

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <HAL_GetTick+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000204 	.word	0x20000204

08001658 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff0 	bl	8001644 <HAL_GetTick>
 8001664:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001670:	d004      	beq.n	800167c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_Delay+0x40>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167c:	bf00      	nop
 800167e:	f7ff ffe1 	bl	8001644 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	429a      	cmp	r2, r3
 800168c:	d8f7      	bhi.n	800167e <HAL_Delay+0x26>
  {
  }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000050 	.word	0x20000050

0800169c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e127      	b.n	800190c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d8:	4b8e      	ldr	r3, [pc, #568]	; (8001914 <HAL_ADC_Init+0x278>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a8d      	ldr	r2, [pc, #564]	; (8001914 <HAL_ADC_Init+0x278>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b8b      	ldr	r3, [pc, #556]	; (8001914 <HAL_ADC_Init+0x278>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fd5f 	bl	80011b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80ff 	bne.w	8001902 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800170c:	f023 0302 	bic.w	r3, r3, #2
 8001710:	f043 0202 	orr.w	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001718:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_ADC_Init+0x27c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	497c      	ldr	r1, [pc, #496]	; (8001918 <HAL_ADC_Init+0x27c>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001732:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173a:	4619      	mov	r1, r3
 800173c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001740:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001742:	6a3b      	ldr	r3, [r7, #32]
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001756:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800175c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	2302      	movs	r3, #2
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	fab3 f383 	clz	r3, r3
 8001778:	b2db      	uxtb	r3, r3
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800177e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001782:	4313      	orrs	r3, r2
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	2b10      	cmp	r3, #16
 800178c:	d007      	beq.n	800179e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001796:	4313      	orrs	r3, r2
 8001798:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179a:	4313      	orrs	r3, r2
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017a8:	2b40      	cmp	r3, #64	; 0x40
 80017aa:	d04f      	beq.n	800184c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	4313      	orrs	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017be:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6912      	ldr	r2, [r2, #16]
 80017c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80017c8:	d003      	beq.n	80017d2 <HAL_ADC_Init+0x136>
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6912      	ldr	r2, [r2, #16]
 80017ce:	2a01      	cmp	r2, #1
 80017d0:	d102      	bne.n	80017d8 <HAL_ADC_Init+0x13c>
 80017d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0x13e>
 80017d8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80017da:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80017dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017de:	4313      	orrs	r3, r2
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d125      	bne.n	8001838 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	3b01      	subs	r3, #1
 80017fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001800:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	617a      	str	r2, [r7, #20]
  return result;
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	4093      	lsls	r3, r2
 8001814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181a:	4313      	orrs	r3, r2
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
 800181e:	e00b      	b.n	8001838 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001824:	f043 0220 	orr.w	r2, r3, #32
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_ADC_Init+0x280>)
 8001840:	4013      	ands	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001848:	430b      	orrs	r3, r1
 800184a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_ADC_Init+0x284>)
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800185c:	430b      	orrs	r3, r1
 800185e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001868:	d003      	beq.n	8001872 <HAL_ADC_Init+0x1d6>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d119      	bne.n	80018a6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	3b01      	subs	r3, #1
 8001882:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001886:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	fa92 f2a2 	rbit	r2, r2
 800188e:	60fa      	str	r2, [r7, #12]
  return result;
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	fab2 f282 	clz	r2, r2
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	fa03 f202 	lsl.w	r2, r3, r2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
 80018a4:	e007      	b.n	80018b6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80018b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_ADC_Init+0x288>)
 80018be:	4013      	ands	r3, r2
 80018c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10b      	bne.n	80018de <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	f023 0303 	bic.w	r3, r3, #3
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	64da      	str	r2, [r3, #76]	; 0x4c
 80018dc:	e014      	b.n	8001908 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e2:	f023 0312 	bic.w	r3, r3, #18
 80018e6:	f043 0210 	orr.w	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001900:	e002      	b.n	8001908 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800190c:	4618      	mov	r0, r3
 800190e:	3738      	adds	r7, #56	; 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40012700 	.word	0x40012700
 800191c:	fcfc16ff 	.word	0xfcfc16ff
 8001920:	c0fff18d 	.word	0xc0fff18d
 8001924:	bf80fffe 	.word	0xbf80fffe

08001928 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start+0x1a>
 800193e:	2302      	movs	r3, #2
 8001940:	e04e      	b.n	80019e0 <HAL_ADC_Start+0xb8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fa64 	bl	8001e18 <ADC_Enable>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d141      	bne.n	80019de <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001984:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001998:	d106      	bne.n	80019a8 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199e:	f023 0206 	bic.w	r2, r3, #6
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	651a      	str	r2, [r3, #80]	; 0x50
 80019a6:	e002      	b.n	80019ae <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80019be:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019dc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_Stop+0x1a>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e01a      	b.n	8001a38 <HAL_ADC_Stop+0x50>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fa60 	bl	8001ed0 <ADC_ConversionStop_Disable>
 8001a10:	4603      	mov	r3, r0
 8001a12:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	f043 0201 	orr.w	r2, r3, #1
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	d113      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a6c:	d10b      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e068      	b.n	8001b58 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a86:	f7ff fddd 	bl	8001644 <HAL_GetTick>
 8001a8a:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a8c:	e021      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d01d      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_PollForConversion+0x6c>
 8001a9c:	f7ff fdd2 	bl	8001644 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d212      	bcs.n	8001ad2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10b      	bne.n	8001ad2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f043 0204 	orr.w	r2, r3, #4
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e042      	b.n	8001b58 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0d6      	beq.n	8001a8e <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d104      	bne.n	8001af2 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0212 	mvn.w	r2, #18
 8001af0:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d124      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d11f      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d111      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f043 0201 	orr.w	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x20>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e134      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x28a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d81c      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3b05      	subs	r3, #5
 8001bba:	221f      	movs	r2, #31
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4019      	ands	r1, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b05      	subs	r3, #5
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
 8001be0:	e07e      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b0c      	cmp	r3, #12
 8001be8:	d81c      	bhi.n	8001c24 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b23      	subs	r3, #35	; 0x23
 8001bfc:	221f      	movs	r2, #31
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	4019      	ands	r1, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	3b23      	subs	r3, #35	; 0x23
 8001c16:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c22:	e05d      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b12      	cmp	r3, #18
 8001c2a:	d81c      	bhi.n	8001c66 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b41      	subs	r3, #65	; 0x41
 8001c3e:	221f      	movs	r2, #31
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	4019      	ands	r1, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3b41      	subs	r3, #65	; 0x41
 8001c58:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
 8001c64:	e03c      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b18      	cmp	r3, #24
 8001c6c:	d81c      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b5f      	subs	r3, #95	; 0x5f
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4019      	ands	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b5f      	subs	r3, #95	; 0x5f
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca6:	e01b      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b7d      	subs	r3, #125	; 0x7d
 8001cba:	221f      	movs	r2, #31
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4019      	ands	r1, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3b7d      	subs	r3, #125	; 0x7d
 8001cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d81a      	bhi.n	8001d1e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6959      	ldr	r1, [r3, #20]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4019      	ands	r1, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	6898      	ldr	r0, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	fa00 f203 	lsl.w	r2, r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	e042      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b13      	cmp	r3, #19
 8001d24:	d81c      	bhi.n	8001d60 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	3b1e      	subs	r3, #30
 8001d38:	2207      	movs	r2, #7
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	4019      	ands	r1, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6898      	ldr	r0, [r3, #8]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b1e      	subs	r3, #30
 8001d52:	fa00 f203 	lsl.w	r2, r0, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	611a      	str	r2, [r3, #16]
 8001d5e:	e021      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b1a      	cmp	r3, #26
 8001d66:	d81c      	bhi.n	8001da2 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	3b3c      	subs	r3, #60	; 0x3c
 8001d7a:	2207      	movs	r2, #7
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4019      	ands	r1, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6898      	ldr	r0, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	3b3c      	subs	r3, #60	; 0x3c
 8001d94:	fa00 f203 	lsl.w	r2, r0, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	e000      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001da2:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d003      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db0:	2b11      	cmp	r3, #17
 8001db2:	d121      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001db4:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_ADC_ConfigChannel+0x294>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11b      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_ADC_ConfigChannel+0x294>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a11      	ldr	r2, [pc, #68]	; (8001e0c <HAL_ADC_ConfigChannel+0x294>)
 8001dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dca:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b10      	cmp	r3, #16
 8001dd2:	d111      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_ADC_ConfigChannel+0x298>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_ADC_ConfigChannel+0x29c>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0c9a      	lsrs	r2, r3, #18
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001dea:	e002      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f9      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40012700 	.word	0x40012700
 8001e10:	20000048 	.word	0x20000048
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d043      	beq.n	8001ebe <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <ADC_Enable+0xb0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <ADC_Enable+0xb4>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	0c9a      	lsrs	r2, r3, #18
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e5a:	e002      	b.n	8001e62 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f9      	bne.n	8001e5c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001e68:	f7ff fbec 	bl	8001644 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6e:	e01f      	b.n	8001eb0 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001e70:	f7ff fbe8 	bl	8001644 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d918      	bls.n	8001eb0 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d011      	beq.n	8001eb0 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	f043 0210 	orr.w	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e007      	b.n	8001ec0 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	2b40      	cmp	r3, #64	; 0x40
 8001ebc:	d1d8      	bne.n	8001e70 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000048 	.word	0x20000048
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	2b40      	cmp	r3, #64	; 0x40
 8001ee8:	d12e      	bne.n	8001f48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001efa:	f7ff fba3 	bl	8001644 <HAL_GetTick>
 8001efe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f00:	e01b      	b.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8001f02:	f7ff fb9f 	bl	8001644 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d914      	bls.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d10d      	bne.n	8001f3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f043 0210 	orr.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e007      	b.n	8001f4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d0dc      	beq.n	8001f02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f70:	4013      	ands	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x44>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0307 	and.w	r3, r3, #7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	db0b      	blt.n	8001fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 021f 	and.w	r2, r3, #31
 8001fd0:	4906      	ldr	r1, [pc, #24]	; (8001fec <__NVIC_EnableIRQ+0x34>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2001      	movs	r0, #1
 8001fda:	fa00 f202 	lsl.w	r2, r0, r2
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	; (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff90 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff2d 	bl	8001f54 <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002114:	f7ff ff42 	bl	8001f9c <__NVIC_GetPriorityGrouping>
 8002118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68b9      	ldr	r1, [r7, #8]
 800211e:	6978      	ldr	r0, [r7, #20]
 8002120:	f7ff ff90 	bl	8002044 <NVIC_EncodePriority>
 8002124:	4602      	mov	r2, r0
 8002126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff5f 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002132:	bf00      	nop
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff35 	bl	8001fb8 <__NVIC_EnableIRQ>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff ffa2 	bl	80020a8 <SysTick_Config>
 8002164:	4603      	mov	r3, r0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d008      	beq.n	8002198 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2204      	movs	r2, #4
 800218a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e022      	b.n	80021de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020e 	bic.w	r2, r2, #14
 80021a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d005      	beq.n	800220c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e029      	b.n	8002260 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f003 021c 	and.w	r2, r3, #28
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	2101      	movs	r1, #1
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4798      	blx	r3
    }
  }
  return status;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800229a:	e154      	b.n	8002546 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2101      	movs	r1, #1
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa01 f303 	lsl.w	r3, r1, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 8146 	beq.w	8002540 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d005      	beq.n	80022cc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d130      	bne.n	800232e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002302:	2201      	movs	r2, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0201 	and.w	r2, r3, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d123      	bne.n	80023be <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	08da      	lsrs	r2, r3, #3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002382:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	6939      	ldr	r1, [r7, #16]
 80023ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	2203      	movs	r2, #3
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0203 	and.w	r2, r3, #3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 80a0 	beq.w	8002540 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002400:	4b58      	ldr	r3, [pc, #352]	; (8002564 <HAL_GPIO_Init+0x2e0>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a57      	ldr	r2, [pc, #348]	; (8002564 <HAL_GPIO_Init+0x2e0>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_GPIO_Init+0x2e0>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002418:	4a53      	ldr	r2, [pc, #332]	; (8002568 <HAL_GPIO_Init+0x2e4>)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4b      	ldr	r2, [pc, #300]	; (800256c <HAL_GPIO_Init+0x2e8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d019      	beq.n	8002478 <HAL_GPIO_Init+0x1f4>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4a      	ldr	r2, [pc, #296]	; (8002570 <HAL_GPIO_Init+0x2ec>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d013      	beq.n	8002474 <HAL_GPIO_Init+0x1f0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a49      	ldr	r2, [pc, #292]	; (8002574 <HAL_GPIO_Init+0x2f0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00d      	beq.n	8002470 <HAL_GPIO_Init+0x1ec>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a48      	ldr	r2, [pc, #288]	; (8002578 <HAL_GPIO_Init+0x2f4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <HAL_GPIO_Init+0x1e8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a47      	ldr	r2, [pc, #284]	; (800257c <HAL_GPIO_Init+0x2f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d101      	bne.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002464:	2304      	movs	r3, #4
 8002466:	e008      	b.n	800247a <HAL_GPIO_Init+0x1f6>
 8002468:	2305      	movs	r3, #5
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x1f6>
 800246c:	2303      	movs	r3, #3
 800246e:	e004      	b.n	800247a <HAL_GPIO_Init+0x1f6>
 8002470:	2302      	movs	r3, #2
 8002472:	e002      	b.n	800247a <HAL_GPIO_Init+0x1f6>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_GPIO_Init+0x1f6>
 8002478:	2300      	movs	r3, #0
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800248a:	4937      	ldr	r1, [pc, #220]	; (8002568 <HAL_GPIO_Init+0x2e4>)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002498:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024bc:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e6:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800253a:	4a11      	ldr	r2, [pc, #68]	; (8002580 <HAL_GPIO_Init+0x2fc>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	3301      	adds	r3, #1
 8002544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	f47f aea3 	bne.w	800229c <HAL_GPIO_Init+0x18>
  }
}
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40010000 	.word	0x40010000
 800256c:	40020000 	.word	0x40020000
 8002570:	40020400 	.word	0x40020400
 8002574:	40020800 	.word	0x40020800
 8002578:	40020c00 	.word	0x40020c00
 800257c:	40021000 	.word	0x40021000
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	807b      	strh	r3, [r7, #2]
 8002590:	4613      	mov	r3, r2
 8002592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002594:	787b      	ldrb	r3, [r7, #1]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800259a:	887a      	ldrh	r2, [r7, #2]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025a0:	e003      	b.n	80025aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	041a      	lsls	r2, r3, #16
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e12b      	b.n	800281e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fe5e 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002618:	f002 fae6 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800261c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4a81      	ldr	r2, [pc, #516]	; (8002828 <HAL_I2C_Init+0x274>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d807      	bhi.n	8002638 <HAL_I2C_Init+0x84>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a80      	ldr	r2, [pc, #512]	; (800282c <HAL_I2C_Init+0x278>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e006      	b.n	8002646 <HAL_I2C_Init+0x92>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a7d      	ldr	r2, [pc, #500]	; (8002830 <HAL_I2C_Init+0x27c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0e7      	b.n	800281e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a78      	ldr	r2, [pc, #480]	; (8002834 <HAL_I2C_Init+0x280>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a6a      	ldr	r2, [pc, #424]	; (8002828 <HAL_I2C_Init+0x274>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d802      	bhi.n	8002688 <HAL_I2C_Init+0xd4>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	e009      	b.n	800269c <HAL_I2C_Init+0xe8>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	4a69      	ldr	r2, [pc, #420]	; (8002838 <HAL_I2C_Init+0x284>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	099b      	lsrs	r3, r3, #6
 800269a:	3301      	adds	r3, #1
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	495c      	ldr	r1, [pc, #368]	; (8002828 <HAL_I2C_Init+0x274>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d819      	bhi.n	80026f0 <HAL_I2C_Init+0x13c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e59      	subs	r1, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ca:	1c59      	adds	r1, r3, #1
 80026cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026d0:	400b      	ands	r3, r1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_I2C_Init+0x138>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1e59      	subs	r1, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ea:	e051      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e04f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_I2C_Init+0x168>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e012      	b.n	8002742 <HAL_I2C_Init+0x18e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x196>
 8002746:	2301      	movs	r3, #1
 8002748:	e022      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_I2C_Init+0x1bc>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e58      	subs	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	fbb0 f3f3 	udiv	r3, r0, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Init+0x1dc>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6809      	ldr	r1, [r1, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6911      	ldr	r1, [r2, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000186a0 	.word	0x000186a0
 800282c:	001e847f 	.word	0x001e847f
 8002830:	003d08ff 	.word	0x003d08ff
 8002834:	431bde83 	.word	0x431bde83
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002864:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d003      	beq.n	8002874 <HAL_I2C_EV_IRQHandler+0x38>
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	f040 80c1 	bne.w	80029f6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_I2C_EV_IRQHandler+0x6e>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002894:	d003      	beq.n	800289e <HAL_I2C_EV_IRQHandler+0x62>
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800289c:	d101      	bne.n	80028a2 <HAL_I2C_EV_IRQHandler+0x66>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_I2C_EV_IRQHandler+0x68>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f000 8132 	beq.w	8002b0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x92>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	0a5b      	lsrs	r3, r3, #9
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d006      	beq.n	80028ce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 fc63 	bl	800418c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fd6f 	bl	80033aa <I2C_Master_SB>
 80028cc:	e092      	b.n	80029f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08db      	lsrs	r3, r3, #3
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0xb2>
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	0a5b      	lsrs	r3, r3, #9
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fde4 	bl	80034b4 <I2C_Master_ADD10>
 80028ec:	e082      	b.n	80029f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_I2C_EV_IRQHandler+0xd2>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	0a5b      	lsrs	r3, r3, #9
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fdfd 	bl	8003506 <I2C_Master_ADDR>
 800290c:	e072      	b.n	80029f4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03b      	beq.n	8002992 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002928:	f000 80f3 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	09db      	lsrs	r3, r3, #7
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00f      	beq.n	8002958 <HAL_I2C_EV_IRQHandler+0x11c>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	0a9b      	lsrs	r3, r3, #10
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_I2C_EV_IRQHandler+0x11c>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d103      	bne.n	8002958 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9e9 	bl	8002d28 <I2C_MasterTransmit_TXE>
 8002956:	e04d      	b.n	80029f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	089b      	lsrs	r3, r3, #2
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80d6 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	0a5b      	lsrs	r3, r3, #9
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80cf 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002974:	7bbb      	ldrb	r3, [r7, #14]
 8002976:	2b21      	cmp	r3, #33	; 0x21
 8002978:	d103      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa70 	bl	8002e60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002980:	e0c7      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	f040 80c4 	bne.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fade 	bl	8002f4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002990:	e0bf      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a0:	f000 80b7 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00f      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x194>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	0a9b      	lsrs	r3, r3, #10
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <HAL_I2C_EV_IRQHandler+0x194>
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	f003 0301 	and.w	r3, r3, #1
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d103      	bne.n	80029d0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fb53 	bl	8003074 <I2C_MasterReceive_RXNE>
 80029ce:	e011      	b.n	80029f4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 809a 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	0a5b      	lsrs	r3, r3, #9
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8093 	beq.w	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fbf2 	bl	80031d6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f2:	e08e      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
 80029f4:	e08d      	b.n	8002b12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d004      	beq.n	8002a08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e007      	b.n	8002a18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <HAL_I2C_EV_IRQHandler+0x20e>
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002a40:	69b9      	ldr	r1, [r7, #24]
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 ffab 	bl	800399e <I2C_Slave_ADDR>
 8002a48:	e066      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_I2C_EV_IRQHandler+0x22e>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	0a5b      	lsrs	r3, r3, #9
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 ffe6 	bl	8003a34 <I2C_Slave_STOPF>
 8002a68:	e056      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	2b21      	cmp	r3, #33	; 0x21
 8002a6e:	d002      	beq.n	8002a76 <HAL_I2C_EV_IRQHandler+0x23a>
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	2b29      	cmp	r3, #41	; 0x29
 8002a74:	d125      	bne.n	8002ac2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	09db      	lsrs	r3, r3, #7
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00f      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	0a9b      	lsrs	r3, r3, #10
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x266>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fec3 	bl	8003826 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002aa0:	e039      	b.n	8002b16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d033      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x2da>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	0a5b      	lsrs	r3, r3, #9
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d02d      	beq.n	8002b16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fef0 	bl	80038a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ac0:	e029      	b.n	8002b16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	099b      	lsrs	r3, r3, #6
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00f      	beq.n	8002aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	0a9b      	lsrs	r3, r3, #10
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_I2C_EV_IRQHandler+0x2b2>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 fefa 	bl	80038e0 <I2C_SlaveReceive_RXNE>
 8002aec:	e014      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	089b      	lsrs	r3, r3, #2
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00e      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	0a5b      	lsrs	r3, r3, #9
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 ff28 	bl	800395c <I2C_SlaveReceive_BTF>
 8002b0c:	e004      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	0a1b      	lsrs	r3, r3, #8
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <HAL_I2C_ER_IRQHandler+0x4e>
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	0a5b      	lsrs	r3, r3, #9
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00e      	beq.n	8002b96 <HAL_I2C_ER_IRQHandler+0x78>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f043 0302 	orr.w	r3, r3, #2
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002b94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	0a9b      	lsrs	r3, r3, #10
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03f      	beq.n	8002c22 <HAL_I2C_ER_IRQHandler+0x104>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d039      	beq.n	8002c22 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002bae:	7efb      	ldrb	r3, [r7, #27]
 8002bb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002bc8:	7ebb      	ldrb	r3, [r7, #26]
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	d112      	bne.n	8002bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <HAL_I2C_ER_IRQHandler+0xd6>
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	2b21      	cmp	r3, #33	; 0x21
 8002bd8:	d008      	beq.n	8002bec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b29      	cmp	r3, #41	; 0x29
 8002bde:	d005      	beq.n	8002bec <HAL_I2C_ER_IRQHandler+0xce>
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	2b28      	cmp	r3, #40	; 0x28
 8002be4:	d106      	bne.n	8002bf4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b21      	cmp	r3, #33	; 0x21
 8002bea:	d103      	bne.n	8002bf4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f001 f851 	bl	8003c94 <I2C_Slave_AF>
 8002bf2:	e016      	b.n	8002c22 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bfc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002c06:	7efb      	ldrb	r3, [r7, #27]
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d002      	beq.n	8002c12 <HAL_I2C_ER_IRQHandler+0xf4>
 8002c0c:	7efb      	ldrb	r3, [r7, #27]
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d107      	bne.n	8002c22 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c20:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	0adb      	lsrs	r3, r3, #11
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00e      	beq.n	8002c4c <HAL_I2C_ER_IRQHandler+0x12e>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002c4a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d008      	beq.n	8002c64 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f001 f888 	bl	8003d74 <I2C_ITError>
  }
}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d150      	bne.n	8002df0 <I2C_MasterTransmit_TXE+0xc8>
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	2b21      	cmp	r3, #33	; 0x21
 8002d52:	d14d      	bne.n	8002df0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d01d      	beq.n	8002d96 <I2C_MasterTransmit_TXE+0x6e>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d01a      	beq.n	8002d96 <I2C_MasterTransmit_TXE+0x6e>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d66:	d016      	beq.n	8002d96 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d76:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2211      	movs	r2, #17
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ff6c 	bl	8002c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d94:	e060      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002da4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b40      	cmp	r3, #64	; 0x40
 8002dce:	d107      	bne.n	8002de0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff81 	bl	8002ce0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dde:	e03b      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff3f 	bl	8002c6c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dee:	e033      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b21      	cmp	r3, #33	; 0x21
 8002df4:	d005      	beq.n	8002e02 <I2C_MasterTransmit_TXE+0xda>
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d12d      	bne.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b22      	cmp	r3, #34	; 0x22
 8002e00:	d12a      	bne.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d108      	bne.n	8002e1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e1c:	e01c      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d103      	bne.n	8002e32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f88e 	bl	8002f4c <I2C_MemoryTransmit_TXE_BTF>
}
 8002e30:	e012      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e56:	e7ff      	b.n	8002e58 <I2C_MasterTransmit_TXE+0x130>
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b21      	cmp	r3, #33	; 0x21
 8002e78:	d164      	bne.n	8002f44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ea8:	e04c      	b.n	8002f44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d01d      	beq.n	8002eec <I2C_MasterTransmit_BTF+0x8c>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d01a      	beq.n	8002eec <I2C_MasterTransmit_BTF+0x8c>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebc:	d016      	beq.n	8002eec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ecc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2211      	movs	r2, #17
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fec1 	bl	8002c6c <HAL_I2C_MasterTxCpltCallback>
}
 8002eea:	e02b      	b.n	8002f44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002efa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	d107      	bne.n	8002f36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fed6 	bl	8002ce0 <HAL_I2C_MemTxCpltCallback>
}
 8002f34:	e006      	b.n	8002f44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fe94 	bl	8002c6c <HAL_I2C_MasterTxCpltCallback>
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10b      	bne.n	8002f84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002f82:	e073      	b.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	121b      	asrs	r3, r3, #8
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002f9e:	e065      	b.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10b      	bne.n	8002fc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fbe:	e055      	b.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d151      	bne.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b22      	cmp	r3, #34	; 0x22
 8002fcc:	d10d      	bne.n	8002fea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fdc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fe8:	e040      	b.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b21      	cmp	r3, #33	; 0x21
 8002ff8:	d112      	bne.n	8003020 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800301e:	e025      	b.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d120      	bne.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b21      	cmp	r3, #33	; 0x21
 800302e:	d11d      	bne.n	800306c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fe3a 	bl	8002ce0 <HAL_I2C_MemTxCpltCallback>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b22      	cmp	r3, #34	; 0x22
 8003086:	f040 80a2 	bne.w	80031ce <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d921      	bls.n	80030dc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	f040 8082 	bne.w	80031ce <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80030da:	e078      	b.n	80031ce <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d074      	beq.n	80031ce <I2C_MasterReceive_RXNE+0x15a>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d002      	beq.n	80030f0 <I2C_MasterReceive_RXNE+0x7c>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d16e      	bne.n	80031ce <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f001 f819 	bl	8004128 <I2C_WaitOnSTOPRequestThroughIT>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d142      	bne.n	8003182 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800311a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d10a      	bne.n	800316c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fdc4 	bl	8002cf2 <HAL_I2C_MemRxCpltCallback>
}
 800316a:	e030      	b.n	80031ce <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2212      	movs	r2, #18
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fd7f 	bl	8002c7e <HAL_I2C_MasterRxCpltCallback>
}
 8003180:	e025      	b.n	80031ce <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003190:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fd9b 	bl	8002d04 <HAL_I2C_ErrorCallback>
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d11b      	bne.n	8003226 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003224:	e0bd      	b.n	80033a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b03      	cmp	r3, #3
 800322e:	d129      	bne.n	8003284 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d00a      	beq.n	800325c <I2C_MasterReceive_BTF+0x86>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d007      	beq.n	800325c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800325a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003282:	e08e      	b.n	80033a2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d176      	bne.n	800337c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d002      	beq.n	800329a <I2C_MasterReceive_BTF+0xc4>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d108      	bne.n	80032ac <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e019      	b.n	80032e0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d002      	beq.n	80032b8 <I2C_MasterReceive_BTF+0xe2>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d108      	bne.n	80032ca <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e00a      	b.n	80032e0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d007      	beq.n	80032e0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800333a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b40      	cmp	r3, #64	; 0x40
 800334e:	d10a      	bne.n	8003366 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fcc7 	bl	8002cf2 <HAL_I2C_MemRxCpltCallback>
}
 8003364:	e01d      	b.n	80033a2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2212      	movs	r2, #18
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fc82 	bl	8002c7e <HAL_I2C_MasterRxCpltCallback>
}
 800337a:	e012      	b.n	80033a2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80033a2:	bf00      	nop
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d117      	bne.n	80033ee <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033d6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80033d8:	e067      	b.n	80034aa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]
}
 80033ec:	e05d      	b.n	80034aa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f6:	d133      	bne.n	8003460 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b21      	cmp	r3, #33	; 0x21
 8003402:	d109      	bne.n	8003418 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e008      	b.n	800342a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <I2C_Master_SB+0x92>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d032      	beq.n	80034aa <I2C_Master_SB+0x100>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	2b00      	cmp	r3, #0
 800344c:	d02d      	beq.n	80034aa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345c:	605a      	str	r2, [r3, #4]
}
 800345e:	e024      	b.n	80034aa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10e      	bne.n	8003486 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	b29b      	uxth	r3, r3
 800346e:	11db      	asrs	r3, r3, #7
 8003470:	b2db      	uxtb	r3, r3
 8003472:	f003 0306 	and.w	r3, r3, #6
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f063 030f 	orn	r3, r3, #15
 800347c:	b2da      	uxtb	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	611a      	str	r2, [r3, #16]
}
 8003484:	e011      	b.n	80034aa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	2b01      	cmp	r3, #1
 800348c:	d10d      	bne.n	80034aa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	b29b      	uxth	r3, r3
 8003494:	11db      	asrs	r3, r3, #7
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 0306 	and.w	r3, r3, #6
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f063 030e 	orn	r3, r3, #14
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	611a      	str	r2, [r3, #16]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <I2C_Master_ADD10+0x26>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <I2C_Master_ADD10+0x48>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fa:	605a      	str	r2, [r3, #4]
  }
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003506:	b480      	push	{r7}
 8003508:	b091      	sub	sp, #68	; 0x44
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b22      	cmp	r3, #34	; 0x22
 800352e:	f040 8169 	bne.w	8003804 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <I2C_Master_ADDR+0x54>
 800353a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	d10b      	bne.n	800355a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003542:	2300      	movs	r3, #0
 8003544:	633b      	str	r3, [r7, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	e160      	b.n	800381c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11d      	bne.n	800359e <I2C_Master_ADDR+0x98>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800356a:	d118      	bne.n	800359e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003590:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	651a      	str	r2, [r3, #80]	; 0x50
 800359c:	e13e      	b.n	800381c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d113      	bne.n	80035d0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e115      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f040 808a 	bne.w	80036f0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80035dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035e2:	d137      	bne.n	8003654 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003602:	d113      	bne.n	800362c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003612:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	e0e7      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e0d3      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003656:	2b08      	cmp	r3, #8
 8003658:	d02e      	beq.n	80036b8 <I2C_Master_ADDR+0x1b2>
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	2b20      	cmp	r3, #32
 800365e:	d02b      	beq.n	80036b8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003662:	2b12      	cmp	r3, #18
 8003664:	d102      	bne.n	800366c <I2C_Master_ADDR+0x166>
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	2b01      	cmp	r3, #1
 800366a:	d125      	bne.n	80036b8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00e      	beq.n	8003690 <I2C_Master_ADDR+0x18a>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	2b02      	cmp	r3, #2
 8003676:	d00b      	beq.n	8003690 <I2C_Master_ADDR+0x18a>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	2b10      	cmp	r3, #16
 800367c:	d008      	beq.n	8003690 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e007      	b.n	80036a0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800369e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	61fb      	str	r3, [r7, #28]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	e0a1      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e085      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d14d      	bne.n	8003796 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80036fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d016      	beq.n	800372e <I2C_Master_ADDR+0x228>
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	2b02      	cmp	r3, #2
 8003704:	d013      	beq.n	800372e <I2C_Master_ADDR+0x228>
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b10      	cmp	r3, #16
 800370a:	d010      	beq.n	800372e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e007      	b.n	800373e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374c:	d117      	bne.n	800377e <I2C_Master_ADDR+0x278>
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003754:	d00b      	beq.n	800376e <I2C_Master_ADDR+0x268>
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	2b01      	cmp	r3, #1
 800375a:	d008      	beq.n	800376e <I2C_Master_ADDR+0x268>
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	2b08      	cmp	r3, #8
 8003760:	d005      	beq.n	800376e <I2C_Master_ADDR+0x268>
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	2b10      	cmp	r3, #16
 8003766:	d002      	beq.n	800376e <I2C_Master_ADDR+0x268>
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	2b20      	cmp	r3, #32
 800376c:	d107      	bne.n	800377e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800377c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	e032      	b.n	80037fc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b4:	d117      	bne.n	80037e6 <I2C_Master_ADDR+0x2e0>
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037bc:	d00b      	beq.n	80037d6 <I2C_Master_ADDR+0x2d0>
 80037be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d008      	beq.n	80037d6 <I2C_Master_ADDR+0x2d0>
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d005      	beq.n	80037d6 <I2C_Master_ADDR+0x2d0>
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d002      	beq.n	80037d6 <I2C_Master_ADDR+0x2d0>
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	d107      	bne.n	80037e6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003802:	e00b      	b.n	800381c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
}
 800381a:	e7ff      	b.n	800381c <I2C_Master_ADDR+0x316>
 800381c:	bf00      	nop
 800381e:	3744      	adds	r7, #68	; 0x44
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02b      	beq.n	8003898 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d114      	bne.n	8003898 <I2C_SlaveTransmit_TXE+0x72>
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b29      	cmp	r3, #41	; 0x29
 8003872:	d111      	bne.n	8003898 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003882:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2221      	movs	r2, #33	; 0x21
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2228      	movs	r2, #40	; 0x28
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff f9fc 	bl	8002c90 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d011      	beq.n	80038d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	781a      	ldrb	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d02c      	beq.n	8003954 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	691a      	ldr	r2, [r3, #16]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d114      	bne.n	8003954 <I2C_SlaveReceive_RXNE+0x74>
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b2a      	cmp	r3, #42	; 0x2a
 800392e:	d111      	bne.n	8003954 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2222      	movs	r2, #34	; 0x22
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2228      	movs	r2, #40	; 0x28
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff f9a7 	bl	8002ca2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039b8:	2b28      	cmp	r3, #40	; 0x28
 80039ba:	d127      	bne.n	8003a0c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ca:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	09db      	lsrs	r3, r3, #7
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	81bb      	strh	r3, [r7, #12]
 80039ee:	e002      	b.n	80039f6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80039fe:	89ba      	ldrh	r2, [r7, #12]
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff f955 	bl	8002cb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a0a:	e00e      	b.n	8003a2a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a42:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a52:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a90:	d172      	bne.n	8003b78 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b22      	cmp	r3, #34	; 0x22
 8003a96:	d002      	beq.n	8003a9e <I2C_Slave_STOPF+0x6a>
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a9c:	d135      	bne.n	8003b0a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fbc7 	bl	800226a <HAL_DMA_GetState>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d049      	beq.n	8003b76 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <I2C_Slave_STOPF+0x258>)
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fb7a 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d03d      	beq.n	8003b76 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b04:	4610      	mov	r0, r2
 8003b06:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b08:	e035      	b.n	8003b76 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fb91 	bl	800226a <HAL_DMA_GetState>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d014      	beq.n	8003b78 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b52:	4a4e      	ldr	r2, [pc, #312]	; (8003c8c <I2C_Slave_STOPF+0x258>)
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fb44 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
 8003b74:	e000      	b.n	8003b78 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b76:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03e      	beq.n	8003c00 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d112      	bne.n	8003bb6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d112      	bne.n	8003bea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f8b3 	bl	8003d74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003c0e:	e039      	b.n	8003c84 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b2a      	cmp	r3, #42	; 0x2a
 8003c14:	d109      	bne.n	8003c2a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2228      	movs	r2, #40	; 0x28
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff f83c 	bl	8002ca2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b28      	cmp	r3, #40	; 0x28
 8003c34:	d111      	bne.n	8003c5a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <I2C_Slave_STOPF+0x25c>)
 8003c3a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff f83b 	bl	8002cce <HAL_I2C_ListenCpltCallback>
}
 8003c58:	e014      	b.n	8003c84 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	2b22      	cmp	r3, #34	; 0x22
 8003c60:	d002      	beq.n	8003c68 <I2C_Slave_STOPF+0x234>
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b22      	cmp	r3, #34	; 0x22
 8003c66:	d10d      	bne.n	8003c84 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff f80f 	bl	8002ca2 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c84:	bf00      	nop
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	08003fd9 	.word	0x08003fd9
 8003c90:	ffff0000 	.word	0xffff0000

08003c94 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d002      	beq.n	8003cb6 <I2C_Slave_AF+0x22>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	d129      	bne.n	8003d0a <I2C_Slave_AF+0x76>
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
 8003cb8:	2b28      	cmp	r3, #40	; 0x28
 8003cba:	d126      	bne.n	8003d0a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	; (8003d70 <I2C_Slave_AF+0xdc>)
 8003cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cda:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe ffe3 	bl	8002cce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003d08:	e02e      	b.n	8003d68 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	2b21      	cmp	r3, #33	; 0x21
 8003d0e:	d126      	bne.n	8003d5e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <I2C_Slave_AF+0xdc>)
 8003d14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2221      	movs	r2, #33	; 0x21
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d3a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d44:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe ff9a 	bl	8002c90 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d5c:	e004      	b.n	8003d68 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d66:	615a      	str	r2, [r3, #20]
}
 8003d68:	bf00      	nop
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	ffff0000 	.word	0xffff0000

08003d74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d002      	beq.n	8003d98 <I2C_ITError+0x24>
 8003d92:	7bbb      	ldrb	r3, [r7, #14]
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d10a      	bne.n	8003dae <I2C_ITError+0x3a>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b22      	cmp	r3, #34	; 0x22
 8003d9c:	d107      	bne.n	8003dae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003db4:	2b28      	cmp	r3, #40	; 0x28
 8003db6:	d107      	bne.n	8003dc8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2228      	movs	r2, #40	; 0x28
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003dc6:	e015      	b.n	8003df4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d00a      	beq.n	8003dee <I2C_ITError+0x7a>
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b60      	cmp	r3, #96	; 0x60
 8003ddc:	d007      	beq.n	8003dee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d162      	bne.n	8003eca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d020      	beq.n	8003e64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	4a6a      	ldr	r2, [pc, #424]	; (8003fd0 <I2C_ITError+0x25c>)
 8003e28:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fe f9da 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8089 	beq.w	8003f4e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4798      	blx	r3
 8003e62:	e074      	b.n	8003f4e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	4a59      	ldr	r2, [pc, #356]	; (8003fd0 <I2C_ITError+0x25c>)
 8003e6a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe f9b9 	bl	80021e8 <HAL_DMA_Abort_IT>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d068      	beq.n	8003f4e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d10b      	bne.n	8003ea2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	4798      	blx	r3
 8003ec8:	e041      	b.n	8003f4e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b60      	cmp	r3, #96	; 0x60
 8003ed4:	d125      	bne.n	8003f22 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eee:	2b40      	cmp	r3, #64	; 0x40
 8003ef0:	d10b      	bne.n	8003f0a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe fefb 	bl	8002d16 <HAL_I2C_AbortCpltCallback>
 8003f20:	e015      	b.n	8003f4e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	d10b      	bne.n	8003f48 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fe fedb 	bl	8002d04 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10e      	bne.n	8003f7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d113      	bne.n	8003fc8 <I2C_ITError+0x254>
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b28      	cmp	r3, #40	; 0x28
 8003fa4:	d110      	bne.n	8003fc8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <I2C_ITError+0x260>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fe fe83 	bl	8002cce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	08003fd9 	.word	0x08003fd9
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ff2:	4b4b      	ldr	r3, [pc, #300]	; (8004120 <I2C_DMAAbort+0x148>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	4a4a      	ldr	r2, [pc, #296]	; (8004124 <I2C_DMAAbort+0x14c>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	0a1a      	lsrs	r2, r3, #8
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	00da      	lsls	r2, r3, #3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800401e:	e00a      	b.n	8004036 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3b01      	subs	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004034:	d0ea      	beq.n	800400c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	2200      	movs	r2, #0
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004064:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2200      	movs	r2, #0
 800406a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004078:	2200      	movs	r2, #0
 800407a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2200      	movs	r2, #0
 800408a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d10e      	bne.n	80040c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040be:	6978      	ldr	r0, [r7, #20]
 80040c0:	f7fe fe29 	bl	8002d16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040c4:	e027      	b.n	8004116 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040cc:	2b28      	cmp	r3, #40	; 0x28
 80040ce:	d117      	bne.n	8004100 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2228      	movs	r2, #40	; 0x28
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80040fe:	e007      	b.n	8004110 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004110:	6978      	ldr	r0, [r7, #20]
 8004112:	f7fe fdf7 	bl	8002d04 <HAL_I2C_ErrorCallback>
}
 8004116:	bf00      	nop
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000048 	.word	0x20000048
 8004124:	14f8b589 	.word	0x14f8b589

08004128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	4a13      	ldr	r2, [pc, #76]	; (8004188 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0a1a      	lsrs	r2, r3, #8
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e008      	b.n	8004178 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d0e9      	beq.n	800414a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000048 	.word	0x20000048
 8004188:	14f8b589 	.word	0x14f8b589

0800418c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800419c:	d103      	bne.n	80041a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041a4:	e007      	b.n	80041b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80041ae:	d102      	bne.n	80041b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2208      	movs	r2, #8
 80041b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e31d      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d2:	4b94      	ldr	r3, [pc, #592]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041dc:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d07b      	beq.n	80042ea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d006      	beq.n	8004206 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d10f      	bne.n	800421e <HAL_RCC_OscConfig+0x5e>
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d10b      	bne.n	800421e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004206:	4b87      	ldr	r3, [pc, #540]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d06a      	beq.n	80042e8 <HAL_RCC_OscConfig+0x128>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d166      	bne.n	80042e8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e2f7      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b7f      	ldr	r3, [pc, #508]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7e      	ldr	r2, [pc, #504]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e02d      	b.n	8004290 <HAL_RCC_OscConfig+0xd0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10c      	bne.n	8004256 <HAL_RCC_OscConfig+0x96>
 800423c:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a78      	ldr	r2, [pc, #480]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a75      	ldr	r2, [pc, #468]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800424e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e01c      	b.n	8004290 <HAL_RCC_OscConfig+0xd0>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b05      	cmp	r3, #5
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0xb8>
 800425e:	4b71      	ldr	r3, [pc, #452]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a70      	ldr	r2, [pc, #448]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b6e      	ldr	r3, [pc, #440]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6d      	ldr	r2, [pc, #436]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e00b      	b.n	8004290 <HAL_RCC_OscConfig+0xd0>
 8004278:	4b6a      	ldr	r3, [pc, #424]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a69      	ldr	r2, [pc, #420]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800427e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a66      	ldr	r2, [pc, #408]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800428a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd f9d4 	bl	8001644 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a0:	f7fd f9d0 	bl	8001644 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b64      	cmp	r3, #100	; 0x64
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e2ad      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042b2:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
 80042be:	e014      	b.n	80042ea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c0:	f7fd f9c0 	bl	8001644 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c8:	f7fd f9bc 	bl	8001644 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b64      	cmp	r3, #100	; 0x64
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e299      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042da:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d05a      	beq.n	80043ac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d119      	bne.n	8004336 <HAL_RCC_OscConfig+0x176>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d116      	bne.n	8004336 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x160>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d001      	beq.n	8004320 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e276      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b40      	ldr	r3, [pc, #256]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	493d      	ldr	r1, [pc, #244]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004334:	e03a      	b.n	80043ac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d020      	beq.n	8004380 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433e:	4b3a      	ldr	r3, [pc, #232]	; (8004428 <HAL_RCC_OscConfig+0x268>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fd f97e 	bl	8001644 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434c:	f7fd f97a 	bl	8001644 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e257      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	492a      	ldr	r1, [pc, #168]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
 800437e:	e015      	b.n	80043ac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004380:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_OscConfig+0x268>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fd f95d 	bl	8001644 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438e:	f7fd f959 	bl	8001644 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e236      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80b8 	beq.w	800452a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d170      	bne.n	80044a2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x218>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e21a      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	4b11      	ldr	r3, [pc, #68]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d921      	bls.n	800442c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fc23 	bl	8004c38 <RCC_SetFlashLatencyFromMSIRange>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e208      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4906      	ldr	r1, [pc, #24]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800440a:	4313      	orrs	r3, r2
 800440c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	4901      	ldr	r1, [pc, #4]	; (8004424 <HAL_RCC_OscConfig+0x264>)
 800441e:	4313      	orrs	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
 8004422:	e020      	b.n	8004466 <HAL_RCC_OscConfig+0x2a6>
 8004424:	40023800 	.word	0x40023800
 8004428:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442c:	4ba4      	ldr	r3, [pc, #656]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	49a1      	ldr	r1, [pc, #644]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800443e:	4ba0      	ldr	r3, [pc, #640]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	499c      	ldr	r1, [pc, #624]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fbee 	bl	8004c38 <RCC_SetFlashLatencyFromMSIRange>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e1d3      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	3301      	adds	r3, #1
 800446e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004476:	4a92      	ldr	r2, [pc, #584]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004478:	6892      	ldr	r2, [r2, #8]
 800447a:	0912      	lsrs	r2, r2, #4
 800447c:	f002 020f 	and.w	r2, r2, #15
 8004480:	4990      	ldr	r1, [pc, #576]	; (80046c4 <HAL_RCC_OscConfig+0x504>)
 8004482:	5c8a      	ldrb	r2, [r1, r2]
 8004484:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004486:	4a90      	ldr	r2, [pc, #576]	; (80046c8 <HAL_RCC_OscConfig+0x508>)
 8004488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800448a:	4b90      	ldr	r3, [pc, #576]	; (80046cc <HAL_RCC_OscConfig+0x50c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd f88c 	bl	80015ac <HAL_InitTick>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d045      	beq.n	800452a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	e1b5      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d029      	beq.n	80044fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044aa:	4b89      	ldr	r3, [pc, #548]	; (80046d0 <HAL_RCC_OscConfig+0x510>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd f8c8 	bl	8001644 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044b8:	f7fd f8c4 	bl	8001644 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e1a1      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044ca:	4b7d      	ldr	r3, [pc, #500]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044d6:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4977      	ldr	r1, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044e8:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	4972      	ldr	r1, [pc, #456]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e015      	b.n	800452a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044fe:	4b74      	ldr	r3, [pc, #464]	; (80046d0 <HAL_RCC_OscConfig+0x510>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd f89e 	bl	8001644 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800450c:	f7fd f89a 	bl	8001644 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e177      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800451e:	4b68      	ldr	r3, [pc, #416]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d030      	beq.n	8004598 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b65      	ldr	r3, [pc, #404]	; (80046d4 <HAL_RCC_OscConfig+0x514>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004544:	f7fd f87e 	bl	8001644 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd f87a 	bl	8001644 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e157      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800455e:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x38c>
 800456a:	e015      	b.n	8004598 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b59      	ldr	r3, [pc, #356]	; (80046d4 <HAL_RCC_OscConfig+0x514>)
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd f867 	bl	8001644 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800457a:	f7fd f863 	bl	8001644 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e140      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800458c:	4b4c      	ldr	r3, [pc, #304]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f0      	bne.n	800457a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80b5 	beq.w	8004710 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b45      	ldr	r3, [pc, #276]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10d      	bne.n	80045d2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	4a41      	ldr	r2, [pc, #260]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6253      	str	r3, [r2, #36]	; 0x24
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d2:	4b41      	ldr	r3, [pc, #260]	; (80046d8 <HAL_RCC_OscConfig+0x518>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d118      	bne.n	8004610 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045de:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <HAL_RCC_OscConfig+0x518>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3d      	ldr	r2, [pc, #244]	; (80046d8 <HAL_RCC_OscConfig+0x518>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ea:	f7fd f82b 	bl	8001644 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7fd f827 	bl	8001644 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b64      	cmp	r3, #100	; 0x64
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e104      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004604:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCC_OscConfig+0x518>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d106      	bne.n	8004626 <HAL_RCC_OscConfig+0x466>
 8004618:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800461a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461c:	4a28      	ldr	r2, [pc, #160]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004622:	6353      	str	r3, [r2, #52]	; 0x34
 8004624:	e02d      	b.n	8004682 <HAL_RCC_OscConfig+0x4c2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x488>
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	4a23      	ldr	r2, [pc, #140]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	6353      	str	r3, [r2, #52]	; 0x34
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	4a20      	ldr	r2, [pc, #128]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004640:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004644:	6353      	str	r3, [r2, #52]	; 0x34
 8004646:	e01c      	b.n	8004682 <HAL_RCC_OscConfig+0x4c2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d10c      	bne.n	800466a <HAL_RCC_OscConfig+0x4aa>
 8004650:	4b1b      	ldr	r3, [pc, #108]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465a:	6353      	str	r3, [r2, #52]	; 0x34
 800465c:	4b18      	ldr	r3, [pc, #96]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800465e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6353      	str	r3, [r2, #52]	; 0x34
 8004668:	e00b      	b.n	8004682 <HAL_RCC_OscConfig+0x4c2>
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	6353      	str	r3, [r2, #52]	; 0x34
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 8004678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467a:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 800467c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004680:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d015      	beq.n	80046b6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468a:	f7fc ffdb 	bl	8001644 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004690:	e00a      	b.n	80046a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fc ffd7 	bl	8001644 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0b2      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_OscConfig+0x500>)
 80046aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0ee      	beq.n	8004692 <HAL_RCC_OscConfig+0x4d2>
 80046b4:	e023      	b.n	80046fe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fc ffc5 	bl	8001644 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046bc:	e019      	b.n	80046f2 <HAL_RCC_OscConfig+0x532>
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08005944 	.word	0x08005944
 80046c8:	20000048 	.word	0x20000048
 80046cc:	2000004c 	.word	0x2000004c
 80046d0:	42470020 	.word	0x42470020
 80046d4:	42470680 	.word	0x42470680
 80046d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fc ffb2 	bl	8001644 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e08d      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ee      	bne.n	80046dc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	4a43      	ldr	r2, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800470e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d079      	beq.n	800480c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d056      	beq.n	80047cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b02      	cmp	r3, #2
 8004724:	d13b      	bne.n	800479e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004726:	4b3d      	ldr	r3, [pc, #244]	; (800481c <HAL_RCC_OscConfig+0x65c>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc ff8a 	bl	8001644 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fc ff86 	bl	8001644 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e063      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	4319      	orrs	r1, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	430b      	orrs	r3, r1
 800476a:	492b      	ldr	r1, [pc, #172]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004770:	4b2a      	ldr	r3, [pc, #168]	; (800481c <HAL_RCC_OscConfig+0x65c>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fc ff65 	bl	8001644 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477e:	f7fc ff61 	bl	8001644 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e03e      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004790:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x5be>
 800479c:	e036      	b.n	800480c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479e:	4b1f      	ldr	r3, [pc, #124]	; (800481c <HAL_RCC_OscConfig+0x65c>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fc ff4e 	bl	8001644 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ac:	f7fc ff4a 	bl	8001644 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e027      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047be:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x5ec>
 80047ca:	e01f      	b.n	800480c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e01a      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_RCC_OscConfig+0x658>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d10d      	bne.n	8004808 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d106      	bne.n	8004808 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800
 800481c:	42470060 	.word	0x42470060

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e11a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d919      	bls.n	8004876 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_ClockConfig+0x34>
 8004848:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a89      	ldr	r2, [pc, #548]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 800484e:	f043 0304 	orr.w	r3, r3, #4
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	4b87      	ldr	r3, [pc, #540]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f023 0201 	bic.w	r2, r3, #1
 800485c:	4985      	ldr	r1, [pc, #532]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004864:	4b83      	ldr	r3, [pc, #524]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d001      	beq.n	8004876 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e0f9      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004882:	4b7d      	ldr	r3, [pc, #500]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	497a      	ldr	r1, [pc, #488]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 808e 	beq.w	80049be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80048aa:	4b73      	ldr	r3, [pc, #460]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d121      	bne.n	80048fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0d7      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d115      	bne.n	80048fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0cb      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048da:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e0bf      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80048ea:	4b63      	ldr	r3, [pc, #396]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0b7      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b5f      	ldr	r3, [pc, #380]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	495c      	ldr	r1, [pc, #368]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800490c:	f7fc fe9a 	bl	8001644 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d112      	bne.n	8004940 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fc fe92 	bl	8001644 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e09b      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004932:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b08      	cmp	r3, #8
 800493c:	d1ee      	bne.n	800491c <HAL_RCC_ClockConfig+0xfc>
 800493e:	e03e      	b.n	80049be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d112      	bne.n	800496e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004948:	e00a      	b.n	8004960 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494a:	f7fc fe7b 	bl	8001644 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e084      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b0c      	cmp	r3, #12
 800496a:	d1ee      	bne.n	800494a <HAL_RCC_ClockConfig+0x12a>
 800496c:	e027      	b.n	80049be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d11d      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fc fe64 	bl	8001644 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e06d      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800498e:	4b3a      	ldr	r3, [pc, #232]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b04      	cmp	r3, #4
 8004998:	d1ee      	bne.n	8004978 <HAL_RCC_ClockConfig+0x158>
 800499a:	e010      	b.n	80049be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800499c:	f7fc fe52 	bl	8001644 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e05b      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1ee      	bne.n	800499c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049be:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d219      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_RCC_ClockConfig+0x1be>
 80049d2:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a27      	ldr	r2, [pc, #156]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	4923      	ldr	r1, [pc, #140]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCC_ClockConfig+0x254>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e034      	b.n	8004a6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0c:	4b1a      	ldr	r3, [pc, #104]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4917      	ldr	r1, [pc, #92]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	490f      	ldr	r1, [pc, #60]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a3e:	f000 f823 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_RCC_ClockConfig+0x258>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	490b      	ldr	r1, [pc, #44]	; (8004a7c <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	5ccb      	ldrb	r3, [r1, r3]
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x264>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc fda4 	bl	80015ac <HAL_InitTick>
 8004a64:	4603      	mov	r3, r0
 8004a66:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a68:	7afb      	ldrb	r3, [r7, #11]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	08005944 	.word	0x08005944
 8004a80:	20000048 	.word	0x20000048
 8004a84:	2000004c 	.word	0x2000004c

08004a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	b5b0      	push	{r4, r5, r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004a8e:	4b4d      	ldr	r3, [pc, #308]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b0c      	cmp	r3, #12
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d87c      	bhi.n	8004b9c <HAL_RCC_GetSysClockFreq+0x114>
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x24>
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x2a>
 8004aaa:	e077      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aac:	4b46      	ldr	r3, [pc, #280]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004aae:	613b      	str	r3, [r7, #16]
      break;
 8004ab0:	e082      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ab2:	4b46      	ldr	r3, [pc, #280]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ab4:	613b      	str	r3, [r7, #16]
      break;
 8004ab6:	e07f      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	0c9b      	lsrs	r3, r3, #18
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x148>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0d9b      	lsrs	r3, r3, #22
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01a      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	4939      	ldr	r1, [pc, #228]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ae8:	fb01 f003 	mul.w	r0, r1, r3
 8004aec:	2100      	movs	r1, #0
 8004aee:	fb01 f102 	mul.w	r1, r1, r2
 8004af2:	1844      	adds	r4, r0, r1
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x144>)
 8004af6:	fba2 0101 	umull	r0, r1, r2, r1
 8004afa:	1863      	adds	r3, r4, r1
 8004afc:	4619      	mov	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	f7fb fcfb 	bl	8000500 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4613      	mov	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e040      	b.n	8004b96 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	461c      	mov	r4, r3
 8004b18:	f04f 0500 	mov.w	r5, #0
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	014b      	lsls	r3, r1, #5
 8004b2a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b2e:	0142      	lsls	r2, r0, #5
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	1b00      	subs	r0, r0, r4
 8004b36:	eb61 0105 	sbc.w	r1, r1, r5
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	018b      	lsls	r3, r1, #6
 8004b44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b48:	0182      	lsls	r2, r0, #6
 8004b4a:	1a12      	subs	r2, r2, r0
 8004b4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	00d9      	lsls	r1, r3, #3
 8004b5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b5e:	00d0      	lsls	r0, r2, #3
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	1912      	adds	r2, r2, r4
 8004b66:	eb45 0303 	adc.w	r3, r5, r3
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	0299      	lsls	r1, r3, #10
 8004b74:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b78:	0290      	lsls	r0, r2, #10
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4610      	mov	r0, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	461a      	mov	r2, r3
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	f7fb fcb9 	bl	8000500 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4613      	mov	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	613b      	str	r3, [r7, #16]
      break;
 8004b9a:	e00d      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0b5b      	lsrs	r3, r3, #13
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	3301      	adds	r3, #1
 8004bac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb4:	613b      	str	r3, [r7, #16]
      break;
 8004bb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb8:	693b      	ldr	r3, [r7, #16]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	01312d00 	.word	0x01312d00
 8004bd0:	08005938 	.word	0x08005938

08004bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b02      	ldr	r3, [pc, #8]	; (8004be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr
 8004be4:	20000048 	.word	0x20000048

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff2 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	08005954 	.word	0x08005954

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffde 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0adb      	lsrs	r3, r3, #11
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	08005954 	.word	0x08005954

08004c38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c44:	4b29      	ldr	r3, [pc, #164]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d12c      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c50:	4b26      	ldr	r3, [pc, #152]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e016      	b.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	6253      	str	r3, [r2, #36]	; 0x24
 8004c74:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004c80:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004c88:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b18      	ldr	r3, [pc, #96]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004c9c:	d105      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ca4:	d101      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d105      	bne.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004cb0:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb6:	f043 0304 	orr.w	r3, r3, #4
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 0201 	bic.w	r2, r3, #1
 8004cc4:	490b      	ldr	r1, [pc, #44]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d001      	beq.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	371c      	adds	r7, #28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	40023c00 	.word	0x40023c00

08004cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e06e      	b.n	8004de8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d108      	bne.n	8004d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1a:	d009      	beq.n	8004d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
 8004d22:	e005      	b.n	8004d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fc fafa 	bl	8001344 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da0:	431a      	orrs	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	ea42 0103 	orr.w	r1, r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	0c1a      	lsrs	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f002 0204 	and.w	r2, r2, #4
 8004dd6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	099b      	lsrs	r3, r3, #6
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
    return;
 8004e32:	e0be      	b.n	8004fb2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_SPI_IRQHandler+0x66>
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
    return;
 8004e54:	e0ad      	b.n	8004fb2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_SPI_IRQHandler+0x80>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	099b      	lsrs	r3, r3, #6
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80a1 	beq.w	8004fb2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 809a 	beq.w	8004fb2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d023      	beq.n	8004ed2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d011      	beq.n	8004eba <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	f043 0204 	orr.w	r2, r3, #4
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	e00b      	b.n	8004ed2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
        return;
 8004ed0:	e06f      	b.n	8004fb2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d014      	beq.n	8004f08 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee2:	f043 0201 	orr.w	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d04f      	beq.n	8004fb0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f1e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d104      	bne.n	8004f3c <HAL_SPI_IRQHandler+0x14c>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d034      	beq.n	8004fa6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0203 	bic.w	r2, r2, #3
 8004f4a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d011      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_SPI_IRQHandler+0x1c8>)
 8004f5a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7fd f941 	bl	80021e8 <HAL_DMA_Abort_IT>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d016      	beq.n	8004fae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <HAL_SPI_IRQHandler+0x1c8>)
 8004f86:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fd f92b 	bl	80021e8 <HAL_DMA_Abort_IT>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004fa4:	e003      	b.n	8004fae <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f808 	bl	8004fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fac:	e000      	b.n	8004fb0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004fae:	bf00      	nop
    return;
 8004fb0:	bf00      	nop
  }
}
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	08004fcf 	.word	0x08004fcf

08004fbc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff ffe7 	bl	8004fbc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e03f      	b.n	8005088 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fc f9dd 	bl	80013dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2224      	movs	r2, #36	; 0x24
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005038:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fb48 	bl	80056d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800504e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800505e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800506e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	; 0x28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10d      	bne.n	80050e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_UART_IRQHandler+0x52>
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa4f 	bl	800557e <UART_Receive_IT>
      return;
 80050e0:	e17b      	b.n	80053da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 80b1 	beq.w	800524c <HAL_UART_IRQHandler+0x1bc>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_UART_IRQHandler+0x70>
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80a6 	beq.w	800524c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_UART_IRQHandler+0x90>
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	f003 0304 	and.w	r3, r3, #4
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_UART_IRQHandler+0xb0>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	f043 0202 	orr.w	r2, r3, #2
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <HAL_UART_IRQHandler+0xd0>
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f043 0204 	orr.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00f      	beq.n	800518a <HAL_UART_IRQHandler+0xfa>
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	f003 0320 	and.w	r3, r3, #32
 8005170:	2b00      	cmp	r3, #0
 8005172:	d104      	bne.n	800517e <HAL_UART_IRQHandler+0xee>
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f043 0208 	orr.w	r2, r3, #8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 811e 	beq.w	80053d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d007      	beq.n	80051ae <HAL_UART_IRQHandler+0x11e>
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f9e8 	bl	800557e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <HAL_UART_IRQHandler+0x146>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d031      	beq.n	800523a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f92a 	bl	8005430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d123      	bne.n	8005232 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d013      	beq.n	800522a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	4a76      	ldr	r2, [pc, #472]	; (80053e0 <HAL_UART_IRQHandler+0x350>)
 8005208:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	4618      	mov	r0, r3
 8005210:	f7fc ffea 	bl	80021e8 <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d016      	beq.n	8005248 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005224:	4610      	mov	r0, r2
 8005226:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	e00e      	b.n	8005248 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8ec 	bl	8005408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005230:	e00a      	b.n	8005248 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8e8 	bl	8005408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005238:	e006      	b.n	8005248 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8e4 	bl	8005408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005246:	e0c3      	b.n	80053d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	bf00      	nop
    return;
 800524a:	e0c1      	b.n	80053d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	f040 80a1 	bne.w	8005398 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 809b 	beq.w	8005398 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8095 	beq.w	8005398 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d14e      	bne.n	8005330 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800529c:	8a3b      	ldrh	r3, [r7, #16]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8098 	beq.w	80053d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052a8:	8a3a      	ldrh	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	f080 8092 	bcs.w	80053d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8a3a      	ldrh	r2, [r7, #16]
 80052b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d02b      	beq.n	8005318 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0201 	bic.w	r2, r2, #1
 80052de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0210 	bic.w	r2, r2, #16
 800530c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc ff2b 	bl	800216e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005320:	b29b      	uxth	r3, r3
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	b29b      	uxth	r3, r3
 8005326:	4619      	mov	r1, r3
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f876 	bl	800541a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800532e:	e051      	b.n	80053d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005338:	b29b      	uxth	r3, r3
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005342:	b29b      	uxth	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d047      	beq.n	80053d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005348:	8a7b      	ldrh	r3, [r7, #18]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d044      	beq.n	80053d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800535c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695a      	ldr	r2, [r3, #20]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0210 	bic.w	r2, r2, #16
 800538a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f842 	bl	800541a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005396:	e01f      	b.n	80053d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_UART_IRQHandler+0x324>
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f87f 	bl	80054b0 <UART_Transmit_IT>
    return;
 80053b2:	e012      	b.n	80053da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <HAL_UART_IRQHandler+0x34a>
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d008      	beq.n	80053da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8c0 	bl	800554e <UART_EndTransmit_IT>
    return;
 80053ce:	e004      	b.n	80053da <HAL_UART_IRQHandler+0x34a>
    return;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <HAL_UART_IRQHandler+0x34a>
      return;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <HAL_UART_IRQHandler+0x34a>
      return;
 80053d8:	bf00      	nop
  }
}
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	08005489 	.word	0x08005489

080053e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr

08005408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005446:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0201 	bic.w	r2, r2, #1
 8005456:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0210 	bic.w	r2, r2, #16
 800546e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ffb0 	bl	8005408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b21      	cmp	r3, #33	; 0x21
 80054c2:	d13e      	bne.n	8005542 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d114      	bne.n	80054f8 <UART_Transmit_IT+0x48>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d110      	bne.n	80054f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	1c9a      	adds	r2, r3, #2
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	621a      	str	r2, [r3, #32]
 80054f6:	e008      	b.n	800550a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	1c59      	adds	r1, r3, #1
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6211      	str	r1, [r2, #32]
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29b      	uxth	r3, r3
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	4619      	mov	r1, r3
 8005518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800552c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800553c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	e000      	b.n	8005544 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005542:	2302      	movs	r3, #2
  }
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr

0800554e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005564:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff ff38 	bl	80053e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b22      	cmp	r3, #34	; 0x22
 8005590:	f040 8099 	bne.w	80056c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559c:	d117      	bne.n	80055ce <UART_Receive_IT+0x50>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d113      	bne.n	80055ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055bc:	b29a      	uxth	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	1c9a      	adds	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
 80055cc:	e026      	b.n	800561c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e0:	d007      	beq.n	80055f2 <UART_Receive_IT+0x74>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <UART_Receive_IT+0x82>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e008      	b.n	8005612 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800560c:	b2da      	uxtb	r2, r3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	4619      	mov	r1, r3
 800562a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800562c:	2b00      	cmp	r3, #0
 800562e:	d148      	bne.n	80056c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0220 	bic.w	r2, r2, #32
 800563e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800564e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	695a      	ldr	r2, [r3, #20]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0201 	bic.w	r2, r2, #1
 800565e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	2b01      	cmp	r3, #1
 800566e:	d123      	bne.n	80056b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68da      	ldr	r2, [r3, #12]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0210 	bic.w	r2, r2, #16
 8005684:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b10      	cmp	r3, #16
 8005692:	d10a      	bne.n	80056aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff feb2 	bl	800541a <HAL_UARTEx_RxEventCallback>
 80056b6:	e002      	b.n	80056be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fe9c 	bl	80053f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e002      	b.n	80056c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	e000      	b.n	80056c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80056c6:	2302      	movs	r3, #2
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	4313      	orrs	r3, r2
 8005704:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005710:	f023 030c 	bic.w	r3, r3, #12
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	430b      	orrs	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a55      	ldr	r2, [pc, #340]	; (8005890 <UART_SetConfig+0x1c0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d103      	bne.n	8005746 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800573e:	f7ff fa67 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	e002      	b.n	800574c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005746:	f7ff fa4f 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 800574a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005754:	d14c      	bne.n	80057f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	441a      	add	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	005b      	lsls	r3, r3, #1
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	4a49      	ldr	r2, [pc, #292]	; (8005894 <UART_SetConfig+0x1c4>)
 800576e:	fba2 2303 	umull	r2, r3, r2, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	0119      	lsls	r1, r3, #4
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	fbb2 f2f3 	udiv	r2, r2, r3
 800578c:	4b41      	ldr	r3, [pc, #260]	; (8005894 <UART_SetConfig+0x1c4>)
 800578e:	fba3 0302 	umull	r0, r3, r3, r2
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	2064      	movs	r0, #100	; 0x64
 8005796:	fb00 f303 	mul.w	r3, r0, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	3332      	adds	r3, #50	; 0x32
 80057a0:	4a3c      	ldr	r2, [pc, #240]	; (8005894 <UART_SetConfig+0x1c4>)
 80057a2:	fba2 2303 	umull	r2, r3, r2, r3
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057ae:	4419      	add	r1, r3
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009a      	lsls	r2, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c6:	4b33      	ldr	r3, [pc, #204]	; (8005894 <UART_SetConfig+0x1c4>)
 80057c8:	fba3 0302 	umull	r0, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	2064      	movs	r0, #100	; 0x64
 80057d0:	fb00 f303 	mul.w	r3, r0, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	3332      	adds	r3, #50	; 0x32
 80057da:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <UART_SetConfig+0x1c4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 0207 	and.w	r2, r3, #7
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	440a      	add	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057ee:	e04a      	b.n	8005886 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	009a      	lsls	r2, r3, #2
 80057fa:	441a      	add	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	4a23      	ldr	r2, [pc, #140]	; (8005894 <UART_SetConfig+0x1c4>)
 8005808:	fba2 2303 	umull	r2, r3, r2, r3
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	0119      	lsls	r1, r3, #4
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009a      	lsls	r2, r3, #2
 800581a:	441a      	add	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	fbb2 f2f3 	udiv	r2, r2, r3
 8005826:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <UART_SetConfig+0x1c4>)
 8005828:	fba3 0302 	umull	r0, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2064      	movs	r0, #100	; 0x64
 8005830:	fb00 f303 	mul.w	r3, r0, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <UART_SetConfig+0x1c4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	4419      	add	r1, r3
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009a      	lsls	r2, r3, #2
 8005852:	441a      	add	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	fbb2 f2f3 	udiv	r2, r2, r3
 800585e:	4b0d      	ldr	r3, [pc, #52]	; (8005894 <UART_SetConfig+0x1c4>)
 8005860:	fba3 0302 	umull	r0, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2064      	movs	r0, #100	; 0x64
 8005868:	fb00 f303 	mul.w	r3, r0, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	3332      	adds	r3, #50	; 0x32
 8005872:	4a08      	ldr	r2, [pc, #32]	; (8005894 <UART_SetConfig+0x1c4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	440a      	add	r2, r1
 8005884:	609a      	str	r2, [r3, #8]
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40013800 	.word	0x40013800
 8005894:	51eb851f 	.word	0x51eb851f

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	2600      	movs	r6, #0
 800589c:	4d0c      	ldr	r5, [pc, #48]	; (80058d0 <__libc_init_array+0x38>)
 800589e:	4c0d      	ldr	r4, [pc, #52]	; (80058d4 <__libc_init_array+0x3c>)
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	f000 f822 	bl	80058f0 <_init>
 80058ac:	2600      	movs	r6, #0
 80058ae:	4d0a      	ldr	r5, [pc, #40]	; (80058d8 <__libc_init_array+0x40>)
 80058b0:	4c0a      	ldr	r4, [pc, #40]	; (80058dc <__libc_init_array+0x44>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	08005964 	.word	0x08005964
 80058d4:	08005964 	.word	0x08005964
 80058d8:	08005964 	.word	0x08005964
 80058dc:	08005968 	.word	0x08005968

080058e0 <memset>:
 80058e0:	4603      	mov	r3, r0
 80058e2:	4402      	add	r2, r0
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d100      	bne.n	80058ea <memset+0xa>
 80058e8:	4770      	bx	lr
 80058ea:	f803 1b01 	strb.w	r1, [r3], #1
 80058ee:	e7f9      	b.n	80058e4 <memset+0x4>

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
