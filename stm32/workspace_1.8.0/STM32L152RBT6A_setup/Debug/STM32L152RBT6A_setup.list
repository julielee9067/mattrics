
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006b1c  08006b1c  00016b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c78  08006c78  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c80  08006c80  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000b8  08006d40  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006d40  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef7e  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  0002f05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  000320e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000302b  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecf1  00000000  00000000  00035de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c26  00000000  00000000  00044ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c76fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000426c  00000000  00000000  000c7750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006b04 	.word	0x08006b04

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08006b04 	.word	0x08006b04

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_frsub>:
 80004f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__addsf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_fsub>:
 80004fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000500 <__addsf3>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	bf1f      	itttt	ne
 8000504:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000508:	ea92 0f03 	teqne	r2, r3
 800050c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000510:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000514:	d06a      	beq.n	80005ec <__addsf3+0xec>
 8000516:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800051a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800051e:	bfc1      	itttt	gt
 8000520:	18d2      	addgt	r2, r2, r3
 8000522:	4041      	eorgt	r1, r0
 8000524:	4048      	eorgt	r0, r1
 8000526:	4041      	eorgt	r1, r0
 8000528:	bfb8      	it	lt
 800052a:	425b      	neglt	r3, r3
 800052c:	2b19      	cmp	r3, #25
 800052e:	bf88      	it	hi
 8000530:	4770      	bxhi	lr
 8000532:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000536:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800053a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800053e:	bf18      	it	ne
 8000540:	4240      	negne	r0, r0
 8000542:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000546:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800054a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800054e:	bf18      	it	ne
 8000550:	4249      	negne	r1, r1
 8000552:	ea92 0f03 	teq	r2, r3
 8000556:	d03f      	beq.n	80005d8 <__addsf3+0xd8>
 8000558:	f1a2 0201 	sub.w	r2, r2, #1
 800055c:	fa41 fc03 	asr.w	ip, r1, r3
 8000560:	eb10 000c 	adds.w	r0, r0, ip
 8000564:	f1c3 0320 	rsb	r3, r3, #32
 8000568:	fa01 f103 	lsl.w	r1, r1, r3
 800056c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000570:	d502      	bpl.n	8000578 <__addsf3+0x78>
 8000572:	4249      	negs	r1, r1
 8000574:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000578:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800057c:	d313      	bcc.n	80005a6 <__addsf3+0xa6>
 800057e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000582:	d306      	bcc.n	8000592 <__addsf3+0x92>
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	f102 0201 	add.w	r2, r2, #1
 800058e:	2afe      	cmp	r2, #254	; 0xfe
 8000590:	d251      	bcs.n	8000636 <__addsf3+0x136>
 8000592:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000596:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800059a:	bf08      	it	eq
 800059c:	f020 0001 	biceq.w	r0, r0, #1
 80005a0:	ea40 0003 	orr.w	r0, r0, r3
 80005a4:	4770      	bx	lr
 80005a6:	0049      	lsls	r1, r1, #1
 80005a8:	eb40 0000 	adc.w	r0, r0, r0
 80005ac:	3a01      	subs	r2, #1
 80005ae:	bf28      	it	cs
 80005b0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80005b4:	d2ed      	bcs.n	8000592 <__addsf3+0x92>
 80005b6:	fab0 fc80 	clz	ip, r0
 80005ba:	f1ac 0c08 	sub.w	ip, ip, #8
 80005be:	ebb2 020c 	subs.w	r2, r2, ip
 80005c2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005c6:	bfaa      	itet	ge
 80005c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005cc:	4252      	neglt	r2, r2
 80005ce:	4318      	orrge	r0, r3
 80005d0:	bfbc      	itt	lt
 80005d2:	40d0      	lsrlt	r0, r2
 80005d4:	4318      	orrlt	r0, r3
 80005d6:	4770      	bx	lr
 80005d8:	f092 0f00 	teq	r2, #0
 80005dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005e0:	bf06      	itte	eq
 80005e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005e6:	3201      	addeq	r2, #1
 80005e8:	3b01      	subne	r3, #1
 80005ea:	e7b5      	b.n	8000558 <__addsf3+0x58>
 80005ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005f4:	bf18      	it	ne
 80005f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005fa:	d021      	beq.n	8000640 <__addsf3+0x140>
 80005fc:	ea92 0f03 	teq	r2, r3
 8000600:	d004      	beq.n	800060c <__addsf3+0x10c>
 8000602:	f092 0f00 	teq	r2, #0
 8000606:	bf08      	it	eq
 8000608:	4608      	moveq	r0, r1
 800060a:	4770      	bx	lr
 800060c:	ea90 0f01 	teq	r0, r1
 8000610:	bf1c      	itt	ne
 8000612:	2000      	movne	r0, #0
 8000614:	4770      	bxne	lr
 8000616:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800061a:	d104      	bne.n	8000626 <__addsf3+0x126>
 800061c:	0040      	lsls	r0, r0, #1
 800061e:	bf28      	it	cs
 8000620:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000624:	4770      	bx	lr
 8000626:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800062a:	bf3c      	itt	cc
 800062c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000630:	4770      	bxcc	lr
 8000632:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000636:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800063e:	4770      	bx	lr
 8000640:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000644:	bf16      	itet	ne
 8000646:	4608      	movne	r0, r1
 8000648:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800064c:	4601      	movne	r1, r0
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	bf06      	itte	eq
 8000652:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000656:	ea90 0f01 	teqeq	r0, r1
 800065a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800065e:	4770      	bx	lr

08000660 <__aeabi_ui2f>:
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	e004      	b.n	8000670 <__aeabi_i2f+0x8>
 8000666:	bf00      	nop

08000668 <__aeabi_i2f>:
 8000668:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	ea5f 0c00 	movs.w	ip, r0
 8000674:	bf08      	it	eq
 8000676:	4770      	bxeq	lr
 8000678:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800067c:	4601      	mov	r1, r0
 800067e:	f04f 0000 	mov.w	r0, #0
 8000682:	e01c      	b.n	80006be <__aeabi_l2f+0x2a>

08000684 <__aeabi_ul2f>:
 8000684:	ea50 0201 	orrs.w	r2, r0, r1
 8000688:	bf08      	it	eq
 800068a:	4770      	bxeq	lr
 800068c:	f04f 0300 	mov.w	r3, #0
 8000690:	e00a      	b.n	80006a8 <__aeabi_l2f+0x14>
 8000692:	bf00      	nop

08000694 <__aeabi_l2f>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80006a0:	d502      	bpl.n	80006a8 <__aeabi_l2f+0x14>
 80006a2:	4240      	negs	r0, r0
 80006a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a8:	ea5f 0c01 	movs.w	ip, r1
 80006ac:	bf02      	ittt	eq
 80006ae:	4684      	moveq	ip, r0
 80006b0:	4601      	moveq	r1, r0
 80006b2:	2000      	moveq	r0, #0
 80006b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80006b8:	bf08      	it	eq
 80006ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80006be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006c2:	fabc f28c 	clz	r2, ip
 80006c6:	3a08      	subs	r2, #8
 80006c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006cc:	db10      	blt.n	80006f0 <__aeabi_l2f+0x5c>
 80006ce:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d2:	4463      	add	r3, ip
 80006d4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006e0:	fa20 f202 	lsr.w	r2, r0, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	f020 0001 	biceq.w	r0, r0, #1
 80006ee:	4770      	bx	lr
 80006f0:	f102 0220 	add.w	r2, r2, #32
 80006f4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006f8:	f1c2 0220 	rsb	r2, r2, #32
 80006fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000700:	fa21 f202 	lsr.w	r2, r1, r2
 8000704:	eb43 0002 	adc.w	r0, r3, r2
 8000708:	bf08      	it	eq
 800070a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800070e:	4770      	bx	lr

08000710 <__gesf2>:
 8000710:	f04f 3cff 	mov.w	ip, #4294967295
 8000714:	e006      	b.n	8000724 <__cmpsf2+0x4>
 8000716:	bf00      	nop

08000718 <__lesf2>:
 8000718:	f04f 0c01 	mov.w	ip, #1
 800071c:	e002      	b.n	8000724 <__cmpsf2+0x4>
 800071e:	bf00      	nop

08000720 <__cmpsf2>:
 8000720:	f04f 0c01 	mov.w	ip, #1
 8000724:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000728:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800072c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	bf18      	it	ne
 8000736:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800073a:	d011      	beq.n	8000760 <__cmpsf2+0x40>
 800073c:	b001      	add	sp, #4
 800073e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000742:	bf18      	it	ne
 8000744:	ea90 0f01 	teqne	r0, r1
 8000748:	bf58      	it	pl
 800074a:	ebb2 0003 	subspl.w	r0, r2, r3
 800074e:	bf88      	it	hi
 8000750:	17c8      	asrhi	r0, r1, #31
 8000752:	bf38      	it	cc
 8000754:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000758:	bf18      	it	ne
 800075a:	f040 0001 	orrne.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000764:	d102      	bne.n	800076c <__cmpsf2+0x4c>
 8000766:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800076a:	d105      	bne.n	8000778 <__cmpsf2+0x58>
 800076c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000770:	d1e4      	bne.n	800073c <__cmpsf2+0x1c>
 8000772:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000776:	d0e1      	beq.n	800073c <__cmpsf2+0x1c>
 8000778:	f85d 0b04 	ldr.w	r0, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop

08000780 <__aeabi_cfrcmple>:
 8000780:	4684      	mov	ip, r0
 8000782:	4608      	mov	r0, r1
 8000784:	4661      	mov	r1, ip
 8000786:	e7ff      	b.n	8000788 <__aeabi_cfcmpeq>

08000788 <__aeabi_cfcmpeq>:
 8000788:	b50f      	push	{r0, r1, r2, r3, lr}
 800078a:	f7ff ffc9 	bl	8000720 <__cmpsf2>
 800078e:	2800      	cmp	r0, #0
 8000790:	bf48      	it	mi
 8000792:	f110 0f00 	cmnmi.w	r0, #0
 8000796:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000798 <__aeabi_fcmpeq>:
 8000798:	f84d ed08 	str.w	lr, [sp, #-8]!
 800079c:	f7ff fff4 	bl	8000788 <__aeabi_cfcmpeq>
 80007a0:	bf0c      	ite	eq
 80007a2:	2001      	moveq	r0, #1
 80007a4:	2000      	movne	r0, #0
 80007a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007aa:	bf00      	nop

080007ac <__aeabi_fcmplt>:
 80007ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007b0:	f7ff ffea 	bl	8000788 <__aeabi_cfcmpeq>
 80007b4:	bf34      	ite	cc
 80007b6:	2001      	movcc	r0, #1
 80007b8:	2000      	movcs	r0, #0
 80007ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80007be:	bf00      	nop

080007c0 <__aeabi_fcmple>:
 80007c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007c4:	f7ff ffe0 	bl	8000788 <__aeabi_cfcmpeq>
 80007c8:	bf94      	ite	ls
 80007ca:	2001      	movls	r0, #1
 80007cc:	2000      	movhi	r0, #0
 80007ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80007d2:	bf00      	nop

080007d4 <__aeabi_fcmpge>:
 80007d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007d8:	f7ff ffd2 	bl	8000780 <__aeabi_cfrcmple>
 80007dc:	bf94      	ite	ls
 80007de:	2001      	movls	r0, #1
 80007e0:	2000      	movhi	r0, #0
 80007e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007e6:	bf00      	nop

080007e8 <__aeabi_fcmpgt>:
 80007e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007ec:	f7ff ffc8 	bl	8000780 <__aeabi_cfrcmple>
 80007f0:	bf34      	ite	cc
 80007f2:	2001      	movcc	r0, #1
 80007f4:	2000      	movcs	r0, #0
 80007f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b96e 	b.w	8000af0 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	468e      	mov	lr, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	f040 8083 	bne.w	8000944 <__udivmoddi4+0x118>
 800083e:	428a      	cmp	r2, r1
 8000840:	4617      	mov	r7, r2
 8000842:	d947      	bls.n	80008d4 <__udivmoddi4+0xa8>
 8000844:	fab2 f382 	clz	r3, r2
 8000848:	b14b      	cbz	r3, 800085e <__udivmoddi4+0x32>
 800084a:	f1c3 0120 	rsb	r1, r3, #32
 800084e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000852:	fa20 f101 	lsr.w	r1, r0, r1
 8000856:	409f      	lsls	r7, r3
 8000858:	ea41 0e0e 	orr.w	lr, r1, lr
 800085c:	409c      	lsls	r4, r3
 800085e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000862:	fbbe fcf8 	udiv	ip, lr, r8
 8000866:	fa1f f987 	uxth.w	r9, r7
 800086a:	fb08 e21c 	mls	r2, r8, ip, lr
 800086e:	fb0c f009 	mul.w	r0, ip, r9
 8000872:	0c21      	lsrs	r1, r4, #16
 8000874:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000878:	4290      	cmp	r0, r2
 800087a:	d90a      	bls.n	8000892 <__udivmoddi4+0x66>
 800087c:	18ba      	adds	r2, r7, r2
 800087e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000882:	f080 8118 	bcs.w	8000ab6 <__udivmoddi4+0x28a>
 8000886:	4290      	cmp	r0, r2
 8000888:	f240 8115 	bls.w	8000ab6 <__udivmoddi4+0x28a>
 800088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000890:	443a      	add	r2, r7
 8000892:	1a12      	subs	r2, r2, r0
 8000894:	fbb2 f0f8 	udiv	r0, r2, r8
 8000898:	fb08 2210 	mls	r2, r8, r0, r2
 800089c:	fb00 f109 	mul.w	r1, r0, r9
 80008a0:	b2a4      	uxth	r4, r4
 80008a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008a6:	42a1      	cmp	r1, r4
 80008a8:	d909      	bls.n	80008be <__udivmoddi4+0x92>
 80008aa:	193c      	adds	r4, r7, r4
 80008ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80008b0:	f080 8103 	bcs.w	8000aba <__udivmoddi4+0x28e>
 80008b4:	42a1      	cmp	r1, r4
 80008b6:	f240 8100 	bls.w	8000aba <__udivmoddi4+0x28e>
 80008ba:	3802      	subs	r0, #2
 80008bc:	443c      	add	r4, r7
 80008be:	1a64      	subs	r4, r4, r1
 80008c0:	2100      	movs	r1, #0
 80008c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008c6:	b11e      	cbz	r6, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	2200      	movs	r2, #0
 80008ca:	40dc      	lsrs	r4, r3
 80008cc:	e9c6 4200 	strd	r4, r2, [r6]
 80008d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d4:	b902      	cbnz	r2, 80008d8 <__udivmoddi4+0xac>
 80008d6:	deff      	udf	#255	; 0xff
 80008d8:	fab2 f382 	clz	r3, r2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d14f      	bne.n	8000980 <__udivmoddi4+0x154>
 80008e0:	1a8d      	subs	r5, r1, r2
 80008e2:	2101      	movs	r1, #1
 80008e4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80008e8:	fa1f f882 	uxth.w	r8, r2
 80008ec:	fbb5 fcfe 	udiv	ip, r5, lr
 80008f0:	fb0e 551c 	mls	r5, lr, ip, r5
 80008f4:	fb08 f00c 	mul.w	r0, r8, ip
 80008f8:	0c22      	lsrs	r2, r4, #16
 80008fa:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80008fe:	42a8      	cmp	r0, r5
 8000900:	d907      	bls.n	8000912 <__udivmoddi4+0xe6>
 8000902:	197d      	adds	r5, r7, r5
 8000904:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000908:	d202      	bcs.n	8000910 <__udivmoddi4+0xe4>
 800090a:	42a8      	cmp	r0, r5
 800090c:	f200 80e9 	bhi.w	8000ae2 <__udivmoddi4+0x2b6>
 8000910:	4694      	mov	ip, r2
 8000912:	1a2d      	subs	r5, r5, r0
 8000914:	fbb5 f0fe 	udiv	r0, r5, lr
 8000918:	fb0e 5510 	mls	r5, lr, r0, r5
 800091c:	fb08 f800 	mul.w	r8, r8, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000926:	45a0      	cmp	r8, r4
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x10e>
 800092a:	193c      	adds	r4, r7, r4
 800092c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x10c>
 8000932:	45a0      	cmp	r8, r4
 8000934:	f200 80d9 	bhi.w	8000aea <__udivmoddi4+0x2be>
 8000938:	4610      	mov	r0, r2
 800093a:	eba4 0408 	sub.w	r4, r4, r8
 800093e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000942:	e7c0      	b.n	80008c6 <__udivmoddi4+0x9a>
 8000944:	428b      	cmp	r3, r1
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x12e>
 8000948:	2e00      	cmp	r6, #0
 800094a:	f000 80b1 	beq.w	8000ab0 <__udivmoddi4+0x284>
 800094e:	2100      	movs	r1, #0
 8000950:	e9c6 0500 	strd	r0, r5, [r6]
 8000954:	4608      	mov	r0, r1
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	fab3 f183 	clz	r1, r3
 800095e:	2900      	cmp	r1, #0
 8000960:	d14b      	bne.n	80009fa <__udivmoddi4+0x1ce>
 8000962:	42ab      	cmp	r3, r5
 8000964:	d302      	bcc.n	800096c <__udivmoddi4+0x140>
 8000966:	4282      	cmp	r2, r0
 8000968:	f200 80b9 	bhi.w	8000ade <__udivmoddi4+0x2b2>
 800096c:	1a84      	subs	r4, r0, r2
 800096e:	eb65 0303 	sbc.w	r3, r5, r3
 8000972:	2001      	movs	r0, #1
 8000974:	469e      	mov	lr, r3
 8000976:	2e00      	cmp	r6, #0
 8000978:	d0aa      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800097a:	e9c6 4e00 	strd	r4, lr, [r6]
 800097e:	e7a7      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000980:	409f      	lsls	r7, r3
 8000982:	f1c3 0220 	rsb	r2, r3, #32
 8000986:	40d1      	lsrs	r1, r2
 8000988:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800098c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000990:	fa1f f887 	uxth.w	r8, r7
 8000994:	fb0e 1110 	mls	r1, lr, r0, r1
 8000998:	fa24 f202 	lsr.w	r2, r4, r2
 800099c:	409d      	lsls	r5, r3
 800099e:	fb00 fc08 	mul.w	ip, r0, r8
 80009a2:	432a      	orrs	r2, r5
 80009a4:	0c15      	lsrs	r5, r2, #16
 80009a6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80009aa:	45ac      	cmp	ip, r5
 80009ac:	fa04 f403 	lsl.w	r4, r4, r3
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x19a>
 80009b2:	197d      	adds	r5, r7, r5
 80009b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b8:	f080 808f 	bcs.w	8000ada <__udivmoddi4+0x2ae>
 80009bc:	45ac      	cmp	ip, r5
 80009be:	f240 808c 	bls.w	8000ada <__udivmoddi4+0x2ae>
 80009c2:	3802      	subs	r0, #2
 80009c4:	443d      	add	r5, r7
 80009c6:	eba5 050c 	sub.w	r5, r5, ip
 80009ca:	fbb5 f1fe 	udiv	r1, r5, lr
 80009ce:	fb0e 5c11 	mls	ip, lr, r1, r5
 80009d2:	fb01 f908 	mul.w	r9, r1, r8
 80009d6:	b295      	uxth	r5, r2
 80009d8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80009dc:	45a9      	cmp	r9, r5
 80009de:	d907      	bls.n	80009f0 <__udivmoddi4+0x1c4>
 80009e0:	197d      	adds	r5, r7, r5
 80009e2:	f101 32ff 	add.w	r2, r1, #4294967295
 80009e6:	d274      	bcs.n	8000ad2 <__udivmoddi4+0x2a6>
 80009e8:	45a9      	cmp	r9, r5
 80009ea:	d972      	bls.n	8000ad2 <__udivmoddi4+0x2a6>
 80009ec:	3902      	subs	r1, #2
 80009ee:	443d      	add	r5, r7
 80009f0:	eba5 0509 	sub.w	r5, r5, r9
 80009f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009f8:	e778      	b.n	80008ec <__udivmoddi4+0xc0>
 80009fa:	f1c1 0720 	rsb	r7, r1, #32
 80009fe:	408b      	lsls	r3, r1
 8000a00:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a04:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a08:	fa25 f407 	lsr.w	r4, r5, r7
 8000a0c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a10:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a14:	fa1f f88c 	uxth.w	r8, ip
 8000a18:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1c:	fa20 f307 	lsr.w	r3, r0, r7
 8000a20:	fb09 fa08 	mul.w	sl, r9, r8
 8000a24:	408d      	lsls	r5, r1
 8000a26:	431d      	orrs	r5, r3
 8000a28:	0c2b      	lsrs	r3, r5, #16
 8000a2a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a2e:	45a2      	cmp	sl, r4
 8000a30:	fa02 f201 	lsl.w	r2, r2, r1
 8000a34:	fa00 f301 	lsl.w	r3, r0, r1
 8000a38:	d909      	bls.n	8000a4e <__udivmoddi4+0x222>
 8000a3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000a3e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a42:	d248      	bcs.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a44:	45a2      	cmp	sl, r4
 8000a46:	d946      	bls.n	8000ad6 <__udivmoddi4+0x2aa>
 8000a48:	f1a9 0902 	sub.w	r9, r9, #2
 8000a4c:	4464      	add	r4, ip
 8000a4e:	eba4 040a 	sub.w	r4, r4, sl
 8000a52:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a56:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a5a:	fb00 fa08 	mul.w	sl, r0, r8
 8000a5e:	b2ad      	uxth	r5, r5
 8000a60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a64:	45a2      	cmp	sl, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x24e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a70:	d22d      	bcs.n	8000ace <__udivmoddi4+0x2a2>
 8000a72:	45a2      	cmp	sl, r4
 8000a74:	d92b      	bls.n	8000ace <__udivmoddi4+0x2a2>
 8000a76:	3802      	subs	r0, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000a82:	eba4 040a 	sub.w	r4, r4, sl
 8000a86:	454c      	cmp	r4, r9
 8000a88:	46c6      	mov	lr, r8
 8000a8a:	464d      	mov	r5, r9
 8000a8c:	d319      	bcc.n	8000ac2 <__udivmoddi4+0x296>
 8000a8e:	d016      	beq.n	8000abe <__udivmoddi4+0x292>
 8000a90:	b15e      	cbz	r6, 8000aaa <__udivmoddi4+0x27e>
 8000a92:	ebb3 020e 	subs.w	r2, r3, lr
 8000a96:	eb64 0405 	sbc.w	r4, r4, r5
 8000a9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a9e:	fa22 f301 	lsr.w	r3, r2, r1
 8000aa2:	431f      	orrs	r7, r3
 8000aa4:	40cc      	lsrs	r4, r1
 8000aa6:	e9c6 7400 	strd	r7, r4, [r6]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e70c      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	e6eb      	b.n	8000892 <__udivmoddi4+0x66>
 8000aba:	4610      	mov	r0, r2
 8000abc:	e6ff      	b.n	80008be <__udivmoddi4+0x92>
 8000abe:	4543      	cmp	r3, r8
 8000ac0:	d2e6      	bcs.n	8000a90 <__udivmoddi4+0x264>
 8000ac2:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ac6:	eb69 050c 	sbc.w	r5, r9, ip
 8000aca:	3801      	subs	r0, #1
 8000acc:	e7e0      	b.n	8000a90 <__udivmoddi4+0x264>
 8000ace:	4628      	mov	r0, r5
 8000ad0:	e7d3      	b.n	8000a7a <__udivmoddi4+0x24e>
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	e78c      	b.n	80009f0 <__udivmoddi4+0x1c4>
 8000ad6:	4681      	mov	r9, r0
 8000ad8:	e7b9      	b.n	8000a4e <__udivmoddi4+0x222>
 8000ada:	4608      	mov	r0, r1
 8000adc:	e773      	b.n	80009c6 <__udivmoddi4+0x19a>
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e749      	b.n	8000976 <__udivmoddi4+0x14a>
 8000ae2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae6:	443d      	add	r5, r7
 8000ae8:	e713      	b.n	8000912 <__udivmoddi4+0xe6>
 8000aea:	3802      	subs	r0, #2
 8000aec:	443c      	add	r4, r7
 8000aee:	e724      	b.n	800093a <__udivmoddi4+0x10e>

08000af0 <__aeabi_idiv0>:
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop

08000af4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000afc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b00:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b10:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b14:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b1c:	e000      	b.n	8000b20 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b1e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f9      	beq.n	8000b1e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b2a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e01f      	b.n	8000b92 <selectMux+0x52>
		if (pin & (i << 1)) {
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005a      	lsls	r2, r3, #1
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4413      	add	r3, r2
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <selectMux+0x64>)
 8000b70:	f001 fe22 	bl	80027b8 <HAL_GPIO_WritePin>
 8000b74:	e00a      	b.n	8000b8c <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <selectMux+0x64>)
 8000b88:	f001 fe16 	bl	80027b8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	dddc      	ble.n	8000b52 <selectMux+0x12>
		}
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f001 fdfc 	bl	80027b8 <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <ADC_Select_CH0>:




void ADC_Select_CH0 (void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_9;
 8000bd8:	2309      	movs	r3, #9
 8000bda:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <ADC_Select_CH0+0x38>)
 8000bea:	f001 f8df 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <ADC_Select_CH0+0x30>
	{
		Error_Handler();
 8000bf4:	f000 fb42 	bl	800127c <Error_Handler>
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200001d0 	.word	0x200001d0

08000c04 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8000c14:	2303      	movs	r3, #3
 8000c16:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <ADC_Select_CH1+0x34>)
 8000c22:	f001 f8c3 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <ADC_Select_CH1+0x2c>
	{
		Error_Handler();
 8000c2c:	f000 fb26 	bl	800127c <Error_Handler>
	}
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200001d0 	.word	0x200001d0

08000c3c <readPressure>:

float readPressure() {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  ADC_Select_CH0();
 8000c42:	f7ff ffc1 	bl	8000bc8 <ADC_Select_CH0>
  HAL_ADC_Start(&hadc);
 8000c46:	480c      	ldr	r0, [pc, #48]	; (8000c78 <readPressure+0x3c>)
 8000c48:	f000 ff88 	bl	8001b5c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 8000c4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c50:	4809      	ldr	r0, [pc, #36]	; (8000c78 <readPressure+0x3c>)
 8000c52:	f001 f80f 	bl	8001c74 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc);
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <readPressure+0x3c>)
 8000c58:	f001 f89c 	bl	8001d94 <HAL_ADC_GetValue>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fcfe 	bl	8000660 <__aeabi_ui2f>
 8000c64:	4603      	mov	r3, r0
 8000c66:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <readPressure+0x3c>)
 8000c6a:	f000 ffd7 	bl	8001c1c <HAL_ADC_Stop>
  return data;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200001d0 	.word	0x200001d0

08000c7c <read3V3>:

float read3V3() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  ADC_Select_CH1();
 8000c82:	f7ff ffbf 	bl	8000c04 <ADC_Select_CH1>
  HAL_ADC_Start(&hadc);
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <read3V3+0x3c>)
 8000c88:	f000 ff68 	bl	8001b5c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1000);
 8000c8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <read3V3+0x3c>)
 8000c92:	f000 ffef 	bl	8001c74 <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc);
 8000c96:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <read3V3+0x3c>)
 8000c98:	f001 f87c 	bl	8001d94 <HAL_ADC_GetValue>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fcde 	bl	8000660 <__aeabi_ui2f>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <read3V3+0x3c>)
 8000caa:	f000 ffb7 	bl	8001c1c <HAL_ADC_Stop>
  return data;
 8000cae:	687b      	ldr	r3, [r7, #4]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001d0 	.word	0x200001d0

08000cbc <belowVoltageThresh>:

bool belowVoltageThresh() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
	float voltage_value = read3V3();
 8000cc2:	f7ff ffdb 	bl	8000c7c <read3V3>
 8000cc6:	6078      	str	r0, [r7, #4]
	if (voltage_value < VOLTAGE_THRESH) {
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <belowVoltageThresh+0x38>)
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fd6d 	bl	80007ac <__aeabi_fcmplt>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d007      	beq.n	8000ce8 <belowVoltageThresh+0x2c>
		// Turn on red LED
	    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <belowVoltageThresh+0x3c>)
 8000ce0:	f001 fd6a 	bl	80027b8 <HAL_GPIO_WritePin>

		// Log error to SD card
//	    logSDCard("ERROR Voltage too low");
	    return true;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e000      	b.n	8000cea <belowVoltageThresh+0x2e>
	} else {
		return false;
 8000ce8:	2300      	movs	r3, #0
	}
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40400000 	.word	0x40400000
 8000cf8:	40020800 	.word	0x40020800

08000cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Starting program... \r\n");
 8000d02:	483f      	ldr	r0, [pc, #252]	; (8000e00 <main+0x104>)
 8000d04:	f004 ffae 	bl	8005c64 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fd73 	bl	80017f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f88e 	bl	8000e2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000d10:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <main+0x108>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d16:	f000 f9d5 	bl	80010c4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000d1a:	f000 f8d3 	bl	8000ec4 <MX_ADC_Init>
  MX_I2C1_Init();
 8000d1e:	f000 f943 	bl	8000fa8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000d22:	f000 f96f 	bl	8001004 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000d26:	f000 f9a3 	bl	8001070 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4836      	ldr	r0, [pc, #216]	; (8000e08 <main+0x10c>)
 8000d30:	f001 fd42 	bl	80027b8 <HAL_GPIO_WritePin>
  printf("Initialization complete \r\n");
 8000d34:	4835      	ldr	r0, [pc, #212]	; (8000e0c <main+0x110>)
 8000d36:	f004 ff95 	bl	8005c64 <puts>

  int voltage_thresh_count = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Check 3.3V threshold
	if (voltage_thresh_count > VOLTAGE_THRESH_CNT) {
 8000d3e:	2205      	movs	r2, #5
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	4293      	cmp	r3, r2
 8000d44:	dd02      	ble.n	8000d4c <main+0x50>
		  // TODO: Voltage too low, exiting
		  exit(EXIT_SUCCESS);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f004 fec6 	bl	8005ad8 <exit>
	  }

	  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	e052      	b.n	8000df8 <main+0xfc>
		  enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8000d52:	4a2f      	ldr	r2, [pc, #188]	; (8000e10 <main+0x114>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d5a:	492e      	ldr	r1, [pc, #184]	; (8000e14 <main+0x118>)
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d62:	4619      	mov	r1, r3
 8000d64:	4610      	mov	r0, r2
 8000d66:	f7ff ff1f 	bl	8000ba8 <enableMux>
		  for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e03d      	b.n	8000dec <main+0xf0>
			  selectMux(pwr_sel, pwrMuxSelect, 4);
 8000d70:	2204      	movs	r2, #4
 8000d72:	4929      	ldr	r1, [pc, #164]	; (8000e18 <main+0x11c>)
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fee3 	bl	8000b40 <selectMux>

			  if (belowVoltageThresh()) { // ADC channel for 3v3 sense
 8000d7a:	f7ff ff9f 	bl	8000cbc <belowVoltageThresh>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <main+0x8e>
				  voltage_thresh_count++;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
			  }

			  for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	e027      	b.n	8000de0 <main+0xe4>
				  enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <main+0x120>)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d98:	4921      	ldr	r1, [pc, #132]	; (8000e20 <main+0x124>)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000da0:	4619      	mov	r1, r3
 8000da2:	4610      	mov	r0, r2
 8000da4:	f7ff ff00 	bl	8000ba8 <enableMux>
				  for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	e012      	b.n	8000dd4 <main+0xd8>
					  selectMux(sense_sel, senseMuxSelect, 8);
 8000dae:	2208      	movs	r2, #8
 8000db0:	491c      	ldr	r1, [pc, #112]	; (8000e24 <main+0x128>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fec4 	bl	8000b40 <selectMux>

					  // Read voltage sense
					  float raw_pressure_voltage = readPressure(); // ADC channel for voltage
 8000db8:	f7ff ff40 	bl	8000c3c <readPressure>
 8000dbc:	6038      	str	r0, [r7, #0]
					  printf("raw pressure voltage: %f", raw_pressure_voltage);
 8000dbe:	6838      	ldr	r0, [r7, #0]
 8000dc0:	f7ff fb40 	bl	8000444 <__aeabi_f2d>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <main+0x12c>)
 8000dca:	f004 fec5 	bl	8005b58 <iprintf>
				  for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	dde9      	ble.n	8000dae <main+0xb2>
			  for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	ddd4      	ble.n	8000d90 <main+0x94>
		  for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b07      	cmp	r3, #7
 8000df0:	ddbe      	ble.n	8000d70 <main+0x74>
	  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	3301      	adds	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	dda9      	ble.n	8000d52 <main+0x56>
	if (voltage_thresh_count > VOLTAGE_THRESH_CNT) {
 8000dfe:	e79e      	b.n	8000d3e <main+0x42>
 8000e00:	08006b3c 	.word	0x08006b3c
 8000e04:	e000007c 	.word	0xe000007c
 8000e08:	40020800 	.word	0x40020800
 8000e0c:	08006b54 	.word	0x08006b54
 8000e10:	20000000 	.word	0x20000000
 8000e14:	08006b8c 	.word	0x08006b8c
 8000e18:	2000001c 	.word	0x2000001c
 8000e1c:	20000028 	.word	0x20000028
 8000e20:	08006b9c 	.word	0x08006b9c
 8000e24:	20000010 	.word	0x20000010
 8000e28:	08006b70 	.word	0x08006b70

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b092      	sub	sp, #72	; 0x48
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2234      	movs	r2, #52	; 0x34
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fe84 	bl	8005b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <SystemClock_Config+0x94>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <SystemClock_Config+0x94>)
 8000e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e5c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e66:	2310      	movs	r3, #16
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000e72:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000e76:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fab7 	bl	80043f4 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000e8c:	f000 f9f6 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fdd3 	bl	8004a54 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 f9e2 	bl	800127c <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3748      	adds	r7, #72	; 0x48
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ed4:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <MX_ADC_Init+0xe0>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000efe:	4b28      	ldr	r3, [pc, #160]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 3;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f14:	2203      	movs	r2, #3
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f36:	f000 fccb 	bl	80018d0 <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000f40:	f000 f99c 	bl	800127c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f44:	2309      	movs	r3, #9
 8000f46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4619      	mov	r1, r3
 8000f54:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f56:	f000 ff29 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000f60:	f000 f98c 	bl	800127c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f64:	2303      	movs	r3, #3
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f72:	f000 ff1b 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000f7c:	f000 f97e 	bl	800127c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f80:	2303      	movs	r3, #3
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_ADC_Init+0xdc>)
 8000f8a:	f000 ff0f 	bl	8001dac <HAL_ADC_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC_Init+0xd4>
  {
    Error_Handler();
 8000f94:	f000 f972 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001d0 	.word	0x200001d0
 8000fa4:	40012400 	.word	0x40012400

08000fa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_I2C1_Init+0x54>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <MX_I2C1_Init+0x58>)
 8000fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_I2C1_Init+0x50>)
 8000fe6:	f001 fbff 	bl	80027e8 <HAL_I2C_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f944 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000017c 	.word	0x2000017c
 8000ffc:	40005400 	.word	0x40005400
 8001000:	000186a0 	.word	0x000186a0

08001004 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_SPI2_Init+0x64>)
 800100a:	4a18      	ldr	r2, [pc, #96]	; (800106c <MX_SPI2_Init+0x68>)
 800100c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_SPI2_Init+0x64>)
 8001010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001014:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_SPI2_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_SPI2_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_SPI2_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_SPI2_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_SPI2_Init+0x64>)
 8001030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001034:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_SPI2_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <MX_SPI2_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_SPI2_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <MX_SPI2_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_SPI2_Init+0x64>)
 8001050:	220a      	movs	r2, #10
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_SPI2_Init+0x64>)
 8001056:	f003 ff69 	bl	8004f2c <HAL_SPI_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f90c 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000e0 	.word	0x200000e0
 800106c:	40003800 	.word	0x40003800

08001070 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <MX_USART3_UART_Init+0x50>)
 8001078:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800107c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001080:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 8001096:	220c      	movs	r2, #12
 8001098:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_USART3_UART_Init+0x4c>)
 80010a8:	f004 f8bf 	bl	800522a <HAL_UART_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b2:	f000 f8e3 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000138 	.word	0x20000138
 80010c0:	40004800 	.word	0x40004800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b55      	ldr	r3, [pc, #340]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	4a54      	ldr	r2, [pc, #336]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	61d3      	str	r3, [r2, #28]
 80010e6:	4b52      	ldr	r3, [pc, #328]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <MX_GPIO_Init+0x16c>)
 80010f8:	f043 0320 	orr.w	r3, r3, #32
 80010fc:	61d3      	str	r3, [r2, #28]
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f003 0320 	and.w	r3, r3, #32
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <MX_GPIO_Init+0x16c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a48      	ldr	r2, [pc, #288]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a42      	ldr	r2, [pc, #264]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <MX_GPIO_Init+0x16c>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a3c      	ldr	r2, [pc, #240]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <MX_GPIO_Init+0x16c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001152:	2200      	movs	r2, #0
 8001154:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8001158:	4836      	ldr	r0, [pc, #216]	; (8001234 <MX_GPIO_Init+0x170>)
 800115a:	f001 fb2d 	bl	80027b8 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 800115e:	2200      	movs	r2, #0
 8001160:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001164:	4834      	ldr	r0, [pc, #208]	; (8001238 <MX_GPIO_Init+0x174>)
 8001166:	f001 fb27 	bl	80027b8 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800116a:	2200      	movs	r2, #0
 800116c:	f641 416d 	movw	r1, #7277	; 0x1c6d
 8001170:	4832      	ldr	r0, [pc, #200]	; (800123c <MX_GPIO_Init+0x178>)
 8001172:	f001 fb21 	bl	80027b8 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4831      	ldr	r0, [pc, #196]	; (8001240 <MX_GPIO_Init+0x17c>)
 800117c:	f001 fb1c 	bl	80027b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001180:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001184:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	4826      	ldr	r0, [pc, #152]	; (8001234 <MX_GPIO_Init+0x170>)
 800119a:	f001 f98d 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 800119e:	f241 03f7 	movw	r3, #4343	; 0x10f7
 80011a2:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4820      	ldr	r0, [pc, #128]	; (8001238 <MX_GPIO_Init+0x174>)
 80011b8:	f001 f97e 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin MCU_PB3_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80011bc:	f641 436d 	movw	r3, #7277	; 0x1c6d
 80011c0:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4819      	ldr	r0, [pc, #100]	; (800123c <MX_GPIO_Init+0x178>)
 80011d6:	f001 f96f 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80011da:	2340      	movs	r3, #64	; 0x40
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4811      	ldr	r0, [pc, #68]	; (8001234 <MX_GPIO_Init+0x170>)
 80011ee:	f001 f963 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80011f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_GPIO_Init+0x174>)
 8001208:	f001 f956 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 800120c:	2304      	movs	r3, #4
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <MX_GPIO_Init+0x17c>)
 8001224:	f001 f948 	bl	80024b8 <HAL_GPIO_Init>

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020c00 	.word	0x40020c00

08001244 <_write>:

/* USER CODE BEGIN 4 */
// Use GCC for printf
// Avoid wasting a UART terminal just for writing
int _write(int file, char *ptr, int len) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e009      	b.n	800126a <_write+0x26>
		ITM_SendChar(*ptr++);
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	60ba      	str	r2, [r7, #8]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc48 	bl	8000af4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	dbf1      	blt.n	8001256 <_write+0x12>
	}
	return len;
 8001272:	687b      	ldr	r3, [r7, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_MspInit+0x68>)
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_MspInit+0x68>)
 8001294:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001298:	6253      	str	r3, [r2, #36]	; 0x24
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x68>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x68>)
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4a11      	ldr	r2, [pc, #68]	; (80012f0 <HAL_MspInit+0x68>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6213      	str	r3, [r2, #32]
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x68>)
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x68>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_MspInit+0x68>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6253      	str	r3, [r2, #36]	; 0x24
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <HAL_MspInit+0x68>)
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2005      	movs	r0, #5
 80012dc:	f001 f82b 	bl	8002336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80012e0:	2005      	movs	r0, #5
 80012e2:	f001 f844 	bl	800236e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800

080012f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <HAL_ADC_MspInit+0xd4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d153      	bne.n	80013be <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 800131c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001320:	6213      	str	r3, [r2, #32]
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	61d3      	str	r3, [r2, #28]
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_ADC_MspInit+0xd8>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 8001376:	2304      	movs	r3, #4
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <HAL_ADC_MspInit+0xdc>)
 800138a:	f001 f895 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_SENSE_Pin;
 800138e:	2308      	movs	r3, #8
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VOLTAGE_SENSE_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <HAL_ADC_MspInit+0xe0>)
 80013a2:	f001 f889 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	; (80013d8 <HAL_ADC_MspInit+0xe4>)
 80013ba:	f001 f87d 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3730      	adds	r7, #48	; 0x30
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40012400 	.word	0x40012400
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0x9c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d138      	bne.n	8001470 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b1f      	ldr	r3, [pc, #124]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b1c      	ldr	r3, [pc, #112]	; (800147c <HAL_I2C_MspInit+0xa0>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001416:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001428:	2304      	movs	r3, #4
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <HAL_I2C_MspInit+0xa4>)
 8001434:	f001 f840 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_I2C_MspInit+0xa0>)
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <HAL_I2C_MspInit+0xa0>)
 800143e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001442:	6253      	str	r3, [r2, #36]	; 0x24
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_I2C_MspInit+0xa0>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	201f      	movs	r0, #31
 8001456:	f000 ff6e 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800145a:	201f      	movs	r0, #31
 800145c:	f000 ff87 	bl	800236e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2020      	movs	r0, #32
 8001466:	f000 ff66 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800146a:	2020      	movs	r0, #32
 800146c:	f000 ff7f 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3728      	adds	r7, #40	; 0x28
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40005400 	.word	0x40005400
 800147c:	40023800 	.word	0x40023800
 8001480:	40020400 	.word	0x40020400

08001484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_SPI_MspInit+0x8c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d130      	bne.n	8001508 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6253      	str	r3, [r2, #36]	; 0x24
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	61d3      	str	r3, [r2, #28]
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_SPI_MspInit+0x90>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014e8:	2305      	movs	r3, #5
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4809      	ldr	r0, [pc, #36]	; (8001518 <HAL_SPI_MspInit+0x94>)
 80014f4:	f000 ffe0 	bl	80024b8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2100      	movs	r1, #0
 80014fc:	2024      	movs	r0, #36	; 0x24
 80014fe:	f000 ff1a 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001502:	2024      	movs	r0, #36	; 0x24
 8001504:	f000 ff33 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40003800 	.word	0x40003800
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_UART_MspInit+0x8c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d130      	bne.n	80015a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6253      	str	r3, [r2, #36]	; 0x24
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_UART_MspInit+0x90>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x90>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0x90>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800156e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001580:	2307      	movs	r3, #7
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_UART_MspInit+0x94>)
 800158c:	f000 ff94 	bl	80024b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2027      	movs	r0, #39	; 0x27
 8001596:	f000 fece 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800159a:	2027      	movs	r0, #39	; 0x27
 800159c:	f000 fee7 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015a0:	bf00      	nop
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40004800 	.word	0x40004800
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020800 	.word	0x40020800

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f94d 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <I2C1_EV_IRQHandler+0x10>)
 8001616:	f001 fa2b 	bl	8002a70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000017c 	.word	0x2000017c

08001624 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <I2C1_ER_IRQHandler+0x10>)
 800162a:	f001 fb92 	bl	8002d52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000017c 	.word	0x2000017c

08001638 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SPI2_IRQHandler+0x10>)
 800163e:	f003 fcf1 	bl	8005024 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200000e0 	.word	0x200000e0

0800164c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <USART3_IRQHandler+0x10>)
 8001652:	f003 fe37 	bl	80052c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000138 	.word	0x20000138

08001660 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800166a:	f004 fa2f 	bl	8005acc <__errno>
 800166e:	4603      	mov	r3, r0
 8001670:	2216      	movs	r2, #22
 8001672:	601a      	str	r2, [r3, #0]
	return -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <_exit>:

void _exit (int status)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ffe7 	bl	8001660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001692:	e7fe      	b.n	8001692 <_exit+0x12>

08001694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	e00a      	b.n	80016bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016a6:	f3af 8000 	nop.w
 80016aa:	4601      	mov	r1, r0
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	b2ca      	uxtb	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf0      	blt.n	80016a6 <_read+0x12>
	}

return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
	return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
	return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f004 f9b4 	bl	8005acc <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20004000 	.word	0x20004000
 8001790:	00000400 	.word	0x00000400
 8001794:	200000d4 	.word	0x200000d4
 8001798:	20000238 	.word	0x20000238

0800179c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	; (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	; (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	; (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ce:	f7ff ffe5 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f004 f995 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d6:	f7ff fa91 	bl	8000cfc <main>
  bx lr
 80017da:	4770      	bx	lr
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80017e4:	08006c88 	.word	0x08006c88
  ldr r2, =_sbss
 80017e8:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80017ec:	20000238 	.word	0x20000238

080017f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC1_IRQHandler>

080017f2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 fd8f 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f80e 	bl	8001824 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e001      	b.n	8001818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001814:	f7ff fd38 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001818:	79fb      	ldrb	r3, [r7, #7]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_InitTick+0x68>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d022      	beq.n	800187e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_InitTick+0x6c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_InitTick+0x68>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001844:	fbb1 f3f3 	udiv	r3, r1, r3
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fd9c 	bl	800238a <HAL_SYSTICK_Config>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10f      	bne.n	8001878 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d809      	bhi.n	8001872 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185e:	2200      	movs	r2, #0
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	f04f 30ff 	mov.w	r0, #4294967295
 8001866:	f000 fd66 	bl	8002336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_InitTick+0x70>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e007      	b.n	8001882 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e004      	b.n	8001882 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000050 	.word	0x20000050
 8001890:	20000048 	.word	0x20000048
 8001894:	2000004c 	.word	0x2000004c

08001898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x1c>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000224 	.word	0x20000224
 80018b8:	20000050 	.word	0x20000050

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_GetTick+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000224 	.word	0x20000224

080018d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e127      	b.n	8001b40 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d115      	bne.n	800192a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b8e      	ldr	r3, [pc, #568]	; (8001b48 <HAL_ADC_Init+0x278>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a8d      	ldr	r2, [pc, #564]	; (8001b48 <HAL_ADC_Init+0x278>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_ADC_Init+0x278>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fce5 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	f040 80ff 	bne.w	8001b36 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001940:	f023 0302 	bic.w	r3, r3, #2
 8001944:	f043 0202 	orr.w	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800194c:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_ADC_Init+0x27c>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	497c      	ldr	r1, [pc, #496]	; (8001b4c <HAL_ADC_Init+0x27c>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001966:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800196e:	4619      	mov	r1, r3
 8001970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001974:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fab3 f383 	clz	r3, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800198a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001990:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80019b2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80019b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b6:	4313      	orrs	r3, r2
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d007      	beq.n	80019d2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80019ca:	4313      	orrs	r3, r2
 80019cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019ce:	4313      	orrs	r3, r2
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019dc:	2b40      	cmp	r3, #64	; 0x40
 80019de:	d04f      	beq.n	8001a80 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e6:	4313      	orrs	r3, r2
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80019f2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6912      	ldr	r2, [r2, #16]
 80019f8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80019fc:	d003      	beq.n	8001a06 <HAL_ADC_Init+0x136>
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6912      	ldr	r2, [r2, #16]
 8001a02:	2a01      	cmp	r2, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_ADC_Init+0x13c>
 8001a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_Init+0x13e>
 8001a0c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001a0e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a12:	4313      	orrs	r3, r2
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d125      	bne.n	8001a6c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d114      	bne.n	8001a54 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001a34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	fa92 f2a2 	rbit	r2, r2
 8001a3c:	617a      	str	r2, [r7, #20]
  return result;
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	4093      	lsls	r3, r2
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
 8001a52:	e00b      	b.n	8001a6c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a58:	f043 0220 	orr.w	r2, r3, #32
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4b37      	ldr	r3, [pc, #220]	; (8001b50 <HAL_ADC_Init+0x280>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_ADC_Init+0x284>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a90:	430b      	orrs	r3, r1
 8001a92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9c:	d003      	beq.n	8001aa6 <HAL_ADC_Init+0x1d6>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d119      	bne.n	8001ada <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001aba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	fa92 f2a2 	rbit	r2, r2
 8001ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	fab2 f282 	clz	r2, r2
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	fa03 f202 	lsl.w	r2, r3, r2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <HAL_ADC_Init+0x288>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d10b      	bne.n	8001b12 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f023 0303 	bic.w	r3, r3, #3
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b10:	e014      	b.n	8001b3c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	f023 0312 	bic.w	r3, r3, #18
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3738      	adds	r7, #56	; 0x38
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40012700 	.word	0x40012700
 8001b50:	fcfc16ff 	.word	0xfcfc16ff
 8001b54:	c0fff18d 	.word	0xc0fff18d
 8001b58:	bf80fffe 	.word	0xbf80fffe

08001b5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_Start+0x1a>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e04e      	b.n	8001c14 <HAL_ADC_Start+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 fa64 	bl	800204c <ADC_Enable>
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d141      	bne.n	8001c12 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d007      	beq.n	8001bc0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bcc:	d106      	bne.n	8001bdc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd2:	f023 0206 	bic.w	r2, r3, #6
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	651a      	str	r2, [r3, #80]	; 0x50
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bf2:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d107      	bne.n	8001c12 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c10:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_ADC_Stop+0x1a>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e01a      	b.n	8001c6c <HAL_ADC_Stop+0x50>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa60 	bl	8002104 <ADC_ConversionStop_Disable>
 8001c44:	4603      	mov	r3, r0
 8001c46:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c90:	d113      	bne.n	8001cba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d10b      	bne.n	8001cba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e068      	b.n	8001d8c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001cba:	f7ff fdff 	bl	80018bc <HAL_GetTick>
 8001cbe:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cc0:	e021      	b.n	8001d06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d01d      	beq.n	8001d06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x6c>
 8001cd0:	f7ff fdf4 	bl	80018bc <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d212      	bcs.n	8001d06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e042      	b.n	8001d8c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0d6      	beq.n	8001cc2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d104      	bne.n	8001d26 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0212 	mvn.w	r2, #18
 8001d24:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d124      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11f      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d111      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x20>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e134      	b.n	8002036 <HAL_ADC_ConfigChannel+0x28a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d81c      	bhi.n	8001e16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b05      	subs	r3, #5
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4019      	ands	r1, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b05      	subs	r3, #5
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
 8001e14:	e07e      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d81c      	bhi.n	8001e58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b23      	subs	r3, #35	; 0x23
 8001e30:	221f      	movs	r2, #31
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4019      	ands	r1, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b23      	subs	r3, #35	; 0x23
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e56:	e05d      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b12      	cmp	r3, #18
 8001e5e:	d81c      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b41      	subs	r3, #65	; 0x41
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b41      	subs	r3, #65	; 0x41
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	639a      	str	r2, [r3, #56]	; 0x38
 8001e98:	e03c      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b18      	cmp	r3, #24
 8001ea0:	d81c      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b5f      	subs	r3, #95	; 0x5f
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b5f      	subs	r3, #95	; 0x5f
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eda:	e01b      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b7d      	subs	r3, #125	; 0x7d
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b7d      	subs	r3, #125	; 0x7d
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d81a      	bhi.n	8001f52 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4019      	ands	r1, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6898      	ldr	r0, [r3, #8]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	e042      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b13      	cmp	r3, #19
 8001f58:	d81c      	bhi.n	8001f94 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6919      	ldr	r1, [r3, #16]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	4019      	ands	r1, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6898      	ldr	r0, [r3, #8]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	e021      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b1a      	cmp	r3, #26
 8001f9a:	d81c      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68d9      	ldr	r1, [r3, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	3b3c      	subs	r3, #60	; 0x3c
 8001fae:	2207      	movs	r2, #7
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	4019      	ands	r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6898      	ldr	r0, [r3, #8]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b3c      	subs	r3, #60	; 0x3c
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001fd6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d003      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d121      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001fe8:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_ADC_ConfigChannel+0x294>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d11b      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_ADC_ConfigChannel+0x294>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_ADC_ConfigChannel+0x294>)
 8001ffa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffe:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b10      	cmp	r3, #16
 8002006:	d111      	bne.n	800202c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_ADC_ConfigChannel+0x298>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0e      	ldr	r2, [pc, #56]	; (8002048 <HAL_ADC_ConfigChannel+0x29c>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9a      	lsrs	r2, r3, #18
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800201e:	e002      	b.n	8002026 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3b01      	subs	r3, #1
 8002024:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f9      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40012700 	.word	0x40012700
 8002044:	20000048 	.word	0x20000048
 8002048:	431bde83 	.word	0x431bde83

0800204c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d043      	beq.n	80020f2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <ADC_Enable+0xb0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <ADC_Enable+0xb4>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9a      	lsrs	r2, r3, #18
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800208e:	e002      	b.n	8002096 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 800209c:	f7ff fc0e 	bl	80018bc <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020a2:	e01f      	b.n	80020e4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80020a4:	f7ff fc0a 	bl	80018bc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d918      	bls.n	80020e4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d011      	beq.n	80020e4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e007      	b.n	80020f4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ee:	2b40      	cmp	r3, #64	; 0x40
 80020f0:	d1d8      	bne.n	80020a4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000048 	.word	0x20000048
 8002100:	431bde83 	.word	0x431bde83

08002104 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d12e      	bne.n	800217c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0201 	bic.w	r2, r2, #1
 800212c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800212e:	f7ff fbc5 	bl	80018bc <HAL_GetTick>
 8002132:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002134:	e01b      	b.n	800216e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002136:	f7ff fbc1 	bl	80018bc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d914      	bls.n	800216e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	2b40      	cmp	r3, #64	; 0x40
 8002150:	d10d      	bne.n	800216e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f043 0210 	orr.w	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002162:	f043 0201 	orr.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e007      	b.n	800217e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d0dc      	beq.n	8002136 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <__NVIC_SetPriorityGrouping>:
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4906      	ldr	r1, [pc, #24]	; (8002220 <__NVIC_EnableIRQ+0x34>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	; (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	; (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	; 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <SysTick_Config>:
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff90 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff2d 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff42 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff90 	bl	8002278 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5f 	bl	8002224 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff35 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d008      	beq.n	80023cc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2204      	movs	r2, #4
 80023be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e022      	b.n	8002412 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 020e 	bic.w	r2, r2, #14
 80023da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0201 	bic.w	r2, r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f003 021c 	and.w	r2, r3, #28
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f202 	lsl.w	r2, r1, r2
 80023fe:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d005      	beq.n	8002440 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	e029      	b.n	8002494 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020e 	bic.w	r2, r2, #14
 800244e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f003 021c 	and.w	r2, r3, #28
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	2101      	movs	r1, #1
 800246e:	fa01 f202 	lsl.w	r2, r1, r2
 8002472:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	4798      	blx	r3
    }
  }
  return status;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024ac:	b2db      	uxtb	r3, r3
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80024ce:	e154      	b.n	800277a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8146 	beq.w	8002774 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d005      	beq.n	8002500 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d130      	bne.n	8002562 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	2203      	movs	r2, #3
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002536:	2201      	movs	r2, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0201 	and.w	r2, r3, #1
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b03      	cmp	r3, #3
 800256c:	d017      	beq.n	800259e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d123      	bne.n	80025f2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4013      	ands	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691a      	ldr	r2, [r3, #16]
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	6939      	ldr	r1, [r7, #16]
 80025ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	2203      	movs	r2, #3
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0203 	and.w	r2, r3, #3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	fa02 f303 	lsl.w	r3, r2, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80a0 	beq.w	8002774 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002634:	4b58      	ldr	r3, [pc, #352]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a57      	ldr	r2, [pc, #348]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	4b55      	ldr	r3, [pc, #340]	; (8002798 <HAL_GPIO_Init+0x2e0>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800264c:	4a53      	ldr	r2, [pc, #332]	; (800279c <HAL_GPIO_Init+0x2e4>)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	089b      	lsrs	r3, r3, #2
 8002652:	3302      	adds	r3, #2
 8002654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002658:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4013      	ands	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a4b      	ldr	r2, [pc, #300]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d019      	beq.n	80026ac <HAL_GPIO_Init+0x1f4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a4a      	ldr	r2, [pc, #296]	; (80027a4 <HAL_GPIO_Init+0x2ec>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1f0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <HAL_GPIO_Init+0x2f0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1ec>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a48      	ldr	r2, [pc, #288]	; (80027ac <HAL_GPIO_Init+0x2f4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1e8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a47      	ldr	r2, [pc, #284]	; (80027b0 <HAL_GPIO_Init+0x2f8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1e4>
 8002698:	2304      	movs	r3, #4
 800269a:	e008      	b.n	80026ae <HAL_GPIO_Init+0x1f6>
 800269c:	2305      	movs	r3, #5
 800269e:	e006      	b.n	80026ae <HAL_GPIO_Init+0x1f6>
 80026a0:	2303      	movs	r3, #3
 80026a2:	e004      	b.n	80026ae <HAL_GPIO_Init+0x1f6>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e002      	b.n	80026ae <HAL_GPIO_Init+0x1f6>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <HAL_GPIO_Init+0x1f6>
 80026ac:	2300      	movs	r3, #0
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	f002 0203 	and.w	r2, r2, #3
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	4093      	lsls	r3, r2
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026be:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_GPIO_Init+0x2e4>)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026cc:	4b39      	ldr	r3, [pc, #228]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026f0:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026f6:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43db      	mvns	r3, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800271a:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002744:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	43db      	mvns	r3, r3
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4013      	ands	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800276e:	4a11      	ldr	r2, [pc, #68]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3301      	adds	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f aea3 	bne.w	80024d0 <HAL_GPIO_Init+0x18>
  }
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40010000 	.word	0x40010000
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
 80027c4:	4613      	mov	r3, r2
 80027c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c8:	787b      	ldrb	r3, [r7, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80027d6:	887b      	ldrh	r3, [r7, #2]
 80027d8:	041a      	lsls	r2, r3, #16
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e12b      	b.n	8002a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe fde4 	bl	80013dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2224      	movs	r2, #36	; 0x24
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0201 	bic.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800283a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800284a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800284c:	f002 fae6 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8002850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a81      	ldr	r2, [pc, #516]	; (8002a5c <HAL_I2C_Init+0x274>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d807      	bhi.n	800286c <HAL_I2C_Init+0x84>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a80      	ldr	r2, [pc, #512]	; (8002a60 <HAL_I2C_Init+0x278>)
 8002860:	4293      	cmp	r3, r2
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e006      	b.n	800287a <HAL_I2C_Init+0x92>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	4a7d      	ldr	r2, [pc, #500]	; (8002a64 <HAL_I2C_Init+0x27c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	bf94      	ite	ls
 8002874:	2301      	movls	r3, #1
 8002876:	2300      	movhi	r3, #0
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0e7      	b.n	8002a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a78      	ldr	r2, [pc, #480]	; (8002a68 <HAL_I2C_Init+0x280>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9b      	lsrs	r3, r3, #18
 800288c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	430a      	orrs	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a6a      	ldr	r2, [pc, #424]	; (8002a5c <HAL_I2C_Init+0x274>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d802      	bhi.n	80028bc <HAL_I2C_Init+0xd4>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3301      	adds	r3, #1
 80028ba:	e009      	b.n	80028d0 <HAL_I2C_Init+0xe8>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_I2C_Init+0x284>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	099b      	lsrs	r3, r3, #6
 80028ce:	3301      	adds	r3, #1
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	495c      	ldr	r1, [pc, #368]	; (8002a5c <HAL_I2C_Init+0x274>)
 80028ec:	428b      	cmp	r3, r1
 80028ee:	d819      	bhi.n	8002924 <HAL_I2C_Init+0x13c>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e59      	subs	r1, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fe:	1c59      	adds	r1, r3, #1
 8002900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002904:	400b      	ands	r3, r1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_I2C_Init+0x138>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1e59      	subs	r1, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fbb1 f3f3 	udiv	r3, r1, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	e051      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 8002920:	2304      	movs	r3, #4
 8002922:	e04f      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d111      	bne.n	8002950 <HAL_I2C_Init+0x168>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	440b      	add	r3, r1
 800293a:	fbb0 f3f3 	udiv	r3, r0, r3
 800293e:	3301      	adds	r3, #1
 8002940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e012      	b.n	8002976 <HAL_I2C_Init+0x18e>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1e58      	subs	r0, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	0099      	lsls	r1, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	fbb0 f3f3 	udiv	r3, r0, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x196>
 800297a:	2301      	movs	r3, #1
 800297c:	e022      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <HAL_I2C_Init+0x1bc>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e58      	subs	r0, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	460b      	mov	r3, r1
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	440b      	add	r3, r1
 8002994:	fbb0 f3f3 	udiv	r3, r0, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800299e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a2:	e00f      	b.n	80029c4 <HAL_I2C_Init+0x1dc>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	0099      	lsls	r1, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	6809      	ldr	r1, [r1, #0]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6911      	ldr	r1, [r2, #16]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68d2      	ldr	r2, [r2, #12]
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	000186a0 	.word	0x000186a0
 8002a60:	001e847f 	.word	0x001e847f
 8002a64:	003d08ff 	.word	0x003d08ff
 8002a68:	431bde83 	.word	0x431bde83
 8002a6c:	10624dd3 	.word	0x10624dd3

08002a70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d003      	beq.n	8002aa8 <HAL_I2C_EV_IRQHandler+0x38>
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	f040 80c1 	bne.w	8002c2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10d      	bne.n	8002ade <HAL_I2C_EV_IRQHandler+0x6e>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002ac8:	d003      	beq.n	8002ad2 <HAL_I2C_EV_IRQHandler+0x62>
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ad0:	d101      	bne.n	8002ad6 <HAL_I2C_EV_IRQHandler+0x66>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2C_EV_IRQHandler+0x68>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	f000 8132 	beq.w	8002d42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00c      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x92>
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	0a5b      	lsrs	r3, r3, #9
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 fc63 	bl	80043c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fd6f 	bl	80035de <I2C_Master_SB>
 8002b00:	e092      	b.n	8002c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0xb2>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	0a5b      	lsrs	r3, r3, #9
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fde4 	bl	80036e8 <I2C_Master_ADD10>
 8002b20:	e082      	b.n	8002c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0xd2>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fdfd 	bl	800373a <I2C_Master_ADDR>
 8002b40:	e072      	b.n	8002c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	089b      	lsrs	r3, r3, #2
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d03b      	beq.n	8002bc6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5c:	f000 80f3 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	09db      	lsrs	r3, r3, #7
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00f      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f9e9 	bl	8002f5c <I2C_MasterTransmit_TXE>
 8002b8a:	e04d      	b.n	8002c28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80d6 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	0a5b      	lsrs	r3, r3, #9
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80cf 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ba8:	7bbb      	ldrb	r3, [r7, #14]
 8002baa:	2b21      	cmp	r3, #33	; 0x21
 8002bac:	d103      	bne.n	8002bb6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fa70 	bl	8003094 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb4:	e0c7      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	f040 80c4 	bne.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 fade 	bl	8003180 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc4:	e0bf      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	f000 80b7 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00f      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x194>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	0a9b      	lsrs	r3, r3, #10
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x194>
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d103      	bne.n	8002c04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb53 	bl	80032a8 <I2C_MasterReceive_RXNE>
 8002c02:	e011      	b.n	8002c28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 809a 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	0a5b      	lsrs	r3, r3, #9
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8093 	beq.w	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fbf2 	bl	800340a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c26:	e08e      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002c28:	e08d      	b.n	8002d46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d004      	beq.n	8002c3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	e007      	b.n	8002c4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x20e>
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	0a5b      	lsrs	r3, r3, #9
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00c      	beq.n	8002c7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002c74:	69b9      	ldr	r1, [r7, #24]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 ffab 	bl	8003bd2 <I2C_Slave_ADDR>
 8002c7c:	e066      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_I2C_EV_IRQHandler+0x22e>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	0a5b      	lsrs	r3, r3, #9
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 ffe6 	bl	8003c68 <I2C_Slave_STOPF>
 8002c9c:	e056      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c9e:	7bbb      	ldrb	r3, [r7, #14]
 8002ca0:	2b21      	cmp	r3, #33	; 0x21
 8002ca2:	d002      	beq.n	8002caa <HAL_I2C_EV_IRQHandler+0x23a>
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	2b29      	cmp	r3, #41	; 0x29
 8002ca8:	d125      	bne.n	8002cf6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	09db      	lsrs	r3, r3, #7
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00f      	beq.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x266>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	0a9b      	lsrs	r3, r3, #10
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x266>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fec3 	bl	8003a5a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cd4:	e039      	b.n	8002d4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d033      	beq.n	8002d4a <HAL_I2C_EV_IRQHandler+0x2da>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	0a5b      	lsrs	r3, r3, #9
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02d      	beq.n	8002d4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fef0 	bl	8003ad4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf4:	e029      	b.n	8002d4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00f      	beq.n	8002d22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	0a9b      	lsrs	r3, r3, #10
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	089b      	lsrs	r3, r3, #2
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fefa 	bl	8003b14 <I2C_SlaveReceive_RXNE>
 8002d20:	e014      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	089b      	lsrs	r3, r3, #2
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00e      	beq.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	0a5b      	lsrs	r3, r3, #9
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 ff28 	bl	8003b90 <I2C_SlaveReceive_BTF>
 8002d40:	e004      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b08a      	sub	sp, #40	; 0x28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00e      	beq.n	8002da0 <HAL_I2C_ER_IRQHandler+0x4e>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d008      	beq.n	8002da0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	0a5b      	lsrs	r3, r3, #9
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00e      	beq.n	8002dca <HAL_I2C_ER_IRQHandler+0x78>
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002dc8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	0a9b      	lsrs	r3, r3, #10
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d03f      	beq.n	8002e56 <HAL_I2C_ER_IRQHandler+0x104>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d039      	beq.n	8002e56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002de2:	7efb      	ldrb	r3, [r7, #27]
 8002de4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002dfc:	7ebb      	ldrb	r3, [r7, #26]
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d112      	bne.n	8002e28 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10f      	bne.n	8002e28 <HAL_I2C_ER_IRQHandler+0xd6>
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	2b21      	cmp	r3, #33	; 0x21
 8002e0c:	d008      	beq.n	8002e20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002e0e:	7cfb      	ldrb	r3, [r7, #19]
 8002e10:	2b29      	cmp	r3, #41	; 0x29
 8002e12:	d005      	beq.n	8002e20 <HAL_I2C_ER_IRQHandler+0xce>
 8002e14:	7cfb      	ldrb	r3, [r7, #19]
 8002e16:	2b28      	cmp	r3, #40	; 0x28
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b21      	cmp	r3, #33	; 0x21
 8002e1e:	d103      	bne.n	8002e28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f001 f851 	bl	8003ec8 <I2C_Slave_AF>
 8002e26:	e016      	b.n	8002e56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002e3a:	7efb      	ldrb	r3, [r7, #27]
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d002      	beq.n	8002e46 <HAL_I2C_ER_IRQHandler+0xf4>
 8002e40:	7efb      	ldrb	r3, [r7, #27]
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d107      	bne.n	8002e56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	0adb      	lsrs	r3, r3, #11
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <HAL_I2C_ER_IRQHandler+0x12e>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d008      	beq.n	8002e80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002e7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f001 f888 	bl	8003fa8 <I2C_ITError>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3728      	adds	r7, #40	; 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d150      	bne.n	8003024 <I2C_MasterTransmit_TXE+0xc8>
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b21      	cmp	r3, #33	; 0x21
 8002f86:	d14d      	bne.n	8003024 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d01d      	beq.n	8002fca <I2C_MasterTransmit_TXE+0x6e>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	d01a      	beq.n	8002fca <I2C_MasterTransmit_TXE+0x6e>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f9a:	d016      	beq.n	8002fca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002faa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2211      	movs	r2, #17
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff6c 	bl	8002ea0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002fc8:	e060      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d107      	bne.n	8003014 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff81 	bl	8002f14 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003012:	e03b      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff3f 	bl	8002ea0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003022:	e033      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b21      	cmp	r3, #33	; 0x21
 8003028:	d005      	beq.n	8003036 <I2C_MasterTransmit_TXE+0xda>
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d12d      	bne.n	800308c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b22      	cmp	r3, #34	; 0x22
 8003034:	d12a      	bne.n	800308c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003050:	e01c      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d103      	bne.n	8003066 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f88e 	bl	8003180 <I2C_MemoryTransmit_TXE_BTF>
}
 8003064:	e012      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800308a:	e7ff      	b.n	800308c <I2C_MasterTransmit_TXE+0x130>
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b21      	cmp	r3, #33	; 0x21
 80030ac:	d164      	bne.n	8003178 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80030dc:	e04c      	b.n	8003178 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d01d      	beq.n	8003120 <I2C_MasterTransmit_BTF+0x8c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d01a      	beq.n	8003120 <I2C_MasterTransmit_BTF+0x8c>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f0:	d016      	beq.n	8003120 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003100:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2211      	movs	r2, #17
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fec1 	bl	8002ea0 <HAL_I2C_MasterTxCpltCallback>
}
 800311e:	e02b      	b.n	8003178 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800312e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d107      	bne.n	800316a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fed6 	bl	8002f14 <HAL_I2C_MemTxCpltCallback>
}
 8003168:	e006      	b.n	8003178 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fe94 	bl	8002ea0 <HAL_I2C_MasterTxCpltCallback>
}
 8003178:	bf00      	nop
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003194:	2b00      	cmp	r3, #0
 8003196:	d11d      	bne.n	80031d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10b      	bne.n	80031b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80031b6:	e073      	b.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031bc:	b29b      	uxth	r3, r3
 80031be:	121b      	asrs	r3, r3, #8
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031d2:	e065      	b.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10b      	bne.n	80031f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80031f2:	e055      	b.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d151      	bne.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b22      	cmp	r3, #34	; 0x22
 8003200:	d10d      	bne.n	800321e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003216:	1c5a      	adds	r2, r3, #1
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800321c:	e040      	b.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b21      	cmp	r3, #33	; 0x21
 800322c:	d112      	bne.n	8003254 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	781a      	ldrb	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003252:	e025      	b.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d120      	bne.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	2b21      	cmp	r3, #33	; 0x21
 8003262:	d11d      	bne.n	80032a0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003272:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003282:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fe3a 	bl	8002f14 <HAL_I2C_MemTxCpltCallback>
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b22      	cmp	r3, #34	; 0x22
 80032ba:	f040 80a2 	bne.w	8003402 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d921      	bls.n	8003310 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	f040 8082 	bne.w	8003402 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800330e:	e078      	b.n	8003402 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b02      	cmp	r3, #2
 8003316:	d074      	beq.n	8003402 <I2C_MasterReceive_RXNE+0x15a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d002      	beq.n	8003324 <I2C_MasterReceive_RXNE+0x7c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d16e      	bne.n	8003402 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f001 f819 	bl	800435c <I2C_WaitOnSTOPRequestThroughIT>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d142      	bne.n	80033b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800334e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d10a      	bne.n	80033a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff fdc4 	bl	8002f26 <HAL_I2C_MemRxCpltCallback>
}
 800339e:	e030      	b.n	8003402 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2212      	movs	r2, #18
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fd7f 	bl	8002eb2 <HAL_I2C_MasterRxCpltCallback>
}
 80033b4:	e025      	b.n	8003402 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff fd9b 	bl	8002f38 <HAL_I2C_ErrorCallback>
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b04      	cmp	r3, #4
 8003420:	d11b      	bne.n	800345a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003430:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	1c5a      	adds	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003458:	e0bd      	b.n	80035d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d129      	bne.n	80034b8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003472:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d00a      	beq.n	8003490 <I2C_MasterReceive_BTF+0x86>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d007      	beq.n	8003490 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80034b6:	e08e      	b.n	80035d6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d176      	bne.n	80035b0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <I2C_MasterReceive_BTF+0xc4>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d108      	bne.n	80034e0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e019      	b.n	8003514 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d002      	beq.n	80034ec <I2C_MasterReceive_BTF+0xe2>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d108      	bne.n	80034fe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	e00a      	b.n	8003514 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b10      	cmp	r3, #16
 8003502:	d007      	beq.n	8003514 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800356e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d10a      	bne.n	800359a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fcc7 	bl	8002f26 <HAL_I2C_MemRxCpltCallback>
}
 8003598:	e01d      	b.n	80035d6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2212      	movs	r2, #18
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fc82 	bl	8002eb2 <HAL_I2C_MasterRxCpltCallback>
}
 80035ae:	e012      	b.n	80035d6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d117      	bne.n	8003622 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800360a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800360c:	e067      	b.n	80036de <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	b2da      	uxtb	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]
}
 8003620:	e05d      	b.n	80036de <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362a:	d133      	bne.n	8003694 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b21      	cmp	r3, #33	; 0x21
 8003636:	d109      	bne.n	800364c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	b2db      	uxtb	r3, r3
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003648:	611a      	str	r2, [r3, #16]
 800364a:	e008      	b.n	800365e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <I2C_Master_SB+0x92>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d108      	bne.n	8003682 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d032      	beq.n	80036de <I2C_Master_SB+0x100>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02d      	beq.n	80036de <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003690:	605a      	str	r2, [r3, #4]
}
 8003692:	e024      	b.n	80036de <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10e      	bne.n	80036ba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	11db      	asrs	r3, r3, #7
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0306 	and.w	r3, r3, #6
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f063 030f 	orn	r3, r3, #15
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
}
 80036b8:	e011      	b.n	80036de <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d10d      	bne.n	80036de <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	11db      	asrs	r3, r3, #7
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	f003 0306 	and.w	r3, r3, #6
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f063 030e 	orn	r3, r3, #14
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	611a      	str	r2, [r3, #16]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <I2C_Master_ADD10+0x26>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <I2C_Master_ADD10+0x48>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	605a      	str	r2, [r3, #4]
  }
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800373a:	b480      	push	{r7}
 800373c:	b091      	sub	sp, #68	; 0x44
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b22      	cmp	r3, #34	; 0x22
 8003762:	f040 8169 	bne.w	8003a38 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <I2C_Master_ADDR+0x54>
 800376e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003772:	2b40      	cmp	r3, #64	; 0x40
 8003774:	d10b      	bne.n	800378e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003776:	2300      	movs	r3, #0
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	e160      	b.n	8003a50 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11d      	bne.n	80037d2 <I2C_Master_ADDR+0x98>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800379e:	d118      	bne.n	80037d2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	651a      	str	r2, [r3, #80]	; 0x50
 80037d0:	e13e      	b.n	8003a50 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037dc:	2300      	movs	r3, #0
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e115      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	f040 808a 	bne.w	8003924 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003816:	d137      	bne.n	8003888 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003836:	d113      	bne.n	8003860 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003846:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	e0e7      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003860:	2300      	movs	r3, #0
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	623b      	str	r3, [r7, #32]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	623b      	str	r3, [r7, #32]
 8003874:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e0d3      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388a:	2b08      	cmp	r3, #8
 800388c:	d02e      	beq.n	80038ec <I2C_Master_ADDR+0x1b2>
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	2b20      	cmp	r3, #32
 8003892:	d02b      	beq.n	80038ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	2b12      	cmp	r3, #18
 8003898:	d102      	bne.n	80038a0 <I2C_Master_ADDR+0x166>
 800389a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389c:	2b01      	cmp	r3, #1
 800389e:	d125      	bne.n	80038ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d00e      	beq.n	80038c4 <I2C_Master_ADDR+0x18a>
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d00b      	beq.n	80038c4 <I2C_Master_ADDR+0x18a>
 80038ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ae:	2b10      	cmp	r3, #16
 80038b0:	d008      	beq.n	80038c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	e007      	b.n	80038d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	e0a1      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e085      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d14d      	bne.n	80039ca <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	2b04      	cmp	r3, #4
 8003932:	d016      	beq.n	8003962 <I2C_Master_ADDR+0x228>
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2b02      	cmp	r3, #2
 8003938:	d013      	beq.n	8003962 <I2C_Master_ADDR+0x228>
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393c:	2b10      	cmp	r3, #16
 800393e:	d010      	beq.n	8003962 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d117      	bne.n	80039b2 <I2C_Master_ADDR+0x278>
 8003982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003988:	d00b      	beq.n	80039a2 <I2C_Master_ADDR+0x268>
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	2b01      	cmp	r3, #1
 800398e:	d008      	beq.n	80039a2 <I2C_Master_ADDR+0x268>
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	2b08      	cmp	r3, #8
 8003994:	d005      	beq.n	80039a2 <I2C_Master_ADDR+0x268>
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2b10      	cmp	r3, #16
 800399a:	d002      	beq.n	80039a2 <I2C_Master_ADDR+0x268>
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d107      	bne.n	80039b2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039b0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	e032      	b.n	8003a30 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	d117      	bne.n	8003a1a <I2C_Master_ADDR+0x2e0>
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039f0:	d00b      	beq.n	8003a0a <I2C_Master_ADDR+0x2d0>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d008      	beq.n	8003a0a <I2C_Master_ADDR+0x2d0>
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d005      	beq.n	8003a0a <I2C_Master_ADDR+0x2d0>
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d002      	beq.n	8003a0a <I2C_Master_ADDR+0x2d0>
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d107      	bne.n	8003a1a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a18:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003a36:	e00b      	b.n	8003a50 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
}
 8003a4e:	e7ff      	b.n	8003a50 <I2C_Master_ADDR+0x316>
 8003a50:	bf00      	nop
 8003a52:	3744      	adds	r7, #68	; 0x44
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a68:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02b      	beq.n	8003acc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d114      	bne.n	8003acc <I2C_SlaveTransmit_TXE+0x72>
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b29      	cmp	r3, #41	; 0x29
 8003aa6:	d111      	bne.n	8003acc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2221      	movs	r2, #33	; 0x21
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2228      	movs	r2, #40	; 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff f9fc 	bl	8002ec4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d011      	beq.n	8003b0a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02c      	beq.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d114      	bne.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b2a      	cmp	r3, #42	; 0x2a
 8003b62:	d111      	bne.n	8003b88 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2228      	movs	r2, #40	; 0x28
 8003b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff f9a7 	bl	8002ed6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	1c5a      	adds	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bec:	2b28      	cmp	r3, #40	; 0x28
 8003bee:	d127      	bne.n	8003c40 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	09db      	lsrs	r3, r3, #7
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	81bb      	strh	r3, [r7, #12]
 8003c22:	e002      	b.n	8003c2a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003c32:	89ba      	ldrh	r2, [r7, #12]
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff f955 	bl	8002ee8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c3e:	e00e      	b.n	8003c5e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c40:	2300      	movs	r3, #0
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003c5e:	bf00      	nop
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c76:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c86:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cc4:	d172      	bne.n	8003dac <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b22      	cmp	r3, #34	; 0x22
 8003cca:	d002      	beq.n	8003cd2 <I2C_Slave_STOPF+0x6a>
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd0:	d135      	bne.n	8003d3e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f043 0204 	orr.w	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fbc7 	bl	800249e <HAL_DMA_GetState>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d049      	beq.n	8003daa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	4a69      	ldr	r2, [pc, #420]	; (8003ec0 <I2C_Slave_STOPF+0x258>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fb7a 	bl	800241c <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d03d      	beq.n	8003daa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d3c:	e035      	b.n	8003daa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fb91 	bl	800249e <HAL_DMA_GetState>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d014      	beq.n	8003dac <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	4a4e      	ldr	r2, [pc, #312]	; (8003ec0 <I2C_Slave_STOPF+0x258>)
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe fb44 	bl	800241c <HAL_DMA_Abort_IT>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d008      	beq.n	8003dac <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003da4:	4610      	mov	r0, r2
 8003da6:	4798      	blx	r3
 8003da8:	e000      	b.n	8003dac <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003daa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d03e      	beq.n	8003e34 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d112      	bne.n	8003dea <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d112      	bne.n	8003e1e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0204 	orr.w	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8b3 	bl	8003fa8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003e42:	e039      	b.n	8003eb8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b2a      	cmp	r3, #42	; 0x2a
 8003e48:	d109      	bne.n	8003e5e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2228      	movs	r2, #40	; 0x28
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff f83c 	bl	8002ed6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b28      	cmp	r3, #40	; 0x28
 8003e68:	d111      	bne.n	8003e8e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <I2C_Slave_STOPF+0x25c>)
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff f83b 	bl	8002f02 <HAL_I2C_ListenCpltCallback>
}
 8003e8c:	e014      	b.n	8003eb8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	2b22      	cmp	r3, #34	; 0x22
 8003e94:	d002      	beq.n	8003e9c <I2C_Slave_STOPF+0x234>
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b22      	cmp	r3, #34	; 0x22
 8003e9a:	d10d      	bne.n	8003eb8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff f80f 	bl	8002ed6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	0800420d 	.word	0x0800420d
 8003ec4:	ffff0000 	.word	0xffff0000

08003ec8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d002      	beq.n	8003eea <I2C_Slave_AF+0x22>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d129      	bne.n	8003f3e <I2C_Slave_AF+0x76>
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b28      	cmp	r3, #40	; 0x28
 8003eee:	d126      	bne.n	8003f3e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <I2C_Slave_AF+0xdc>)
 8003ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f04:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f0e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fe ffe3 	bl	8002f02 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003f3c:	e02e      	b.n	8003f9c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b21      	cmp	r3, #33	; 0x21
 8003f42:	d126      	bne.n	8003f92 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <I2C_Slave_AF+0xdc>)
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2221      	movs	r2, #33	; 0x21
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f78:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe ff9a 	bl	8002ec4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f90:	e004      	b.n	8003f9c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f9a:	615a      	str	r2, [r3, #20]
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003fc0:	7bbb      	ldrb	r3, [r7, #14]
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d002      	beq.n	8003fcc <I2C_ITError+0x24>
 8003fc6:	7bbb      	ldrb	r3, [r7, #14]
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d10a      	bne.n	8003fe2 <I2C_ITError+0x3a>
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b22      	cmp	r3, #34	; 0x22
 8003fd0:	d107      	bne.n	8003fe2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe8:	2b28      	cmp	r3, #40	; 0x28
 8003fea:	d107      	bne.n	8003ffc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2228      	movs	r2, #40	; 0x28
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ffa:	e015      	b.n	8004028 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400a:	d00a      	beq.n	8004022 <I2C_ITError+0x7a>
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b60      	cmp	r3, #96	; 0x60
 8004010:	d007      	beq.n	8004022 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004036:	d162      	bne.n	80040fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004046:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d020      	beq.n	8004098 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405a:	4a6a      	ldr	r2, [pc, #424]	; (8004204 <I2C_ITError+0x25c>)
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe f9da 	bl	800241c <HAL_DMA_Abort_IT>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8089 	beq.w	8004182 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004092:	4610      	mov	r0, r2
 8004094:	4798      	blx	r3
 8004096:	e074      	b.n	8004182 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4a59      	ldr	r2, [pc, #356]	; (8004204 <I2C_ITError+0x25c>)
 800409e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fe f9b9 	bl	800241c <HAL_DMA_Abort_IT>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d068      	beq.n	8004182 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d10b      	bne.n	80040d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040f8:	4610      	mov	r0, r2
 80040fa:	4798      	blx	r3
 80040fc:	e041      	b.n	8004182 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b60      	cmp	r3, #96	; 0x60
 8004108:	d125      	bne.n	8004156 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d10b      	bne.n	800413e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fefb 	bl	8002f4a <HAL_I2C_AbortCpltCallback>
 8004154:	e015      	b.n	8004182 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b40      	cmp	r3, #64	; 0x40
 8004162:	d10b      	bne.n	800417c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fe fedb 	bl	8002f38 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004198:	2b00      	cmp	r3, #0
 800419a:	d109      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d104      	bne.n	80041b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d113      	bne.n	80041fc <I2C_ITError+0x254>
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	2b28      	cmp	r3, #40	; 0x28
 80041d8:	d110      	bne.n	80041fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <I2C_ITError+0x260>)
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe fe83 	bl	8002f02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	0800420d 	.word	0x0800420d
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004226:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <I2C_DMAAbort+0x148>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <I2C_DMAAbort+0x14c>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	0a1a      	lsrs	r2, r3, #8
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00da      	lsls	r2, r3, #3
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	f043 0220 	orr.w	r2, r3, #32
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004252:	e00a      	b.n	800426a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3b01      	subs	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d0ea      	beq.n	8004240 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004276:	2200      	movs	r2, #0
 8004278:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004286:	2200      	movs	r2, #0
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004298:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2200      	movs	r2, #0
 800429e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	2200      	movs	r2, #0
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	2200      	movs	r2, #0
 80042be:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0201 	bic.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b60      	cmp	r3, #96	; 0x60
 80042da:	d10e      	bne.n	80042fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2200      	movs	r2, #0
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7fe fe29 	bl	8002f4a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042f8:	e027      	b.n	800434a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004300:	2b28      	cmp	r3, #40	; 0x28
 8004302:	d117      	bne.n	8004334 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004322:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2228      	movs	r2, #40	; 0x28
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004332:	e007      	b.n	8004344 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004344:	6978      	ldr	r0, [r7, #20]
 8004346:	f7fe fdf7 	bl	8002f38 <HAL_I2C_ErrorCallback>
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000048 	.word	0x20000048
 8004358:	14f8b589 	.word	0x14f8b589

0800435c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	08db      	lsrs	r3, r3, #3
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	0a1a      	lsrs	r2, r3, #8
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b01      	subs	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0220 	orr.w	r2, r3, #32
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e008      	b.n	80043ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d0e9      	beq.n	800437e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000048 	.word	0x20000048
 80043bc:	14f8b589 	.word	0x14f8b589

080043c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80043d0:	d103      	bne.n	80043da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80043d8:	e007      	b.n	80043ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043e2:	d102      	bne.n	80043ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2208      	movs	r2, #8
 80043e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e31d      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004406:	4b94      	ldr	r3, [pc, #592]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
 800440e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004410:	4b91      	ldr	r3, [pc, #580]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004418:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d07b      	beq.n	800451e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b08      	cmp	r3, #8
 800442a:	d006      	beq.n	800443a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b0c      	cmp	r3, #12
 8004430:	d10f      	bne.n	8004452 <HAL_RCC_OscConfig+0x5e>
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d10b      	bne.n	8004452 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443a:	4b87      	ldr	r3, [pc, #540]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d06a      	beq.n	800451c <HAL_RCC_OscConfig+0x128>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d166      	bne.n	800451c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e2f7      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d106      	bne.n	8004468 <HAL_RCC_OscConfig+0x74>
 800445a:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a7e      	ldr	r2, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	e02d      	b.n	80044c4 <HAL_RCC_OscConfig+0xd0>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10c      	bne.n	800448a <HAL_RCC_OscConfig+0x96>
 8004470:	4b79      	ldr	r3, [pc, #484]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a78      	ldr	r2, [pc, #480]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a75      	ldr	r2, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0xd0>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0xb8>
 8004492:	4b71      	ldr	r3, [pc, #452]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a70      	ldr	r2, [pc, #448]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b6e      	ldr	r3, [pc, #440]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a6d      	ldr	r2, [pc, #436]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0xd0>
 80044ac:	4b6a      	ldr	r3, [pc, #424]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a69      	ldr	r2, [pc, #420]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b67      	ldr	r3, [pc, #412]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a66      	ldr	r2, [pc, #408]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044cc:	f7fd f9f6 	bl	80018bc <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fd f9f2 	bl	80018bc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e2ad      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044e6:	4b5c      	ldr	r3, [pc, #368]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0xe0>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd f9e2 	bl	80018bc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd f9de 	bl	80018bc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e299      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800450e:	4b52      	ldr	r3, [pc, #328]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x108>
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d05a      	beq.n	80045e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d005      	beq.n	800453c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d119      	bne.n	800456a <HAL_RCC_OscConfig+0x176>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d116      	bne.n	800456a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453c:	4b46      	ldr	r3, [pc, #280]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x160>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e276      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004554:	4b40      	ldr	r3, [pc, #256]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	493d      	ldr	r1, [pc, #244]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004568:	e03a      	b.n	80045e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004572:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_RCC_OscConfig+0x268>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd f9a0 	bl	80018bc <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7fd f99c 	bl	80018bc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e257      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004592:	4b31      	ldr	r3, [pc, #196]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	492a      	ldr	r1, [pc, #168]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	e015      	b.n	80045e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b4:	4b29      	ldr	r3, [pc, #164]	; (800465c <HAL_RCC_OscConfig+0x268>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fd f97f 	bl	80018bc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045c2:	f7fd f97b 	bl	80018bc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e236      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d4:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80b8 	beq.w	800475e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d170      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x218>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e21a      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004618:	429a      	cmp	r2, r3
 800461a:	d921      	bls.n	8004660 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fc23 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e208      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4906      	ldr	r1, [pc, #24]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	061b      	lsls	r3, r3, #24
 8004650:	4901      	ldr	r1, [pc, #4]	; (8004658 <HAL_RCC_OscConfig+0x264>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
 8004656:	e020      	b.n	800469a <HAL_RCC_OscConfig+0x2a6>
 8004658:	40023800 	.word	0x40023800
 800465c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004660:	4ba4      	ldr	r3, [pc, #656]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	49a1      	ldr	r1, [pc, #644]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800466e:	4313      	orrs	r3, r2
 8004670:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004672:	4ba0      	ldr	r3, [pc, #640]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	499c      	ldr	r1, [pc, #624]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fbee 	bl	8004e6c <RCC_SetFlashLatencyFromMSIRange>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e1d3      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	0b5b      	lsrs	r3, r3, #13
 80046a0:	3301      	adds	r3, #1
 80046a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80046aa:	4a92      	ldr	r2, [pc, #584]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0912      	lsrs	r2, r2, #4
 80046b0:	f002 020f 	and.w	r2, r2, #15
 80046b4:	4990      	ldr	r1, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x504>)
 80046b6:	5c8a      	ldrb	r2, [r1, r2]
 80046b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80046ba:	4a90      	ldr	r2, [pc, #576]	; (80048fc <HAL_RCC_OscConfig+0x508>)
 80046bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80046be:	4b90      	ldr	r3, [pc, #576]	; (8004900 <HAL_RCC_OscConfig+0x50c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd f8ae 	bl	8001824 <HAL_InitTick>
 80046c8:	4603      	mov	r3, r0
 80046ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d045      	beq.n	800475e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	e1b5      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d029      	beq.n	8004732 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046de:	4b89      	ldr	r3, [pc, #548]	; (8004904 <HAL_RCC_OscConfig+0x510>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd f8ea 	bl	80018bc <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ec:	f7fd f8e6 	bl	80018bc <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1a1      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046fe:	4b7d      	ldr	r3, [pc, #500]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800470a:	4b7a      	ldr	r3, [pc, #488]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	4977      	ldr	r1, [pc, #476]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800471c:	4b75      	ldr	r3, [pc, #468]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	061b      	lsls	r3, r3, #24
 800472a:	4972      	ldr	r1, [pc, #456]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800472c:	4313      	orrs	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
 8004730:	e015      	b.n	800475e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004732:	4b74      	ldr	r3, [pc, #464]	; (8004904 <HAL_RCC_OscConfig+0x510>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004738:	f7fd f8c0 	bl	80018bc <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004740:	f7fd f8bc 	bl	80018bc <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e177      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004752:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d030      	beq.n	80047cc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d016      	beq.n	80047a0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004772:	4b65      	ldr	r3, [pc, #404]	; (8004908 <HAL_RCC_OscConfig+0x514>)
 8004774:	2201      	movs	r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004778:	f7fd f8a0 	bl	80018bc <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004780:	f7fd f89c 	bl	80018bc <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e157      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x38c>
 800479e:	e015      	b.n	80047cc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a0:	4b59      	ldr	r3, [pc, #356]	; (8004908 <HAL_RCC_OscConfig+0x514>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd f889 	bl	80018bc <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fd f885 	bl	80018bc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e140      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047c0:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80b5 	beq.w	8004944 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b45      	ldr	r3, [pc, #276]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10d      	bne.n	8004806 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	4a41      	ldr	r2, [pc, #260]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6253      	str	r3, [r2, #36]	; 0x24
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b41      	ldr	r3, [pc, #260]	; (800490c <HAL_RCC_OscConfig+0x518>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b3e      	ldr	r3, [pc, #248]	; (800490c <HAL_RCC_OscConfig+0x518>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a3d      	ldr	r2, [pc, #244]	; (800490c <HAL_RCC_OscConfig+0x518>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fd f84d 	bl	80018bc <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7fd f849 	bl	80018bc <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b64      	cmp	r3, #100	; 0x64
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e104      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b34      	ldr	r3, [pc, #208]	; (800490c <HAL_RCC_OscConfig+0x518>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <HAL_RCC_OscConfig+0x466>
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6353      	str	r3, [r2, #52]	; 0x34
 8004858:	e02d      	b.n	80048b6 <HAL_RCC_OscConfig+0x4c2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x488>
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	6353      	str	r3, [r2, #52]	; 0x34
 800486e:	4b21      	ldr	r3, [pc, #132]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	4a20      	ldr	r2, [pc, #128]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004878:	6353      	str	r3, [r2, #52]	; 0x34
 800487a:	e01c      	b.n	80048b6 <HAL_RCC_OscConfig+0x4c2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b05      	cmp	r3, #5
 8004882:	d10c      	bne.n	800489e <HAL_RCC_OscConfig+0x4aa>
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004888:	4a1a      	ldr	r2, [pc, #104]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 800488a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800488e:	6353      	str	r3, [r2, #52]	; 0x34
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 8004896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489a:	6353      	str	r3, [r2, #52]	; 0x34
 800489c:	e00b      	b.n	80048b6 <HAL_RCC_OscConfig+0x4c2>
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80048a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048a8:	6353      	str	r3, [r2, #52]	; 0x34
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	4a11      	ldr	r2, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80048b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048b4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d015      	beq.n	80048ea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fc fffd 	bl	80018bc <HAL_GetTick>
 80048c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c4:	e00a      	b.n	80048dc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f7fc fff9 	bl	80018bc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0b2      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_OscConfig+0x500>)
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ee      	beq.n	80048c6 <HAL_RCC_OscConfig+0x4d2>
 80048e8:	e023      	b.n	8004932 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ea:	f7fc ffe7 	bl	80018bc <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048f0:	e019      	b.n	8004926 <HAL_RCC_OscConfig+0x532>
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	08006bc8 	.word	0x08006bc8
 80048fc:	20000048 	.word	0x20000048
 8004900:	2000004c 	.word	0x2000004c
 8004904:	42470020 	.word	0x42470020
 8004908:	42470680 	.word	0x42470680
 800490c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004910:	f7fc ffd4 	bl	80018bc <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e08d      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004926:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1ee      	bne.n	8004910 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004932:	7ffb      	ldrb	r3, [r7, #31]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b44      	ldr	r3, [pc, #272]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	4a43      	ldr	r2, [pc, #268]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004942:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	d079      	beq.n	8004a40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	2b0c      	cmp	r3, #12
 8004950:	d056      	beq.n	8004a00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	2b02      	cmp	r3, #2
 8004958:	d13b      	bne.n	80049d2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495a:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_RCC_OscConfig+0x65c>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004960:	f7fc ffac 	bl	80018bc <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004968:	f7fc ffa8 	bl	80018bc <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e063      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800497a:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004986:	4b31      	ldr	r3, [pc, #196]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	4319      	orrs	r1, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	430b      	orrs	r3, r1
 800499e:	492b      	ldr	r1, [pc, #172]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a4:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <HAL_RCC_OscConfig+0x65c>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049aa:	f7fc ff87 	bl	80018bc <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fc ff83 	bl	80018bc <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e03e      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d0f0      	beq.n	80049b2 <HAL_RCC_OscConfig+0x5be>
 80049d0:	e036      	b.n	8004a40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d2:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <HAL_RCC_OscConfig+0x65c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fc ff70 	bl	80018bc <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fc ff6c 	bl	80018bc <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e027      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x5ec>
 80049fe:	e01f      	b.n	8004a40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e01a      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a0c:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <HAL_RCC_OscConfig+0x658>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d10d      	bne.n	8004a3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470060 	.word	0x42470060

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e11a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b8f      	ldr	r3, [pc, #572]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d919      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d105      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x34>
 8004a7c:	4b8a      	ldr	r3, [pc, #552]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a89      	ldr	r2, [pc, #548]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a82:	f043 0304 	orr.w	r3, r3, #4
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b87      	ldr	r3, [pc, #540]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f023 0201 	bic.w	r2, r3, #1
 8004a90:	4985      	ldr	r1, [pc, #532]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a98:	4b83      	ldr	r3, [pc, #524]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e0f9      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	497a      	ldr	r1, [pc, #488]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 808e 	beq.w	8004bf2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ade:	4b73      	ldr	r3, [pc, #460]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0d7      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d107      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af6:	4b6d      	ldr	r3, [pc, #436]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d115      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0cb      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d107      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b0e:	4b67      	ldr	r3, [pc, #412]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0bf      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004b1e:	4b63      	ldr	r3, [pc, #396]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0b7      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f023 0203 	bic.w	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	495c      	ldr	r1, [pc, #368]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fc febc 	bl	80018bc <HAL_GetTick>
 8004b44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d112      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b4e:	e00a      	b.n	8004b66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b50:	f7fc feb4 	bl	80018bc <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e09b      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b66:	4b51      	ldr	r3, [pc, #324]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d1ee      	bne.n	8004b50 <HAL_RCC_ClockConfig+0xfc>
 8004b72:	e03e      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d112      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7e:	f7fc fe9d 	bl	80018bc <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e084      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b94:	4b45      	ldr	r3, [pc, #276]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d1ee      	bne.n	8004b7e <HAL_RCC_ClockConfig+0x12a>
 8004ba0:	e027      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d11d      	bne.n	8004be6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fc fe86 	bl	80018bc <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e06d      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d1ee      	bne.n	8004bac <HAL_RCC_ClockConfig+0x158>
 8004bce:	e010      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd0:	f7fc fe74 	bl	80018bc <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e05b      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004be6:	4b31      	ldr	r3, [pc, #196]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1ee      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf2:	4b2d      	ldr	r3, [pc, #180]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d219      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <HAL_RCC_ClockConfig+0x1be>
 8004c06:	4b28      	ldr	r3, [pc, #160]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a27      	ldr	r2, [pc, #156]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	4923      	ldr	r1, [pc, #140]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <HAL_RCC_ClockConfig+0x254>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e034      	b.n	8004c9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4917      	ldr	r1, [pc, #92]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	490f      	ldr	r1, [pc, #60]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c72:	f000 f823 	bl	8004cbc <HAL_RCC_GetSysClockFreq>
 8004c76:	4602      	mov	r2, r0
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <HAL_RCC_ClockConfig+0x258>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	490b      	ldr	r1, [pc, #44]	; (8004cb0 <HAL_RCC_ClockConfig+0x25c>)
 8004c84:	5ccb      	ldrb	r3, [r1, r3]
 8004c86:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x260>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_RCC_ClockConfig+0x264>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fc fdc6 	bl	8001824 <HAL_InitTick>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40023c00 	.word	0x40023c00
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	08006bc8 	.word	0x08006bc8
 8004cb4:	20000048 	.word	0x20000048
 8004cb8:	2000004c 	.word	0x2000004c

08004cbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004cc2:	4b4d      	ldr	r3, [pc, #308]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x30>
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d87c      	bhi.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x114>
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x24>
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x2a>
 8004cde:	e077      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b46      	ldr	r3, [pc, #280]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x140>)
 8004ce2:	613b      	str	r3, [r7, #16]
      break;
 8004ce4:	e082      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x144>)
 8004ce8:	613b      	str	r3, [r7, #16]
      break;
 8004cea:	e07f      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	0c9b      	lsrs	r3, r3, #18
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	4a43      	ldr	r2, [pc, #268]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x148>)
 8004cf6:	5cd3      	ldrb	r3, [r2, r3]
 8004cf8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	0d9b      	lsrs	r3, r3, #22
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01a      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	461a      	mov	r2, r3
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	4939      	ldr	r1, [pc, #228]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d1c:	fb01 f003 	mul.w	r0, r1, r3
 8004d20:	2100      	movs	r1, #0
 8004d22:	fb01 f102 	mul.w	r1, r1, r2
 8004d26:	1844      	adds	r4, r0, r1
 8004d28:	4935      	ldr	r1, [pc, #212]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x144>)
 8004d2a:	fba2 0101 	umull	r0, r1, r2, r1
 8004d2e:	1863      	adds	r3, r4, r1
 8004d30:	4619      	mov	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	461a      	mov	r2, r3
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	f7fb fd5f 	bl	80007fc <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4613      	mov	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	e040      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	f04f 0500 	mov.w	r5, #0
 8004d50:	4620      	mov	r0, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	014b      	lsls	r3, r1, #5
 8004d5e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d62:	0142      	lsls	r2, r0, #5
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	1b00      	subs	r0, r0, r4
 8004d6a:	eb61 0105 	sbc.w	r1, r1, r5
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	018b      	lsls	r3, r1, #6
 8004d78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d7c:	0182      	lsls	r2, r0, #6
 8004d7e:	1a12      	subs	r2, r2, r0
 8004d80:	eb63 0301 	sbc.w	r3, r3, r1
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	00d9      	lsls	r1, r3, #3
 8004d8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d92:	00d0      	lsls	r0, r2, #3
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	1912      	adds	r2, r2, r4
 8004d9a:	eb45 0303 	adc.w	r3, r5, r3
 8004d9e:	f04f 0000 	mov.w	r0, #0
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	0299      	lsls	r1, r3, #10
 8004da8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004dac:	0290      	lsls	r0, r2, #10
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	461a      	mov	r2, r3
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	f7fb fd1d 	bl	80007fc <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	613b      	str	r3, [r7, #16]
      break;
 8004dce:	e00d      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0b5b      	lsrs	r3, r3, #13
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	3301      	adds	r3, #1
 8004de0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	613b      	str	r3, [r7, #16]
      break;
 8004dea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dec:	693b      	ldr	r3, [r7, #16]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bdb0      	pop	{r4, r5, r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	016e3600 	.word	0x016e3600
 8004e04:	08006bbc 	.word	0x08006bbc

08004e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr
 8004e18:	20000048 	.word	0x20000048

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e20:	f7ff fff2 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08006bd8 	.word	0x08006bd8

08004e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e48:	f7ff ffde 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0adb      	lsrs	r3, r3, #11
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	; (8004e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	08006bd8 	.word	0x08006bd8

08004e6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d12c      	bne.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e84:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e016      	b.n	8004eca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4a1f      	ldr	r2, [pc, #124]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6253      	str	r3, [r2, #36]	; 0x24
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004ebc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ebe:	4b18      	ldr	r3, [pc, #96]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004ed0:	d105      	bne.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ed8:	d101      	bne.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004eda:	2301      	movs	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 0201 	bic.w	r2, r3, #1
 8004ef8:	490b      	ldr	r1, [pc, #44]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d001      	beq.n	8004f12 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023c00 	.word	0x40023c00

08004f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e06e      	b.n	800501c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d108      	bne.n	8004f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d009      	beq.n	8004f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	61da      	str	r2, [r3, #28]
 8004f56:	e005      	b.n	8004f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fa80 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fac:	431a      	orrs	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe8:	ea42 0103 	orr.w	r1, r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	0c1a      	lsrs	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f002 0204 	and.w	r2, r2, #4
 800500a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	099b      	lsrs	r3, r3, #6
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10f      	bne.n	8005068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	099b      	lsrs	r3, r3, #6
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4798      	blx	r3
    return;
 8005066:	e0be      	b.n	80051e6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_SPI_IRQHandler+0x66>
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	09db      	lsrs	r3, r3, #7
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
    return;
 8005088:	e0ad      	b.n	80051e6 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_SPI_IRQHandler+0x80>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80a1 	beq.w	80051e6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 809a 	beq.w	80051e6 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	099b      	lsrs	r3, r3, #6
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d023      	beq.n	8005106 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d011      	beq.n	80050ee <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	e00b      	b.n	8005106 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	693b      	ldr	r3, [r7, #16]
        return;
 8005104:	e06f      	b.n	80051e6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d014      	beq.n	800513c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0201 	orr.w	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	2b00      	cmp	r3, #0
 8005142:	d04f      	beq.n	80051e4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005152:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <HAL_SPI_IRQHandler+0x14c>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d034      	beq.n	80051da <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0203 	bic.w	r2, r2, #3
 800517e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518c:	4a17      	ldr	r2, [pc, #92]	; (80051ec <HAL_SPI_IRQHandler+0x1c8>)
 800518e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	4618      	mov	r0, r3
 8005196:	f7fd f941 	bl	800241c <HAL_DMA_Abort_IT>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d016      	beq.n	80051e2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b8:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <HAL_SPI_IRQHandler+0x1c8>)
 80051ba:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fd f92b 	bl	800241c <HAL_DMA_Abort_IT>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051d8:	e003      	b.n	80051e2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f808 	bl	80051f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051e0:	e000      	b.n	80051e4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80051e2:	bf00      	nop
    return;
 80051e4:	bf00      	nop
  }
}
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	08005203 	.word	0x08005203

080051f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff ffe7 	bl	80051f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e03f      	b.n	80052bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fc f963 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2224      	movs	r2, #36	; 0x24
 800525a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800526c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fb48 	bl	8005904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691a      	ldr	r2, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005282:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695a      	ldr	r2, [r3, #20]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005292:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08a      	sub	sp, #40	; 0x28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d008      	beq.n	8005316 <HAL_UART_IRQHandler+0x52>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa4f 	bl	80057b2 <UART_Receive_IT>
      return;
 8005314:	e17b      	b.n	800560e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80b1 	beq.w	8005480 <HAL_UART_IRQHandler+0x1bc>
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_UART_IRQHandler+0x70>
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80a6 	beq.w	8005480 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_UART_IRQHandler+0x90>
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f043 0201 	orr.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_UART_IRQHandler+0xb0>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d005      	beq.n	8005374 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f043 0202 	orr.w	r2, r3, #2
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_UART_IRQHandler+0xd0>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00f      	beq.n	80053be <HAL_UART_IRQHandler+0xfa>
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d104      	bne.n	80053b2 <HAL_UART_IRQHandler+0xee>
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f043 0208 	orr.w	r2, r3, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 811e 	beq.w	8005604 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_UART_IRQHandler+0x11e>
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d002      	beq.n	80053e2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9e8 	bl	80057b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_UART_IRQHandler+0x146>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d031      	beq.n	800546e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f92a 	bl	8005664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d123      	bne.n	8005466 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	695a      	ldr	r2, [r3, #20]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800542c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	4a76      	ldr	r2, [pc, #472]	; (8005614 <HAL_UART_IRQHandler+0x350>)
 800543c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	4618      	mov	r0, r3
 8005444:	f7fc ffea 	bl	800241c <HAL_DMA_Abort_IT>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005458:	4610      	mov	r0, r2
 800545a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	e00e      	b.n	800547c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8ec 	bl	800563c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00a      	b.n	800547c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8e8 	bl	800563c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e006      	b.n	800547c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8e4 	bl	800563c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800547a:	e0c3      	b.n	8005604 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	bf00      	nop
    return;
 800547e:	e0c1      	b.n	8005604 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	2b01      	cmp	r3, #1
 8005486:	f040 80a1 	bne.w	80055cc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 809b 	beq.w	80055cc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f003 0310 	and.w	r3, r3, #16
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8095 	beq.w	80055cc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d14e      	bne.n	8005564 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80054d0:	8a3b      	ldrh	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f000 8098 	beq.w	8005608 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80054dc:	8a3a      	ldrh	r2, [r7, #16]
 80054de:	429a      	cmp	r2, r3
 80054e0:	f080 8092 	bcs.w	8005608 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8a3a      	ldrh	r2, [r7, #16]
 80054e8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d02b      	beq.n	800554c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005502:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005522:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0210 	bic.w	r2, r2, #16
 8005540:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	4618      	mov	r0, r3
 8005548:	f7fc ff2b 	bl	80023a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005554:	b29b      	uxth	r3, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	b29b      	uxth	r3, r3
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f876 	bl	800564e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005562:	e051      	b.n	8005608 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d047      	beq.n	800560c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800557c:	8a7b      	ldrh	r3, [r7, #18]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005590:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	695a      	ldr	r2, [r3, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0210 	bic.w	r2, r2, #16
 80055be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055c0:	8a7b      	ldrh	r3, [r7, #18]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f842 	bl	800564e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055ca:	e01f      	b.n	800560c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_UART_IRQHandler+0x324>
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f87f 	bl	80056e4 <UART_Transmit_IT>
    return;
 80055e6:	e012      	b.n	800560e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <HAL_UART_IRQHandler+0x34a>
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f8c0 	bl	8005782 <UART_EndTransmit_IT>
    return;
 8005602:	e004      	b.n	800560e <HAL_UART_IRQHandler+0x34a>
    return;
 8005604:	bf00      	nop
 8005606:	e002      	b.n	800560e <HAL_UART_IRQHandler+0x34a>
      return;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_UART_IRQHandler+0x34a>
      return;
 800560c:	bf00      	nop
  }
}
 800560e:	3728      	adds	r7, #40	; 0x28
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	080056bd 	.word	0x080056bd

08005618 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	bc80      	pop	{r7}
 800564c:	4770      	bx	lr

0800564e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800567a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	2b01      	cmp	r3, #1
 8005692:	d107      	bne.n	80056a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0210 	bic.w	r2, r2, #16
 80056a2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff ffb0 	bl	800563c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b21      	cmp	r3, #33	; 0x21
 80056f6:	d13e      	bne.n	8005776 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005700:	d114      	bne.n	800572c <UART_Transmit_IT+0x48>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d110      	bne.n	800572c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	1c9a      	adds	r2, r3, #2
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]
 800572a:	e008      	b.n	800573e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	1c59      	adds	r1, r3, #1
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6211      	str	r1, [r2, #32]
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29b      	uxth	r3, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4619      	mov	r1, r3
 800574c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005760:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005770:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e000      	b.n	8005778 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
  }
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005798:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff ff38 	bl	8005618 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	2b22      	cmp	r3, #34	; 0x22
 80057c4:	f040 8099 	bne.w	80058fa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d117      	bne.n	8005802 <UART_Receive_IT+0x50>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d113      	bne.n	8005802 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005800:	e026      	b.n	8005850 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005814:	d007      	beq.n	8005826 <UART_Receive_IT+0x74>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10a      	bne.n	8005834 <UART_Receive_IT+0x82>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e008      	b.n	8005846 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005840:	b2da      	uxtb	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4619      	mov	r1, r3
 800585e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005860:	2b00      	cmp	r3, #0
 8005862:	d148      	bne.n	80058f6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0220 	bic.w	r2, r2, #32
 8005872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d123      	bne.n	80058ec <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0210 	bic.w	r2, r2, #16
 80058b8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0310 	and.w	r3, r3, #16
 80058c4:	2b10      	cmp	r3, #16
 80058c6:	d10a      	bne.n	80058de <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff feb2 	bl	800564e <HAL_UARTEx_RxEventCallback>
 80058ea:	e002      	b.n	80058f2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff fe9c 	bl	800562a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	e002      	b.n	80058fc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e000      	b.n	80058fc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
  }
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4313      	orrs	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005944:	f023 030c 	bic.w	r3, r3, #12
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6812      	ldr	r2, [r2, #0]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	430b      	orrs	r3, r1
 8005950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a55      	ldr	r2, [pc, #340]	; (8005ac4 <UART_SetConfig+0x1c0>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d103      	bne.n	800597a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005972:	f7ff fa67 	bl	8004e44 <HAL_RCC_GetPCLK2Freq>
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	e002      	b.n	8005980 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800597a:	f7ff fa4f 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 800597e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005988:	d14c      	bne.n	8005a24 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009a      	lsls	r2, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a0:	4a49      	ldr	r2, [pc, #292]	; (8005ac8 <UART_SetConfig+0x1c4>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	0119      	lsls	r1, r3, #4
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c0:	4b41      	ldr	r3, [pc, #260]	; (8005ac8 <UART_SetConfig+0x1c4>)
 80059c2:	fba3 0302 	umull	r0, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2064      	movs	r0, #100	; 0x64
 80059ca:	fb00 f303 	mul.w	r3, r0, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	3332      	adds	r3, #50	; 0x32
 80059d4:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <UART_SetConfig+0x1c4>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059e2:	4419      	add	r1, r3
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009a      	lsls	r2, r3, #2
 80059ee:	441a      	add	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059fa:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <UART_SetConfig+0x1c4>)
 80059fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	2064      	movs	r0, #100	; 0x64
 8005a04:	fb00 f303 	mul.w	r3, r0, r3
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	3332      	adds	r3, #50	; 0x32
 8005a0e:	4a2e      	ldr	r2, [pc, #184]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005a10:	fba2 2303 	umull	r2, r3, r2, r3
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f003 0207 	and.w	r2, r3, #7
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	440a      	add	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a22:	e04a      	b.n	8005aba <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4613      	mov	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009a      	lsls	r2, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	0119      	lsls	r1, r3, #4
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009a      	lsls	r2, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005a5c:	fba3 0302 	umull	r0, r3, r3, r2
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	2064      	movs	r0, #100	; 0x64
 8005a64:	fb00 f303 	mul.w	r3, r0, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	3332      	adds	r3, #50	; 0x32
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	095b      	lsrs	r3, r3, #5
 8005a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a7a:	4419      	add	r1, r3
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009a      	lsls	r2, r3, #2
 8005a86:	441a      	add	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005a94:	fba3 0302 	umull	r0, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2064      	movs	r0, #100	; 0x64
 8005a9c:	fb00 f303 	mul.w	r3, r0, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <UART_SetConfig+0x1c4>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	609a      	str	r2, [r3, #8]
}
 8005aba:	bf00      	nop
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40013800 	.word	0x40013800
 8005ac8:	51eb851f 	.word	0x51eb851f

08005acc <__errno>:
 8005acc:	4b01      	ldr	r3, [pc, #4]	; (8005ad4 <__errno+0x8>)
 8005ace:	6818      	ldr	r0, [r3, #0]
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	20000054 	.word	0x20000054

08005ad8 <exit>:
 8005ad8:	b508      	push	{r3, lr}
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <exit+0x20>)
 8005adc:	4604      	mov	r4, r0
 8005ade:	b113      	cbz	r3, 8005ae6 <exit+0xe>
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	f3af 8000 	nop.w
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <exit+0x24>)
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005aec:	b103      	cbz	r3, 8005af0 <exit+0x18>
 8005aee:	4798      	blx	r3
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7fb fdc5 	bl	8001680 <_exit>
 8005af6:	bf00      	nop
 8005af8:	00000000 	.word	0x00000000
 8005afc:	08006be0 	.word	0x08006be0

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	2600      	movs	r6, #0
 8005b04:	4d0c      	ldr	r5, [pc, #48]	; (8005b38 <__libc_init_array+0x38>)
 8005b06:	4c0d      	ldr	r4, [pc, #52]	; (8005b3c <__libc_init_array+0x3c>)
 8005b08:	1b64      	subs	r4, r4, r5
 8005b0a:	10a4      	asrs	r4, r4, #2
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	f000 fff8 	bl	8006b04 <_init>
 8005b14:	2600      	movs	r6, #0
 8005b16:	4d0a      	ldr	r5, [pc, #40]	; (8005b40 <__libc_init_array+0x40>)
 8005b18:	4c0a      	ldr	r4, [pc, #40]	; (8005b44 <__libc_init_array+0x44>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	08006c80 	.word	0x08006c80
 8005b3c:	08006c80 	.word	0x08006c80
 8005b40:	08006c80 	.word	0x08006c80
 8005b44:	08006c84 	.word	0x08006c84

08005b48 <memset>:
 8005b48:	4603      	mov	r3, r0
 8005b4a:	4402      	add	r2, r0
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d100      	bne.n	8005b52 <memset+0xa>
 8005b50:	4770      	bx	lr
 8005b52:	f803 1b01 	strb.w	r1, [r3], #1
 8005b56:	e7f9      	b.n	8005b4c <memset+0x4>

08005b58 <iprintf>:
 8005b58:	b40f      	push	{r0, r1, r2, r3}
 8005b5a:	4b0a      	ldr	r3, [pc, #40]	; (8005b84 <iprintf+0x2c>)
 8005b5c:	b513      	push	{r0, r1, r4, lr}
 8005b5e:	681c      	ldr	r4, [r3, #0]
 8005b60:	b124      	cbz	r4, 8005b6c <iprintf+0x14>
 8005b62:	69a3      	ldr	r3, [r4, #24]
 8005b64:	b913      	cbnz	r3, 8005b6c <iprintf+0x14>
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 fa5e 	bl	8006028 <__sinit>
 8005b6c:	ab05      	add	r3, sp, #20
 8005b6e:	4620      	mov	r0, r4
 8005b70:	9a04      	ldr	r2, [sp, #16]
 8005b72:	68a1      	ldr	r1, [r4, #8]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	f000 fc29 	bl	80063cc <_vfiprintf_r>
 8005b7a:	b002      	add	sp, #8
 8005b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b80:	b004      	add	sp, #16
 8005b82:	4770      	bx	lr
 8005b84:	20000054 	.word	0x20000054

08005b88 <_puts_r>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	460e      	mov	r6, r1
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	b118      	cbz	r0, 8005b98 <_puts_r+0x10>
 8005b90:	6983      	ldr	r3, [r0, #24]
 8005b92:	b90b      	cbnz	r3, 8005b98 <_puts_r+0x10>
 8005b94:	f000 fa48 	bl	8006028 <__sinit>
 8005b98:	69ab      	ldr	r3, [r5, #24]
 8005b9a:	68ac      	ldr	r4, [r5, #8]
 8005b9c:	b913      	cbnz	r3, 8005ba4 <_puts_r+0x1c>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f000 fa42 	bl	8006028 <__sinit>
 8005ba4:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <_puts_r+0xd0>)
 8005ba6:	429c      	cmp	r4, r3
 8005ba8:	d120      	bne.n	8005bec <_puts_r+0x64>
 8005baa:	686c      	ldr	r4, [r5, #4]
 8005bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bae:	07db      	lsls	r3, r3, #31
 8005bb0:	d405      	bmi.n	8005bbe <_puts_r+0x36>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	0598      	lsls	r0, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_puts_r+0x36>
 8005bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bba:	f000 fad3 	bl	8006164 <__retarget_lock_acquire_recursive>
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	0719      	lsls	r1, r3, #28
 8005bc2:	d51d      	bpl.n	8005c00 <_puts_r+0x78>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	b1db      	cbz	r3, 8005c00 <_puts_r+0x78>
 8005bc8:	3e01      	subs	r6, #1
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	bb39      	cbnz	r1, 8005c26 <_puts_r+0x9e>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da38      	bge.n	8005c4c <_puts_r+0xc4>
 8005bda:	4622      	mov	r2, r4
 8005bdc:	210a      	movs	r1, #10
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f848 	bl	8005c74 <__swbuf_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d011      	beq.n	8005c0c <_puts_r+0x84>
 8005be8:	250a      	movs	r5, #10
 8005bea:	e011      	b.n	8005c10 <_puts_r+0x88>
 8005bec:	4b1b      	ldr	r3, [pc, #108]	; (8005c5c <_puts_r+0xd4>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	d101      	bne.n	8005bf6 <_puts_r+0x6e>
 8005bf2:	68ac      	ldr	r4, [r5, #8]
 8005bf4:	e7da      	b.n	8005bac <_puts_r+0x24>
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <_puts_r+0xd8>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	bf08      	it	eq
 8005bfc:	68ec      	ldreq	r4, [r5, #12]
 8005bfe:	e7d5      	b.n	8005bac <_puts_r+0x24>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 f888 	bl	8005d18 <__swsetup_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0dd      	beq.n	8005bc8 <_puts_r+0x40>
 8005c0c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c12:	07da      	lsls	r2, r3, #31
 8005c14:	d405      	bmi.n	8005c22 <_puts_r+0x9a>
 8005c16:	89a3      	ldrh	r3, [r4, #12]
 8005c18:	059b      	lsls	r3, r3, #22
 8005c1a:	d402      	bmi.n	8005c22 <_puts_r+0x9a>
 8005c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c1e:	f000 faa2 	bl	8006166 <__retarget_lock_release_recursive>
 8005c22:	4628      	mov	r0, r5
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	da04      	bge.n	8005c34 <_puts_r+0xac>
 8005c2a:	69a2      	ldr	r2, [r4, #24]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	dc06      	bgt.n	8005c3e <_puts_r+0xb6>
 8005c30:	290a      	cmp	r1, #10
 8005c32:	d004      	beq.n	8005c3e <_puts_r+0xb6>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	6022      	str	r2, [r4, #0]
 8005c3a:	7019      	strb	r1, [r3, #0]
 8005c3c:	e7c5      	b.n	8005bca <_puts_r+0x42>
 8005c3e:	4622      	mov	r2, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 f817 	bl	8005c74 <__swbuf_r>
 8005c46:	3001      	adds	r0, #1
 8005c48:	d1bf      	bne.n	8005bca <_puts_r+0x42>
 8005c4a:	e7df      	b.n	8005c0c <_puts_r+0x84>
 8005c4c:	250a      	movs	r5, #10
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	701d      	strb	r5, [r3, #0]
 8005c56:	e7db      	b.n	8005c10 <_puts_r+0x88>
 8005c58:	08006c04 	.word	0x08006c04
 8005c5c:	08006c24 	.word	0x08006c24
 8005c60:	08006be4 	.word	0x08006be4

08005c64 <puts>:
 8005c64:	4b02      	ldr	r3, [pc, #8]	; (8005c70 <puts+0xc>)
 8005c66:	4601      	mov	r1, r0
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	f7ff bf8d 	b.w	8005b88 <_puts_r>
 8005c6e:	bf00      	nop
 8005c70:	20000054 	.word	0x20000054

08005c74 <__swbuf_r>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	460e      	mov	r6, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	b118      	cbz	r0, 8005c86 <__swbuf_r+0x12>
 8005c7e:	6983      	ldr	r3, [r0, #24]
 8005c80:	b90b      	cbnz	r3, 8005c86 <__swbuf_r+0x12>
 8005c82:	f000 f9d1 	bl	8006028 <__sinit>
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <__swbuf_r+0x98>)
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	d12b      	bne.n	8005ce4 <__swbuf_r+0x70>
 8005c8c:	686c      	ldr	r4, [r5, #4]
 8005c8e:	69a3      	ldr	r3, [r4, #24]
 8005c90:	60a3      	str	r3, [r4, #8]
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	071a      	lsls	r2, r3, #28
 8005c96:	d52f      	bpl.n	8005cf8 <__swbuf_r+0x84>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	b36b      	cbz	r3, 8005cf8 <__swbuf_r+0x84>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	b2f6      	uxtb	r6, r6
 8005ca2:	1ac0      	subs	r0, r0, r3
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	4637      	mov	r7, r6
 8005ca8:	4283      	cmp	r3, r0
 8005caa:	dc04      	bgt.n	8005cb6 <__swbuf_r+0x42>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f926 	bl	8005f00 <_fflush_r>
 8005cb4:	bb30      	cbnz	r0, 8005d04 <__swbuf_r+0x90>
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	3001      	adds	r0, #1
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	60a3      	str	r3, [r4, #8]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	701e      	strb	r6, [r3, #0]
 8005cc6:	6963      	ldr	r3, [r4, #20]
 8005cc8:	4283      	cmp	r3, r0
 8005cca:	d004      	beq.n	8005cd6 <__swbuf_r+0x62>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	07db      	lsls	r3, r3, #31
 8005cd0:	d506      	bpl.n	8005ce0 <__swbuf_r+0x6c>
 8005cd2:	2e0a      	cmp	r6, #10
 8005cd4:	d104      	bne.n	8005ce0 <__swbuf_r+0x6c>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 f911 	bl	8005f00 <_fflush_r>
 8005cde:	b988      	cbnz	r0, 8005d04 <__swbuf_r+0x90>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <__swbuf_r+0x9c>)
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d101      	bne.n	8005cee <__swbuf_r+0x7a>
 8005cea:	68ac      	ldr	r4, [r5, #8]
 8005cec:	e7cf      	b.n	8005c8e <__swbuf_r+0x1a>
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <__swbuf_r+0xa0>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	bf08      	it	eq
 8005cf4:	68ec      	ldreq	r4, [r5, #12]
 8005cf6:	e7ca      	b.n	8005c8e <__swbuf_r+0x1a>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 f80c 	bl	8005d18 <__swsetup_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d0cb      	beq.n	8005c9c <__swbuf_r+0x28>
 8005d04:	f04f 37ff 	mov.w	r7, #4294967295
 8005d08:	e7ea      	b.n	8005ce0 <__swbuf_r+0x6c>
 8005d0a:	bf00      	nop
 8005d0c:	08006c04 	.word	0x08006c04
 8005d10:	08006c24 	.word	0x08006c24
 8005d14:	08006be4 	.word	0x08006be4

08005d18 <__swsetup_r>:
 8005d18:	4b32      	ldr	r3, [pc, #200]	; (8005de4 <__swsetup_r+0xcc>)
 8005d1a:	b570      	push	{r4, r5, r6, lr}
 8005d1c:	681d      	ldr	r5, [r3, #0]
 8005d1e:	4606      	mov	r6, r0
 8005d20:	460c      	mov	r4, r1
 8005d22:	b125      	cbz	r5, 8005d2e <__swsetup_r+0x16>
 8005d24:	69ab      	ldr	r3, [r5, #24]
 8005d26:	b913      	cbnz	r3, 8005d2e <__swsetup_r+0x16>
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 f97d 	bl	8006028 <__sinit>
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <__swsetup_r+0xd0>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	d10f      	bne.n	8005d54 <__swsetup_r+0x3c>
 8005d34:	686c      	ldr	r4, [r5, #4]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d3c:	0719      	lsls	r1, r3, #28
 8005d3e:	d42c      	bmi.n	8005d9a <__swsetup_r+0x82>
 8005d40:	06dd      	lsls	r5, r3, #27
 8005d42:	d411      	bmi.n	8005d68 <__swsetup_r+0x50>
 8005d44:	2309      	movs	r3, #9
 8005d46:	6033      	str	r3, [r6, #0]
 8005d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	e03e      	b.n	8005dd2 <__swsetup_r+0xba>
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <__swsetup_r+0xd4>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d101      	bne.n	8005d5e <__swsetup_r+0x46>
 8005d5a:	68ac      	ldr	r4, [r5, #8]
 8005d5c:	e7eb      	b.n	8005d36 <__swsetup_r+0x1e>
 8005d5e:	4b24      	ldr	r3, [pc, #144]	; (8005df0 <__swsetup_r+0xd8>)
 8005d60:	429c      	cmp	r4, r3
 8005d62:	bf08      	it	eq
 8005d64:	68ec      	ldreq	r4, [r5, #12]
 8005d66:	e7e6      	b.n	8005d36 <__swsetup_r+0x1e>
 8005d68:	0758      	lsls	r0, r3, #29
 8005d6a:	d512      	bpl.n	8005d92 <__swsetup_r+0x7a>
 8005d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d6e:	b141      	cbz	r1, 8005d82 <__swsetup_r+0x6a>
 8005d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d74:	4299      	cmp	r1, r3
 8005d76:	d002      	beq.n	8005d7e <__swsetup_r+0x66>
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 fa59 	bl	8006230 <_free_r>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	6363      	str	r3, [r4, #52]	; 0x34
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	89a3      	ldrh	r3, [r4, #12]
 8005d94:	f043 0308 	orr.w	r3, r3, #8
 8005d98:	81a3      	strh	r3, [r4, #12]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	b94b      	cbnz	r3, 8005db2 <__swsetup_r+0x9a>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d003      	beq.n	8005db2 <__swsetup_r+0x9a>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4630      	mov	r0, r6
 8005dae:	f000 f9ff 	bl	80061b0 <__smakebuf_r>
 8005db2:	89a0      	ldrh	r0, [r4, #12]
 8005db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005db8:	f010 0301 	ands.w	r3, r0, #1
 8005dbc:	d00a      	beq.n	8005dd4 <__swsetup_r+0xbc>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60a3      	str	r3, [r4, #8]
 8005dc2:	6963      	ldr	r3, [r4, #20]
 8005dc4:	425b      	negs	r3, r3
 8005dc6:	61a3      	str	r3, [r4, #24]
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	b943      	cbnz	r3, 8005dde <__swsetup_r+0xc6>
 8005dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dd0:	d1ba      	bne.n	8005d48 <__swsetup_r+0x30>
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	0781      	lsls	r1, r0, #30
 8005dd6:	bf58      	it	pl
 8005dd8:	6963      	ldrpl	r3, [r4, #20]
 8005dda:	60a3      	str	r3, [r4, #8]
 8005ddc:	e7f4      	b.n	8005dc8 <__swsetup_r+0xb0>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e7f7      	b.n	8005dd2 <__swsetup_r+0xba>
 8005de2:	bf00      	nop
 8005de4:	20000054 	.word	0x20000054
 8005de8:	08006c04 	.word	0x08006c04
 8005dec:	08006c24 	.word	0x08006c24
 8005df0:	08006be4 	.word	0x08006be4

08005df4 <__sflush_r>:
 8005df4:	898a      	ldrh	r2, [r1, #12]
 8005df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	0710      	lsls	r0, r2, #28
 8005dfe:	460c      	mov	r4, r1
 8005e00:	d458      	bmi.n	8005eb4 <__sflush_r+0xc0>
 8005e02:	684b      	ldr	r3, [r1, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dc05      	bgt.n	8005e14 <__sflush_r+0x20>
 8005e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dc02      	bgt.n	8005e14 <__sflush_r+0x20>
 8005e0e:	2000      	movs	r0, #0
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	d0f9      	beq.n	8005e0e <__sflush_r+0x1a>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e20:	682f      	ldr	r7, [r5, #0]
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	d032      	beq.n	8005e8c <__sflush_r+0x98>
 8005e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e28:	89a3      	ldrh	r3, [r4, #12]
 8005e2a:	075a      	lsls	r2, r3, #29
 8005e2c:	d505      	bpl.n	8005e3a <__sflush_r+0x46>
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	1ac0      	subs	r0, r0, r3
 8005e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e34:	b10b      	cbz	r3, 8005e3a <__sflush_r+0x46>
 8005e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e38:	1ac0      	subs	r0, r0, r3
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e40:	4628      	mov	r0, r5
 8005e42:	6a21      	ldr	r1, [r4, #32]
 8005e44:	47b0      	blx	r6
 8005e46:	1c43      	adds	r3, r0, #1
 8005e48:	89a3      	ldrh	r3, [r4, #12]
 8005e4a:	d106      	bne.n	8005e5a <__sflush_r+0x66>
 8005e4c:	6829      	ldr	r1, [r5, #0]
 8005e4e:	291d      	cmp	r1, #29
 8005e50:	d82c      	bhi.n	8005eac <__sflush_r+0xb8>
 8005e52:	4a2a      	ldr	r2, [pc, #168]	; (8005efc <__sflush_r+0x108>)
 8005e54:	40ca      	lsrs	r2, r1
 8005e56:	07d6      	lsls	r6, r2, #31
 8005e58:	d528      	bpl.n	8005eac <__sflush_r+0xb8>
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6062      	str	r2, [r4, #4]
 8005e5e:	6922      	ldr	r2, [r4, #16]
 8005e60:	04d9      	lsls	r1, r3, #19
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	d504      	bpl.n	8005e70 <__sflush_r+0x7c>
 8005e66:	1c42      	adds	r2, r0, #1
 8005e68:	d101      	bne.n	8005e6e <__sflush_r+0x7a>
 8005e6a:	682b      	ldr	r3, [r5, #0]
 8005e6c:	b903      	cbnz	r3, 8005e70 <__sflush_r+0x7c>
 8005e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8005e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e72:	602f      	str	r7, [r5, #0]
 8005e74:	2900      	cmp	r1, #0
 8005e76:	d0ca      	beq.n	8005e0e <__sflush_r+0x1a>
 8005e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e7c:	4299      	cmp	r1, r3
 8005e7e:	d002      	beq.n	8005e86 <__sflush_r+0x92>
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f9d5 	bl	8006230 <_free_r>
 8005e86:	2000      	movs	r0, #0
 8005e88:	6360      	str	r0, [r4, #52]	; 0x34
 8005e8a:	e7c1      	b.n	8005e10 <__sflush_r+0x1c>
 8005e8c:	6a21      	ldr	r1, [r4, #32]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b0      	blx	r6
 8005e94:	1c41      	adds	r1, r0, #1
 8005e96:	d1c7      	bne.n	8005e28 <__sflush_r+0x34>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0c4      	beq.n	8005e28 <__sflush_r+0x34>
 8005e9e:	2b1d      	cmp	r3, #29
 8005ea0:	d001      	beq.n	8005ea6 <__sflush_r+0xb2>
 8005ea2:	2b16      	cmp	r3, #22
 8005ea4:	d101      	bne.n	8005eaa <__sflush_r+0xb6>
 8005ea6:	602f      	str	r7, [r5, #0]
 8005ea8:	e7b1      	b.n	8005e0e <__sflush_r+0x1a>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb0:	81a3      	strh	r3, [r4, #12]
 8005eb2:	e7ad      	b.n	8005e10 <__sflush_r+0x1c>
 8005eb4:	690f      	ldr	r7, [r1, #16]
 8005eb6:	2f00      	cmp	r7, #0
 8005eb8:	d0a9      	beq.n	8005e0e <__sflush_r+0x1a>
 8005eba:	0793      	lsls	r3, r2, #30
 8005ebc:	bf18      	it	ne
 8005ebe:	2300      	movne	r3, #0
 8005ec0:	680e      	ldr	r6, [r1, #0]
 8005ec2:	bf08      	it	eq
 8005ec4:	694b      	ldreq	r3, [r1, #20]
 8005ec6:	eba6 0807 	sub.w	r8, r6, r7
 8005eca:	600f      	str	r7, [r1, #0]
 8005ecc:	608b      	str	r3, [r1, #8]
 8005ece:	f1b8 0f00 	cmp.w	r8, #0
 8005ed2:	dd9c      	ble.n	8005e0e <__sflush_r+0x1a>
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	4628      	mov	r0, r5
 8005eda:	6a21      	ldr	r1, [r4, #32]
 8005edc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ede:	47b0      	blx	r6
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	dc06      	bgt.n	8005ef2 <__sflush_r+0xfe>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eee:	81a3      	strh	r3, [r4, #12]
 8005ef0:	e78e      	b.n	8005e10 <__sflush_r+0x1c>
 8005ef2:	4407      	add	r7, r0
 8005ef4:	eba8 0800 	sub.w	r8, r8, r0
 8005ef8:	e7e9      	b.n	8005ece <__sflush_r+0xda>
 8005efa:	bf00      	nop
 8005efc:	20400001 	.word	0x20400001

08005f00 <_fflush_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	690b      	ldr	r3, [r1, #16]
 8005f04:	4605      	mov	r5, r0
 8005f06:	460c      	mov	r4, r1
 8005f08:	b913      	cbnz	r3, 8005f10 <_fflush_r+0x10>
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	b118      	cbz	r0, 8005f1a <_fflush_r+0x1a>
 8005f12:	6983      	ldr	r3, [r0, #24]
 8005f14:	b90b      	cbnz	r3, 8005f1a <_fflush_r+0x1a>
 8005f16:	f000 f887 	bl	8006028 <__sinit>
 8005f1a:	4b14      	ldr	r3, [pc, #80]	; (8005f6c <_fflush_r+0x6c>)
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d11b      	bne.n	8005f58 <_fflush_r+0x58>
 8005f20:	686c      	ldr	r4, [r5, #4]
 8005f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0ef      	beq.n	8005f0a <_fflush_r+0xa>
 8005f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f2c:	07d0      	lsls	r0, r2, #31
 8005f2e:	d404      	bmi.n	8005f3a <_fflush_r+0x3a>
 8005f30:	0599      	lsls	r1, r3, #22
 8005f32:	d402      	bmi.n	8005f3a <_fflush_r+0x3a>
 8005f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f36:	f000 f915 	bl	8006164 <__retarget_lock_acquire_recursive>
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	f7ff ff59 	bl	8005df4 <__sflush_r>
 8005f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f44:	4605      	mov	r5, r0
 8005f46:	07da      	lsls	r2, r3, #31
 8005f48:	d4e0      	bmi.n	8005f0c <_fflush_r+0xc>
 8005f4a:	89a3      	ldrh	r3, [r4, #12]
 8005f4c:	059b      	lsls	r3, r3, #22
 8005f4e:	d4dd      	bmi.n	8005f0c <_fflush_r+0xc>
 8005f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f52:	f000 f908 	bl	8006166 <__retarget_lock_release_recursive>
 8005f56:	e7d9      	b.n	8005f0c <_fflush_r+0xc>
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <_fflush_r+0x70>)
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	d101      	bne.n	8005f62 <_fflush_r+0x62>
 8005f5e:	68ac      	ldr	r4, [r5, #8]
 8005f60:	e7df      	b.n	8005f22 <_fflush_r+0x22>
 8005f62:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <_fflush_r+0x74>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	bf08      	it	eq
 8005f68:	68ec      	ldreq	r4, [r5, #12]
 8005f6a:	e7da      	b.n	8005f22 <_fflush_r+0x22>
 8005f6c:	08006c04 	.word	0x08006c04
 8005f70:	08006c24 	.word	0x08006c24
 8005f74:	08006be4 	.word	0x08006be4

08005f78 <std>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f86:	6083      	str	r3, [r0, #8]
 8005f88:	8181      	strh	r1, [r0, #12]
 8005f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8005f8c:	81c2      	strh	r2, [r0, #14]
 8005f8e:	6183      	str	r3, [r0, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	2208      	movs	r2, #8
 8005f94:	305c      	adds	r0, #92	; 0x5c
 8005f96:	f7ff fdd7 	bl	8005b48 <memset>
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <std+0x38>)
 8005f9c:	6224      	str	r4, [r4, #32]
 8005f9e:	6263      	str	r3, [r4, #36]	; 0x24
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <std+0x3c>)
 8005fa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa4:	4b04      	ldr	r3, [pc, #16]	; (8005fb8 <std+0x40>)
 8005fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <std+0x44>)
 8005faa:	6323      	str	r3, [r4, #48]	; 0x30
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	08006979 	.word	0x08006979
 8005fb4:	0800699b 	.word	0x0800699b
 8005fb8:	080069d3 	.word	0x080069d3
 8005fbc:	080069f7 	.word	0x080069f7

08005fc0 <_cleanup_r>:
 8005fc0:	4901      	ldr	r1, [pc, #4]	; (8005fc8 <_cleanup_r+0x8>)
 8005fc2:	f000 b8af 	b.w	8006124 <_fwalk_reent>
 8005fc6:	bf00      	nop
 8005fc8:	08005f01 	.word	0x08005f01

08005fcc <__sfmoreglue>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	2568      	movs	r5, #104	; 0x68
 8005fd0:	1e4a      	subs	r2, r1, #1
 8005fd2:	4355      	muls	r5, r2
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fda:	f000 f975 	bl	80062c8 <_malloc_r>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	b140      	cbz	r0, 8005ff4 <__sfmoreglue+0x28>
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fe8:	300c      	adds	r0, #12
 8005fea:	60a0      	str	r0, [r4, #8]
 8005fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ff0:	f7ff fdaa 	bl	8005b48 <memset>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}

08005ff8 <__sfp_lock_acquire>:
 8005ff8:	4801      	ldr	r0, [pc, #4]	; (8006000 <__sfp_lock_acquire+0x8>)
 8005ffa:	f000 b8b3 	b.w	8006164 <__retarget_lock_acquire_recursive>
 8005ffe:	bf00      	nop
 8006000:	20000230 	.word	0x20000230

08006004 <__sfp_lock_release>:
 8006004:	4801      	ldr	r0, [pc, #4]	; (800600c <__sfp_lock_release+0x8>)
 8006006:	f000 b8ae 	b.w	8006166 <__retarget_lock_release_recursive>
 800600a:	bf00      	nop
 800600c:	20000230 	.word	0x20000230

08006010 <__sinit_lock_acquire>:
 8006010:	4801      	ldr	r0, [pc, #4]	; (8006018 <__sinit_lock_acquire+0x8>)
 8006012:	f000 b8a7 	b.w	8006164 <__retarget_lock_acquire_recursive>
 8006016:	bf00      	nop
 8006018:	2000022b 	.word	0x2000022b

0800601c <__sinit_lock_release>:
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <__sinit_lock_release+0x8>)
 800601e:	f000 b8a2 	b.w	8006166 <__retarget_lock_release_recursive>
 8006022:	bf00      	nop
 8006024:	2000022b 	.word	0x2000022b

08006028 <__sinit>:
 8006028:	b510      	push	{r4, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	f7ff fff0 	bl	8006010 <__sinit_lock_acquire>
 8006030:	69a3      	ldr	r3, [r4, #24]
 8006032:	b11b      	cbz	r3, 800603c <__sinit+0x14>
 8006034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006038:	f7ff bff0 	b.w	800601c <__sinit_lock_release>
 800603c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006040:	6523      	str	r3, [r4, #80]	; 0x50
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <__sinit+0x68>)
 8006044:	4a13      	ldr	r2, [pc, #76]	; (8006094 <__sinit+0x6c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	62a2      	str	r2, [r4, #40]	; 0x28
 800604a:	42a3      	cmp	r3, r4
 800604c:	bf08      	it	eq
 800604e:	2301      	moveq	r3, #1
 8006050:	4620      	mov	r0, r4
 8006052:	bf08      	it	eq
 8006054:	61a3      	streq	r3, [r4, #24]
 8006056:	f000 f81f 	bl	8006098 <__sfp>
 800605a:	6060      	str	r0, [r4, #4]
 800605c:	4620      	mov	r0, r4
 800605e:	f000 f81b 	bl	8006098 <__sfp>
 8006062:	60a0      	str	r0, [r4, #8]
 8006064:	4620      	mov	r0, r4
 8006066:	f000 f817 	bl	8006098 <__sfp>
 800606a:	2200      	movs	r2, #0
 800606c:	2104      	movs	r1, #4
 800606e:	60e0      	str	r0, [r4, #12]
 8006070:	6860      	ldr	r0, [r4, #4]
 8006072:	f7ff ff81 	bl	8005f78 <std>
 8006076:	2201      	movs	r2, #1
 8006078:	2109      	movs	r1, #9
 800607a:	68a0      	ldr	r0, [r4, #8]
 800607c:	f7ff ff7c 	bl	8005f78 <std>
 8006080:	2202      	movs	r2, #2
 8006082:	2112      	movs	r1, #18
 8006084:	68e0      	ldr	r0, [r4, #12]
 8006086:	f7ff ff77 	bl	8005f78 <std>
 800608a:	2301      	movs	r3, #1
 800608c:	61a3      	str	r3, [r4, #24]
 800608e:	e7d1      	b.n	8006034 <__sinit+0xc>
 8006090:	08006be0 	.word	0x08006be0
 8006094:	08005fc1 	.word	0x08005fc1

08006098 <__sfp>:
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609a:	4607      	mov	r7, r0
 800609c:	f7ff ffac 	bl	8005ff8 <__sfp_lock_acquire>
 80060a0:	4b1e      	ldr	r3, [pc, #120]	; (800611c <__sfp+0x84>)
 80060a2:	681e      	ldr	r6, [r3, #0]
 80060a4:	69b3      	ldr	r3, [r6, #24]
 80060a6:	b913      	cbnz	r3, 80060ae <__sfp+0x16>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f7ff ffbd 	bl	8006028 <__sinit>
 80060ae:	3648      	adds	r6, #72	; 0x48
 80060b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	d503      	bpl.n	80060c0 <__sfp+0x28>
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	b30b      	cbz	r3, 8006100 <__sfp+0x68>
 80060bc:	6836      	ldr	r6, [r6, #0]
 80060be:	e7f7      	b.n	80060b0 <__sfp+0x18>
 80060c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060c4:	b9d5      	cbnz	r5, 80060fc <__sfp+0x64>
 80060c6:	4b16      	ldr	r3, [pc, #88]	; (8006120 <__sfp+0x88>)
 80060c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060cc:	60e3      	str	r3, [r4, #12]
 80060ce:	6665      	str	r5, [r4, #100]	; 0x64
 80060d0:	f000 f847 	bl	8006162 <__retarget_lock_init_recursive>
 80060d4:	f7ff ff96 	bl	8006004 <__sfp_lock_release>
 80060d8:	2208      	movs	r2, #8
 80060da:	4629      	mov	r1, r5
 80060dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80060e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80060e4:	6025      	str	r5, [r4, #0]
 80060e6:	61a5      	str	r5, [r4, #24]
 80060e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060ec:	f7ff fd2c 	bl	8005b48 <memset>
 80060f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060f8:	4620      	mov	r0, r4
 80060fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060fc:	3468      	adds	r4, #104	; 0x68
 80060fe:	e7d9      	b.n	80060b4 <__sfp+0x1c>
 8006100:	2104      	movs	r1, #4
 8006102:	4638      	mov	r0, r7
 8006104:	f7ff ff62 	bl	8005fcc <__sfmoreglue>
 8006108:	4604      	mov	r4, r0
 800610a:	6030      	str	r0, [r6, #0]
 800610c:	2800      	cmp	r0, #0
 800610e:	d1d5      	bne.n	80060bc <__sfp+0x24>
 8006110:	f7ff ff78 	bl	8006004 <__sfp_lock_release>
 8006114:	230c      	movs	r3, #12
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	e7ee      	b.n	80060f8 <__sfp+0x60>
 800611a:	bf00      	nop
 800611c:	08006be0 	.word	0x08006be0
 8006120:	ffff0001 	.word	0xffff0001

08006124 <_fwalk_reent>:
 8006124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006128:	4606      	mov	r6, r0
 800612a:	4688      	mov	r8, r1
 800612c:	2700      	movs	r7, #0
 800612e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006136:	f1b9 0901 	subs.w	r9, r9, #1
 800613a:	d505      	bpl.n	8006148 <_fwalk_reent+0x24>
 800613c:	6824      	ldr	r4, [r4, #0]
 800613e:	2c00      	cmp	r4, #0
 8006140:	d1f7      	bne.n	8006132 <_fwalk_reent+0xe>
 8006142:	4638      	mov	r0, r7
 8006144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006148:	89ab      	ldrh	r3, [r5, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d907      	bls.n	800615e <_fwalk_reent+0x3a>
 800614e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006152:	3301      	adds	r3, #1
 8006154:	d003      	beq.n	800615e <_fwalk_reent+0x3a>
 8006156:	4629      	mov	r1, r5
 8006158:	4630      	mov	r0, r6
 800615a:	47c0      	blx	r8
 800615c:	4307      	orrs	r7, r0
 800615e:	3568      	adds	r5, #104	; 0x68
 8006160:	e7e9      	b.n	8006136 <_fwalk_reent+0x12>

08006162 <__retarget_lock_init_recursive>:
 8006162:	4770      	bx	lr

08006164 <__retarget_lock_acquire_recursive>:
 8006164:	4770      	bx	lr

08006166 <__retarget_lock_release_recursive>:
 8006166:	4770      	bx	lr

08006168 <__swhatbuf_r>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	460e      	mov	r6, r1
 800616c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006170:	4614      	mov	r4, r2
 8006172:	2900      	cmp	r1, #0
 8006174:	461d      	mov	r5, r3
 8006176:	b096      	sub	sp, #88	; 0x58
 8006178:	da07      	bge.n	800618a <__swhatbuf_r+0x22>
 800617a:	2300      	movs	r3, #0
 800617c:	602b      	str	r3, [r5, #0]
 800617e:	89b3      	ldrh	r3, [r6, #12]
 8006180:	061a      	lsls	r2, r3, #24
 8006182:	d410      	bmi.n	80061a6 <__swhatbuf_r+0x3e>
 8006184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006188:	e00e      	b.n	80061a8 <__swhatbuf_r+0x40>
 800618a:	466a      	mov	r2, sp
 800618c:	f000 fc5a 	bl	8006a44 <_fstat_r>
 8006190:	2800      	cmp	r0, #0
 8006192:	dbf2      	blt.n	800617a <__swhatbuf_r+0x12>
 8006194:	9a01      	ldr	r2, [sp, #4]
 8006196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800619a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800619e:	425a      	negs	r2, r3
 80061a0:	415a      	adcs	r2, r3
 80061a2:	602a      	str	r2, [r5, #0]
 80061a4:	e7ee      	b.n	8006184 <__swhatbuf_r+0x1c>
 80061a6:	2340      	movs	r3, #64	; 0x40
 80061a8:	2000      	movs	r0, #0
 80061aa:	6023      	str	r3, [r4, #0]
 80061ac:	b016      	add	sp, #88	; 0x58
 80061ae:	bd70      	pop	{r4, r5, r6, pc}

080061b0 <__smakebuf_r>:
 80061b0:	898b      	ldrh	r3, [r1, #12]
 80061b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061b4:	079d      	lsls	r5, r3, #30
 80061b6:	4606      	mov	r6, r0
 80061b8:	460c      	mov	r4, r1
 80061ba:	d507      	bpl.n	80061cc <__smakebuf_r+0x1c>
 80061bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	2301      	movs	r3, #1
 80061c6:	6163      	str	r3, [r4, #20]
 80061c8:	b002      	add	sp, #8
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	466a      	mov	r2, sp
 80061ce:	ab01      	add	r3, sp, #4
 80061d0:	f7ff ffca 	bl	8006168 <__swhatbuf_r>
 80061d4:	9900      	ldr	r1, [sp, #0]
 80061d6:	4605      	mov	r5, r0
 80061d8:	4630      	mov	r0, r6
 80061da:	f000 f875 	bl	80062c8 <_malloc_r>
 80061de:	b948      	cbnz	r0, 80061f4 <__smakebuf_r+0x44>
 80061e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e4:	059a      	lsls	r2, r3, #22
 80061e6:	d4ef      	bmi.n	80061c8 <__smakebuf_r+0x18>
 80061e8:	f023 0303 	bic.w	r3, r3, #3
 80061ec:	f043 0302 	orr.w	r3, r3, #2
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	e7e3      	b.n	80061bc <__smakebuf_r+0xc>
 80061f4:	4b0d      	ldr	r3, [pc, #52]	; (800622c <__smakebuf_r+0x7c>)
 80061f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	6020      	str	r0, [r4, #0]
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	9b00      	ldr	r3, [sp, #0]
 8006204:	6120      	str	r0, [r4, #16]
 8006206:	6163      	str	r3, [r4, #20]
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	b15b      	cbz	r3, 8006224 <__smakebuf_r+0x74>
 800620c:	4630      	mov	r0, r6
 800620e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006212:	f000 fc29 	bl	8006a68 <_isatty_r>
 8006216:	b128      	cbz	r0, 8006224 <__smakebuf_r+0x74>
 8006218:	89a3      	ldrh	r3, [r4, #12]
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	81a3      	strh	r3, [r4, #12]
 8006224:	89a0      	ldrh	r0, [r4, #12]
 8006226:	4305      	orrs	r5, r0
 8006228:	81a5      	strh	r5, [r4, #12]
 800622a:	e7cd      	b.n	80061c8 <__smakebuf_r+0x18>
 800622c:	08005fc1 	.word	0x08005fc1

08006230 <_free_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4605      	mov	r5, r0
 8006234:	2900      	cmp	r1, #0
 8006236:	d043      	beq.n	80062c0 <_free_r+0x90>
 8006238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800623c:	1f0c      	subs	r4, r1, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfb8      	it	lt
 8006242:	18e4      	addlt	r4, r4, r3
 8006244:	f000 fc40 	bl	8006ac8 <__malloc_lock>
 8006248:	4a1e      	ldr	r2, [pc, #120]	; (80062c4 <_free_r+0x94>)
 800624a:	6813      	ldr	r3, [r2, #0]
 800624c:	4610      	mov	r0, r2
 800624e:	b933      	cbnz	r3, 800625e <_free_r+0x2e>
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	6014      	str	r4, [r2, #0]
 8006254:	4628      	mov	r0, r5
 8006256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800625a:	f000 bc3b 	b.w	8006ad4 <__malloc_unlock>
 800625e:	42a3      	cmp	r3, r4
 8006260:	d90a      	bls.n	8006278 <_free_r+0x48>
 8006262:	6821      	ldr	r1, [r4, #0]
 8006264:	1862      	adds	r2, r4, r1
 8006266:	4293      	cmp	r3, r2
 8006268:	bf01      	itttt	eq
 800626a:	681a      	ldreq	r2, [r3, #0]
 800626c:	685b      	ldreq	r3, [r3, #4]
 800626e:	1852      	addeq	r2, r2, r1
 8006270:	6022      	streq	r2, [r4, #0]
 8006272:	6063      	str	r3, [r4, #4]
 8006274:	6004      	str	r4, [r0, #0]
 8006276:	e7ed      	b.n	8006254 <_free_r+0x24>
 8006278:	461a      	mov	r2, r3
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	b10b      	cbz	r3, 8006282 <_free_r+0x52>
 800627e:	42a3      	cmp	r3, r4
 8006280:	d9fa      	bls.n	8006278 <_free_r+0x48>
 8006282:	6811      	ldr	r1, [r2, #0]
 8006284:	1850      	adds	r0, r2, r1
 8006286:	42a0      	cmp	r0, r4
 8006288:	d10b      	bne.n	80062a2 <_free_r+0x72>
 800628a:	6820      	ldr	r0, [r4, #0]
 800628c:	4401      	add	r1, r0
 800628e:	1850      	adds	r0, r2, r1
 8006290:	4283      	cmp	r3, r0
 8006292:	6011      	str	r1, [r2, #0]
 8006294:	d1de      	bne.n	8006254 <_free_r+0x24>
 8006296:	6818      	ldr	r0, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4401      	add	r1, r0
 800629c:	6011      	str	r1, [r2, #0]
 800629e:	6053      	str	r3, [r2, #4]
 80062a0:	e7d8      	b.n	8006254 <_free_r+0x24>
 80062a2:	d902      	bls.n	80062aa <_free_r+0x7a>
 80062a4:	230c      	movs	r3, #12
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	e7d4      	b.n	8006254 <_free_r+0x24>
 80062aa:	6820      	ldr	r0, [r4, #0]
 80062ac:	1821      	adds	r1, r4, r0
 80062ae:	428b      	cmp	r3, r1
 80062b0:	bf01      	itttt	eq
 80062b2:	6819      	ldreq	r1, [r3, #0]
 80062b4:	685b      	ldreq	r3, [r3, #4]
 80062b6:	1809      	addeq	r1, r1, r0
 80062b8:	6021      	streq	r1, [r4, #0]
 80062ba:	6063      	str	r3, [r4, #4]
 80062bc:	6054      	str	r4, [r2, #4]
 80062be:	e7c9      	b.n	8006254 <_free_r+0x24>
 80062c0:	bd38      	pop	{r3, r4, r5, pc}
 80062c2:	bf00      	nop
 80062c4:	200000d8 	.word	0x200000d8

080062c8 <_malloc_r>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	1ccd      	adds	r5, r1, #3
 80062cc:	f025 0503 	bic.w	r5, r5, #3
 80062d0:	3508      	adds	r5, #8
 80062d2:	2d0c      	cmp	r5, #12
 80062d4:	bf38      	it	cc
 80062d6:	250c      	movcc	r5, #12
 80062d8:	2d00      	cmp	r5, #0
 80062da:	4606      	mov	r6, r0
 80062dc:	db01      	blt.n	80062e2 <_malloc_r+0x1a>
 80062de:	42a9      	cmp	r1, r5
 80062e0:	d903      	bls.n	80062ea <_malloc_r+0x22>
 80062e2:	230c      	movs	r3, #12
 80062e4:	6033      	str	r3, [r6, #0]
 80062e6:	2000      	movs	r0, #0
 80062e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062ea:	f000 fbed 	bl	8006ac8 <__malloc_lock>
 80062ee:	4921      	ldr	r1, [pc, #132]	; (8006374 <_malloc_r+0xac>)
 80062f0:	680a      	ldr	r2, [r1, #0]
 80062f2:	4614      	mov	r4, r2
 80062f4:	b99c      	cbnz	r4, 800631e <_malloc_r+0x56>
 80062f6:	4f20      	ldr	r7, [pc, #128]	; (8006378 <_malloc_r+0xb0>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	b923      	cbnz	r3, 8006306 <_malloc_r+0x3e>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4630      	mov	r0, r6
 8006300:	f000 fb2a 	bl	8006958 <_sbrk_r>
 8006304:	6038      	str	r0, [r7, #0]
 8006306:	4629      	mov	r1, r5
 8006308:	4630      	mov	r0, r6
 800630a:	f000 fb25 	bl	8006958 <_sbrk_r>
 800630e:	1c43      	adds	r3, r0, #1
 8006310:	d123      	bne.n	800635a <_malloc_r+0x92>
 8006312:	230c      	movs	r3, #12
 8006314:	4630      	mov	r0, r6
 8006316:	6033      	str	r3, [r6, #0]
 8006318:	f000 fbdc 	bl	8006ad4 <__malloc_unlock>
 800631c:	e7e3      	b.n	80062e6 <_malloc_r+0x1e>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	1b5b      	subs	r3, r3, r5
 8006322:	d417      	bmi.n	8006354 <_malloc_r+0x8c>
 8006324:	2b0b      	cmp	r3, #11
 8006326:	d903      	bls.n	8006330 <_malloc_r+0x68>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	441c      	add	r4, r3
 800632c:	6025      	str	r5, [r4, #0]
 800632e:	e004      	b.n	800633a <_malloc_r+0x72>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	42a2      	cmp	r2, r4
 8006334:	bf0c      	ite	eq
 8006336:	600b      	streq	r3, [r1, #0]
 8006338:	6053      	strne	r3, [r2, #4]
 800633a:	4630      	mov	r0, r6
 800633c:	f000 fbca 	bl	8006ad4 <__malloc_unlock>
 8006340:	f104 000b 	add.w	r0, r4, #11
 8006344:	1d23      	adds	r3, r4, #4
 8006346:	f020 0007 	bic.w	r0, r0, #7
 800634a:	1ac2      	subs	r2, r0, r3
 800634c:	d0cc      	beq.n	80062e8 <_malloc_r+0x20>
 800634e:	1a1b      	subs	r3, r3, r0
 8006350:	50a3      	str	r3, [r4, r2]
 8006352:	e7c9      	b.n	80062e8 <_malloc_r+0x20>
 8006354:	4622      	mov	r2, r4
 8006356:	6864      	ldr	r4, [r4, #4]
 8006358:	e7cc      	b.n	80062f4 <_malloc_r+0x2c>
 800635a:	1cc4      	adds	r4, r0, #3
 800635c:	f024 0403 	bic.w	r4, r4, #3
 8006360:	42a0      	cmp	r0, r4
 8006362:	d0e3      	beq.n	800632c <_malloc_r+0x64>
 8006364:	1a21      	subs	r1, r4, r0
 8006366:	4630      	mov	r0, r6
 8006368:	f000 faf6 	bl	8006958 <_sbrk_r>
 800636c:	3001      	adds	r0, #1
 800636e:	d1dd      	bne.n	800632c <_malloc_r+0x64>
 8006370:	e7cf      	b.n	8006312 <_malloc_r+0x4a>
 8006372:	bf00      	nop
 8006374:	200000d8 	.word	0x200000d8
 8006378:	200000dc 	.word	0x200000dc

0800637c <__sfputc_r>:
 800637c:	6893      	ldr	r3, [r2, #8]
 800637e:	b410      	push	{r4}
 8006380:	3b01      	subs	r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	6093      	str	r3, [r2, #8]
 8006386:	da07      	bge.n	8006398 <__sfputc_r+0x1c>
 8006388:	6994      	ldr	r4, [r2, #24]
 800638a:	42a3      	cmp	r3, r4
 800638c:	db01      	blt.n	8006392 <__sfputc_r+0x16>
 800638e:	290a      	cmp	r1, #10
 8006390:	d102      	bne.n	8006398 <__sfputc_r+0x1c>
 8006392:	bc10      	pop	{r4}
 8006394:	f7ff bc6e 	b.w	8005c74 <__swbuf_r>
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	1c58      	adds	r0, r3, #1
 800639c:	6010      	str	r0, [r2, #0]
 800639e:	7019      	strb	r1, [r3, #0]
 80063a0:	4608      	mov	r0, r1
 80063a2:	bc10      	pop	{r4}
 80063a4:	4770      	bx	lr

080063a6 <__sfputs_r>:
 80063a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a8:	4606      	mov	r6, r0
 80063aa:	460f      	mov	r7, r1
 80063ac:	4614      	mov	r4, r2
 80063ae:	18d5      	adds	r5, r2, r3
 80063b0:	42ac      	cmp	r4, r5
 80063b2:	d101      	bne.n	80063b8 <__sfputs_r+0x12>
 80063b4:	2000      	movs	r0, #0
 80063b6:	e007      	b.n	80063c8 <__sfputs_r+0x22>
 80063b8:	463a      	mov	r2, r7
 80063ba:	4630      	mov	r0, r6
 80063bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063c0:	f7ff ffdc 	bl	800637c <__sfputc_r>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d1f3      	bne.n	80063b0 <__sfputs_r+0xa>
 80063c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063cc <_vfiprintf_r>:
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	460d      	mov	r5, r1
 80063d2:	4614      	mov	r4, r2
 80063d4:	4698      	mov	r8, r3
 80063d6:	4606      	mov	r6, r0
 80063d8:	b09d      	sub	sp, #116	; 0x74
 80063da:	b118      	cbz	r0, 80063e4 <_vfiprintf_r+0x18>
 80063dc:	6983      	ldr	r3, [r0, #24]
 80063de:	b90b      	cbnz	r3, 80063e4 <_vfiprintf_r+0x18>
 80063e0:	f7ff fe22 	bl	8006028 <__sinit>
 80063e4:	4b89      	ldr	r3, [pc, #548]	; (800660c <_vfiprintf_r+0x240>)
 80063e6:	429d      	cmp	r5, r3
 80063e8:	d11b      	bne.n	8006422 <_vfiprintf_r+0x56>
 80063ea:	6875      	ldr	r5, [r6, #4]
 80063ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063ee:	07d9      	lsls	r1, r3, #31
 80063f0:	d405      	bmi.n	80063fe <_vfiprintf_r+0x32>
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	059a      	lsls	r2, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_vfiprintf_r+0x32>
 80063f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063fa:	f7ff feb3 	bl	8006164 <__retarget_lock_acquire_recursive>
 80063fe:	89ab      	ldrh	r3, [r5, #12]
 8006400:	071b      	lsls	r3, r3, #28
 8006402:	d501      	bpl.n	8006408 <_vfiprintf_r+0x3c>
 8006404:	692b      	ldr	r3, [r5, #16]
 8006406:	b9eb      	cbnz	r3, 8006444 <_vfiprintf_r+0x78>
 8006408:	4629      	mov	r1, r5
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff fc84 	bl	8005d18 <__swsetup_r>
 8006410:	b1c0      	cbz	r0, 8006444 <_vfiprintf_r+0x78>
 8006412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006414:	07dc      	lsls	r4, r3, #31
 8006416:	d50e      	bpl.n	8006436 <_vfiprintf_r+0x6a>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	b01d      	add	sp, #116	; 0x74
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006422:	4b7b      	ldr	r3, [pc, #492]	; (8006610 <_vfiprintf_r+0x244>)
 8006424:	429d      	cmp	r5, r3
 8006426:	d101      	bne.n	800642c <_vfiprintf_r+0x60>
 8006428:	68b5      	ldr	r5, [r6, #8]
 800642a:	e7df      	b.n	80063ec <_vfiprintf_r+0x20>
 800642c:	4b79      	ldr	r3, [pc, #484]	; (8006614 <_vfiprintf_r+0x248>)
 800642e:	429d      	cmp	r5, r3
 8006430:	bf08      	it	eq
 8006432:	68f5      	ldreq	r5, [r6, #12]
 8006434:	e7da      	b.n	80063ec <_vfiprintf_r+0x20>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	0598      	lsls	r0, r3, #22
 800643a:	d4ed      	bmi.n	8006418 <_vfiprintf_r+0x4c>
 800643c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800643e:	f7ff fe92 	bl	8006166 <__retarget_lock_release_recursive>
 8006442:	e7e9      	b.n	8006418 <_vfiprintf_r+0x4c>
 8006444:	2300      	movs	r3, #0
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	2320      	movs	r3, #32
 800644a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800644e:	2330      	movs	r3, #48	; 0x30
 8006450:	f04f 0901 	mov.w	r9, #1
 8006454:	f8cd 800c 	str.w	r8, [sp, #12]
 8006458:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006618 <_vfiprintf_r+0x24c>
 800645c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006460:	4623      	mov	r3, r4
 8006462:	469a      	mov	sl, r3
 8006464:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006468:	b10a      	cbz	r2, 800646e <_vfiprintf_r+0xa2>
 800646a:	2a25      	cmp	r2, #37	; 0x25
 800646c:	d1f9      	bne.n	8006462 <_vfiprintf_r+0x96>
 800646e:	ebba 0b04 	subs.w	fp, sl, r4
 8006472:	d00b      	beq.n	800648c <_vfiprintf_r+0xc0>
 8006474:	465b      	mov	r3, fp
 8006476:	4622      	mov	r2, r4
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f7ff ff93 	bl	80063a6 <__sfputs_r>
 8006480:	3001      	adds	r0, #1
 8006482:	f000 80aa 	beq.w	80065da <_vfiprintf_r+0x20e>
 8006486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006488:	445a      	add	r2, fp
 800648a:	9209      	str	r2, [sp, #36]	; 0x24
 800648c:	f89a 3000 	ldrb.w	r3, [sl]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80a2 	beq.w	80065da <_vfiprintf_r+0x20e>
 8006496:	2300      	movs	r3, #0
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064a0:	f10a 0a01 	add.w	sl, sl, #1
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	9307      	str	r3, [sp, #28]
 80064a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064ac:	931a      	str	r3, [sp, #104]	; 0x68
 80064ae:	4654      	mov	r4, sl
 80064b0:	2205      	movs	r2, #5
 80064b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064b6:	4858      	ldr	r0, [pc, #352]	; (8006618 <_vfiprintf_r+0x24c>)
 80064b8:	f000 faf8 	bl	8006aac <memchr>
 80064bc:	9a04      	ldr	r2, [sp, #16]
 80064be:	b9d8      	cbnz	r0, 80064f8 <_vfiprintf_r+0x12c>
 80064c0:	06d1      	lsls	r1, r2, #27
 80064c2:	bf44      	itt	mi
 80064c4:	2320      	movmi	r3, #32
 80064c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ca:	0713      	lsls	r3, r2, #28
 80064cc:	bf44      	itt	mi
 80064ce:	232b      	movmi	r3, #43	; 0x2b
 80064d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064d4:	f89a 3000 	ldrb.w	r3, [sl]
 80064d8:	2b2a      	cmp	r3, #42	; 0x2a
 80064da:	d015      	beq.n	8006508 <_vfiprintf_r+0x13c>
 80064dc:	4654      	mov	r4, sl
 80064de:	2000      	movs	r0, #0
 80064e0:	f04f 0c0a 	mov.w	ip, #10
 80064e4:	9a07      	ldr	r2, [sp, #28]
 80064e6:	4621      	mov	r1, r4
 80064e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064ec:	3b30      	subs	r3, #48	; 0x30
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d94e      	bls.n	8006590 <_vfiprintf_r+0x1c4>
 80064f2:	b1b0      	cbz	r0, 8006522 <_vfiprintf_r+0x156>
 80064f4:	9207      	str	r2, [sp, #28]
 80064f6:	e014      	b.n	8006522 <_vfiprintf_r+0x156>
 80064f8:	eba0 0308 	sub.w	r3, r0, r8
 80064fc:	fa09 f303 	lsl.w	r3, r9, r3
 8006500:	4313      	orrs	r3, r2
 8006502:	46a2      	mov	sl, r4
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	e7d2      	b.n	80064ae <_vfiprintf_r+0xe2>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	1d19      	adds	r1, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	bfbb      	ittet	lt
 8006514:	425b      	neglt	r3, r3
 8006516:	f042 0202 	orrlt.w	r2, r2, #2
 800651a:	9307      	strge	r3, [sp, #28]
 800651c:	9307      	strlt	r3, [sp, #28]
 800651e:	bfb8      	it	lt
 8006520:	9204      	strlt	r2, [sp, #16]
 8006522:	7823      	ldrb	r3, [r4, #0]
 8006524:	2b2e      	cmp	r3, #46	; 0x2e
 8006526:	d10c      	bne.n	8006542 <_vfiprintf_r+0x176>
 8006528:	7863      	ldrb	r3, [r4, #1]
 800652a:	2b2a      	cmp	r3, #42	; 0x2a
 800652c:	d135      	bne.n	800659a <_vfiprintf_r+0x1ce>
 800652e:	9b03      	ldr	r3, [sp, #12]
 8006530:	3402      	adds	r4, #2
 8006532:	1d1a      	adds	r2, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9203      	str	r2, [sp, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfb8      	it	lt
 800653c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006628 <_vfiprintf_r+0x25c>
 8006546:	2203      	movs	r2, #3
 8006548:	4650      	mov	r0, sl
 800654a:	7821      	ldrb	r1, [r4, #0]
 800654c:	f000 faae 	bl	8006aac <memchr>
 8006550:	b140      	cbz	r0, 8006564 <_vfiprintf_r+0x198>
 8006552:	2340      	movs	r3, #64	; 0x40
 8006554:	eba0 000a 	sub.w	r0, r0, sl
 8006558:	fa03 f000 	lsl.w	r0, r3, r0
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	3401      	adds	r4, #1
 8006560:	4303      	orrs	r3, r0
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006568:	2206      	movs	r2, #6
 800656a:	482c      	ldr	r0, [pc, #176]	; (800661c <_vfiprintf_r+0x250>)
 800656c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006570:	f000 fa9c 	bl	8006aac <memchr>
 8006574:	2800      	cmp	r0, #0
 8006576:	d03f      	beq.n	80065f8 <_vfiprintf_r+0x22c>
 8006578:	4b29      	ldr	r3, [pc, #164]	; (8006620 <_vfiprintf_r+0x254>)
 800657a:	bb1b      	cbnz	r3, 80065c4 <_vfiprintf_r+0x1f8>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	3307      	adds	r3, #7
 8006580:	f023 0307 	bic.w	r3, r3, #7
 8006584:	3308      	adds	r3, #8
 8006586:	9303      	str	r3, [sp, #12]
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	443b      	add	r3, r7
 800658c:	9309      	str	r3, [sp, #36]	; 0x24
 800658e:	e767      	b.n	8006460 <_vfiprintf_r+0x94>
 8006590:	460c      	mov	r4, r1
 8006592:	2001      	movs	r0, #1
 8006594:	fb0c 3202 	mla	r2, ip, r2, r3
 8006598:	e7a5      	b.n	80064e6 <_vfiprintf_r+0x11a>
 800659a:	2300      	movs	r3, #0
 800659c:	f04f 0c0a 	mov.w	ip, #10
 80065a0:	4619      	mov	r1, r3
 80065a2:	3401      	adds	r4, #1
 80065a4:	9305      	str	r3, [sp, #20]
 80065a6:	4620      	mov	r0, r4
 80065a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ac:	3a30      	subs	r2, #48	; 0x30
 80065ae:	2a09      	cmp	r2, #9
 80065b0:	d903      	bls.n	80065ba <_vfiprintf_r+0x1ee>
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0c5      	beq.n	8006542 <_vfiprintf_r+0x176>
 80065b6:	9105      	str	r1, [sp, #20]
 80065b8:	e7c3      	b.n	8006542 <_vfiprintf_r+0x176>
 80065ba:	4604      	mov	r4, r0
 80065bc:	2301      	movs	r3, #1
 80065be:	fb0c 2101 	mla	r1, ip, r1, r2
 80065c2:	e7f0      	b.n	80065a6 <_vfiprintf_r+0x1da>
 80065c4:	ab03      	add	r3, sp, #12
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	462a      	mov	r2, r5
 80065ca:	4630      	mov	r0, r6
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <_vfiprintf_r+0x258>)
 80065ce:	a904      	add	r1, sp, #16
 80065d0:	f3af 8000 	nop.w
 80065d4:	4607      	mov	r7, r0
 80065d6:	1c78      	adds	r0, r7, #1
 80065d8:	d1d6      	bne.n	8006588 <_vfiprintf_r+0x1bc>
 80065da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065dc:	07d9      	lsls	r1, r3, #31
 80065de:	d405      	bmi.n	80065ec <_vfiprintf_r+0x220>
 80065e0:	89ab      	ldrh	r3, [r5, #12]
 80065e2:	059a      	lsls	r2, r3, #22
 80065e4:	d402      	bmi.n	80065ec <_vfiprintf_r+0x220>
 80065e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e8:	f7ff fdbd 	bl	8006166 <__retarget_lock_release_recursive>
 80065ec:	89ab      	ldrh	r3, [r5, #12]
 80065ee:	065b      	lsls	r3, r3, #25
 80065f0:	f53f af12 	bmi.w	8006418 <_vfiprintf_r+0x4c>
 80065f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f6:	e711      	b.n	800641c <_vfiprintf_r+0x50>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	4b08      	ldr	r3, [pc, #32]	; (8006624 <_vfiprintf_r+0x258>)
 8006602:	a904      	add	r1, sp, #16
 8006604:	f000 f882 	bl	800670c <_printf_i>
 8006608:	e7e4      	b.n	80065d4 <_vfiprintf_r+0x208>
 800660a:	bf00      	nop
 800660c:	08006c04 	.word	0x08006c04
 8006610:	08006c24 	.word	0x08006c24
 8006614:	08006be4 	.word	0x08006be4
 8006618:	08006c44 	.word	0x08006c44
 800661c:	08006c4e 	.word	0x08006c4e
 8006620:	00000000 	.word	0x00000000
 8006624:	080063a7 	.word	0x080063a7
 8006628:	08006c4a 	.word	0x08006c4a

0800662c <_printf_common>:
 800662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006630:	4616      	mov	r6, r2
 8006632:	4699      	mov	r9, r3
 8006634:	688a      	ldr	r2, [r1, #8]
 8006636:	690b      	ldr	r3, [r1, #16]
 8006638:	4607      	mov	r7, r0
 800663a:	4293      	cmp	r3, r2
 800663c:	bfb8      	it	lt
 800663e:	4613      	movlt	r3, r2
 8006640:	6033      	str	r3, [r6, #0]
 8006642:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006646:	460c      	mov	r4, r1
 8006648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800664c:	b10a      	cbz	r2, 8006652 <_printf_common+0x26>
 800664e:	3301      	adds	r3, #1
 8006650:	6033      	str	r3, [r6, #0]
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0699      	lsls	r1, r3, #26
 8006656:	bf42      	ittt	mi
 8006658:	6833      	ldrmi	r3, [r6, #0]
 800665a:	3302      	addmi	r3, #2
 800665c:	6033      	strmi	r3, [r6, #0]
 800665e:	6825      	ldr	r5, [r4, #0]
 8006660:	f015 0506 	ands.w	r5, r5, #6
 8006664:	d106      	bne.n	8006674 <_printf_common+0x48>
 8006666:	f104 0a19 	add.w	sl, r4, #25
 800666a:	68e3      	ldr	r3, [r4, #12]
 800666c:	6832      	ldr	r2, [r6, #0]
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	42ab      	cmp	r3, r5
 8006672:	dc28      	bgt.n	80066c6 <_printf_common+0x9a>
 8006674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006678:	1e13      	subs	r3, r2, #0
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	bf18      	it	ne
 800667e:	2301      	movne	r3, #1
 8006680:	0692      	lsls	r2, r2, #26
 8006682:	d42d      	bmi.n	80066e0 <_printf_common+0xb4>
 8006684:	4649      	mov	r1, r9
 8006686:	4638      	mov	r0, r7
 8006688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800668c:	47c0      	blx	r8
 800668e:	3001      	adds	r0, #1
 8006690:	d020      	beq.n	80066d4 <_printf_common+0xa8>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	68e5      	ldr	r5, [r4, #12]
 8006696:	f003 0306 	and.w	r3, r3, #6
 800669a:	2b04      	cmp	r3, #4
 800669c:	bf18      	it	ne
 800669e:	2500      	movne	r5, #0
 80066a0:	6832      	ldr	r2, [r6, #0]
 80066a2:	f04f 0600 	mov.w	r6, #0
 80066a6:	68a3      	ldr	r3, [r4, #8]
 80066a8:	bf08      	it	eq
 80066aa:	1aad      	subeq	r5, r5, r2
 80066ac:	6922      	ldr	r2, [r4, #16]
 80066ae:	bf08      	it	eq
 80066b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfc4      	itt	gt
 80066b8:	1a9b      	subgt	r3, r3, r2
 80066ba:	18ed      	addgt	r5, r5, r3
 80066bc:	341a      	adds	r4, #26
 80066be:	42b5      	cmp	r5, r6
 80066c0:	d11a      	bne.n	80066f8 <_printf_common+0xcc>
 80066c2:	2000      	movs	r0, #0
 80066c4:	e008      	b.n	80066d8 <_printf_common+0xac>
 80066c6:	2301      	movs	r3, #1
 80066c8:	4652      	mov	r2, sl
 80066ca:	4649      	mov	r1, r9
 80066cc:	4638      	mov	r0, r7
 80066ce:	47c0      	blx	r8
 80066d0:	3001      	adds	r0, #1
 80066d2:	d103      	bne.n	80066dc <_printf_common+0xb0>
 80066d4:	f04f 30ff 	mov.w	r0, #4294967295
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	3501      	adds	r5, #1
 80066de:	e7c4      	b.n	800666a <_printf_common+0x3e>
 80066e0:	2030      	movs	r0, #48	; 0x30
 80066e2:	18e1      	adds	r1, r4, r3
 80066e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ee:	4422      	add	r2, r4
 80066f0:	3302      	adds	r3, #2
 80066f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f6:	e7c5      	b.n	8006684 <_printf_common+0x58>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4622      	mov	r2, r4
 80066fc:	4649      	mov	r1, r9
 80066fe:	4638      	mov	r0, r7
 8006700:	47c0      	blx	r8
 8006702:	3001      	adds	r0, #1
 8006704:	d0e6      	beq.n	80066d4 <_printf_common+0xa8>
 8006706:	3601      	adds	r6, #1
 8006708:	e7d9      	b.n	80066be <_printf_common+0x92>
	...

0800670c <_printf_i>:
 800670c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	460c      	mov	r4, r1
 8006712:	7e27      	ldrb	r7, [r4, #24]
 8006714:	4691      	mov	r9, r2
 8006716:	2f78      	cmp	r7, #120	; 0x78
 8006718:	4680      	mov	r8, r0
 800671a:	469a      	mov	sl, r3
 800671c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800671e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006722:	d807      	bhi.n	8006734 <_printf_i+0x28>
 8006724:	2f62      	cmp	r7, #98	; 0x62
 8006726:	d80a      	bhi.n	800673e <_printf_i+0x32>
 8006728:	2f00      	cmp	r7, #0
 800672a:	f000 80d9 	beq.w	80068e0 <_printf_i+0x1d4>
 800672e:	2f58      	cmp	r7, #88	; 0x58
 8006730:	f000 80a4 	beq.w	800687c <_printf_i+0x170>
 8006734:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800673c:	e03a      	b.n	80067b4 <_printf_i+0xa8>
 800673e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006742:	2b15      	cmp	r3, #21
 8006744:	d8f6      	bhi.n	8006734 <_printf_i+0x28>
 8006746:	a001      	add	r0, pc, #4	; (adr r0, 800674c <_printf_i+0x40>)
 8006748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800674c:	080067a5 	.word	0x080067a5
 8006750:	080067b9 	.word	0x080067b9
 8006754:	08006735 	.word	0x08006735
 8006758:	08006735 	.word	0x08006735
 800675c:	08006735 	.word	0x08006735
 8006760:	08006735 	.word	0x08006735
 8006764:	080067b9 	.word	0x080067b9
 8006768:	08006735 	.word	0x08006735
 800676c:	08006735 	.word	0x08006735
 8006770:	08006735 	.word	0x08006735
 8006774:	08006735 	.word	0x08006735
 8006778:	080068c7 	.word	0x080068c7
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080068a9 	.word	0x080068a9
 8006784:	08006735 	.word	0x08006735
 8006788:	08006735 	.word	0x08006735
 800678c:	080068e9 	.word	0x080068e9
 8006790:	08006735 	.word	0x08006735
 8006794:	080067e9 	.word	0x080067e9
 8006798:	08006735 	.word	0x08006735
 800679c:	08006735 	.word	0x08006735
 80067a0:	080068b1 	.word	0x080068b1
 80067a4:	680b      	ldr	r3, [r1, #0]
 80067a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067aa:	1d1a      	adds	r2, r3, #4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	600a      	str	r2, [r1, #0]
 80067b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0a4      	b.n	8006902 <_printf_i+0x1f6>
 80067b8:	6825      	ldr	r5, [r4, #0]
 80067ba:	6808      	ldr	r0, [r1, #0]
 80067bc:	062e      	lsls	r6, r5, #24
 80067be:	f100 0304 	add.w	r3, r0, #4
 80067c2:	d50a      	bpl.n	80067da <_printf_i+0xce>
 80067c4:	6805      	ldr	r5, [r0, #0]
 80067c6:	600b      	str	r3, [r1, #0]
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	da03      	bge.n	80067d4 <_printf_i+0xc8>
 80067cc:	232d      	movs	r3, #45	; 0x2d
 80067ce:	426d      	negs	r5, r5
 80067d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067d4:	230a      	movs	r3, #10
 80067d6:	485e      	ldr	r0, [pc, #376]	; (8006950 <_printf_i+0x244>)
 80067d8:	e019      	b.n	800680e <_printf_i+0x102>
 80067da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80067de:	6805      	ldr	r5, [r0, #0]
 80067e0:	600b      	str	r3, [r1, #0]
 80067e2:	bf18      	it	ne
 80067e4:	b22d      	sxthne	r5, r5
 80067e6:	e7ef      	b.n	80067c8 <_printf_i+0xbc>
 80067e8:	680b      	ldr	r3, [r1, #0]
 80067ea:	6825      	ldr	r5, [r4, #0]
 80067ec:	1d18      	adds	r0, r3, #4
 80067ee:	6008      	str	r0, [r1, #0]
 80067f0:	0628      	lsls	r0, r5, #24
 80067f2:	d501      	bpl.n	80067f8 <_printf_i+0xec>
 80067f4:	681d      	ldr	r5, [r3, #0]
 80067f6:	e002      	b.n	80067fe <_printf_i+0xf2>
 80067f8:	0669      	lsls	r1, r5, #25
 80067fa:	d5fb      	bpl.n	80067f4 <_printf_i+0xe8>
 80067fc:	881d      	ldrh	r5, [r3, #0]
 80067fe:	2f6f      	cmp	r7, #111	; 0x6f
 8006800:	bf0c      	ite	eq
 8006802:	2308      	moveq	r3, #8
 8006804:	230a      	movne	r3, #10
 8006806:	4852      	ldr	r0, [pc, #328]	; (8006950 <_printf_i+0x244>)
 8006808:	2100      	movs	r1, #0
 800680a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800680e:	6866      	ldr	r6, [r4, #4]
 8006810:	2e00      	cmp	r6, #0
 8006812:	bfa8      	it	ge
 8006814:	6821      	ldrge	r1, [r4, #0]
 8006816:	60a6      	str	r6, [r4, #8]
 8006818:	bfa4      	itt	ge
 800681a:	f021 0104 	bicge.w	r1, r1, #4
 800681e:	6021      	strge	r1, [r4, #0]
 8006820:	b90d      	cbnz	r5, 8006826 <_printf_i+0x11a>
 8006822:	2e00      	cmp	r6, #0
 8006824:	d04d      	beq.n	80068c2 <_printf_i+0x1b6>
 8006826:	4616      	mov	r6, r2
 8006828:	fbb5 f1f3 	udiv	r1, r5, r3
 800682c:	fb03 5711 	mls	r7, r3, r1, r5
 8006830:	5dc7      	ldrb	r7, [r0, r7]
 8006832:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006836:	462f      	mov	r7, r5
 8006838:	42bb      	cmp	r3, r7
 800683a:	460d      	mov	r5, r1
 800683c:	d9f4      	bls.n	8006828 <_printf_i+0x11c>
 800683e:	2b08      	cmp	r3, #8
 8006840:	d10b      	bne.n	800685a <_printf_i+0x14e>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	07df      	lsls	r7, r3, #31
 8006846:	d508      	bpl.n	800685a <_printf_i+0x14e>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	6861      	ldr	r1, [r4, #4]
 800684c:	4299      	cmp	r1, r3
 800684e:	bfde      	ittt	le
 8006850:	2330      	movle	r3, #48	; 0x30
 8006852:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006856:	f106 36ff 	addle.w	r6, r6, #4294967295
 800685a:	1b92      	subs	r2, r2, r6
 800685c:	6122      	str	r2, [r4, #16]
 800685e:	464b      	mov	r3, r9
 8006860:	4621      	mov	r1, r4
 8006862:	4640      	mov	r0, r8
 8006864:	f8cd a000 	str.w	sl, [sp]
 8006868:	aa03      	add	r2, sp, #12
 800686a:	f7ff fedf 	bl	800662c <_printf_common>
 800686e:	3001      	adds	r0, #1
 8006870:	d14c      	bne.n	800690c <_printf_i+0x200>
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	b004      	add	sp, #16
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	4834      	ldr	r0, [pc, #208]	; (8006950 <_printf_i+0x244>)
 800687e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006882:	680e      	ldr	r6, [r1, #0]
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	f856 5b04 	ldr.w	r5, [r6], #4
 800688a:	061f      	lsls	r7, r3, #24
 800688c:	600e      	str	r6, [r1, #0]
 800688e:	d514      	bpl.n	80068ba <_printf_i+0x1ae>
 8006890:	07d9      	lsls	r1, r3, #31
 8006892:	bf44      	itt	mi
 8006894:	f043 0320 	orrmi.w	r3, r3, #32
 8006898:	6023      	strmi	r3, [r4, #0]
 800689a:	b91d      	cbnz	r5, 80068a4 <_printf_i+0x198>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	f023 0320 	bic.w	r3, r3, #32
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	2310      	movs	r3, #16
 80068a6:	e7af      	b.n	8006808 <_printf_i+0xfc>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	f043 0320 	orr.w	r3, r3, #32
 80068ae:	6023      	str	r3, [r4, #0]
 80068b0:	2378      	movs	r3, #120	; 0x78
 80068b2:	4828      	ldr	r0, [pc, #160]	; (8006954 <_printf_i+0x248>)
 80068b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068b8:	e7e3      	b.n	8006882 <_printf_i+0x176>
 80068ba:	065e      	lsls	r6, r3, #25
 80068bc:	bf48      	it	mi
 80068be:	b2ad      	uxthmi	r5, r5
 80068c0:	e7e6      	b.n	8006890 <_printf_i+0x184>
 80068c2:	4616      	mov	r6, r2
 80068c4:	e7bb      	b.n	800683e <_printf_i+0x132>
 80068c6:	680b      	ldr	r3, [r1, #0]
 80068c8:	6826      	ldr	r6, [r4, #0]
 80068ca:	1d1d      	adds	r5, r3, #4
 80068cc:	6960      	ldr	r0, [r4, #20]
 80068ce:	600d      	str	r5, [r1, #0]
 80068d0:	0635      	lsls	r5, r6, #24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	d501      	bpl.n	80068da <_printf_i+0x1ce>
 80068d6:	6018      	str	r0, [r3, #0]
 80068d8:	e002      	b.n	80068e0 <_printf_i+0x1d4>
 80068da:	0671      	lsls	r1, r6, #25
 80068dc:	d5fb      	bpl.n	80068d6 <_printf_i+0x1ca>
 80068de:	8018      	strh	r0, [r3, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	4616      	mov	r6, r2
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	e7ba      	b.n	800685e <_printf_i+0x152>
 80068e8:	680b      	ldr	r3, [r1, #0]
 80068ea:	1d1a      	adds	r2, r3, #4
 80068ec:	600a      	str	r2, [r1, #0]
 80068ee:	681e      	ldr	r6, [r3, #0]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4630      	mov	r0, r6
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	f000 f8d9 	bl	8006aac <memchr>
 80068fa:	b108      	cbz	r0, 8006900 <_printf_i+0x1f4>
 80068fc:	1b80      	subs	r0, r0, r6
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	2300      	movs	r3, #0
 8006906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800690a:	e7a8      	b.n	800685e <_printf_i+0x152>
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	47d0      	blx	sl
 8006916:	3001      	adds	r0, #1
 8006918:	d0ab      	beq.n	8006872 <_printf_i+0x166>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	079b      	lsls	r3, r3, #30
 800691e:	d413      	bmi.n	8006948 <_printf_i+0x23c>
 8006920:	68e0      	ldr	r0, [r4, #12]
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	4298      	cmp	r0, r3
 8006926:	bfb8      	it	lt
 8006928:	4618      	movlt	r0, r3
 800692a:	e7a4      	b.n	8006876 <_printf_i+0x16a>
 800692c:	2301      	movs	r3, #1
 800692e:	4632      	mov	r2, r6
 8006930:	4649      	mov	r1, r9
 8006932:	4640      	mov	r0, r8
 8006934:	47d0      	blx	sl
 8006936:	3001      	adds	r0, #1
 8006938:	d09b      	beq.n	8006872 <_printf_i+0x166>
 800693a:	3501      	adds	r5, #1
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	9903      	ldr	r1, [sp, #12]
 8006940:	1a5b      	subs	r3, r3, r1
 8006942:	42ab      	cmp	r3, r5
 8006944:	dcf2      	bgt.n	800692c <_printf_i+0x220>
 8006946:	e7eb      	b.n	8006920 <_printf_i+0x214>
 8006948:	2500      	movs	r5, #0
 800694a:	f104 0619 	add.w	r6, r4, #25
 800694e:	e7f5      	b.n	800693c <_printf_i+0x230>
 8006950:	08006c55 	.word	0x08006c55
 8006954:	08006c66 	.word	0x08006c66

08006958 <_sbrk_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	2300      	movs	r3, #0
 800695c:	4d05      	ldr	r5, [pc, #20]	; (8006974 <_sbrk_r+0x1c>)
 800695e:	4604      	mov	r4, r0
 8006960:	4608      	mov	r0, r1
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	f7fa fee4 	bl	8001730 <_sbrk>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_sbrk_r+0x1a>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_sbrk_r+0x1a>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000234 	.word	0x20000234

08006978 <__sread>:
 8006978:	b510      	push	{r4, lr}
 800697a:	460c      	mov	r4, r1
 800697c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006980:	f000 f8ae 	bl	8006ae0 <_read_r>
 8006984:	2800      	cmp	r0, #0
 8006986:	bfab      	itete	ge
 8006988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800698a:	89a3      	ldrhlt	r3, [r4, #12]
 800698c:	181b      	addge	r3, r3, r0
 800698e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006992:	bfac      	ite	ge
 8006994:	6563      	strge	r3, [r4, #84]	; 0x54
 8006996:	81a3      	strhlt	r3, [r4, #12]
 8006998:	bd10      	pop	{r4, pc}

0800699a <__swrite>:
 800699a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699e:	461f      	mov	r7, r3
 80069a0:	898b      	ldrh	r3, [r1, #12]
 80069a2:	4605      	mov	r5, r0
 80069a4:	05db      	lsls	r3, r3, #23
 80069a6:	460c      	mov	r4, r1
 80069a8:	4616      	mov	r6, r2
 80069aa:	d505      	bpl.n	80069b8 <__swrite+0x1e>
 80069ac:	2302      	movs	r3, #2
 80069ae:	2200      	movs	r2, #0
 80069b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b4:	f000 f868 	bl	8006a88 <_lseek_r>
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	4632      	mov	r2, r6
 80069bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	4628      	mov	r0, r5
 80069c4:	463b      	mov	r3, r7
 80069c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ce:	f000 b817 	b.w	8006a00 <_write_r>

080069d2 <__sseek>:
 80069d2:	b510      	push	{r4, lr}
 80069d4:	460c      	mov	r4, r1
 80069d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069da:	f000 f855 	bl	8006a88 <_lseek_r>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	bf15      	itete	ne
 80069e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80069e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069ee:	81a3      	strheq	r3, [r4, #12]
 80069f0:	bf18      	it	ne
 80069f2:	81a3      	strhne	r3, [r4, #12]
 80069f4:	bd10      	pop	{r4, pc}

080069f6 <__sclose>:
 80069f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069fa:	f000 b813 	b.w	8006a24 <_close_r>
	...

08006a00 <_write_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4d05      	ldr	r5, [pc, #20]	; (8006a20 <_write_r+0x20>)
 8006a0c:	602a      	str	r2, [r5, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f7fa fc18 	bl	8001244 <_write>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_write_r+0x1e>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_write_r+0x1e>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20000234 	.word	0x20000234

08006a24 <_close_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	2300      	movs	r3, #0
 8006a28:	4d05      	ldr	r5, [pc, #20]	; (8006a40 <_close_r+0x1c>)
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fa fe4d 	bl	80016ce <_close>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_close_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_close_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	20000234 	.word	0x20000234

08006a44 <_fstat_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4d06      	ldr	r5, [pc, #24]	; (8006a64 <_fstat_r+0x20>)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	f7fa fe47 	bl	80016e4 <_fstat>
 8006a56:	1c43      	adds	r3, r0, #1
 8006a58:	d102      	bne.n	8006a60 <_fstat_r+0x1c>
 8006a5a:	682b      	ldr	r3, [r5, #0]
 8006a5c:	b103      	cbz	r3, 8006a60 <_fstat_r+0x1c>
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	bd38      	pop	{r3, r4, r5, pc}
 8006a62:	bf00      	nop
 8006a64:	20000234 	.word	0x20000234

08006a68 <_isatty_r>:
 8006a68:	b538      	push	{r3, r4, r5, lr}
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	4d05      	ldr	r5, [pc, #20]	; (8006a84 <_isatty_r+0x1c>)
 8006a6e:	4604      	mov	r4, r0
 8006a70:	4608      	mov	r0, r1
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	f7fa fe45 	bl	8001702 <_isatty>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_isatty_r+0x1a>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_isatty_r+0x1a>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20000234 	.word	0x20000234

08006a88 <_lseek_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	2200      	movs	r2, #0
 8006a92:	4d05      	ldr	r5, [pc, #20]	; (8006aa8 <_lseek_r+0x20>)
 8006a94:	602a      	str	r2, [r5, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7fa fe3d 	bl	8001716 <_lseek>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_lseek_r+0x1e>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_lseek_r+0x1e>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20000234 	.word	0x20000234

08006aac <memchr>:
 8006aac:	4603      	mov	r3, r0
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	b2c9      	uxtb	r1, r1
 8006ab2:	4402      	add	r2, r0
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	d101      	bne.n	8006abe <memchr+0x12>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e003      	b.n	8006ac6 <memchr+0x1a>
 8006abe:	7804      	ldrb	r4, [r0, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	428c      	cmp	r4, r1
 8006ac4:	d1f6      	bne.n	8006ab4 <memchr+0x8>
 8006ac6:	bd10      	pop	{r4, pc}

08006ac8 <__malloc_lock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	; (8006ad0 <__malloc_lock+0x8>)
 8006aca:	f7ff bb4b 	b.w	8006164 <__retarget_lock_acquire_recursive>
 8006ace:	bf00      	nop
 8006ad0:	2000022c 	.word	0x2000022c

08006ad4 <__malloc_unlock>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	; (8006adc <__malloc_unlock+0x8>)
 8006ad6:	f7ff bb46 	b.w	8006166 <__retarget_lock_release_recursive>
 8006ada:	bf00      	nop
 8006adc:	2000022c 	.word	0x2000022c

08006ae0 <_read_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4d05      	ldr	r5, [pc, #20]	; (8006b00 <_read_r+0x20>)
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fa fdd0 	bl	8001694 <_read>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_read_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_read_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000234 	.word	0x20000234

08006b04 <_init>:
 8006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b06:	bf00      	nop
 8006b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b0a:	bc08      	pop	{r3}
 8006b0c:	469e      	mov	lr, r3
 8006b0e:	4770      	bx	lr

08006b10 <_fini>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr
