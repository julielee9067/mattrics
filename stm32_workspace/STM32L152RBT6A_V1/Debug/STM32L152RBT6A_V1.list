
STM32L152RBT6A_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab00  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  0800ac3c  0800ac3c  0001ac3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b16c  0800b16c  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  0800b16c  0800b16c  0001b16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b174  0800b174  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b174  0800b174  0001b174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b178  0800b178  0001b178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800b17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005514  20000110  0800b28c  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20005624  0800b28c  00025624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019268  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366f  00000000  00000000  000393a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a9d  00000000  00000000  0003ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019183  00000000  00000000  0005699d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088e03  00000000  00000000  0006fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005458  00000000  00000000  000f8978  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000110 	.word	0x20000110
 8000158:	00000000 	.word	0x00000000
 800015c:	0800ac24 	.word	0x0800ac24

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000114 	.word	0x20000114
 8000178:	0800ac24 	.word	0x0800ac24

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_d2iz>:
 80004f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80004fc:	d215      	bcs.n	800052a <__aeabi_d2iz+0x36>
 80004fe:	d511      	bpl.n	8000524 <__aeabi_d2iz+0x30>
 8000500:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000504:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000508:	d912      	bls.n	8000530 <__aeabi_d2iz+0x3c>
 800050a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800050e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000512:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000516:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800051a:	fa23 f002 	lsr.w	r0, r3, r2
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	4770      	bx	lr
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	4770      	bx	lr
 800052a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800052e:	d105      	bne.n	800053c <__aeabi_d2iz+0x48>
 8000530:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000534:	bf08      	it	eq
 8000536:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800053a:	4770      	bx	lr
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <__aeabi_uldivmod>:
 8000544:	b953      	cbnz	r3, 800055c <__aeabi_uldivmod+0x18>
 8000546:	b94a      	cbnz	r2, 800055c <__aeabi_uldivmod+0x18>
 8000548:	2900      	cmp	r1, #0
 800054a:	bf08      	it	eq
 800054c:	2800      	cmpeq	r0, #0
 800054e:	bf1c      	itt	ne
 8000550:	f04f 31ff 	movne.w	r1, #4294967295
 8000554:	f04f 30ff 	movne.w	r0, #4294967295
 8000558:	f000 b96e 	b.w	8000838 <__aeabi_idiv0>
 800055c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000564:	f000 f806 	bl	8000574 <__udivmoddi4>
 8000568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800056c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000570:	b004      	add	sp, #16
 8000572:	4770      	bx	lr

08000574 <__udivmoddi4>:
 8000574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000578:	9e08      	ldr	r6, [sp, #32]
 800057a:	460d      	mov	r5, r1
 800057c:	4604      	mov	r4, r0
 800057e:	468e      	mov	lr, r1
 8000580:	2b00      	cmp	r3, #0
 8000582:	f040 8083 	bne.w	800068c <__udivmoddi4+0x118>
 8000586:	428a      	cmp	r2, r1
 8000588:	4617      	mov	r7, r2
 800058a:	d947      	bls.n	800061c <__udivmoddi4+0xa8>
 800058c:	fab2 f382 	clz	r3, r2
 8000590:	b14b      	cbz	r3, 80005a6 <__udivmoddi4+0x32>
 8000592:	f1c3 0120 	rsb	r1, r3, #32
 8000596:	fa05 fe03 	lsl.w	lr, r5, r3
 800059a:	fa20 f101 	lsr.w	r1, r0, r1
 800059e:	409f      	lsls	r7, r3
 80005a0:	ea41 0e0e 	orr.w	lr, r1, lr
 80005a4:	409c      	lsls	r4, r3
 80005a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005aa:	fbbe fcf8 	udiv	ip, lr, r8
 80005ae:	fa1f f987 	uxth.w	r9, r7
 80005b2:	fb08 e21c 	mls	r2, r8, ip, lr
 80005b6:	fb0c f009 	mul.w	r0, ip, r9
 80005ba:	0c21      	lsrs	r1, r4, #16
 80005bc:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80005c0:	4290      	cmp	r0, r2
 80005c2:	d90a      	bls.n	80005da <__udivmoddi4+0x66>
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80005ca:	f080 8118 	bcs.w	80007fe <__udivmoddi4+0x28a>
 80005ce:	4290      	cmp	r0, r2
 80005d0:	f240 8115 	bls.w	80007fe <__udivmoddi4+0x28a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	443a      	add	r2, r7
 80005da:	1a12      	subs	r2, r2, r0
 80005dc:	fbb2 f0f8 	udiv	r0, r2, r8
 80005e0:	fb08 2210 	mls	r2, r8, r0, r2
 80005e4:	fb00 f109 	mul.w	r1, r0, r9
 80005e8:	b2a4      	uxth	r4, r4
 80005ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005ee:	42a1      	cmp	r1, r4
 80005f0:	d909      	bls.n	8000606 <__udivmoddi4+0x92>
 80005f2:	193c      	adds	r4, r7, r4
 80005f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80005f8:	f080 8103 	bcs.w	8000802 <__udivmoddi4+0x28e>
 80005fc:	42a1      	cmp	r1, r4
 80005fe:	f240 8100 	bls.w	8000802 <__udivmoddi4+0x28e>
 8000602:	3802      	subs	r0, #2
 8000604:	443c      	add	r4, r7
 8000606:	1a64      	subs	r4, r4, r1
 8000608:	2100      	movs	r1, #0
 800060a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800060e:	b11e      	cbz	r6, 8000618 <__udivmoddi4+0xa4>
 8000610:	2200      	movs	r2, #0
 8000612:	40dc      	lsrs	r4, r3
 8000614:	e9c6 4200 	strd	r4, r2, [r6]
 8000618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800061c:	b902      	cbnz	r2, 8000620 <__udivmoddi4+0xac>
 800061e:	deff      	udf	#255	; 0xff
 8000620:	fab2 f382 	clz	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d14f      	bne.n	80006c8 <__udivmoddi4+0x154>
 8000628:	1a8d      	subs	r5, r1, r2
 800062a:	2101      	movs	r1, #1
 800062c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000630:	fa1f f882 	uxth.w	r8, r2
 8000634:	fbb5 fcfe 	udiv	ip, r5, lr
 8000638:	fb0e 551c 	mls	r5, lr, ip, r5
 800063c:	fb08 f00c 	mul.w	r0, r8, ip
 8000640:	0c22      	lsrs	r2, r4, #16
 8000642:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000646:	42a8      	cmp	r0, r5
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0xe6>
 800064a:	197d      	adds	r5, r7, r5
 800064c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000650:	d202      	bcs.n	8000658 <__udivmoddi4+0xe4>
 8000652:	42a8      	cmp	r0, r5
 8000654:	f200 80e9 	bhi.w	800082a <__udivmoddi4+0x2b6>
 8000658:	4694      	mov	ip, r2
 800065a:	1a2d      	subs	r5, r5, r0
 800065c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000660:	fb0e 5510 	mls	r5, lr, r0, r5
 8000664:	fb08 f800 	mul.w	r8, r8, r0
 8000668:	b2a4      	uxth	r4, r4
 800066a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800066e:	45a0      	cmp	r8, r4
 8000670:	d907      	bls.n	8000682 <__udivmoddi4+0x10e>
 8000672:	193c      	adds	r4, r7, r4
 8000674:	f100 32ff 	add.w	r2, r0, #4294967295
 8000678:	d202      	bcs.n	8000680 <__udivmoddi4+0x10c>
 800067a:	45a0      	cmp	r8, r4
 800067c:	f200 80d9 	bhi.w	8000832 <__udivmoddi4+0x2be>
 8000680:	4610      	mov	r0, r2
 8000682:	eba4 0408 	sub.w	r4, r4, r8
 8000686:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800068a:	e7c0      	b.n	800060e <__udivmoddi4+0x9a>
 800068c:	428b      	cmp	r3, r1
 800068e:	d908      	bls.n	80006a2 <__udivmoddi4+0x12e>
 8000690:	2e00      	cmp	r6, #0
 8000692:	f000 80b1 	beq.w	80007f8 <__udivmoddi4+0x284>
 8000696:	2100      	movs	r1, #0
 8000698:	e9c6 0500 	strd	r0, r5, [r6]
 800069c:	4608      	mov	r0, r1
 800069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a2:	fab3 f183 	clz	r1, r3
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d14b      	bne.n	8000742 <__udivmoddi4+0x1ce>
 80006aa:	42ab      	cmp	r3, r5
 80006ac:	d302      	bcc.n	80006b4 <__udivmoddi4+0x140>
 80006ae:	4282      	cmp	r2, r0
 80006b0:	f200 80b9 	bhi.w	8000826 <__udivmoddi4+0x2b2>
 80006b4:	1a84      	subs	r4, r0, r2
 80006b6:	eb65 0303 	sbc.w	r3, r5, r3
 80006ba:	2001      	movs	r0, #1
 80006bc:	469e      	mov	lr, r3
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d0aa      	beq.n	8000618 <__udivmoddi4+0xa4>
 80006c2:	e9c6 4e00 	strd	r4, lr, [r6]
 80006c6:	e7a7      	b.n	8000618 <__udivmoddi4+0xa4>
 80006c8:	409f      	lsls	r7, r3
 80006ca:	f1c3 0220 	rsb	r2, r3, #32
 80006ce:	40d1      	lsrs	r1, r2
 80006d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d8:	fa1f f887 	uxth.w	r8, r7
 80006dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80006e0:	fa24 f202 	lsr.w	r2, r4, r2
 80006e4:	409d      	lsls	r5, r3
 80006e6:	fb00 fc08 	mul.w	ip, r0, r8
 80006ea:	432a      	orrs	r2, r5
 80006ec:	0c15      	lsrs	r5, r2, #16
 80006ee:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006f2:	45ac      	cmp	ip, r5
 80006f4:	fa04 f403 	lsl.w	r4, r4, r3
 80006f8:	d909      	bls.n	800070e <__udivmoddi4+0x19a>
 80006fa:	197d      	adds	r5, r7, r5
 80006fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000700:	f080 808f 	bcs.w	8000822 <__udivmoddi4+0x2ae>
 8000704:	45ac      	cmp	ip, r5
 8000706:	f240 808c 	bls.w	8000822 <__udivmoddi4+0x2ae>
 800070a:	3802      	subs	r0, #2
 800070c:	443d      	add	r5, r7
 800070e:	eba5 050c 	sub.w	r5, r5, ip
 8000712:	fbb5 f1fe 	udiv	r1, r5, lr
 8000716:	fb0e 5c11 	mls	ip, lr, r1, r5
 800071a:	fb01 f908 	mul.w	r9, r1, r8
 800071e:	b295      	uxth	r5, r2
 8000720:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000724:	45a9      	cmp	r9, r5
 8000726:	d907      	bls.n	8000738 <__udivmoddi4+0x1c4>
 8000728:	197d      	adds	r5, r7, r5
 800072a:	f101 32ff 	add.w	r2, r1, #4294967295
 800072e:	d274      	bcs.n	800081a <__udivmoddi4+0x2a6>
 8000730:	45a9      	cmp	r9, r5
 8000732:	d972      	bls.n	800081a <__udivmoddi4+0x2a6>
 8000734:	3902      	subs	r1, #2
 8000736:	443d      	add	r5, r7
 8000738:	eba5 0509 	sub.w	r5, r5, r9
 800073c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000740:	e778      	b.n	8000634 <__udivmoddi4+0xc0>
 8000742:	f1c1 0720 	rsb	r7, r1, #32
 8000746:	408b      	lsls	r3, r1
 8000748:	fa22 fc07 	lsr.w	ip, r2, r7
 800074c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000750:	fa25 f407 	lsr.w	r4, r5, r7
 8000754:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000758:	fbb4 f9fe 	udiv	r9, r4, lr
 800075c:	fa1f f88c 	uxth.w	r8, ip
 8000760:	fb0e 4419 	mls	r4, lr, r9, r4
 8000764:	fa20 f307 	lsr.w	r3, r0, r7
 8000768:	fb09 fa08 	mul.w	sl, r9, r8
 800076c:	408d      	lsls	r5, r1
 800076e:	431d      	orrs	r5, r3
 8000770:	0c2b      	lsrs	r3, r5, #16
 8000772:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000776:	45a2      	cmp	sl, r4
 8000778:	fa02 f201 	lsl.w	r2, r2, r1
 800077c:	fa00 f301 	lsl.w	r3, r0, r1
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x222>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f109 30ff 	add.w	r0, r9, #4294967295
 800078a:	d248      	bcs.n	800081e <__udivmoddi4+0x2aa>
 800078c:	45a2      	cmp	sl, r4
 800078e:	d946      	bls.n	800081e <__udivmoddi4+0x2aa>
 8000790:	f1a9 0902 	sub.w	r9, r9, #2
 8000794:	4464      	add	r4, ip
 8000796:	eba4 040a 	sub.w	r4, r4, sl
 800079a:	fbb4 f0fe 	udiv	r0, r4, lr
 800079e:	fb0e 4410 	mls	r4, lr, r0, r4
 80007a2:	fb00 fa08 	mul.w	sl, r0, r8
 80007a6:	b2ad      	uxth	r5, r5
 80007a8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007ac:	45a2      	cmp	sl, r4
 80007ae:	d908      	bls.n	80007c2 <__udivmoddi4+0x24e>
 80007b0:	eb1c 0404 	adds.w	r4, ip, r4
 80007b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80007b8:	d22d      	bcs.n	8000816 <__udivmoddi4+0x2a2>
 80007ba:	45a2      	cmp	sl, r4
 80007bc:	d92b      	bls.n	8000816 <__udivmoddi4+0x2a2>
 80007be:	3802      	subs	r0, #2
 80007c0:	4464      	add	r4, ip
 80007c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007c6:	fba0 8902 	umull	r8, r9, r0, r2
 80007ca:	eba4 040a 	sub.w	r4, r4, sl
 80007ce:	454c      	cmp	r4, r9
 80007d0:	46c6      	mov	lr, r8
 80007d2:	464d      	mov	r5, r9
 80007d4:	d319      	bcc.n	800080a <__udivmoddi4+0x296>
 80007d6:	d016      	beq.n	8000806 <__udivmoddi4+0x292>
 80007d8:	b15e      	cbz	r6, 80007f2 <__udivmoddi4+0x27e>
 80007da:	ebb3 020e 	subs.w	r2, r3, lr
 80007de:	eb64 0405 	sbc.w	r4, r4, r5
 80007e2:	fa04 f707 	lsl.w	r7, r4, r7
 80007e6:	fa22 f301 	lsr.w	r3, r2, r1
 80007ea:	431f      	orrs	r7, r3
 80007ec:	40cc      	lsrs	r4, r1
 80007ee:	e9c6 7400 	strd	r7, r4, [r6]
 80007f2:	2100      	movs	r1, #0
 80007f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f8:	4631      	mov	r1, r6
 80007fa:	4630      	mov	r0, r6
 80007fc:	e70c      	b.n	8000618 <__udivmoddi4+0xa4>
 80007fe:	468c      	mov	ip, r1
 8000800:	e6eb      	b.n	80005da <__udivmoddi4+0x66>
 8000802:	4610      	mov	r0, r2
 8000804:	e6ff      	b.n	8000606 <__udivmoddi4+0x92>
 8000806:	4543      	cmp	r3, r8
 8000808:	d2e6      	bcs.n	80007d8 <__udivmoddi4+0x264>
 800080a:	ebb8 0e02 	subs.w	lr, r8, r2
 800080e:	eb69 050c 	sbc.w	r5, r9, ip
 8000812:	3801      	subs	r0, #1
 8000814:	e7e0      	b.n	80007d8 <__udivmoddi4+0x264>
 8000816:	4628      	mov	r0, r5
 8000818:	e7d3      	b.n	80007c2 <__udivmoddi4+0x24e>
 800081a:	4611      	mov	r1, r2
 800081c:	e78c      	b.n	8000738 <__udivmoddi4+0x1c4>
 800081e:	4681      	mov	r9, r0
 8000820:	e7b9      	b.n	8000796 <__udivmoddi4+0x222>
 8000822:	4608      	mov	r0, r1
 8000824:	e773      	b.n	800070e <__udivmoddi4+0x19a>
 8000826:	4608      	mov	r0, r1
 8000828:	e749      	b.n	80006be <__udivmoddi4+0x14a>
 800082a:	f1ac 0c02 	sub.w	ip, ip, #2
 800082e:	443d      	add	r5, r7
 8000830:	e713      	b.n	800065a <__udivmoddi4+0xe6>
 8000832:	3802      	subs	r0, #2
 8000834:	443c      	add	r4, r7
 8000836:	e724      	b.n	8000682 <__udivmoddi4+0x10e>

08000838 <__aeabi_idiv0>:
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	f5ad 5d70 	sub.w	sp, sp, #15360	; 0x3c00
 8000842:	b084      	sub	sp, #16
 8000844:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f001 fa42 	bl	8001cce <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f941 	bl	8000ad0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 fb13 	bl	8000e78 <MX_GPIO_Init>
  MX_ADC_Init();
 8000852:	f000 f9a3 	bl	8000b9c <MX_ADC_Init>
  MX_I2C1_Init();
 8000856:	f000 f9f9 	bl	8000c4c <MX_I2C1_Init>
  MX_SPI2_Init();
 800085a:	f000 faad 	bl	8000db8 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800085e:	f000 fae1 	bl	8000e24 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000862:	f006 f919 	bl	8006a98 <MX_FATFS_Init>
  MX_RTC_Init();
 8000866:	f000 fa1f 	bl	8000ca8 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  muxInit();
 800086a:	f000 fc4f 	bl	800110c <muxInit>

  int pressure_map_data[NUM_NODES_FULL] = {0};
 800086e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8000872:	f103 0308 	add.w	r3, r3, #8
 8000876:	3b08      	subs	r3, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800087e:	461a      	mov	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f009 fd8d 	bl	800a3a0 <memset>
  int breathing_data[NUM_NODES_PARTIAL] = {0};
 8000886:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 800088a:	f103 0308 	add.w	r3, r3, #8
 800088e:	3b08      	subs	r3, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000896:	461a      	mov	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f009 fd81 	bl	800a3a0 <memset>

  int pressure_map_calibration_data[NUM_NODES_FULL] = {0};
 800089e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008a2:	3b08      	subs	r3, #8
 80008a4:	4618      	mov	r0, r3
 80008a6:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 80008aa:	461a      	mov	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f009 fd77 	bl	800a3a0 <memset>
  int breathing_calibration_data[NUM_NODES_PARTIAL] = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	3b08      	subs	r3, #8
 80008b8:	4618      	mov	r0, r3
 80008ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008be:	461a      	mov	r2, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	f009 fd6d 	bl	800a3a0 <memset>

  uint32_t breathing_time;
  uint32_t pressure_map_time;

  /* Mount the SD card */
  fr = f_mount(&fs, "", 0) && FR_OK;
 80008c6:	2200      	movs	r2, #0
 80008c8:	4978      	ldr	r1, [pc, #480]	; (8000aac <main+0x270>)
 80008ca:	4879      	ldr	r0, [pc, #484]	; (8000ab0 <main+0x274>)
 80008cc:	f008 fb1a 	bl	8008f04 <f_mount>
 80008d0:	4b78      	ldr	r3, [pc, #480]	; (8000ab4 <main+0x278>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Wait for user button press to start the program */
  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 80008d6:	bf00      	nop
 80008d8:	2140      	movs	r1, #64	; 0x40
 80008da:	4877      	ldr	r0, [pc, #476]	; (8000ab8 <main+0x27c>)
 80008dc:	f002 f9fc 	bl	8002cd8 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d0f8      	beq.n	80008d8 <main+0x9c>

  /* Set RED LED to start measuring calibration data with nothing on the mat */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	4872      	ldr	r0, [pc, #456]	; (8000ab8 <main+0x27c>)
 80008ee:	f002 fa0a 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Calibration for 30s */
  calibrate(pressure_map_calibration_data, sizeof(pressure_map_calibration_data)/sizeof(*pressure_map_calibration_data));
 80008f2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80008f6:	3b08      	subs	r3, #8
 80008f8:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 ff39 	bl	8001774 <calibrate>

  /* Reset the RED LED after calibration */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000908:	486b      	ldr	r0, [pc, #428]	; (8000ab8 <main+0x27c>)
 800090a:	f002 f9fc 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Wait for user to get on the mat and press the button */
  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 800090e:	bf00      	nop
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4869      	ldr	r0, [pc, #420]	; (8000ab8 <main+0x27c>)
 8000914:	f002 f9e0 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d0f8      	beq.n	8000910 <main+0xd4>

  /* Set RED LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000924:	4864      	ldr	r0, [pc, #400]	; (8000ab8 <main+0x27c>)
 8000926:	f002 f9ee 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Wait for reading to settle */
  HAL_Delay(WAIT_TIME);
 800092a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800092e:	f001 fa3d 	bl	8001dac <HAL_Delay>

  /* Turn off RED LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	485f      	ldr	r0, [pc, #380]	; (8000ab8 <main+0x27c>)
 800093a:	f002 f9e4 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Open the file to write pressure map data to */
  fr = f_open(&pressure_map_fil, pressure_map_file_name, FA_CREATE_ALWAYS | FA_WRITE) && FR_OK;
 800093e:	220a      	movs	r2, #10
 8000940:	495e      	ldr	r1, [pc, #376]	; (8000abc <main+0x280>)
 8000942:	485f      	ldr	r0, [pc, #380]	; (8000ac0 <main+0x284>)
 8000944:	f008 fb24 	bl	8008f90 <f_open>
 8000948:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <main+0x278>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]

  if (fr != FR_OK)
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <main+0x278>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <main+0x11e>
  {
	Error_Handler();
 8000956:	f000 ff5d 	bl	8001814 <Error_Handler>
  }

  /* Open the file to write breathing data to */
  fr = f_open(&breathing_fil, breathing_file_name, FA_CREATE_ALWAYS | FA_WRITE) && FR_OK;
 800095a:	220a      	movs	r2, #10
 800095c:	4959      	ldr	r1, [pc, #356]	; (8000ac4 <main+0x288>)
 800095e:	485a      	ldr	r0, [pc, #360]	; (8000ac8 <main+0x28c>)
 8000960:	f008 fb16 	bl	8008f90 <f_open>
 8000964:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <main+0x278>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

  if (fr != FR_OK)
 800096a:	4b52      	ldr	r3, [pc, #328]	; (8000ab4 <main+0x278>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <main+0x13a>
  {
	Error_Handler();
 8000972:	f000 ff4f 	bl	8001814 <Error_Handler>
  }

  // uint16_t start_time = HAL_GetTick();
  breathing_time = HAL_GetTick();
 8000976:	f001 fa0f 	bl	8001d98 <HAL_GetTick>
 800097a:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 800097e:	f103 0304 	add.w	r3, r3, #4
 8000982:	6018      	str	r0, [r3, #0]
  pressure_map_time = HAL_GetTick();
 8000984:	f001 fa08 	bl	8001d98 <HAL_GetTick>
 8000988:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 800098c:	6018      	str	r0, [r3, #0]

  /* Set GREEN LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000994:	4848      	ldr	r0, [pc, #288]	; (8000ab8 <main+0x27c>)
 8000996:	f002 f9b6 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Button press stops the code */
  while(HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET)
 800099a:	e05b      	b.n	8000a54 <main+0x218>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Toggle timing GPIO */
	HAL_GPIO_WritePin(GPIOA, TIM_TOGG_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a2:	484a      	ldr	r0, [pc, #296]	; (8000acc <main+0x290>)
 80009a4:	f002 f9af 	bl	8002d06 <HAL_GPIO_WritePin>

	if (checkTime(breathing_time, BREATHING_PERIOD))
 80009a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009ac:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 80009b0:	f103 0304 	add.w	r3, r3, #4
 80009b4:	6818      	ldr	r0, [r3, #0]
 80009b6:	f000 ff19 	bl	80017ec <checkTime>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d01c      	beq.n	80009fa <main+0x1be>
	{
      /* Toggle timing GPIO */
      // HAL_GPIO_WritePin(GPIOA, TIM_TOGG_Pin, GPIO_PIN_SET);

      /* Update timer */
      breathing_time = HAL_GetTick();
 80009c0:	f001 f9ea 	bl	8001d98 <HAL_GetTick>
 80009c4:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 80009c8:	f103 0304 	add.w	r3, r3, #4
 80009cc:	6018      	str	r0, [r3, #0]

	  /* Sample selected nodes on mat for breathing */
	  sampleMatPartial(breathing_data, sizeof(breathing_data)/sizeof(*breathing_data));
 80009ce:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 80009d2:	f103 0308 	add.w	r3, r3, #8
 80009d6:	3b08      	subs	r3, #8
 80009d8:	2160      	movs	r1, #96	; 0x60
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fda8 	bl	8001530 <sampleMatPartial>

	  /* Write sampled data to SD card */
	  logData2SDCard(&breathing_fil, FILE_LINE_SIZE_PARTIAL, breathing_data, NUM_NODES_PARTIAL, true);
 80009e0:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 80009e4:	f102 0208 	add.w	r2, r2, #8
 80009e8:	3a08      	subs	r2, #8
 80009ea:	2301      	movs	r3, #1
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2360      	movs	r3, #96	; 0x60
 80009f0:	f240 11e9 	movw	r1, #489	; 0x1e9
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <main+0x28c>)
 80009f6:	f000 fb37 	bl	8001068 <logData2SDCard>

	  /* Toggle timing GPIO */
	  // HAL_GPIO_WritePin(GPIOA, TIM_TOGG_Pin, GPIO_PIN_RESET);
	}

	if (checkTime(pressure_map_time, PRESSURE_MAP_PERIOD))
 80009fa:	f247 5130 	movw	r1, #30000	; 0x7530
 80009fe:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	f000 fef2 	bl	80017ec <checkTime>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d01c      	beq.n	8000a48 <main+0x20c>
	{
	  /* Toggle timing GPIO */
	  // HAL_GPIO_WritePin(GPIOA, TIM_TOGG_Pin, GPIO_PIN_SET);

	  /* Update timer */
	  pressure_map_time = HAL_GetTick();
 8000a0e:	f001 f9c3 	bl	8001d98 <HAL_GetTick>
 8000a12:	f507 5370 	add.w	r3, r7, #15360	; 0x3c00
 8000a16:	6018      	str	r0, [r3, #0]

	  /* Sample all nodes on mat */
	  sampleMatFull(pressure_map_data, sizeof(pressure_map_data)/sizeof(*pressure_map_data));
 8000a18:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8000a1c:	f103 0308 	add.w	r3, r3, #8
 8000a20:	3b08      	subs	r3, #8
 8000a22:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fcea 	bl	8001400 <sampleMatFull>

	  /* Write partial sampled data to SD card */
	  logData2SDCard(&pressure_map_fil, FILE_LINE_SIZE_FULL, pressure_map_data, NUM_NODES_FULL, true);
 8000a2c:	f507 52fc 	add.w	r2, r7, #8064	; 0x1f80
 8000a30:	f102 0208 	add.w	r2, r2, #8
 8000a34:	3a08      	subs	r2, #8
 8000a36:	2301      	movs	r3, #1
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000a3e:	f242 31a9 	movw	r1, #9129	; 0x23a9
 8000a42:	481f      	ldr	r0, [pc, #124]	; (8000ac0 <main+0x284>)
 8000a44:	f000 fb10 	bl	8001068 <logData2SDCard>
//
//      cycle_cnt++;
//    }

	/* Toggle timing GPIO */
	HAL_GPIO_WritePin(GPIOA, TIM_TOGG_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4e:	481f      	ldr	r0, [pc, #124]	; (8000acc <main+0x290>)
 8000a50:	f002 f959 	bl	8002d06 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET)
 8000a54:	2140      	movs	r1, #64	; 0x40
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <main+0x27c>)
 8000a58:	f002 f93e 	bl	8002cd8 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d09c      	beq.n	800099c <main+0x160>
  }

  /* Turn off GREEN LED */
  HAL_GPIO_WritePin(GPIOC, GPIO_RGB_G_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a68:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <main+0x27c>)
 8000a6a:	f002 f94c 	bl	8002d06 <HAL_GPIO_WritePin>

  /* Close the files and unmount the default drive */
  fr = f_close(&pressure_map_fil);
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <main+0x284>)
 8000a70:	f008 fe6c 	bl	800974c <f_close>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <main+0x278>)
 8000a7a:	701a      	strb	r2, [r3, #0]
  fr = f_close(&breathing_fil);
 8000a7c:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <main+0x28c>)
 8000a7e:	f008 fe65 	bl	800974c <f_close>
 8000a82:	4603      	mov	r3, r0
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <main+0x278>)
 8000a88:	701a      	strb	r2, [r3, #0]

  fr = f_mount(0, "", 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4907      	ldr	r1, [pc, #28]	; (8000aac <main+0x270>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f008 fa38 	bl	8008f04 <f_mount>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <main+0x278>)
 8000a9a:	701a      	strb	r2, [r3, #0]

  return EXIT_SUCCESS;
 8000a9c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f507 5770 	add.w	r7, r7, #15360	; 0x3c00
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	0800ac3c 	.word	0x0800ac3c
 8000ab0:	20000414 	.word	0x20000414
 8000ab4:	2000012c 	.word	0x2000012c
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	2000251c 	.word	0x2000251c
 8000ac4:	20000020 	.word	0x20000020
 8000ac8:	200014a4 	.word	0x200014a4
 8000acc:	40020000 	.word	0x40020000

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b096      	sub	sp, #88	; 0x58
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ada:	2234      	movs	r2, #52	; 0x34
 8000adc:	2100      	movs	r1, #0
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f009 fc5e 	bl	800a3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <SystemClock_Config+0xc8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000b06:	4a24      	ldr	r2, [pc, #144]	; (8000b98 <SystemClock_Config+0xc8>)
 8000b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b0c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b0e:	230b      	movs	r3, #11
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b16:	2301      	movs	r3, #1
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 ff02 	bl	8004944 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b46:	f000 fe65 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5e:	f107 0310 	add.w	r3, r7, #16
 8000b62:	2101      	movs	r1, #1
 8000b64:	4618      	mov	r0, r3
 8000b66:	f004 fa1d 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b70:	f000 fe50 	bl	8001814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b74:	2301      	movs	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fc7b 	bl	800547c <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b8c:	f000 fe42 	bl	8001814 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3758      	adds	r7, #88	; 0x58
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bae:	4a26      	ldr	r2, [pc, #152]	; (8000c48 <MX_ADC_Init+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb2:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000c0e:	f001 f8ef 	bl	8001df0 <HAL_ADC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000c18:	f000 fdfc 	bl	8001814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000c1c:	2309      	movs	r3, #9
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8000c24:	2304      	movs	r3, #4
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_ADC_Init+0xa8>)
 8000c2e:	f001 fb4d 	bl	80022cc <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000c38:	f000 fdec 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000354c 	.word	0x2000354c
 8000c48:	40012400 	.word	0x40012400

08000c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_I2C1_Init+0x58>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <MX_I2C1_Init+0x50>)
 8000c8a:	f002 f855 	bl	8002d38 <HAL_I2C_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c94:	f000 fdbe 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	2000144c 	.word	0x2000144c
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	000186a0 	.word	0x000186a0

08000ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cd0:	4b37      	ldr	r3, [pc, #220]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cd2:	4a38      	ldr	r2, [pc, #224]	; (8000db4 <MX_RTC_Init+0x10c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cdc:	4b34      	ldr	r3, [pc, #208]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cde:	227f      	movs	r2, #127	; 0x7f
 8000ce0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ce2:	4b33      	ldr	r3, [pc, #204]	; (8000db0 <MX_RTC_Init+0x108>)
 8000ce4:	22ff      	movs	r2, #255	; 0xff
 8000ce6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ce8:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cfa:	482d      	ldr	r0, [pc, #180]	; (8000db0 <MX_RTC_Init+0x108>)
 8000cfc:	f004 fcc8 	bl	8005690 <HAL_RTC_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d06:	f000 fd85 	bl	8001814 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 8000d0a:	2316      	movs	r3, #22
 8000d0c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4820      	ldr	r0, [pc, #128]	; (8000db0 <MX_RTC_Init+0x108>)
 8000d2e:	f004 fd39 	bl	80057a4 <HAL_RTC_SetTime>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000d38:	f000 fd6c 	bl	8001814 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 8000d48:	230b      	movs	r3, #11
 8000d4a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 8000d4e:	2316      	movs	r3, #22
 8000d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4814      	ldr	r0, [pc, #80]	; (8000db0 <MX_RTC_Init+0x108>)
 8000d5e:	f004 fe25 	bl	80059ac <HAL_RTC_SetDate>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000d68:	f000 fd54 	bl	8001814 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 8000d6c:	2306      	movs	r3, #6
 8000d6e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d90:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_RTC_Init+0x108>)
 8000d9a:	f004 fea5 	bl	8005ae8 <HAL_RTC_SetAlarm_IT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 8000da4:	f000 fd36 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3730      	adds	r7, #48	; 0x30
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200024d8 	.word	0x200024d8
 8000db4:	40002800 	.word	0x40002800

08000db8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dbe:	4a18      	ldr	r2, [pc, #96]	; (8000e20 <MX_SPI2_Init+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dec:	2210      	movs	r2, #16
 8000dee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000e04:	220a      	movs	r2, #10
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	; (8000e1c <MX_SPI2_Init+0x64>)
 8000e0a:	f005 f875 	bl	8005ef8 <HAL_SPI_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e14:	f000 fcfe 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000378 	.word	0x20000378
 8000e20:	40003800 	.word	0x40003800

08000e24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <MX_USART3_UART_Init+0x50>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_USART3_UART_Init+0x4c>)
 8000e5c:	f005 f9cb 	bl	80061f6 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e66:	f000 fcd5 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003d0 	.word	0x200003d0
 8000e74:	40004800 	.word	0x40004800

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8e:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	61d3      	str	r3, [r2, #28]
 8000e9a:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	4b4f      	ldr	r3, [pc, #316]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	61d3      	str	r3, [r2, #28]
 8000eb2:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	f003 0320 	and.w	r3, r3, #32
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b40      	ldr	r3, [pc, #256]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a3c      	ldr	r2, [pc, #240]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <MX_GPIO_Init+0x16c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000f06:	2200      	movs	r2, #0
 8000f08:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8000f0c:	4836      	ldr	r0, [pc, #216]	; (8000fe8 <MX_GPIO_Init+0x170>)
 8000f0e:	f001 fefa 	bl	8002d06 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000f12:	2200      	movs	r2, #0
 8000f14:	f641 01f7 	movw	r1, #6391	; 0x18f7
 8000f18:	4834      	ldr	r0, [pc, #208]	; (8000fec <MX_GPIO_Init+0x174>)
 8000f1a:	f001 fef4 	bl	8002d06 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|TIM_TOGG_Pin
                          |MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f641 4165 	movw	r1, #7269	; 0x1c65
 8000f24:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x178>)
 8000f26:	f001 feee 	bl	8002d06 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0x17c>)
 8000f30:	f001 fee9 	bl	8002d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000f34:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8000f38:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <MX_GPIO_Init+0x170>)
 8000f4e:	f001 fd43 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin TIM_TOGG_Pin
                           MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000f52:	f641 03f7 	movw	r3, #6391	; 0x18f7
 8000f56:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|TIM_TOGG_Pin
                          |MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <MX_GPIO_Init+0x174>)
 8000f6c:	f001 fd34 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000f70:	f641 4365 	movw	r3, #7269	; 0x1c65
 8000f74:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <MX_GPIO_Init+0x178>)
 8000f8a:	f001 fd25 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8000f8e:	2340      	movs	r3, #64	; 0x40
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <MX_GPIO_Init+0x170>)
 8000fa2:	f001 fd19 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x174>)
 8000fbc:	f001 fd0c 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_GPIO_Init+0x17c>)
 8000fd8:	f001 fcfe 	bl	80029d8 <HAL_GPIO_Init>

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40020400 	.word	0x40020400
 8000ff4:	40020c00 	.word	0x40020c00

08000ff8 <writeCurrentTime>:
  * @brief Writes the current time to the file
  * @param None
  * @retval None
  */
void writeCurrentTime(FIL* fil)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
  char time[10];

  HAL_RTC_GetTime(&hrtc, &nTime, RTC_FORMAT_BIN);
 8001000:	2200      	movs	r2, #0
 8001002:	4914      	ldr	r1, [pc, #80]	; (8001054 <writeCurrentTime+0x5c>)
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <writeCurrentTime+0x60>)
 8001006:	f004 fc81 	bl	800590c <HAL_RTC_GetTime>
  sprintf(time, "%02u:%02u:%02u,", nTime.Hours, nTime.Minutes, nTime.Seconds);
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <writeCurrentTime+0x5c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <writeCurrentTime+0x5c>)
 8001012:	785b      	ldrb	r3, [r3, #1]
 8001014:	4619      	mov	r1, r3
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <writeCurrentTime+0x5c>)
 8001018:	789b      	ldrb	r3, [r3, #2]
 800101a:	f107 000c 	add.w	r0, r7, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	460b      	mov	r3, r1
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <writeCurrentTime+0x64>)
 8001024:	f009 f9c4 	bl	800a3b0 <siprintf>
  f_lseek(fil, f_size(fil));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f008 fbb6 	bl	80097a0 <f_lseek>
  fr = f_printf( fil, "%s", time);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	461a      	mov	r2, r3
 800103a:	4909      	ldr	r1, [pc, #36]	; (8001060 <writeCurrentTime+0x68>)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f008 fe49 	bl	8009cd4 <f_printf>
 8001042:	4603      	mov	r3, r0
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <writeCurrentTime+0x6c>)
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200024f8 	.word	0x200024f8
 8001058:	200024d8 	.word	0x200024d8
 800105c:	0800ac40 	.word	0x0800ac40
 8001060:	0800ac50 	.word	0x0800ac50
 8001064:	2000012c 	.word	0x2000012c

08001068 <logData2SDCard>:
  * @param len: length of the data to write
  * @param write_timestamp: controls if the add a time stamp to the entry at the front
  * @retval None
  */
void logData2SDCard(FIL* fil, int file_line_size, int data[], int len, bool write_timestamp)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  /* Make space for line of data */
  f_lseek(fil, file_line_size);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	4619      	mov	r1, r3
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f008 fb90 	bl	80097a0 <f_lseek>
  f_lseek(fil, f_size(fil));
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4619      	mov	r1, r3
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f008 fb8a 	bl	80097a0 <f_lseek>

  if (write_timestamp)
 800108c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <logData2SDCard+0x32>
  {
   	writeCurrentTime(fil);
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff ffaf 	bl	8000ff8 <writeCurrentTime>
  }

  /* Construct string to put into file */
  for(int node = 0; node < len - 1; node++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e00f      	b.n	80010c0 <logData2SDCard+0x58>
  {
    fr = f_printf(fil, "%d,", data[node]) && FR_OK;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <logData2SDCard+0x98>)
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f008 fe10 	bl	8009cd4 <f_printf>
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <logData2SDCard+0x9c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
  for(int node = 0; node < len - 1; node++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dbea      	blt.n	80010a0 <logData2SDCard+0x38>
  }

  fr = f_printf(fil, "%d\n", data[len - 1]) && FR_OK;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010d0:	3b01      	subs	r3, #1
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	490a      	ldr	r1, [pc, #40]	; (8001108 <logData2SDCard+0xa0>)
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f008 fdf8 	bl	8009cd4 <f_printf>
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <logData2SDCard+0x9c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]

  /* Flush file after every mat reading */
  fr = f_sync(fil) && FR_OK;
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f008 fab0 	bl	8009650 <f_sync>
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <logData2SDCard+0x9c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	0800ac54 	.word	0x0800ac54
 8001104:	2000012c 	.word	0x2000012c
 8001108:	0800ac58 	.word	0x0800ac58

0800110c <muxInit>:
  * @brief Initializes the hardware for muxing
  * @param None
  * @retval None
  */
void muxInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* Set load switch */
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2101      	movs	r1, #1
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <muxInit+0x70>)
 8001118:	f001 fdf5 	bl	8002d06 <HAL_GPIO_WritePin>

  /* All muxes are active low. We want to set them high (disabled) at startup */
  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 800111c:	2300      	movs	r3, #0
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	e00e      	b.n	8001140 <muxInit+0x34>
  {
	disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <muxInit+0x74>)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800112a:	4916      	ldr	r1, [pc, #88]	; (8001184 <muxInit+0x78>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001132:	4619      	mov	r1, r3
 8001134:	4610      	mov	r0, r2
 8001136:	f000 f935 	bl	80013a4 <disableMux>
  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	dded      	ble.n	8001122 <muxInit+0x16>
  }

  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	e00e      	b.n	800116a <muxInit+0x5e>
  {
	disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <muxInit+0x7c>)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001154:	490d      	ldr	r1, [pc, #52]	; (800118c <muxInit+0x80>)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800115c:	4619      	mov	r1, r3
 800115e:	4610      	mov	r0, r2
 8001160:	f000 f920 	bl	80013a4 <disableMux>
  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b07      	cmp	r3, #7
 800116e:	dded      	ble.n	800114c <muxInit+0x40>
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40020800 	.word	0x40020800
 8001180:	20000040 	.word	0x20000040
 8001184:	0800aca4 	.word	0x0800aca4
 8001188:	20000050 	.word	0x20000050
 800118c:	0800acb4 	.word	0x0800acb4

08001190 <selectChannel>:
  * @param pin: port bit to be written
  * @param array: GPIO information to write to the GPIO
  * @retval None
  */
void selectChannel(int pin, int array[])
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b07      	cmp	r3, #7
 800119e:	f200 80eb 	bhi.w	8001378 <selectChannel+0x1e8>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <selectChannel+0x18>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011c9 	.word	0x080011c9
 80011ac:	080011ff 	.word	0x080011ff
 80011b0:	08001235 	.word	0x08001235
 80011b4:	0800126b 	.word	0x0800126b
 80011b8:	080012a1 	.word	0x080012a1
 80011bc:	080012d7 	.word	0x080012d7
 80011c0:	0800130d 	.word	0x0800130d
 80011c4:	08001343 	.word	0x08001343
  switch (pin)
  {
	case 0:
      HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	4619      	mov	r1, r3
 80011d2:	486b      	ldr	r0, [pc, #428]	; (8001380 <selectChannel+0x1f0>)
 80011d4:	f001 fd97 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4866      	ldr	r0, [pc, #408]	; (8001380 <selectChannel+0x1f0>)
 80011e6:	f001 fd8e 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3308      	adds	r3, #8
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4862      	ldr	r0, [pc, #392]	; (8001380 <selectChannel+0x1f0>)
 80011f8:	f001 fd85 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 80011fc:	e0bc      	b.n	8001378 <selectChannel+0x1e8>
	case 1:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29b      	uxth	r3, r3
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	485d      	ldr	r0, [pc, #372]	; (8001380 <selectChannel+0x1f0>)
 800120a:	f001 fd7c 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	4859      	ldr	r0, [pc, #356]	; (8001380 <selectChannel+0x1f0>)
 800121c:	f001 fd73 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	b29b      	uxth	r3, r3
 8001228:	2200      	movs	r2, #0
 800122a:	4619      	mov	r1, r3
 800122c:	4854      	ldr	r0, [pc, #336]	; (8001380 <selectChannel+0x1f0>)
 800122e:	f001 fd6a 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 8001232:	e0a1      	b.n	8001378 <selectChannel+0x1e8>
	case 2:
      HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	b29b      	uxth	r3, r3
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4850      	ldr	r0, [pc, #320]	; (8001380 <selectChannel+0x1f0>)
 8001240:	f001 fd61 	bl	8002d06 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	2201      	movs	r2, #1
 800124e:	4619      	mov	r1, r3
 8001250:	484b      	ldr	r0, [pc, #300]	; (8001380 <selectChannel+0x1f0>)
 8001252:	f001 fd58 	bl	8002d06 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	3308      	adds	r3, #8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	2200      	movs	r2, #0
 8001260:	4619      	mov	r1, r3
 8001262:	4847      	ldr	r0, [pc, #284]	; (8001380 <selectChannel+0x1f0>)
 8001264:	f001 fd4f 	bl	8002d06 <HAL_GPIO_WritePin>
      break;
 8001268:	e086      	b.n	8001378 <selectChannel+0x1e8>
	case 3:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	4842      	ldr	r0, [pc, #264]	; (8001380 <selectChannel+0x1f0>)
 8001276:	f001 fd46 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	3304      	adds	r3, #4
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	2201      	movs	r2, #1
 8001284:	4619      	mov	r1, r3
 8001286:	483e      	ldr	r0, [pc, #248]	; (8001380 <selectChannel+0x1f0>)
 8001288:	f001 fd3d 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	3308      	adds	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29b      	uxth	r3, r3
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4839      	ldr	r0, [pc, #228]	; (8001380 <selectChannel+0x1f0>)
 800129a:	f001 fd34 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 800129e:	e06b      	b.n	8001378 <selectChannel+0x1e8>
	case 4:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <selectChannel+0x1f0>)
 80012ac:	f001 fd2b 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4830      	ldr	r0, [pc, #192]	; (8001380 <selectChannel+0x1f0>)
 80012be:	f001 fd22 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3308      	adds	r3, #8
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	482c      	ldr	r0, [pc, #176]	; (8001380 <selectChannel+0x1f0>)
 80012d0:	f001 fd19 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 80012d4:	e050      	b.n	8001378 <selectChannel+0x1e8>
	case 5:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	4827      	ldr	r0, [pc, #156]	; (8001380 <selectChannel+0x1f0>)
 80012e2:	f001 fd10 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4823      	ldr	r0, [pc, #140]	; (8001380 <selectChannel+0x1f0>)
 80012f4:	f001 fd07 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3308      	adds	r3, #8
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	2201      	movs	r2, #1
 8001302:	4619      	mov	r1, r3
 8001304:	481e      	ldr	r0, [pc, #120]	; (8001380 <selectChannel+0x1f0>)
 8001306:	f001 fcfe 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 800130a:	e035      	b.n	8001378 <selectChannel+0x1e8>
	case 6:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	b29b      	uxth	r3, r3
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	481a      	ldr	r0, [pc, #104]	; (8001380 <selectChannel+0x1f0>)
 8001318:	f001 fcf5 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <selectChannel+0x1f0>)
 800132a:	f001 fcec 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	3308      	adds	r3, #8
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2201      	movs	r2, #1
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	; (8001380 <selectChannel+0x1f0>)
 800133c:	f001 fce3 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 8001340:	e01a      	b.n	8001378 <selectChannel+0x1e8>
	case 7:
	  HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	2201      	movs	r2, #1
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <selectChannel+0x1f0>)
 800134e:	f001 fcda 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3304      	adds	r3, #4
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <selectChannel+0x1f0>)
 8001360:	f001 fcd1 	bl	8002d06 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3308      	adds	r3, #8
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	2201      	movs	r2, #1
 800136e:	4619      	mov	r1, r3
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <selectChannel+0x1f0>)
 8001372:	f001 fcc8 	bl	8002d06 <HAL_GPIO_WritePin>
	  break;
 8001376:	bf00      	nop
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40020000 	.word	0x40020000

08001384 <enableMux>:
  * @param type: GPIO type
  * @param pin: port bit to be written
  * @retval None
  */
void enableMux(GPIO_TypeDef *type, int pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f001 fcb5 	bl	8002d06 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <disableMux>:
  * @param  type: GPIO type
  * @param pin: port bit to be written
  * @retval None
  */
void disableMux(GPIO_TypeDef *type, int pin)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f001 fca5 	bl	8002d06 <HAL_GPIO_WritePin>
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <readPressure>:
  * @brief Reads the ADC value
  * @param None
  * @retval int: ADC reading
  */
int readPressure(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  HAL_Delay(ADC_DELAY);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 fcee 	bl	8001dac <HAL_Delay>
  HAL_ADC_Start(&hadc);
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <readPressure+0x38>)
 80013d2:	f000 fe53 	bl	800207c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80013d6:	f04f 31ff 	mov.w	r1, #4294967295
 80013da:	4808      	ldr	r0, [pc, #32]	; (80013fc <readPressure+0x38>)
 80013dc:	f000 feda 	bl	8002194 <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <readPressure+0x38>)
 80013e2:	f000 ff67 	bl	80022b4 <HAL_ADC_GetValue>
 80013e6:	4603      	mov	r3, r0
 80013e8:	607b      	str	r3, [r7, #4]
  HAL_ADC_Stop(&hadc);
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <readPressure+0x38>)
 80013ec:	f000 fea6 	bl	800213c <HAL_ADC_Stop>

  return data;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000354c 	.word	0x2000354c

08001400 <sampleMatFull>:
  * @param data: buffer to store ADC readings
  * @param len: length of the buffer
  * @retval None
  */
void sampleMatFull(int data[], int len)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  int array_cnt = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]

  if (len != NUM_NODES_FULL)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 8001414:	d17b      	bne.n	800150e <sampleMatFull+0x10e>
  {
    /* Wrongly sized array */
    return;
  }

  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	e074      	b.n	8001506 <sampleMatFull+0x106>
  {
    enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <sampleMatFull+0x118>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001424:	493d      	ldr	r1, [pc, #244]	; (800151c <sampleMatFull+0x11c>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff ffa8 	bl	8001384 <enableMux>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e053      	b.n	80014e2 <sampleMatFull+0xe2>
    {
	  selectChannel(pwr_sel, pwrMuxSelect);
 800143a:	4939      	ldr	r1, [pc, #228]	; (8001520 <sampleMatFull+0x120>)
 800143c:	6978      	ldr	r0, [r7, #20]
 800143e:	f7ff fea7 	bl	8001190 <selectChannel>
	  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	e046      	b.n	80014d6 <sampleMatFull+0xd6>
      {
	    enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001448:	4a36      	ldr	r2, [pc, #216]	; (8001524 <sampleMatFull+0x124>)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <sampleMatFull+0x128>)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff ff92 	bl	8001384 <enableMux>
		for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e025      	b.n	80014b2 <sampleMatFull+0xb2>
        {
		  if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <sampleMatFull+0x78>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <sampleMatFull+0xa6>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d016      	beq.n	80014a6 <sampleMatFull+0xa6>
		  {
		    continue;
		  }

		  if ((sense_mux == 7) && (sense_sel > 2))
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b07      	cmp	r3, #7
 800147c:	d102      	bne.n	8001484 <sampleMatFull+0x84>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b02      	cmp	r3, #2
 8001482:	dc12      	bgt.n	80014aa <sampleMatFull+0xaa>
		  {
			continue;
		  }

		  selectChannel(sense_sel, senseMuxSelect);
 8001484:	4929      	ldr	r1, [pc, #164]	; (800152c <sampleMatFull+0x12c>)
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f7ff fe82 	bl	8001190 <selectChannel>

		  /* Read voltage */
		  int raw_ADC_pressure = readPressure();
 800148c:	f7ff ff9a 	bl	80013c4 <readPressure>
 8001490:	60b8      	str	r0, [r7, #8]

		  data[array_cnt] = raw_ADC_pressure;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	601a      	str	r2, [r3, #0]
		  array_cnt++;
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3301      	adds	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e002      	b.n	80014ac <sampleMatFull+0xac>
		    continue;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <sampleMatFull+0xac>
			continue;
 80014aa:	bf00      	nop
		for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3301      	adds	r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b07      	cmp	r3, #7
 80014b6:	ddd6      	ble.n	8001466 <sampleMatFull+0x66>
		}

		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <sampleMatFull+0x124>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c0:	4919      	ldr	r1, [pc, #100]	; (8001528 <sampleMatFull+0x128>)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff ff6a 	bl	80013a4 <disableMux>
	  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	3301      	adds	r3, #1
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	2b07      	cmp	r3, #7
 80014da:	ddb5      	ble.n	8001448 <sampleMatFull+0x48>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b07      	cmp	r3, #7
 80014e6:	dda8      	ble.n	800143a <sampleMatFull+0x3a>
	  }
	}

	disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <sampleMatFull+0x118>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014f0:	490a      	ldr	r1, [pc, #40]	; (800151c <sampleMatFull+0x11c>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4610      	mov	r0, r2
 80014fc:	f7ff ff52 	bl	80013a4 <disableMux>
  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3301      	adds	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b03      	cmp	r3, #3
 800150a:	dd87      	ble.n	800141c <sampleMatFull+0x1c>
 800150c:	e000      	b.n	8001510 <sampleMatFull+0x110>
    return;
 800150e:	bf00      	nop
  }
}
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000040 	.word	0x20000040
 800151c:	0800aca4 	.word	0x0800aca4
 8001520:	2000007c 	.word	0x2000007c
 8001524:	20000050 	.word	0x20000050
 8001528:	0800acb4 	.word	0x0800acb4
 800152c:	20000070 	.word	0x20000070

08001530 <sampleMatPartial>:
  * @param data: buffer to store ADC readings
  * @param len: length of the buffer
  * @retval None
  */
void sampleMatPartial(int data[], int len)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  int array_cnt = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]

  if (len != NUM_NODES_PARTIAL)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2b60      	cmp	r3, #96	; 0x60
 8001542:	d168      	bne.n	8001616 <sampleMatPartial+0xe6>
  {
    /* Wrongly sized array */
    return;
  }

  for (int pwr_mux = 1; pwr_mux < 3; pwr_mux++)
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	e061      	b.n	800160e <sampleMatPartial+0xde>
  {
    enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <sampleMatPartial+0xf0>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001552:	4934      	ldr	r1, [pc, #208]	; (8001624 <sampleMatPartial+0xf4>)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800155a:	4619      	mov	r1, r3
 800155c:	4610      	mov	r0, r2
 800155e:	f7ff ff11 	bl	8001384 <enableMux>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel += 2)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e040      	b.n	80015ea <sampleMatPartial+0xba>
    {
	  selectChannel(pwr_sel, pwrMuxSelect);
 8001568:	492f      	ldr	r1, [pc, #188]	; (8001628 <sampleMatPartial+0xf8>)
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff fe10 	bl	8001190 <selectChannel>
	  for (int sense_mux = 1; sense_mux < 4; sense_mux++)
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	e033      	b.n	80015de <sampleMatPartial+0xae>
      {
	    enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001576:	4a2d      	ldr	r2, [pc, #180]	; (800162c <sampleMatPartial+0xfc>)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800157e:	492c      	ldr	r1, [pc, #176]	; (8001630 <sampleMatPartial+0x100>)
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001586:	4619      	mov	r1, r3
 8001588:	4610      	mov	r0, r2
 800158a:	f7ff fefb 	bl	8001384 <enableMux>
		for (int sense_sel = 0; sense_sel < 8; sense_sel += 2)
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e012      	b.n	80015ba <sampleMatPartial+0x8a>
        {
		  selectChannel(sense_sel, senseMuxSelect);
 8001594:	4927      	ldr	r1, [pc, #156]	; (8001634 <sampleMatPartial+0x104>)
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff fdfa 	bl	8001190 <selectChannel>

		  /* Read voltage */
		  int raw_ADC_pressure = readPressure();
 800159c:	f7ff ff12 	bl	80013c4 <readPressure>
 80015a0:	60b8      	str	r0, [r7, #8]

		  data[array_cnt] = raw_ADC_pressure;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	601a      	str	r2, [r3, #0]
		  array_cnt++;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
		for (int sense_sel = 0; sense_sel < 8; sense_sel += 2)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3302      	adds	r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	dde9      	ble.n	8001594 <sampleMatPartial+0x64>
		}

		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80015c0:	4a1a      	ldr	r2, [pc, #104]	; (800162c <sampleMatPartial+0xfc>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c8:	4919      	ldr	r1, [pc, #100]	; (8001630 <sampleMatPartial+0x100>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f7ff fee6 	bl	80013a4 <disableMux>
	  for (int sense_mux = 1; sense_mux < 4; sense_mux++)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	3301      	adds	r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	ddc8      	ble.n	8001576 <sampleMatPartial+0x46>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel += 2)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3302      	adds	r3, #2
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b07      	cmp	r3, #7
 80015ee:	ddbb      	ble.n	8001568 <sampleMatPartial+0x38>
	  }
	}

	disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <sampleMatPartial+0xf0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015f8:	490a      	ldr	r1, [pc, #40]	; (8001624 <sampleMatPartial+0xf4>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001600:	4619      	mov	r1, r3
 8001602:	4610      	mov	r0, r2
 8001604:	f7ff fece 	bl	80013a4 <disableMux>
  for (int pwr_mux = 1; pwr_mux < 3; pwr_mux++)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	3301      	adds	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b02      	cmp	r3, #2
 8001612:	dd9a      	ble.n	800154a <sampleMatPartial+0x1a>
 8001614:	e000      	b.n	8001618 <sampleMatPartial+0xe8>
    return;
 8001616:	bf00      	nop
  }
}
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000040 	.word	0x20000040
 8001624:	0800aca4 	.word	0x0800aca4
 8001628:	2000007c 	.word	0x2000007c
 800162c:	20000050 	.word	0x20000050
 8001630:	0800acb4 	.word	0x0800acb4
 8001634:	20000070 	.word	0x20000070

08001638 <calibrateMat>:
  * @param data: buffer to store ADC readings
  * @param len: length of buffer
  * @retval None
  */
void calibrateMat(int data[], int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  int array_cnt = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]

  if (len != NUM_NODES_FULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 800164c:	f040 8082 	bne.w	8001754 <calibrateMat+0x11c>
  {
    /* Wrongly sized array */
    return;
  }

  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	e07a      	b.n	800174c <calibrateMat+0x114>
  {
	enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8001656:	4a41      	ldr	r2, [pc, #260]	; (800175c <calibrateMat+0x124>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800165e:	4940      	ldr	r1, [pc, #256]	; (8001760 <calibrateMat+0x128>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f7ff fe8b 	bl	8001384 <enableMux>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e059      	b.n	8001728 <calibrateMat+0xf0>
    {
	  selectChannel(pwr_sel, pwrMuxSelect);
 8001674:	493b      	ldr	r1, [pc, #236]	; (8001764 <calibrateMat+0x12c>)
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff fd8a 	bl	8001190 <selectChannel>
	  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	e04c      	b.n	800171c <calibrateMat+0xe4>
      {
	    enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8001682:	4a39      	ldr	r2, [pc, #228]	; (8001768 <calibrateMat+0x130>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800168a:	4938      	ldr	r1, [pc, #224]	; (800176c <calibrateMat+0x134>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff fe75 	bl	8001384 <enableMux>
		for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	e02b      	b.n	80016f8 <calibrateMat+0xc0>
        {
		  if ((sense_mux == 0) && ((sense_sel == 0 ) || (sense_sel == 1)))
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <calibrateMat+0x7a>
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01f      	beq.n	80016ec <calibrateMat+0xb4>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d01c      	beq.n	80016ec <calibrateMat+0xb4>
		  {
		    continue;
          }

		  if ((sense_mux == 7) && (sense_sel > 2))
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	2b07      	cmp	r3, #7
 80016b6:	d102      	bne.n	80016be <calibrateMat+0x86>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	dc18      	bgt.n	80016f0 <calibrateMat+0xb8>
          {
		    continue;
		  }

		  selectChannel(sense_sel, senseMuxSelect);
 80016be:	492c      	ldr	r1, [pc, #176]	; (8001770 <calibrateMat+0x138>)
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fd65 	bl	8001190 <selectChannel>

		  /* Read voltage */
		  int raw_ADC_pressure = readPressure();
 80016c6:	f7ff fe7d 	bl	80013c4 <readPressure>
 80016ca:	60b8      	str	r0, [r7, #8]
		  data[array_cnt] += raw_ADC_pressure;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	440a      	add	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
		  array_cnt++;
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	3301      	adds	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e002      	b.n	80016f2 <calibrateMat+0xba>
		    continue;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <calibrateMat+0xba>
		    continue;
 80016f0:	bf00      	nop
		for (int sense_sel = 0; sense_sel < 8; sense_sel++)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	ddd0      	ble.n	80016a0 <calibrateMat+0x68>
		}

	  disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <calibrateMat+0x130>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001706:	4919      	ldr	r1, [pc, #100]	; (800176c <calibrateMat+0x134>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7ff fe47 	bl	80013a4 <disableMux>
	  for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	3301      	adds	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b07      	cmp	r3, #7
 8001720:	ddaf      	ble.n	8001682 <calibrateMat+0x4a>
	for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b07      	cmp	r3, #7
 800172c:	dda2      	ble.n	8001674 <calibrateMat+0x3c>
	  }
	}

  disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <calibrateMat+0x124>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <calibrateMat+0x128>)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800173e:	4619      	mov	r1, r3
 8001740:	4610      	mov	r0, r2
 8001742:	f7ff fe2f 	bl	80013a4 <disableMux>
  for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	3301      	adds	r3, #1
 800174a:	61bb      	str	r3, [r7, #24]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b03      	cmp	r3, #3
 8001750:	dd81      	ble.n	8001656 <calibrateMat+0x1e>
 8001752:	e000      	b.n	8001756 <calibrateMat+0x11e>
    return;
 8001754:	bf00      	nop
  }
}
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000040 	.word	0x20000040
 8001760:	0800aca4 	.word	0x0800aca4
 8001764:	2000007c 	.word	0x2000007c
 8001768:	20000050 	.word	0x20000050
 800176c:	0800acb4 	.word	0x0800acb4
 8001770:	20000070 	.word	0x20000070

08001774 <calibrate>:
  * @brief Calibrates the mat
  * @param
  * @retval
  */
void calibrate(int data[], int len)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Calibrate over CALIBRATION_CYCLES number of mat readings - Don't use time based calibration in case of overflow */
  for(int round = 0; round < CALIBRATION_CYCLES; round++)
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e006      	b.n	8001792 <calibrate+0x1e>
  {
    /* Sum x rounds for each point */
    calibrateMat(data, len);
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff56 	bl	8001638 <calibrateMat>
  for(int round = 0; round < CALIBRATION_CYCLES; round++)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b02      	cmp	r3, #2
 8001796:	ddf5      	ble.n	8001784 <calibrate+0x10>
  }

  /* Taking the mean */
  for (int i = 0; i < len; i++)
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	e01b      	b.n	80017d6 <calibrate+0x62>
  {
	/* Take mean of each node over x rounds */
	data[i] = round(data[i]/CALIBRATION_CYCLES);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0f      	ldr	r2, [pc, #60]	; (80017e8 <calibrate+0x74>)
 80017aa:	fb82 1203 	smull	r1, r2, r2, r3
 80017ae:	17db      	asrs	r3, r3, #31
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe34 	bl	8000420 <__aeabi_i2d>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	0089      	lsls	r1, r1, #2
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	1844      	adds	r4, r0, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f7fe fe94 	bl	80004f4 <__aeabi_d2iz>
 80017cc:	4603      	mov	r3, r0
 80017ce:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < len; i++)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	dbdf      	blt.n	800179e <calibrate+0x2a>
  }
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	55555556 	.word	0x55555556

080017ec <checkTime>:
  * @brief  :
  * @param  :
  * @retval :
  */
bool checkTime(uint32_t start_time, int threshold)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  if((HAL_GetTick() - start_time) >= threshold)
 80017f6:	f000 facf 	bl	8001d98 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d301      	bcc.n	800180a <checkTime+0x1e>
  {
	return true;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <checkTime+0x20>
  }

  return false;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_MspInit+0x68>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <HAL_MspInit+0x68>)
 800182c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001830:	6253      	str	r3, [r2, #36]	; 0x24
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_MspInit+0x68>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_MspInit+0x68>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_MspInit+0x68>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <HAL_MspInit+0x68>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_MspInit+0x68>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_MspInit+0x68>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6253      	str	r3, [r2, #36]	; 0x24
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_MspInit+0x68>)
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	2005      	movs	r0, #5
 8001874:	f000 ffef 	bl	8002856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001878:	2005      	movs	r0, #5
 800187a:	f001 f808 	bl	800288e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <HAL_ADC_MspInit+0x74>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d123      	bne.n	80018f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	61d3      	str	r3, [r2, #28]
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_ADC_MspInit+0x78>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80018de:	2302      	movs	r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_ADC_MspInit+0x7c>)
 80018f2:	f001 f871 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012400 	.word	0x40012400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <HAL_I2C_MspInit+0x9c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d138      	bne.n	80019a0 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	61d3      	str	r3, [r2, #28]
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8001946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001958:	2304      	movs	r3, #4
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4813      	ldr	r0, [pc, #76]	; (80019b0 <HAL_I2C_MspInit+0xa4>)
 8001964:	f001 f838 	bl	80029d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	4a0f      	ldr	r2, [pc, #60]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 800196e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001972:	6253      	str	r3, [r2, #36]	; 0x24
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_I2C_MspInit+0xa0>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	201f      	movs	r0, #31
 8001986:	f000 ff66 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800198a:	201f      	movs	r0, #31
 800198c:	f000 ff7f 	bl	800288e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2020      	movs	r0, #32
 8001996:	f000 ff5e 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800199a:	2020      	movs	r0, #32
 800199c:	f000 ff77 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400

080019b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_RTC_MspInit+0x30>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10a      	bne.n	80019dc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_RTC_MspInit+0x34>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2029      	movs	r0, #41	; 0x29
 80019d2:	f000 ff40 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019d6:	2029      	movs	r0, #41	; 0x29
 80019d8:	f000 ff59 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40002800 	.word	0x40002800
 80019e8:	424706d8 	.word	0x424706d8

080019ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <HAL_SPI_MspInit+0x8c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d130      	bne.n	8001a70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	4a1a      	ldr	r2, [pc, #104]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a18:	6253      	str	r3, [r2, #36]	; 0x24
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_SPI_MspInit+0x90>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001a3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a50:	2305      	movs	r3, #5
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4809      	ldr	r0, [pc, #36]	; (8001a80 <HAL_SPI_MspInit+0x94>)
 8001a5c:	f000 ffbc 	bl	80029d8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2024      	movs	r0, #36	; 0x24
 8001a66:	f000 fef6 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001a6a:	2024      	movs	r0, #36	; 0x24
 8001a6c:	f000 ff0f 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a70:	bf00      	nop
 8001a72:	3728      	adds	r7, #40	; 0x28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40003800 	.word	0x40003800
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <HAL_UART_MspInit+0x8c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d130      	bne.n	8001b08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	61d3      	str	r3, [r2, #28]
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_UART_MspInit+0x90>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001ad6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ae8:	2307      	movs	r3, #7
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <HAL_UART_MspInit+0x94>)
 8001af4:	f000 ff70 	bl	80029d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	2027      	movs	r0, #39	; 0x27
 8001afe:	f000 feaa 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b02:	2027      	movs	r0, #39	; 0x27
 8001b04:	f000 fec3 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40004800 	.word	0x40004800
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020800 	.word	0x40020800

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <SysTick_Handler+0x34>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <SysTick_Handler+0x18>
		Timer1--;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <SysTick_Handler+0x34>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <SysTick_Handler+0x34>)
 8001b76:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <SysTick_Handler+0x38>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <SysTick_Handler+0x2c>
		Timer2--;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SysTick_Handler+0x38>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <SysTick_Handler+0x38>)
 8001b8a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f8f2 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000372 	.word	0x20000372
 8001b98:	20000370 	.word	0x20000370

08001b9c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <I2C1_EV_IRQHandler+0x10>)
 8001bae:	f001 fa07 	bl	8002fc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2000144c 	.word	0x2000144c

08001bbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <I2C1_ER_IRQHandler+0x10>)
 8001bc2:	f001 fb6e 	bl	80032a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000144c 	.word	0x2000144c

08001bd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <SPI2_IRQHandler+0x10>)
 8001bd6:	f004 fa0b 	bl	8005ff0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000378 	.word	0x20000378

08001be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART3_IRQHandler+0x10>)
 8001bea:	f004 fb51 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200003d0 	.word	0x200003d0

08001bf8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <RTC_Alarm_IRQHandler+0x10>)
 8001bfe:	f004 f899 	bl	8005d34 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200024d8 	.word	0x200024d8

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f008 fb86 	bl	800a34c <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20008000 	.word	0x20008000
 8001c6c:	00000800 	.word	0x00000800
 8001c70:	20000130 	.word	0x20000130
 8001c74:	20005628 	.word	0x20005628

08001c78 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001caa:	f7ff ffe5 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f008 fb53 	bl	800a358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cb2:	f7fe fdc3 	bl	800083c <main>
  bx lr
 8001cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001cc0:	0800b17c 	.word	0x0800b17c
  ldr r2, =_sbss
 8001cc4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001cc8:	20005624 	.word	0x20005624

08001ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_IRQHandler>

08001cce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f000 fdb1 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cde:	200f      	movs	r0, #15
 8001ce0:	f000 f80e 	bl	8001d00 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	e001      	b.n	8001cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf0:	f7ff fd96 	bl	8001820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_InitTick+0x68>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d022      	beq.n	8001d5a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_InitTick+0x6c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_InitTick+0x68>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f000 fdbe 	bl	80028aa <HAL_SYSTICK_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d809      	bhi.n	8001d4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	f000 fd88 	bl	8002856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <HAL_InitTick+0x70>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e004      	b.n	8001d5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000090 	.word	0x20000090
 8001d6c:	20000088 	.word	0x20000088
 8001d70:	2000008c 	.word	0x2000008c

08001d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x20>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d84:	6013      	str	r3, [r2, #0]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	200035a0 	.word	0x200035a0
 8001d94:	20000090 	.word	0x20000090

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_GetTick+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	200035a0 	.word	0x200035a0

08001dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db4:	f7ff fff0 	bl	8001d98 <HAL_GetTick>
 8001db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc4:	d004      	beq.n	8001dd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_Delay+0x40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dd0:	bf00      	nop
 8001dd2:	f7ff ffe1 	bl	8001d98 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d8f7      	bhi.n	8001dd2 <HAL_Delay+0x26>
  {
  }
}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000090 	.word	0x20000090

08001df0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08e      	sub	sp, #56	; 0x38
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e127      	b.n	8002060 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_ADC_Init+0x278>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a8d      	ldr	r2, [pc, #564]	; (8002068 <HAL_ADC_Init+0x278>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_ADC_Init+0x278>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fd21 	bl	800188c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80ff 	bne.w	8002056 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e60:	f023 0302 	bic.w	r3, r3, #2
 8001e64:	f043 0202 	orr.w	r2, r3, #2
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001e6c:	4b7f      	ldr	r3, [pc, #508]	; (800206c <HAL_ADC_Init+0x27c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	497c      	ldr	r1, [pc, #496]	; (800206c <HAL_ADC_Init+0x27c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001e86:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e94:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001eaa:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001eb0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2302      	movs	r3, #2
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001ed2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efc:	2b40      	cmp	r3, #64	; 0x40
 8001efe:	d04f      	beq.n	8001fa0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f06:	4313      	orrs	r3, r2
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f12:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6912      	ldr	r2, [r2, #16]
 8001f18:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f1c:	d003      	beq.n	8001f26 <HAL_ADC_Init+0x136>
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6912      	ldr	r2, [r2, #16]
 8001f22:	2a01      	cmp	r2, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_ADC_Init+0x13c>
 8001f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f2a:	e000      	b.n	8001f2e <HAL_ADC_Init+0x13e>
 8001f2c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f2e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f32:	4313      	orrs	r3, r2
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d125      	bne.n	8001f8c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d114      	bne.n	8001f74 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001f54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	fa92 f2a2 	rbit	r2, r2
 8001f5c:	617a      	str	r2, [r7, #20]
  return result;
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
 8001f72:	e00b      	b.n	8001f8c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f78:	f043 0220 	orr.w	r2, r3, #32
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f84:	f043 0201 	orr.w	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_ADC_Init+0x280>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f9c:	430b      	orrs	r3, r1
 8001f9e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_ADC_Init+0x284>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fbc:	d003      	beq.n	8001fc6 <HAL_ADC_Init+0x1d6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d119      	bne.n	8001ffa <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001fda:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	fa92 f2a2 	rbit	r2, r2
 8001fe2:	60fa      	str	r2, [r7, #12]
  return result;
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	fab2 f282 	clz	r2, r2
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	fa03 f202 	lsl.w	r2, r3, r2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	e007      	b.n	800200a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_ADC_Init+0x288>)
 8002012:	4013      	ands	r3, r2
 8002014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002016:	429a      	cmp	r2, r3
 8002018:	d10b      	bne.n	8002032 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	f023 0303 	bic.w	r3, r3, #3
 8002028:	f043 0201 	orr.w	r2, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002030:	e014      	b.n	800205c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	f023 0312 	bic.w	r3, r3, #18
 800203a:	f043 0210 	orr.w	r2, r3, #16
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002054:	e002      	b.n	800205c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800205c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002060:	4618      	mov	r0, r3
 8002062:	3738      	adds	r7, #56	; 0x38
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40012700 	.word	0x40012700
 8002070:	fcfc16ff 	.word	0xfcfc16ff
 8002074:	c0fff18d 	.word	0xc0fff18d
 8002078:	bf80fffe 	.word	0xbf80fffe

0800207c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_Start+0x1a>
 8002092:	2302      	movs	r3, #2
 8002094:	e04e      	b.n	8002134 <HAL_ADC_Start+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa64 	bl	800256c <ADC_Enable>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d141      	bne.n	8002132 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ec:	d106      	bne.n	80020fc <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f2:	f023 0206 	bic.w	r2, r3, #6
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	651a      	str	r2, [r3, #80]	; 0x50
 80020fa:	e002      	b.n	8002102 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002112:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002130:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Stop+0x1a>
 8002152:	2302      	movs	r3, #2
 8002154:	e01a      	b.n	800218c <HAL_ADC_Stop+0x50>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fa60 	bl	8002624 <ADC_ConversionStop_Disable>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002176:	f023 0301 	bic.w	r3, r3, #1
 800217a:	f043 0201 	orr.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b0:	d113      	bne.n	80021da <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c0:	d10b      	bne.n	80021da <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e068      	b.n	80022ac <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021da:	f7ff fddd 	bl	8001d98 <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80021e0:	e021      	b.n	8002226 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d01d      	beq.n	8002226 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_ADC_PollForConversion+0x6c>
 80021f0:	f7ff fdd2 	bl	8001d98 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d212      	bcs.n	8002226 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10b      	bne.n	8002226 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e042      	b.n	80022ac <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0d6      	beq.n	80021e2 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0212 	mvn.w	r2, #18
 8002244:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d124      	bne.n	80022aa <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d11f      	bne.n	80022aa <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002282:	2b00      	cmp	r3, #0
 8002284:	d111      	bne.n	80022aa <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x20>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e134      	b.n	8002556 <HAL_ADC_ConfigChannel+0x28a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	d81c      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	3b05      	subs	r3, #5
 800230e:	221f      	movs	r2, #31
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	4019      	ands	r1, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	3b05      	subs	r3, #5
 8002328:	fa00 f203 	lsl.w	r2, r0, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
 8002334:	e07e      	b.n	8002434 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d81c      	bhi.n	8002378 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	3b23      	subs	r3, #35	; 0x23
 8002350:	221f      	movs	r2, #31
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	4019      	ands	r1, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	3b23      	subs	r3, #35	; 0x23
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	63da      	str	r2, [r3, #60]	; 0x3c
 8002376:	e05d      	b.n	8002434 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b12      	cmp	r3, #18
 800237e:	d81c      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	3b41      	subs	r3, #65	; 0x41
 8002392:	221f      	movs	r2, #31
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	4019      	ands	r1, r3
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	3b41      	subs	r3, #65	; 0x41
 80023ac:	fa00 f203 	lsl.w	r2, r0, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
 80023b8:	e03c      	b.n	8002434 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b18      	cmp	r3, #24
 80023c0:	d81c      	bhi.n	80023fc <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b5f      	subs	r3, #95	; 0x5f
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	4019      	ands	r1, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	3b5f      	subs	r3, #95	; 0x5f
 80023ee:	fa00 f203 	lsl.w	r2, r0, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34
 80023fa:	e01b      	b.n	8002434 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b7d      	subs	r3, #125	; 0x7d
 800240e:	221f      	movs	r2, #31
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	4019      	ands	r1, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b7d      	subs	r3, #125	; 0x7d
 8002428:	fa00 f203 	lsl.w	r2, r0, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d81a      	bhi.n	8002472 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6959      	ldr	r1, [r3, #20]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	2207      	movs	r2, #7
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	4019      	ands	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6898      	ldr	r0, [r3, #8]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	e042      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b13      	cmp	r3, #19
 8002478:	d81c      	bhi.n	80024b4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	3b1e      	subs	r3, #30
 800248c:	2207      	movs	r2, #7
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	4019      	ands	r1, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6898      	ldr	r0, [r3, #8]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	fa00 f203 	lsl.w	r2, r0, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	611a      	str	r2, [r3, #16]
 80024b2:	e021      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b1a      	cmp	r3, #26
 80024ba:	d81c      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b3c      	subs	r3, #60	; 0x3c
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	3b3c      	subs	r3, #60	; 0x3c
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80024f6:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d003      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002504:	2b11      	cmp	r3, #17
 8002506:	d121      	bne.n	800254c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_ADC_ConfigChannel+0x294>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d11b      	bne.n	800254c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_ADC_ConfigChannel+0x294>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_ADC_ConfigChannel+0x294>)
 800251a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b10      	cmp	r3, #16
 8002526:	d111      	bne.n	800254c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_ADC_ConfigChannel+0x298>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_ADC_ConfigChannel+0x29c>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9a      	lsrs	r2, r3, #18
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800253e:	e002      	b.n	8002546 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	3b01      	subs	r3, #1
 8002544:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	40012700 	.word	0x40012700
 8002564:	20000088 	.word	0x20000088
 8002568:	431bde83 	.word	0x431bde83

0800256c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d043      	beq.n	8002612 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0201 	orr.w	r2, r2, #1
 8002598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <ADC_Enable+0xb0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a20      	ldr	r2, [pc, #128]	; (8002620 <ADC_Enable+0xb4>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0c9a      	lsrs	r2, r3, #18
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025ae:	e002      	b.n	80025b6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80025bc:	f7ff fbec 	bl	8001d98 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025c2:	e01f      	b.n	8002604 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80025c4:	f7ff fbe8 	bl	8001d98 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d918      	bls.n	8002604 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025dc:	2b40      	cmp	r3, #64	; 0x40
 80025de:	d011      	beq.n	8002604 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e007      	b.n	8002614 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d1d8      	bne.n	80025c4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000088 	.word	0x20000088
 8002620:	431bde83 	.word	0x431bde83

08002624 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d12e      	bne.n	800269c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264e:	f7ff fba3 	bl	8001d98 <HAL_GetTick>
 8002652:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002654:	e01b      	b.n	800268e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002656:	f7ff fb9f 	bl	8001d98 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d914      	bls.n	800268e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d10d      	bne.n	800268e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f043 0210 	orr.w	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e007      	b.n	800269e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d0dc      	beq.n	8002656 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800271e:	79fb      	ldrb	r3, [r7, #7]
 8002720:	f003 021f 	and.w	r2, r3, #31
 8002724:	4906      	ldr	r1, [pc, #24]	; (8002740 <__NVIC_EnableIRQ+0x34>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2001      	movs	r0, #1
 800272e:	fa00 f202 	lsl.w	r2, r0, r2
 8002732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100

08002744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	db0a      	blt.n	800276e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	490c      	ldr	r1, [pc, #48]	; (8002790 <__NVIC_SetPriority+0x4c>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	0112      	lsls	r2, r2, #4
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	440b      	add	r3, r1
 8002768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800276c:	e00a      	b.n	8002784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <__NVIC_SetPriority+0x50>)
 8002774:	79fb      	ldrb	r3, [r7, #7]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	3b04      	subs	r3, #4
 800277c:	0112      	lsls	r2, r2, #4
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	440b      	add	r3, r1
 8002782:	761a      	strb	r2, [r3, #24]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e100 	.word	0xe000e100
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f1c3 0307 	rsb	r3, r3, #7
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf28      	it	cs
 80027b6:	2304      	movcs	r3, #4
 80027b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3304      	adds	r3, #4
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d902      	bls.n	80027c8 <NVIC_EncodePriority+0x30>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	3b03      	subs	r3, #3
 80027c6:	e000      	b.n	80027ca <NVIC_EncodePriority+0x32>
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	f04f 32ff 	mov.w	r2, #4294967295
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	401a      	ands	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027e0:	f04f 31ff 	mov.w	r1, #4294967295
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ea:	43d9      	mvns	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	4313      	orrs	r3, r2
         );
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff90 	bl	8002744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff2d 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff42 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff90 	bl	8002798 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5f 	bl	8002744 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff35 	bl	800270c <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d008      	beq.n	80028ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2204      	movs	r2, #4
 80028de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e022      	b.n	8002932 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 020e 	bic.w	r2, r2, #14
 80028fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 021c 	and.w	r2, r3, #28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002918:	2101      	movs	r1, #1
 800291a:	fa01 f202 	lsl.w	r2, r1, r2
 800291e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d005      	beq.n	8002960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e029      	b.n	80029b4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 021c 	and.w	r2, r3, #28
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	2101      	movs	r1, #1
 800298e:	fa01 f202 	lsl.w	r2, r1, r2
 8002992:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4798      	blx	r3
    }
  }
  return status;
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029cc:	b2db      	uxtb	r3, r3
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029ee:	e154      	b.n	8002c9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8146 	beq.w	8002c94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d005      	beq.n	8002a20 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d130      	bne.n	8002a82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a56:	2201      	movs	r2, #1
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 0201 	and.w	r2, r3, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d017      	beq.n	8002abe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d123      	bne.n	8002b12 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	6939      	ldr	r1, [r7, #16]
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80a0 	beq.w	8002c94 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b54:	4b58      	ldr	r3, [pc, #352]	; (8002cb8 <HAL_GPIO_Init+0x2e0>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_GPIO_Init+0x2e0>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <HAL_GPIO_Init+0x2e0>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b6c:	4a53      	ldr	r2, [pc, #332]	; (8002cbc <HAL_GPIO_Init+0x2e4>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a4b      	ldr	r2, [pc, #300]	; (8002cc0 <HAL_GPIO_Init+0x2e8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d019      	beq.n	8002bcc <HAL_GPIO_Init+0x1f4>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a4a      	ldr	r2, [pc, #296]	; (8002cc4 <HAL_GPIO_Init+0x2ec>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_GPIO_Init+0x1f0>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	; (8002cc8 <HAL_GPIO_Init+0x2f0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_GPIO_Init+0x1ec>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a48      	ldr	r2, [pc, #288]	; (8002ccc <HAL_GPIO_Init+0x2f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <HAL_GPIO_Init+0x1e8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a47      	ldr	r2, [pc, #284]	; (8002cd0 <HAL_GPIO_Init+0x2f8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_GPIO_Init+0x1e4>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	e008      	b.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	e006      	b.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e004      	b.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e002      	b.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_GPIO_Init+0x1f6>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	f002 0203 	and.w	r2, r2, #3
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	4093      	lsls	r3, r2
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bde:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_GPIO_Init+0x2e4>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c10:	4a30      	ldr	r2, [pc, #192]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c16:	4b2f      	ldr	r3, [pc, #188]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c40:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c8e:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_GPIO_Init+0x2fc>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	3301      	adds	r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f47f aea3 	bne.w	80029f0 <HAL_GPIO_Init+0x18>
  }
}
 8002caa:	bf00      	nop
 8002cac:	bf00      	nop
 8002cae:	371c      	adds	r7, #28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40010400 	.word	0x40010400

08002cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	e001      	b.n	8002cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	807b      	strh	r3, [r7, #2]
 8002d12:	4613      	mov	r3, r2
 8002d14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d16:	787b      	ldrb	r3, [r7, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d22:	e003      	b.n	8002d2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	041a      	lsls	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e12b      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fdd4 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	; 0x24
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f002 fae6 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a81      	ldr	r2, [pc, #516]	; (8002fac <HAL_I2C_Init+0x274>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d807      	bhi.n	8002dbc <HAL_I2C_Init+0x84>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4a80      	ldr	r2, [pc, #512]	; (8002fb0 <HAL_I2C_Init+0x278>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf94      	ite	ls
 8002db4:	2301      	movls	r3, #1
 8002db6:	2300      	movhi	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e006      	b.n	8002dca <HAL_I2C_Init+0x92>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a7d      	ldr	r2, [pc, #500]	; (8002fb4 <HAL_I2C_Init+0x27c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0e7      	b.n	8002fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4a78      	ldr	r2, [pc, #480]	; (8002fb8 <HAL_I2C_Init+0x280>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	0c9b      	lsrs	r3, r3, #18
 8002ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a6a      	ldr	r2, [pc, #424]	; (8002fac <HAL_I2C_Init+0x274>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <HAL_I2C_Init+0xd4>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	e009      	b.n	8002e20 <HAL_I2C_Init+0xe8>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	4a69      	ldr	r2, [pc, #420]	; (8002fbc <HAL_I2C_Init+0x284>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	099b      	lsrs	r3, r3, #6
 8002e1e:	3301      	adds	r3, #1
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	430b      	orrs	r3, r1
 8002e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	495c      	ldr	r1, [pc, #368]	; (8002fac <HAL_I2C_Init+0x274>)
 8002e3c:	428b      	cmp	r3, r1
 8002e3e:	d819      	bhi.n	8002e74 <HAL_I2C_Init+0x13c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1e59      	subs	r1, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4e:	1c59      	adds	r1, r3, #1
 8002e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e54:	400b      	ands	r3, r1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_I2C_Init+0x138>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	1e59      	subs	r1, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6e:	e051      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e04f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d111      	bne.n	8002ea0 <HAL_I2C_Init+0x168>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	e012      	b.n	8002ec6 <HAL_I2C_Init+0x18e>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e58      	subs	r0, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6859      	ldr	r1, [r3, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	0099      	lsls	r1, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Init+0x196>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e022      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_I2C_Init+0x1bc>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e58      	subs	r0, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	440b      	add	r3, r1
 8002ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Init+0x1dc>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	6809      	ldr	r1, [r1, #0]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69da      	ldr	r2, [r3, #28]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6911      	ldr	r1, [r2, #16]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	4311      	orrs	r1, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	000186a0 	.word	0x000186a0
 8002fb0:	001e847f 	.word	0x001e847f
 8002fb4:	003d08ff 	.word	0x003d08ff
 8002fb8:	431bde83 	.word	0x431bde83
 8002fbc:	10624dd3 	.word	0x10624dd3

08002fc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	2b10      	cmp	r3, #16
 8002fee:	d003      	beq.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x38>
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	f040 80c1 	bne.w	800317a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10d      	bne.n	800302e <HAL_I2C_EV_IRQHandler+0x6e>
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003018:	d003      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0x62>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003020:	d101      	bne.n	8003026 <HAL_I2C_EV_IRQHandler+0x66>
 8003022:	2301      	movs	r3, #1
 8003024:	e000      	b.n	8003028 <HAL_I2C_EV_IRQHandler+0x68>
 8003026:	2300      	movs	r3, #0
 8003028:	2b01      	cmp	r3, #1
 800302a:	f000 8132 	beq.w	8003292 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00c      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x92>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	0a5b      	lsrs	r3, r3, #9
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f001 fc63 	bl	8004910 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fd6f 	bl	8003b2e <I2C_Master_SB>
 8003050:	e092      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_I2C_EV_IRQHandler+0xb2>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	0a5b      	lsrs	r3, r3, #9
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fde4 	bl	8003c38 <I2C_Master_ADD10>
 8003070:	e082      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d009      	beq.n	8003092 <HAL_I2C_EV_IRQHandler+0xd2>
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	0a5b      	lsrs	r3, r3, #9
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fdfd 	bl	8003c8a <I2C_Master_ADDR>
 8003090:	e072      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d03b      	beq.n	8003116 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ac:	f000 80f3 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	09db      	lsrs	r3, r3, #7
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x11c>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	0a9b      	lsrs	r3, r3, #10
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x11c>
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	089b      	lsrs	r3, r3, #2
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d103      	bne.n	80030dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f9e9 	bl	80034ac <I2C_MasterTransmit_TXE>
 80030da:	e04d      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80d6 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	0a5b      	lsrs	r3, r3, #9
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80cf 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	2b21      	cmp	r3, #33	; 0x21
 80030fc:	d103      	bne.n	8003106 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa70 	bl	80035e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003104:	e0c7      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	f040 80c4 	bne.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fade 	bl	80036d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003114:	e0bf      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003124:	f000 80b7 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	099b      	lsrs	r3, r3, #6
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00f      	beq.n	8003154 <HAL_I2C_EV_IRQHandler+0x194>
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_I2C_EV_IRQHandler+0x194>
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fb53 	bl	80037f8 <I2C_MasterReceive_RXNE>
 8003152:	e011      	b.n	8003178 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	089b      	lsrs	r3, r3, #2
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 809a 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 8093 	beq.w	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fbf2 	bl	800395a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003176:	e08e      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003178:	e08d      	b.n	8003296 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	e007      	b.n	800319c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0x20e>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	0a5b      	lsrs	r3, r3, #9
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00c      	beq.n	80031ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 ffab 	bl	8004122 <I2C_Slave_ADDR>
 80031cc:	e066      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_I2C_EV_IRQHandler+0x22e>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0a5b      	lsrs	r3, r3, #9
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 ffe6 	bl	80041b8 <I2C_Slave_STOPF>
 80031ec:	e056      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031ee:	7bbb      	ldrb	r3, [r7, #14]
 80031f0:	2b21      	cmp	r3, #33	; 0x21
 80031f2:	d002      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x23a>
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
 80031f6:	2b29      	cmp	r3, #41	; 0x29
 80031f8:	d125      	bne.n	8003246 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	09db      	lsrs	r3, r3, #7
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00f      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x266>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	0a9b      	lsrs	r3, r3, #10
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x266>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fec3 	bl	8003faa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003224:	e039      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d033      	beq.n	800329a <HAL_I2C_EV_IRQHandler+0x2da>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d02d      	beq.n	800329a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fef0 	bl	8004024 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003244:	e029      	b.n	800329a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	099b      	lsrs	r3, r3, #6
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00f      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	0a9b      	lsrs	r3, r3, #10
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_I2C_EV_IRQHandler+0x2b2>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	089b      	lsrs	r3, r3, #2
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fefa 	bl	8004064 <I2C_SlaveReceive_RXNE>
 8003270:	e014      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	0a5b      	lsrs	r3, r3, #9
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d008      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 ff28 	bl	80040e0 <I2C_SlaveReceive_BTF>
 8003290:	e004      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003292:	bf00      	nop
 8003294:	e002      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003296:	bf00      	nop
 8003298:	e000      	b.n	800329c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800329c:	3720      	adds	r7, #32
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00e      	beq.n	80032f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	0a5b      	lsrs	r3, r3, #9
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00e      	beq.n	800331a <HAL_I2C_ER_IRQHandler+0x78>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	f043 0302 	orr.w	r3, r3, #2
 800330e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003318:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	0a9b      	lsrs	r3, r3, #10
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d03f      	beq.n	80033a6 <HAL_I2C_ER_IRQHandler+0x104>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d039      	beq.n	80033a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003332:	7efb      	ldrb	r3, [r7, #27]
 8003334:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800334c:	7ebb      	ldrb	r3, [r7, #26]
 800334e:	2b20      	cmp	r3, #32
 8003350:	d112      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xd6>
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10f      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xd6>
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b21      	cmp	r3, #33	; 0x21
 800335c:	d008      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b29      	cmp	r3, #41	; 0x29
 8003362:	d005      	beq.n	8003370 <HAL_I2C_ER_IRQHandler+0xce>
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b28      	cmp	r3, #40	; 0x28
 8003368:	d106      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b21      	cmp	r3, #33	; 0x21
 800336e:	d103      	bne.n	8003378 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f001 f851 	bl	8004418 <I2C_Slave_AF>
 8003376:	e016      	b.n	80033a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003380:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800338a:	7efb      	ldrb	r3, [r7, #27]
 800338c:	2b10      	cmp	r3, #16
 800338e:	d002      	beq.n	8003396 <HAL_I2C_ER_IRQHandler+0xf4>
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d107      	bne.n	80033a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	0adb      	lsrs	r3, r3, #11
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80033ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f001 f888 	bl	80044f8 <I2C_ITError>
  }
}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	70fb      	strb	r3, [r7, #3]
 8003444:	4613      	mov	r3, r2
 8003446:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d150      	bne.n	8003574 <I2C_MasterTransmit_TXE+0xc8>
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b21      	cmp	r3, #33	; 0x21
 80034d6:	d14d      	bne.n	8003574 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d01d      	beq.n	800351a <I2C_MasterTransmit_TXE+0x6e>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d01a      	beq.n	800351a <I2C_MasterTransmit_TXE+0x6e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ea:	d016      	beq.n	800351a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034fa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2211      	movs	r2, #17
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff6c 	bl	80033f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003518:	e060      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003528:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003538:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d107      	bne.n	8003564 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff81 	bl	8003464 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003562:	e03b      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff3f 	bl	80033f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003572:	e033      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b21      	cmp	r3, #33	; 0x21
 8003578:	d005      	beq.n	8003586 <I2C_MasterTransmit_TXE+0xda>
 800357a:	7bbb      	ldrb	r3, [r7, #14]
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d12d      	bne.n	80035dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	2b22      	cmp	r3, #34	; 0x22
 8003584:	d12a      	bne.n	80035dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d108      	bne.n	80035a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800359e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035a0:	e01c      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d103      	bne.n	80035b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f88e 	bl	80036d0 <I2C_MemoryTransmit_TXE_BTF>
}
 80035b4:	e012      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035da:	e7ff      	b.n	80035dc <I2C_MasterTransmit_TXE+0x130>
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b21      	cmp	r3, #33	; 0x21
 80035fc:	d164      	bne.n	80036c8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d012      	beq.n	800362e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800362c:	e04c      	b.n	80036c8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d01d      	beq.n	8003670 <I2C_MasterTransmit_BTF+0x8c>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b20      	cmp	r3, #32
 8003638:	d01a      	beq.n	8003670 <I2C_MasterTransmit_BTF+0x8c>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003640:	d016      	beq.n	8003670 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003650:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2211      	movs	r2, #17
 8003656:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fec1 	bl	80033f0 <HAL_I2C_MasterTxCpltCallback>
}
 800366e:	e02b      	b.n	80036c8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800367e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d107      	bne.n	80036ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fed6 	bl	8003464 <HAL_I2C_MemTxCpltCallback>
}
 80036b8:	e006      	b.n	80036c8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff fe94 	bl	80033f0 <HAL_I2C_MasterTxCpltCallback>
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d11d      	bne.n	8003724 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10b      	bne.n	8003708 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	1c9a      	adds	r2, r3, #2
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003706:	e073      	b.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370c:	b29b      	uxth	r3, r3
 800370e:	121b      	asrs	r3, r3, #8
 8003710:	b2da      	uxtb	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003722:	e065      	b.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003728:	2b01      	cmp	r3, #1
 800372a:	d10b      	bne.n	8003744 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	b2da      	uxtb	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003742:	e055      	b.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003748:	2b02      	cmp	r3, #2
 800374a:	d151      	bne.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b22      	cmp	r3, #34	; 0x22
 8003750:	d10d      	bne.n	800376e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003760:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800376c:	e040      	b.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d015      	beq.n	80037a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b21      	cmp	r3, #33	; 0x21
 800377c:	d112      	bne.n	80037a4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037a2:	e025      	b.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d120      	bne.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b21      	cmp	r3, #33	; 0x21
 80037b2:	d11d      	bne.n	80037f0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff fe3a 	bl	8003464 <HAL_I2C_MemTxCpltCallback>
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b22      	cmp	r3, #34	; 0x22
 800380a:	f040 80a2 	bne.w	8003952 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d921      	bls.n	8003860 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b03      	cmp	r3, #3
 800384a:	f040 8082 	bne.w	8003952 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800385c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800385e:	e078      	b.n	8003952 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	2b02      	cmp	r3, #2
 8003866:	d074      	beq.n	8003952 <I2C_MasterReceive_RXNE+0x15a>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d002      	beq.n	8003874 <I2C_MasterReceive_RXNE+0x7c>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d16e      	bne.n	8003952 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f001 f819 	bl	80048ac <I2C_WaitOnSTOPRequestThroughIT>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d142      	bne.n	8003906 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800389e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b40      	cmp	r3, #64	; 0x40
 80038d8:	d10a      	bne.n	80038f0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff fdc4 	bl	8003476 <HAL_I2C_MemRxCpltCallback>
}
 80038ee:	e030      	b.n	8003952 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2212      	movs	r2, #18
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fd7f 	bl	8003402 <HAL_I2C_MasterRxCpltCallback>
}
 8003904:	e025      	b.n	8003952 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003914:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff fd9b 	bl	8003488 <HAL_I2C_ErrorCallback>
}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b084      	sub	sp, #16
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b04      	cmp	r3, #4
 8003970:	d11b      	bne.n	80039aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003980:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80039a8:	e0bd      	b.n	8003b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d129      	bne.n	8003a08 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d00a      	beq.n	80039e0 <I2C_MasterReceive_BTF+0x86>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d007      	beq.n	80039e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b2d2      	uxtb	r2, r2
 80039ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a06:	e08e      	b.n	8003b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d176      	bne.n	8003b00 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d002      	beq.n	8003a1e <I2C_MasterReceive_BTF+0xc4>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d108      	bne.n	8003a30 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e019      	b.n	8003a64 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d002      	beq.n	8003a3c <I2C_MasterReceive_BTF+0xe2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d108      	bne.n	8003a4e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e00a      	b.n	8003a64 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d007      	beq.n	8003a64 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	b2d2      	uxtb	r2, r2
 8003a70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003abe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d10a      	bne.n	8003aea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fcc7 	bl	8003476 <HAL_I2C_MemRxCpltCallback>
}
 8003ae8:	e01d      	b.n	8003b26 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2212      	movs	r2, #18
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fc82 	bl	8003402 <HAL_I2C_MasterRxCpltCallback>
}
 8003afe:	e012      	b.n	8003b26 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d117      	bne.n	8003b72 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b5a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b5c:	e067      	b.n	8003c2e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	611a      	str	r2, [r3, #16]
}
 8003b70:	e05d      	b.n	8003c2e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b7a:	d133      	bne.n	8003be4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b21      	cmp	r3, #33	; 0x21
 8003b86:	d109      	bne.n	8003b9c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b98:	611a      	str	r2, [r3, #16]
 8003b9a:	e008      	b.n	8003bae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <I2C_Master_SB+0x92>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d032      	beq.n	8003c2e <I2C_Master_SB+0x100>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02d      	beq.n	8003c2e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be0:	605a      	str	r2, [r3, #4]
}
 8003be2:	e024      	b.n	8003c2e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10e      	bne.n	8003c0a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	11db      	asrs	r3, r3, #7
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f003 0306 	and.w	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f063 030f 	orn	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	611a      	str	r2, [r3, #16]
}
 8003c08:	e011      	b.n	8003c2e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	11db      	asrs	r3, r3, #7
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f003 0306 	and.w	r3, r3, #6
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	f063 030e 	orn	r3, r3, #14
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	611a      	str	r2, [r3, #16]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <I2C_Master_ADD10+0x26>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d108      	bne.n	8003c70 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <I2C_Master_ADD10+0x48>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7e:	605a      	str	r2, [r3, #4]
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b091      	sub	sp, #68	; 0x44
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b22      	cmp	r3, #34	; 0x22
 8003cb2:	f040 8169 	bne.w	8003f88 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <I2C_Master_ADDR+0x54>
 8003cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d10b      	bne.n	8003cde <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	e160      	b.n	8003fa0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11d      	bne.n	8003d22 <I2C_Master_ADDR+0x98>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cee:	d118      	bne.n	8003d22 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d14:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	651a      	str	r2, [r3, #80]	; 0x50
 8003d20:	e13e      	b.n	8003fa0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e115      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	f040 808a 	bne.w	8003e74 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d66:	d137      	bne.n	8003dd8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	d113      	bne.n	8003db0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d96:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	e0e7      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	623b      	str	r3, [r7, #32]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e0d3      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d02e      	beq.n	8003e3c <I2C_Master_ADDR+0x1b2>
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d02b      	beq.n	8003e3c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	2b12      	cmp	r3, #18
 8003de8:	d102      	bne.n	8003df0 <I2C_Master_ADDR+0x166>
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d125      	bne.n	8003e3c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d00e      	beq.n	8003e14 <I2C_Master_ADDR+0x18a>
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d00b      	beq.n	8003e14 <I2C_Master_ADDR+0x18a>
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d008      	beq.n	8003e14 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e007      	b.n	8003e24 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e22:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	e0a1      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e4a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	61bb      	str	r3, [r7, #24]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e085      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d14d      	bne.n	8003f1a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	d016      	beq.n	8003eb2 <I2C_Master_ADDR+0x228>
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d013      	beq.n	8003eb2 <I2C_Master_ADDR+0x228>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d010      	beq.n	8003eb2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ed0:	d117      	bne.n	8003f02 <I2C_Master_ADDR+0x278>
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ed8:	d00b      	beq.n	8003ef2 <I2C_Master_ADDR+0x268>
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d008      	beq.n	8003ef2 <I2C_Master_ADDR+0x268>
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d005      	beq.n	8003ef2 <I2C_Master_ADDR+0x268>
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	2b10      	cmp	r3, #16
 8003eea:	d002      	beq.n	8003ef2 <I2C_Master_ADDR+0x268>
 8003eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d107      	bne.n	8003f02 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f00:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	e032      	b.n	8003f80 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f28:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f38:	d117      	bne.n	8003f6a <I2C_Master_ADDR+0x2e0>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f40:	d00b      	beq.n	8003f5a <I2C_Master_ADDR+0x2d0>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d008      	beq.n	8003f5a <I2C_Master_ADDR+0x2d0>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d005      	beq.n	8003f5a <I2C_Master_ADDR+0x2d0>
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d002      	beq.n	8003f5a <I2C_Master_ADDR+0x2d0>
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d107      	bne.n	8003f6a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f68:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f86:	e00b      	b.n	8003fa0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
}
 8003f9e:	e7ff      	b.n	8003fa0 <I2C_Master_ADDR+0x316>
 8003fa0:	bf00      	nop
 8003fa2:	3744      	adds	r7, #68	; 0x44
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02b      	beq.n	800401c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	781a      	ldrb	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d114      	bne.n	800401c <I2C_SlaveTransmit_TXE+0x72>
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b29      	cmp	r3, #41	; 0x29
 8003ff6:	d111      	bne.n	800401c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2221      	movs	r2, #33	; 0x21
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2228      	movs	r2, #40	; 0x28
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff f9fc 	bl	8003414 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004072:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02c      	beq.n	80040d8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d114      	bne.n	80040d8 <I2C_SlaveReceive_RXNE+0x74>
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	2b2a      	cmp	r3, #42	; 0x2a
 80040b2:	d111      	bne.n	80040d8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2222      	movs	r2, #34	; 0x22
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2228      	movs	r2, #40	; 0x28
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff f9a7 	bl	8003426 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d012      	beq.n	8004118 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
 800412a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800412c:	2300      	movs	r3, #0
 800412e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800413c:	2b28      	cmp	r3, #40	; 0x28
 800413e:	d127      	bne.n	8004190 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	089b      	lsrs	r3, r3, #2
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	09db      	lsrs	r3, r3, #7
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	81bb      	strh	r3, [r7, #12]
 8004172:	e002      	b.n	800417a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004182:	89ba      	ldrh	r2, [r7, #12]
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff f955 	bl	8003438 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800418e:	e00e      	b.n	80041ae <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004190:	2300      	movs	r3, #0
 8004192:	60bb      	str	r3, [r7, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041d6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004204:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004214:	d172      	bne.n	80042fc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b22      	cmp	r3, #34	; 0x22
 800421a:	d002      	beq.n	8004222 <I2C_Slave_STOPF+0x6a>
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b2a      	cmp	r3, #42	; 0x2a
 8004220:	d135      	bne.n	800428e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0204 	orr.w	r2, r3, #4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004254:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fbaf 	bl	80029be <HAL_DMA_GetState>
 8004260:	4603      	mov	r3, r0
 8004262:	2b01      	cmp	r3, #1
 8004264:	d049      	beq.n	80042fa <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4a69      	ldr	r2, [pc, #420]	; (8004410 <I2C_Slave_STOPF+0x258>)
 800426c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fb62 	bl	800293c <HAL_DMA_Abort_IT>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d03d      	beq.n	80042fa <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800428c:	e035      	b.n	80042fa <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fb79 	bl	80029be <HAL_DMA_GetState>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d014      	beq.n	80042fc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <I2C_Slave_STOPF+0x258>)
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fb2c 	bl	800293c <HAL_DMA_Abort_IT>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
 80042f8:	e000      	b.n	80042fc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042fa:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d03e      	beq.n	8004384 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d112      	bne.n	800433a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691a      	ldr	r2, [r3, #16]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d112      	bne.n	800436e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8b3 	bl	80044f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004392:	e039      	b.n	8004408 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b2a      	cmp	r3, #42	; 0x2a
 8004398:	d109      	bne.n	80043ae <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2228      	movs	r2, #40	; 0x28
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff f83c 	bl	8003426 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b28      	cmp	r3, #40	; 0x28
 80043b8:	d111      	bne.n	80043de <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <I2C_Slave_STOPF+0x25c>)
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f83b 	bl	8003452 <HAL_I2C_ListenCpltCallback>
}
 80043dc:	e014      	b.n	8004408 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	2b22      	cmp	r3, #34	; 0x22
 80043e4:	d002      	beq.n	80043ec <I2C_Slave_STOPF+0x234>
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	2b22      	cmp	r3, #34	; 0x22
 80043ea:	d10d      	bne.n	8004408 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff f80f 	bl	8003426 <HAL_I2C_SlaveRxCpltCallback>
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	0800475d 	.word	0x0800475d
 8004414:	ffff0000 	.word	0xffff0000

08004418 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004426:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d002      	beq.n	800443a <I2C_Slave_AF+0x22>
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b20      	cmp	r3, #32
 8004438:	d129      	bne.n	800448e <I2C_Slave_AF+0x76>
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b28      	cmp	r3, #40	; 0x28
 800443e:	d126      	bne.n	800448e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <I2C_Slave_AF+0xdc>)
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004454:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800445e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fe ffe3 	bl	8003452 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800448c:	e02e      	b.n	80044ec <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d126      	bne.n	80044e2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <I2C_Slave_AF+0xdc>)
 8004498:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2221      	movs	r2, #33	; 0x21
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044be:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044c8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fe ff9a 	bl	8003414 <HAL_I2C_SlaveTxCpltCallback>
}
 80044e0:	e004      	b.n	80044ec <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ea:	615a      	str	r2, [r3, #20]
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	ffff0000 	.word	0xffff0000

080044f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004506:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800450e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	2b10      	cmp	r3, #16
 8004514:	d002      	beq.n	800451c <I2C_ITError+0x24>
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	2b40      	cmp	r3, #64	; 0x40
 800451a:	d10a      	bne.n	8004532 <I2C_ITError+0x3a>
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b22      	cmp	r3, #34	; 0x22
 8004520:	d107      	bne.n	8004532 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004530:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004538:	2b28      	cmp	r3, #40	; 0x28
 800453a:	d107      	bne.n	800454c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2228      	movs	r2, #40	; 0x28
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800454a:	e015      	b.n	8004578 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800455a:	d00a      	beq.n	8004572 <I2C_ITError+0x7a>
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b60      	cmp	r3, #96	; 0x60
 8004560:	d007      	beq.n	8004572 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d162      	bne.n	800464e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004596:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d020      	beq.n	80045e8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <I2C_ITError+0x25c>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fe f9c2 	bl	800293c <HAL_DMA_Abort_IT>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 8089 	beq.w	80046d2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e2:	4610      	mov	r0, r2
 80045e4:	4798      	blx	r3
 80045e6:	e074      	b.n	80046d2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	4a59      	ldr	r2, [pc, #356]	; (8004754 <I2C_ITError+0x25c>)
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe f9a1 	bl	800293c <HAL_DMA_Abort_IT>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d068      	beq.n	80046d2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460a:	2b40      	cmp	r3, #64	; 0x40
 800460c:	d10b      	bne.n	8004626 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0201 	bic.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004648:	4610      	mov	r0, r2
 800464a:	4798      	blx	r3
 800464c:	e041      	b.n	80046d2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b60      	cmp	r3, #96	; 0x60
 8004658:	d125      	bne.n	80046a6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d10b      	bne.n	800468e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fe fefb 	bl	800349a <HAL_I2C_AbortCpltCallback>
 80046a4:	e015      	b.n	80046d2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b40      	cmp	r3, #64	; 0x40
 80046b2:	d10b      	bne.n	80046cc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe fedb 	bl	8003488 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10e      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800470e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b04      	cmp	r3, #4
 8004722:	d113      	bne.n	800474c <I2C_ITError+0x254>
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b28      	cmp	r3, #40	; 0x28
 8004728:	d110      	bne.n	800474c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <I2C_ITError+0x260>)
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fe83 	bl	8003452 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0800475d 	.word	0x0800475d
 8004758:	ffff0000 	.word	0xffff0000

0800475c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <I2C_DMAAbort+0x148>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	08db      	lsrs	r3, r3, #3
 800477c:	4a4a      	ldr	r2, [pc, #296]	; (80048a8 <I2C_DMAAbort+0x14c>)
 800477e:	fba2 2303 	umull	r2, r3, r2, r3
 8004782:	0a1a      	lsrs	r2, r3, #8
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	00da      	lsls	r2, r3, #3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f043 0220 	orr.w	r2, r3, #32
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047a2:	e00a      	b.n	80047ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b8:	d0ea      	beq.n	8004790 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	2200      	movs	r2, #0
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2200      	movs	r2, #0
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b60      	cmp	r3, #96	; 0x60
 800482a:	d10e      	bne.n	800484a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004842:	6978      	ldr	r0, [r7, #20]
 8004844:	f7fe fe29 	bl	800349a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004848:	e027      	b.n	800489a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800484a:	7cfb      	ldrb	r3, [r7, #19]
 800484c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004850:	2b28      	cmp	r3, #40	; 0x28
 8004852:	d117      	bne.n	8004884 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004882:	e007      	b.n	8004894 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004894:	6978      	ldr	r0, [r7, #20]
 8004896:	f7fe fdf7 	bl	8003488 <HAL_I2C_ErrorCallback>
}
 800489a:	bf00      	nop
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000088 	.word	0x20000088
 80048a8:	14f8b589 	.word	0x14f8b589

080048ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	4a13      	ldr	r2, [pc, #76]	; (800490c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80048c0:	fba2 2303 	umull	r2, r3, r2, r3
 80048c4:	0a1a      	lsrs	r2, r3, #8
 80048c6:	4613      	mov	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4413      	add	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d107      	bne.n	80048ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e008      	b.n	80048fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f8:	d0e9      	beq.n	80048ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20000088 	.word	0x20000088
 800490c:	14f8b589 	.word	0x14f8b589

08004910 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004920:	d103      	bne.n	800492a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004928:	e007      	b.n	800493a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004932:	d102      	bne.n	800493a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2208      	movs	r2, #8
 8004938:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e31d      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4b94      	ldr	r3, [pc, #592]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4b91      	ldr	r3, [pc, #580]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004968:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d07b      	beq.n	8004a6e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d006      	beq.n	800498a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2b0c      	cmp	r3, #12
 8004980:	d10f      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004988:	d10b      	bne.n	80049a2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498a:	4b87      	ldr	r3, [pc, #540]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06a      	beq.n	8004a6c <HAL_RCC_OscConfig+0x128>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d166      	bne.n	8004a6c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e2f7      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d106      	bne.n	80049b8 <HAL_RCC_OscConfig+0x74>
 80049aa:	4b7f      	ldr	r3, [pc, #508]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a7e      	ldr	r2, [pc, #504]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e02d      	b.n	8004a14 <HAL_RCC_OscConfig+0xd0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10c      	bne.n	80049da <HAL_RCC_OscConfig+0x96>
 80049c0:	4b79      	ldr	r3, [pc, #484]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a78      	ldr	r2, [pc, #480]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a75      	ldr	r2, [pc, #468]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	e01c      	b.n	8004a14 <HAL_RCC_OscConfig+0xd0>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d10c      	bne.n	80049fc <HAL_RCC_OscConfig+0xb8>
 80049e2:	4b71      	ldr	r3, [pc, #452]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a70      	ldr	r2, [pc, #448]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	4b6e      	ldr	r3, [pc, #440]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a6d      	ldr	r2, [pc, #436]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e00b      	b.n	8004a14 <HAL_RCC_OscConfig+0xd0>
 80049fc:	4b6a      	ldr	r3, [pc, #424]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a69      	ldr	r2, [pc, #420]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b67      	ldr	r3, [pc, #412]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a66      	ldr	r2, [pc, #408]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd f9bc 	bl	8001d98 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd f9b8 	bl	8001d98 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e2ad      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0xe0>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7fd f9a8 	bl	8001d98 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd f9a4 	bl	8001d98 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e299      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a5e:	4b52      	ldr	r3, [pc, #328]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x108>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d05a      	beq.n	8004b30 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x176>
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x160>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e276      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b40      	ldr	r3, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	493d      	ldr	r1, [pc, #244]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab8:	e03a      	b.n	8004b30 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d020      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd f966 	bl	8001d98 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fd f962 	bl	8001d98 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e257      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	492a      	ldr	r1, [pc, #168]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	e015      	b.n	8004b30 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b04:	4b29      	ldr	r3, [pc, #164]	; (8004bac <HAL_RCC_OscConfig+0x268>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0a:	f7fd f945 	bl	8001d98 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b12:	f7fd f941 	bl	8001d98 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e236      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f0      	bne.n	8004b12 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 80b8 	beq.w	8004cae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d170      	bne.n	8004c26 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b44:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x218>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e21a      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d921      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fc23 	bl	80053bc <RCC_SetFlashLatencyFromMSIRange>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e208      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b92:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	4901      	ldr	r1, [pc, #4]	; (8004ba8 <HAL_RCC_OscConfig+0x264>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
 8004ba6:	e020      	b.n	8004bea <HAL_RCC_OscConfig+0x2a6>
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb0:	4ba4      	ldr	r3, [pc, #656]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	49a1      	ldr	r1, [pc, #644]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bc2:	4ba0      	ldr	r3, [pc, #640]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	499c      	ldr	r1, [pc, #624]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fbee 	bl	80053bc <RCC_SetFlashLatencyFromMSIRange>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e1d3      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	0b5b      	lsrs	r3, r3, #13
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004bfa:	4a92      	ldr	r2, [pc, #584]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	0912      	lsrs	r2, r2, #4
 8004c00:	f002 020f 	and.w	r2, r2, #15
 8004c04:	4990      	ldr	r1, [pc, #576]	; (8004e48 <HAL_RCC_OscConfig+0x504>)
 8004c06:	5c8a      	ldrb	r2, [r1, r2]
 8004c08:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c0a:	4a90      	ldr	r2, [pc, #576]	; (8004e4c <HAL_RCC_OscConfig+0x508>)
 8004c0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c0e:	4b90      	ldr	r3, [pc, #576]	; (8004e50 <HAL_RCC_OscConfig+0x50c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fd f874 	bl	8001d00 <HAL_InitTick>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d045      	beq.n	8004cae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	e1b5      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d029      	beq.n	8004c82 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c2e:	4b89      	ldr	r3, [pc, #548]	; (8004e54 <HAL_RCC_OscConfig+0x510>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fd f8b0 	bl	8001d98 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c3c:	f7fd f8ac 	bl	8001d98 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1a1      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c4e:	4b7d      	ldr	r3, [pc, #500]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0f0      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c5a:	4b7a      	ldr	r3, [pc, #488]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4977      	ldr	r1, [pc, #476]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c6c:	4b75      	ldr	r3, [pc, #468]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	061b      	lsls	r3, r3, #24
 8004c7a:	4972      	ldr	r1, [pc, #456]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	604b      	str	r3, [r1, #4]
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c82:	4b74      	ldr	r3, [pc, #464]	; (8004e54 <HAL_RCC_OscConfig+0x510>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd f886 	bl	8001d98 <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c90:	f7fd f882 	bl	8001d98 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e177      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ca2:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d030      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d016      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <HAL_RCC_OscConfig+0x514>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f866 	bl	8001d98 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f862 	bl	8001d98 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e157      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce2:	4b58      	ldr	r3, [pc, #352]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x38c>
 8004cee:	e015      	b.n	8004d1c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf0:	4b59      	ldr	r3, [pc, #356]	; (8004e58 <HAL_RCC_OscConfig+0x514>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd f84f 	bl	8001d98 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cfe:	f7fd f84b 	bl	8001d98 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e140      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d10:	4b4c      	ldr	r3, [pc, #304]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f0      	bne.n	8004cfe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80b5 	beq.w	8004e94 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b45      	ldr	r3, [pc, #276]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b42      	ldr	r3, [pc, #264]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	4a41      	ldr	r2, [pc, #260]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6253      	str	r3, [r2, #36]	; 0x24
 8004d46:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d56:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <HAL_RCC_OscConfig+0x518>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d118      	bne.n	8004d94 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d62:	4b3e      	ldr	r3, [pc, #248]	; (8004e5c <HAL_RCC_OscConfig+0x518>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3d      	ldr	r2, [pc, #244]	; (8004e5c <HAL_RCC_OscConfig+0x518>)
 8004d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6e:	f7fd f813 	bl	8001d98 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d76:	f7fd f80f 	bl	8001d98 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e104      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <HAL_RCC_OscConfig+0x518>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d106      	bne.n	8004daa <HAL_RCC_OscConfig+0x466>
 8004d9c:	4b29      	ldr	r3, [pc, #164]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	4a28      	ldr	r2, [pc, #160]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da6:	6353      	str	r3, [r2, #52]	; 0x34
 8004da8:	e02d      	b.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x488>
 8004db2:	4b24      	ldr	r3, [pc, #144]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	4a23      	ldr	r2, [pc, #140]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004dc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dc8:	6353      	str	r3, [r2, #52]	; 0x34
 8004dca:	e01c      	b.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_OscConfig+0x4aa>
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd8:	4a1a      	ldr	r2, [pc, #104]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dde:	6353      	str	r3, [r2, #52]	; 0x34
 8004de0:	4b18      	ldr	r3, [pc, #96]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	6353      	str	r3, [r2, #52]	; 0x34
 8004dec:	e00b      	b.n	8004e06 <HAL_RCC_OscConfig+0x4c2>
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004df8:	6353      	str	r3, [r2, #52]	; 0x34
 8004dfa:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e04:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7fc ffc3 	bl	8001d98 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e16:	f7fc ffbf 	bl	8001d98 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e0b2      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_OscConfig+0x500>)
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ee      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4d2>
 8004e38:	e023      	b.n	8004e82 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fc ffad 	bl	8001d98 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e40:	e019      	b.n	8004e76 <HAL_RCC_OscConfig+0x532>
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	0800ace0 	.word	0x0800ace0
 8004e4c:	20000088 	.word	0x20000088
 8004e50:	2000008c 	.word	0x2000008c
 8004e54:	42470020 	.word	0x42470020
 8004e58:	42470680 	.word	0x42470680
 8004e5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e60:	f7fc ff9a 	bl	8001d98 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e08d      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e76:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ee      	bne.n	8004e60 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d105      	bne.n	8004e94 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e88:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4a43      	ldr	r2, [pc, #268]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d079      	beq.n	8004f90 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d056      	beq.n	8004f50 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d13b      	bne.n	8004f22 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCC_OscConfig+0x65c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fc ff72 	bl	8001d98 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fc ff6e 	bl	8001d98 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e063      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	4b31      	ldr	r3, [pc, #196]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	4319      	orrs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	430b      	orrs	r3, r1
 8004eee:	492b      	ldr	r1, [pc, #172]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	; (8004fa0 <HAL_RCC_OscConfig+0x65c>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efa:	f7fc ff4d 	bl	8001d98 <HAL_GetTick>
 8004efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f02:	f7fc ff49 	bl	8001d98 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e03e      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0x5be>
 8004f20:	e036      	b.n	8004f90 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f22:	4b1f      	ldr	r3, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x65c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fc ff36 	bl	8001d98 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fc ff32 	bl	8001d98 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e027      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f42:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x5ec>
 8004f4e:	e01f      	b.n	8004f90 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e01a      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f5c:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <HAL_RCC_OscConfig+0x658>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d10d      	bne.n	8004f8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d106      	bne.n	8004f8c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470060 	.word	0x42470060

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e11a      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d919      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x34>
 8004fcc:	4b8a      	ldr	r3, [pc, #552]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a89      	ldr	r2, [pc, #548]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fd2:	f043 0304 	orr.w	r3, r3, #4
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b87      	ldr	r3, [pc, #540]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 0201 	bic.w	r2, r3, #1
 8004fe0:	4985      	ldr	r1, [pc, #532]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe8:	4b83      	ldr	r3, [pc, #524]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0f9      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d008      	beq.n	8005018 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005006:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	497a      	ldr	r1, [pc, #488]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005014:	4313      	orrs	r3, r2
 8005016:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 808e 	beq.w	8005142 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d107      	bne.n	800503e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800502e:	4b73      	ldr	r3, [pc, #460]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d121      	bne.n	800507e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0d7      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d115      	bne.n	800507e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e0cb      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0bf      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800506e:	4b63      	ldr	r3, [pc, #396]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0b7      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b5f      	ldr	r3, [pc, #380]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	495c      	ldr	r1, [pc, #368]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005090:	f7fc fe82 	bl	8001d98 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d112      	bne.n	80050c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800509e:	e00a      	b.n	80050b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a0:	f7fc fe7a 	bl	8001d98 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e09b      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050b6:	4b51      	ldr	r3, [pc, #324]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d1ee      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xfc>
 80050c2:	e03e      	b.n	8005142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d112      	bne.n	80050f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ce:	f7fc fe63 	bl	8001d98 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e084      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d1ee      	bne.n	80050ce <HAL_RCC_ClockConfig+0x12a>
 80050f0:	e027      	b.n	8005142 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d11d      	bne.n	8005136 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050fa:	e00a      	b.n	8005112 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fc:	f7fc fe4c 	bl	8001d98 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e06d      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005112:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d1ee      	bne.n	80050fc <HAL_RCC_ClockConfig+0x158>
 800511e:	e010      	b.n	8005142 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fc fe3a 	bl	8001d98 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e05b      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005136:	4b31      	ldr	r3, [pc, #196]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1ee      	bne.n	8005120 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005142:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d219      	bcs.n	8005184 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCC_ClockConfig+0x1be>
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a27      	ldr	r2, [pc, #156]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	4923      	ldr	r1, [pc, #140]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCC_ClockConfig+0x254>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e034      	b.n	80051ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d008      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	4917      	ldr	r1, [pc, #92]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d009      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	490f      	ldr	r1, [pc, #60]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051c2:	f000 f823 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051c6:	4602      	mov	r2, r0
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_RCC_ClockConfig+0x258>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	490b      	ldr	r1, [pc, #44]	; (8005200 <HAL_RCC_ClockConfig+0x25c>)
 80051d4:	5ccb      	ldrb	r3, [r1, r3]
 80051d6:	fa22 f303 	lsr.w	r3, r2, r3
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <HAL_RCC_ClockConfig+0x260>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCC_ClockConfig+0x264>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fc fd8c 	bl	8001d00 <HAL_InitTick>
 80051e8:	4603      	mov	r3, r0
 80051ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80051ec:	7afb      	ldrb	r3, [r7, #11]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00
 80051fc:	40023800 	.word	0x40023800
 8005200:	0800ace0 	.word	0x0800ace0
 8005204:	20000088 	.word	0x20000088
 8005208:	2000008c 	.word	0x2000008c

0800520c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	b5b0      	push	{r4, r5, r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005212:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 030c 	and.w	r3, r3, #12
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d00c      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x30>
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d87c      	bhi.n	8005320 <HAL_RCC_GetSysClockFreq+0x114>
 8005226:	2b04      	cmp	r3, #4
 8005228:	d002      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x24>
 800522a:	2b08      	cmp	r3, #8
 800522c:	d003      	beq.n	8005236 <HAL_RCC_GetSysClockFreq+0x2a>
 800522e:	e077      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005230:	4b46      	ldr	r3, [pc, #280]	; (800534c <HAL_RCC_GetSysClockFreq+0x140>)
 8005232:	613b      	str	r3, [r7, #16]
      break;
 8005234:	e082      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005236:	4b46      	ldr	r3, [pc, #280]	; (8005350 <HAL_RCC_GetSysClockFreq+0x144>)
 8005238:	613b      	str	r3, [r7, #16]
      break;
 800523a:	e07f      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	0c9b      	lsrs	r3, r3, #18
 8005240:	f003 030f 	and.w	r3, r3, #15
 8005244:	4a43      	ldr	r2, [pc, #268]	; (8005354 <HAL_RCC_GetSysClockFreq+0x148>)
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	0d9b      	lsrs	r3, r3, #22
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005256:	4b3c      	ldr	r3, [pc, #240]	; (8005348 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	461a      	mov	r2, r3
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	4939      	ldr	r1, [pc, #228]	; (8005350 <HAL_RCC_GetSysClockFreq+0x144>)
 800526c:	fb01 f003 	mul.w	r0, r1, r3
 8005270:	2100      	movs	r1, #0
 8005272:	fb01 f102 	mul.w	r1, r1, r2
 8005276:	1844      	adds	r4, r0, r1
 8005278:	4935      	ldr	r1, [pc, #212]	; (8005350 <HAL_RCC_GetSysClockFreq+0x144>)
 800527a:	fba2 0101 	umull	r0, r1, r2, r1
 800527e:	1863      	adds	r3, r4, r1
 8005280:	4619      	mov	r1, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	461a      	mov	r2, r3
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	f7fb f95b 	bl	8000544 <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4613      	mov	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e040      	b.n	800531a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	461c      	mov	r4, r3
 800529c:	f04f 0500 	mov.w	r5, #0
 80052a0:	4620      	mov	r0, r4
 80052a2:	4629      	mov	r1, r5
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	014b      	lsls	r3, r1, #5
 80052ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052b2:	0142      	lsls	r2, r0, #5
 80052b4:	4610      	mov	r0, r2
 80052b6:	4619      	mov	r1, r3
 80052b8:	1b00      	subs	r0, r0, r4
 80052ba:	eb61 0105 	sbc.w	r1, r1, r5
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	018b      	lsls	r3, r1, #6
 80052c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052cc:	0182      	lsls	r2, r0, #6
 80052ce:	1a12      	subs	r2, r2, r0
 80052d0:	eb63 0301 	sbc.w	r3, r3, r1
 80052d4:	f04f 0000 	mov.w	r0, #0
 80052d8:	f04f 0100 	mov.w	r1, #0
 80052dc:	00d9      	lsls	r1, r3, #3
 80052de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052e2:	00d0      	lsls	r0, r2, #3
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	1912      	adds	r2, r2, r4
 80052ea:	eb45 0303 	adc.w	r3, r5, r3
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	0299      	lsls	r1, r3, #10
 80052f8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052fc:	0290      	lsls	r0, r2, #10
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	461a      	mov	r2, r3
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f7fb f919 	bl	8000544 <__aeabi_uldivmod>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4613      	mov	r3, r2
 8005318:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	613b      	str	r3, [r7, #16]
      break;
 800531e:	e00d      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	0b5b      	lsrs	r3, r3, #13
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	613b      	str	r3, [r7, #16]
      break;
 800533a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800533c:	693b      	ldr	r3, [r7, #16]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}
 8005346:	bf00      	nop
 8005348:	40023800 	.word	0x40023800
 800534c:	00f42400 	.word	0x00f42400
 8005350:	01312d00 	.word	0x01312d00
 8005354:	0800acd4 	.word	0x0800acd4

08005358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800535c:	4b02      	ldr	r3, [pc, #8]	; (8005368 <HAL_RCC_GetHCLKFreq+0x10>)
 800535e:	681b      	ldr	r3, [r3, #0]
}
 8005360:	4618      	mov	r0, r3
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	20000088 	.word	0x20000088

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005370:	f7ff fff2 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4903      	ldr	r1, [pc, #12]	; (8005390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40023800 	.word	0x40023800
 8005390:	0800acf0 	.word	0x0800acf0

08005394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005398:	f7ff ffde 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 800539c:	4602      	mov	r2, r0
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	0adb      	lsrs	r3, r3, #11
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	4903      	ldr	r1, [pc, #12]	; (80053b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053aa:	5ccb      	ldrb	r3, [r1, r3]
 80053ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40023800 	.word	0x40023800
 80053b8:	0800acf0 	.word	0x0800acf0

080053bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80053c8:	4b29      	ldr	r3, [pc, #164]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d12c      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053d4:	4b26      	ldr	r3, [pc, #152]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e016      	b.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f6:	6253      	str	r3, [r2, #36]	; 0x24
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800540c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4b18      	ldr	r3, [pc, #96]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005418:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005420:	d105      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005428:	d101      	bne.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800542a:	2301      	movs	r3, #1
 800542c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005434:	4b10      	ldr	r3, [pc, #64]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a0f      	ldr	r2, [pc, #60]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800543a:	f043 0304 	orr.w	r3, r3, #4
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 0201 	bic.w	r2, r3, #1
 8005448:	490b      	ldr	r1, [pc, #44]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005450:	4b09      	ldr	r3, [pc, #36]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	429a      	cmp	r2, r3
 800545c:	d001      	beq.n	8005462 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40023800 	.word	0x40023800
 8005474:	40007000 	.word	0x40007000
 8005478:	40023c00 	.word	0x40023c00

0800547c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80ed 	beq.w	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a2:	4b78      	ldr	r3, [pc, #480]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10d      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ae:	4b75      	ldr	r3, [pc, #468]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4a74      	ldr	r2, [pc, #464]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b8:	6253      	str	r3, [r2, #36]	; 0x24
 80054ba:	4b72      	ldr	r3, [pc, #456]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d118      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d6:	4b6c      	ldr	r3, [pc, #432]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6b      	ldr	r2, [pc, #428]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e2:	f7fc fc59 	bl	8001d98 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e8:	e008      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ea:	f7fc fc55 	bl	8001d98 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	; 0x64
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e0be      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005508:	4b5e      	ldr	r3, [pc, #376]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005510:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	429a      	cmp	r2, r3
 800551e:	d106      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00f      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800553a:	d108      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800553c:	4b51      	ldr	r3, [pc, #324]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005548:	d101      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e095      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005552:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005556:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d041      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	429a      	cmp	r2, r3
 800556a:	d005      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10c      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d02d      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d027      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005592:	4b3c      	ldr	r3, [pc, #240]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800559a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800559c:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a2:	4b3a      	ldr	r3, [pc, #232]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80055a8:	4a36      	ldr	r2, [pc, #216]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7fc fbee 	bl	8001d98 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055be:	e00a      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f7fc fbea 	bl	8001d98 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e051      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055d6:	4b2b      	ldr	r3, [pc, #172]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ee      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055fa:	d10a      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80055fc:	4b21      	ldr	r3, [pc, #132]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800560c:	491d      	ldr	r1, [pc, #116]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
 8005612:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800561e:	4919      	ldr	r1, [pc, #100]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005620:	4313      	orrs	r3, r2
 8005622:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800563c:	d10a      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800564e:	490d      	ldr	r1, [pc, #52]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005660:	4908      	ldr	r1, [pc, #32]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005662:	4313      	orrs	r3, r2
 8005664:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005666:	7dfb      	ldrb	r3, [r7, #23]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005676:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	40007000 	.word	0x40007000
 800568c:	424706dc 	.word	0x424706dc

08005690 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e07c      	b.n	800579c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7f5b      	ldrb	r3, [r3, #29]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d105      	bne.n	80056b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc f97e 	bl	80019b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	22ca      	movs	r2, #202	; 0xca
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2253      	movs	r2, #83	; 0x53
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fba5 	bl	8005e1e <RTC_EnterInitMode>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2204      	movs	r2, #4
 80056e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e057      	b.n	800579c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80056fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6899      	ldr	r1, [r3, #8]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	68d2      	ldr	r2, [r2, #12]
 8005726:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6919      	ldr	r1, [r3, #16]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	041a      	lsls	r2, r3, #16
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574a:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fb40 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2204      	movs	r2, #4
 8005764:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e018      	b.n	800579c <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	22ff      	movs	r2, #255	; 0xff
 8005792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
  }
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057a4:	b590      	push	{r4, r7, lr}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	7f1b      	ldrb	r3, [r3, #28]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_RTC_SetTime+0x18>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0a3      	b.n	8005904 <HAL_RTC_SetTime+0x160>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2202      	movs	r2, #2
 80057c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d126      	bne.n	800581c <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2200      	movs	r2, #0
 80057e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fb43 	bl	8005e72 <RTC_ByteToBcd2>
 80057ec:	4603      	mov	r3, r0
 80057ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fb3c 	bl	8005e72 <RTC_ByteToBcd2>
 80057fa:	4603      	mov	r3, r0
 80057fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80057fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	789b      	ldrb	r3, [r3, #2]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fb34 	bl	8005e72 <RTC_ByteToBcd2>
 800580a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800580c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	78db      	ldrb	r3, [r3, #3]
 8005814:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e018      	b.n	800584e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800583c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005842:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ca      	movs	r2, #202	; 0xca
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2253      	movs	r2, #83	; 0x53
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fadd 	bl	8005e1e <RTC_EnterInitMode>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00b      	beq.n	8005882 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	22ff      	movs	r2, #255	; 0xff
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2204      	movs	r2, #4
 8005876:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e040      	b.n	8005904 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800588c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005890:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6899      	ldr	r1, [r3, #8]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058c8:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fa81 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00b      	beq.n	80058ee <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2204      	movs	r2, #4
 80058e2:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e00a      	b.n	8005904 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	22ff      	movs	r2, #255	; 0xff
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005902:	2300      	movs	r3, #0
  }
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd90      	pop	{r4, r7, pc}

0800590c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005922:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005926:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b2db      	uxtb	r3, r3
 800592e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005950:	b2da      	uxtb	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2db      	uxtb	r3, r3
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	b2da      	uxtb	r2, r3
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11a      	bne.n	80059a2 <HAL_RTC_GetTime+0x96>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fa9d 	bl	8005eb0 <RTC_Bcd2ToByte>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa94 	bl	8005eb0 <RTC_Bcd2ToByte>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	789b      	ldrb	r3, [r3, #2]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fa8b 	bl	8005eb0 <RTC_Bcd2ToByte>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	7f1b      	ldrb	r3, [r3, #28]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_RTC_SetDate+0x18>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e08d      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10e      	bne.n	80059f4 <HAL_RTC_SetDate+0x48>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	f023 0310 	bic.w	r3, r3, #16
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	330a      	adds	r3, #10
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d11c      	bne.n	8005a34 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	78db      	ldrb	r3, [r3, #3]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fa37 	bl	8005e72 <RTC_ByteToBcd2>
 8005a04:	4603      	mov	r3, r0
 8005a06:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fa30 	bl	8005e72 <RTC_ByteToBcd2>
 8005a12:	4603      	mov	r3, r0
 8005a14:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a16:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	789b      	ldrb	r3, [r3, #2]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa28 	bl	8005e72 <RTC_ByteToBcd2>
 8005a22:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005a24:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
 8005a32:	e00e      	b.n	8005a52 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	78db      	ldrb	r3, [r3, #3]
 8005a38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a40:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005a46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	22ca      	movs	r2, #202	; 0xca
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2253      	movs	r2, #83	; 0x53
 8005a60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f9db 	bl	8005e1e <RTC_EnterInitMode>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	22ff      	movs	r2, #255	; 0xff
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e02c      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa4:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f993 	bl	8005dd2 <HAL_RTC_WaitForSynchro>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2204      	movs	r2, #4
 8005abe:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	22ff      	movs	r2, #255	; 0xff
 8005ad0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	371c      	adds	r7, #28
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}

08005ae8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	7f1b      	ldrb	r3, [r3, #28]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_RTC_SetAlarm_IT+0x20>
 8005b04:	2302      	movs	r3, #2
 8005b06:	e10f      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2202      	movs	r2, #2
 8005b12:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d136      	bne.n	8005b88 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 f99d 	bl	8005e72 <RTC_ByteToBcd2>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f996 	bl	8005e72 <RTC_ByteToBcd2>
 8005b46:	4603      	mov	r3, r0
 8005b48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b4a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	789b      	ldrb	r3, [r3, #2]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f98e 	bl	8005e72 <RTC_ByteToBcd2>
 8005b56:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b58:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b62:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	7d1b      	ldrb	r3, [r3, #20]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f981 	bl	8005e72 <RTC_ByteToBcd2>
 8005b70:	4603      	mov	r3, r0
 8005b72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
 8005b86:	e022      	b.n	8005bce <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ba8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005bae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005bb6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005bbe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005bc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	22ca      	movs	r2, #202	; 0xca
 8005bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2253      	movs	r2, #83	; 0x53
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d144      	bne.n	8005c72 <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bf6:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c0a:	f7fc f8c5 	bl	8001d98 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c10:	e013      	b.n	8005c3a <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c12:	f7fc f8c1 	bl	8001d98 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c20:	d90b      	bls.n	8005c3a <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	22ff      	movs	r2, #255	; 0xff
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e076      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0e4      	beq.n	8005c12 <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689a      	ldr	r2, [r3, #8]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	e043      	b.n	8005cfa <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c80:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c94:	f7fc f880 	bl	8001d98 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c9a:	e013      	b.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c9c:	f7fc f87c 	bl	8001d98 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005caa:	d90b      	bls.n	8005cc4 <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e031      	b.n	8005d28 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0e4      	beq.n	8005c9c <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005d06:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <HAL_RTC_SetAlarm_IT+0x248>)
 8005d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d10:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ff      	movs	r2, #255	; 0xff
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}
 8005d30:	40010400 	.word	0x40010400

08005d34 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f831 	bl	8005dc0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d6e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d012      	beq.n	8005da4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8aa 	bl	8005ee6 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005da2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <HAL_RTC_AlarmIRQHandler+0x88>)
 8005da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005daa:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	775a      	strb	r2, [r3, #29]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40010400 	.word	0x40010400

08005dc0 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dea:	f7fb ffd5 	bl	8001d98 <HAL_GetTick>
 8005dee:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005df0:	e009      	b.n	8005e06 <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005df2:	f7fb ffd1 	bl	8001d98 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e00:	d901      	bls.n	8005e06 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e007      	b.n	8005e16 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0320 	and.w	r3, r3, #32
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0ee      	beq.n	8005df2 <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d119      	bne.n	8005e68 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005e3e:	f7fb ffab 	bl	8001d98 <HAL_GetTick>
 8005e42:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e44:	e009      	b.n	8005e5a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005e46:	f7fb ffa7 	bl	8001d98 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e54:	d901      	bls.n	8005e5a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e007      	b.n	8005e6a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ee      	beq.n	8005e46 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	4603      	mov	r3, r0
 8005e7a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005e84:	e005      	b.n	8005e92 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3b0a      	subs	r3, #10
 8005e90:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d8f6      	bhi.n	8005e86 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr

08005eb0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005eba:	79fb      	ldrb	r3, [r7, #7]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	4413      	add	r3, r2
 8005eda:	b2db      	uxtb	r3, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3714      	adds	r7, #20
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e06e      	b.n	8005fe8 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d108      	bne.n	8005f24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1a:	d009      	beq.n	8005f30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61da      	str	r2, [r3, #28]
 8005f22:	e005      	b.n	8005f30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fd4e 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb4:	ea42 0103 	orr.w	r1, r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	0c1a      	lsrs	r2, r3, #16
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f002 0204 	and.w	r2, r2, #4
 8005fd6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10f      	bne.n	8006034 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	099b      	lsrs	r3, r3, #6
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	4798      	blx	r3
    return;
 8006032:	e0be      	b.n	80061b2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_SPI_IRQHandler+0x66>
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	09db      	lsrs	r3, r3, #7
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d004      	beq.n	8006056 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
    return;
 8006054:	e0ad      	b.n	80061b2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d106      	bne.n	8006070 <HAL_SPI_IRQHandler+0x80>
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	099b      	lsrs	r3, r3, #6
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80a1 	beq.w	80061b2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 809a 	beq.w	80061b2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	099b      	lsrs	r3, r3, #6
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d023      	beq.n	80060d2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b03      	cmp	r3, #3
 8006094:	d011      	beq.n	80060ba <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f043 0204 	orr.w	r2, r3, #4
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	e00b      	b.n	80060d2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ba:	2300      	movs	r3, #0
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	693b      	ldr	r3, [r7, #16]
        return;
 80060d0:	e06f      	b.n	80061b2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	095b      	lsrs	r3, r3, #5
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d014      	beq.n	8006108 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610c:	2b00      	cmp	r3, #0
 800610e:	d04f      	beq.n	80061b0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800611e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_SPI_IRQHandler+0x14c>
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d034      	beq.n	80061a6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0203 	bic.w	r2, r2, #3
 800614a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d011      	beq.n	8006178 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <HAL_SPI_IRQHandler+0x1c8>)
 800615a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006160:	4618      	mov	r0, r3
 8006162:	f7fc fbeb 	bl	800293c <HAL_DMA_Abort_IT>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617c:	2b00      	cmp	r3, #0
 800617e:	d016      	beq.n	80061ae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006184:	4a0c      	ldr	r2, [pc, #48]	; (80061b8 <HAL_SPI_IRQHandler+0x1c8>)
 8006186:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618c:	4618      	mov	r0, r3
 800618e:	f7fc fbd5 	bl	800293c <HAL_DMA_Abort_IT>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80061a4:	e003      	b.n	80061ae <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f808 	bl	80061bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80061ac:	e000      	b.n	80061b0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80061ae:	bf00      	nop
    return;
 80061b0:	bf00      	nop
  }
}
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	080061cf 	.word	0x080061cf

080061bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061da:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ffe7 	bl	80061bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e03f      	b.n	8006288 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7fb fc31 	bl	8001a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2224      	movs	r2, #36	; 0x24
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006238:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fb48 	bl	80068d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800624e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695a      	ldr	r2, [r3, #20]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800625e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800626e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10d      	bne.n	80062e2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	f003 0320 	and.w	r3, r3, #32
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_UART_IRQHandler+0x52>
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa4f 	bl	800677e <UART_Receive_IT>
      return;
 80062e0:	e17b      	b.n	80065da <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80b1 	beq.w	800644c <HAL_UART_IRQHandler+0x1bc>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_UART_IRQHandler+0x70>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80a6 	beq.w	800644c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_UART_IRQHandler+0x90>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	f043 0201 	orr.w	r2, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <HAL_UART_IRQHandler+0xb0>
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006338:	f043 0202 	orr.w	r2, r3, #2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_UART_IRQHandler+0xd0>
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00f      	beq.n	800638a <HAL_UART_IRQHandler+0xfa>
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	d104      	bne.n	800637e <HAL_UART_IRQHandler+0xee>
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f043 0208 	orr.w	r2, r3, #8
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 811e 	beq.w	80065d0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_UART_IRQHandler+0x11e>
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f9e8 	bl	800677e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b8:	2b40      	cmp	r3, #64	; 0x40
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <HAL_UART_IRQHandler+0x146>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d031      	beq.n	800643a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f92a 	bl	8006630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d123      	bne.n	8006432 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d013      	beq.n	800642a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	4a76      	ldr	r2, [pc, #472]	; (80065e0 <HAL_UART_IRQHandler+0x350>)
 8006408:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	4618      	mov	r0, r3
 8006410:	f7fc fa94 	bl	800293c <HAL_DMA_Abort_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	e00e      	b.n	8006448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f8ec 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006430:	e00a      	b.n	8006448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f8e8 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006438:	e006      	b.n	8006448 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f8e4 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006446:	e0c3      	b.n	80065d0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006448:	bf00      	nop
    return;
 800644a:	e0c1      	b.n	80065d0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 80a1 	bne.w	8006598 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	f003 0310 	and.w	r3, r3, #16
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 809b 	beq.w	8006598 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 8095 	beq.w	8006598 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d14e      	bne.n	8006530 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800649c:	8a3b      	ldrh	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8098 	beq.w	80065d4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064a8:	8a3a      	ldrh	r2, [r7, #16]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	f080 8092 	bcs.w	80065d4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	8a3a      	ldrh	r2, [r7, #16]
 80064b4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d02b      	beq.n	8006518 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064ce:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695a      	ldr	r2, [r3, #20]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ee:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0210 	bic.w	r2, r2, #16
 800650c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	4618      	mov	r0, r3
 8006514:	f7fc f9d5 	bl	80028c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006520:	b29b      	uxth	r3, r3
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b29b      	uxth	r3, r3
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f876 	bl	800661a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800652e:	e051      	b.n	80065d4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006538:	b29b      	uxth	r3, r3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d047      	beq.n	80065d8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006548:	8a7b      	ldrh	r3, [r7, #18]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d044      	beq.n	80065d8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800655c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0201 	bic.w	r2, r2, #1
 800656c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f022 0210 	bic.w	r2, r2, #16
 800658a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800658c:	8a7b      	ldrh	r3, [r7, #18]
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f842 	bl	800661a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006596:	e01f      	b.n	80065d8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <HAL_UART_IRQHandler+0x324>
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f87f 	bl	80066b0 <UART_Transmit_IT>
    return;
 80065b2:	e012      	b.n	80065da <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00d      	beq.n	80065da <HAL_UART_IRQHandler+0x34a>
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f8c0 	bl	800674e <UART_EndTransmit_IT>
    return;
 80065ce:	e004      	b.n	80065da <HAL_UART_IRQHandler+0x34a>
    return;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <HAL_UART_IRQHandler+0x34a>
      return;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_UART_IRQHandler+0x34a>
      return;
 80065d8:	bf00      	nop
  }
}
 80065da:	3728      	adds	r7, #40	; 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	08006689 	.word	0x08006689

080065e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr

080065f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr

08006630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006646:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695a      	ldr	r2, [r3, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665c:	2b01      	cmp	r3, #1
 800665e:	d107      	bne.n	8006670 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0210 	bic.w	r2, r2, #16
 800666e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ffb0 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b21      	cmp	r3, #33	; 0x21
 80066c2:	d13e      	bne.n	8006742 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d114      	bne.n	80066f8 <UART_Transmit_IT+0x48>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d110      	bne.n	80066f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	1c9a      	adds	r2, r3, #2
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	621a      	str	r2, [r3, #32]
 80066f6:	e008      	b.n	800670a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	1c59      	adds	r1, r3, #1
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6211      	str	r1, [r2, #32]
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4619      	mov	r1, r3
 8006718:	84d1      	strh	r1, [r2, #38]	; 0x26
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10f      	bne.n	800673e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800672c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	e000      	b.n	8006744 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006742:	2302      	movs	r3, #2
  }
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff ff38 	bl	80065e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b22      	cmp	r3, #34	; 0x22
 8006790:	f040 8099 	bne.w	80068c6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d117      	bne.n	80067ce <UART_Receive_IT+0x50>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d113      	bne.n	80067ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067bc:	b29a      	uxth	r2, r3
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	1c9a      	adds	r2, r3, #2
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	; 0x28
 80067cc:	e026      	b.n	800681c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e0:	d007      	beq.n	80067f2 <UART_Receive_IT+0x74>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <UART_Receive_IT+0x82>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e008      	b.n	8006812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	b2da      	uxtb	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4619      	mov	r1, r3
 800682a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800682c:	2b00      	cmp	r3, #0
 800682e:	d148      	bne.n	80068c2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0220 	bic.w	r2, r2, #32
 800683e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800684e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	d123      	bne.n	80068b8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0210 	bic.w	r2, r2, #16
 8006884:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0310 	and.w	r3, r3, #16
 8006890:	2b10      	cmp	r3, #16
 8006892:	d10a      	bne.n	80068aa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff feb2 	bl	800661a <HAL_UARTEx_RxEventCallback>
 80068b6:	e002      	b.n	80068be <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fe9c 	bl	80065f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e002      	b.n	80068c8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	4313      	orrs	r3, r2
 8006904:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006910:	f023 030c 	bic.w	r3, r3, #12
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	430b      	orrs	r3, r1
 800691c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a55      	ldr	r2, [pc, #340]	; (8006a90 <UART_SetConfig+0x1c0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d103      	bne.n	8006946 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800693e:	f7fe fd29 	bl	8005394 <HAL_RCC_GetPCLK2Freq>
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	e002      	b.n	800694c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006946:	f7fe fd11 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 800694a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006954:	d14c      	bne.n	80069f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009a      	lsls	r2, r3, #2
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	fbb2 f3f3 	udiv	r3, r2, r3
 800696c:	4a49      	ldr	r2, [pc, #292]	; (8006a94 <UART_SetConfig+0x1c4>)
 800696e:	fba2 2303 	umull	r2, r3, r2, r3
 8006972:	095b      	lsrs	r3, r3, #5
 8006974:	0119      	lsls	r1, r3, #4
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009a      	lsls	r2, r3, #2
 8006980:	441a      	add	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	fbb2 f2f3 	udiv	r2, r2, r3
 800698c:	4b41      	ldr	r3, [pc, #260]	; (8006a94 <UART_SetConfig+0x1c4>)
 800698e:	fba3 0302 	umull	r0, r3, r3, r2
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	2064      	movs	r0, #100	; 0x64
 8006996:	fb00 f303 	mul.w	r3, r0, r3
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	00db      	lsls	r3, r3, #3
 800699e:	3332      	adds	r3, #50	; 0x32
 80069a0:	4a3c      	ldr	r2, [pc, #240]	; (8006a94 <UART_SetConfig+0x1c4>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069ae:	4419      	add	r1, r3
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	009a      	lsls	r2, r3, #2
 80069ba:	441a      	add	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80069c6:	4b33      	ldr	r3, [pc, #204]	; (8006a94 <UART_SetConfig+0x1c4>)
 80069c8:	fba3 0302 	umull	r0, r3, r3, r2
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	2064      	movs	r0, #100	; 0x64
 80069d0:	fb00 f303 	mul.w	r3, r0, r3
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	3332      	adds	r3, #50	; 0x32
 80069da:	4a2e      	ldr	r2, [pc, #184]	; (8006a94 <UART_SetConfig+0x1c4>)
 80069dc:	fba2 2303 	umull	r2, r3, r2, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	f003 0207 	and.w	r2, r3, #7
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	440a      	add	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069ee:	e04a      	b.n	8006a86 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009a      	lsls	r2, r3, #2
 80069fa:	441a      	add	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a06:	4a23      	ldr	r2, [pc, #140]	; (8006a94 <UART_SetConfig+0x1c4>)
 8006a08:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	0119      	lsls	r1, r3, #4
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009a      	lsls	r2, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <UART_SetConfig+0x1c4>)
 8006a28:	fba3 0302 	umull	r0, r3, r3, r2
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	2064      	movs	r0, #100	; 0x64
 8006a30:	fb00 f303 	mul.w	r3, r0, r3
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	3332      	adds	r3, #50	; 0x32
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <UART_SetConfig+0x1c4>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a46:	4419      	add	r1, r3
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009a      	lsls	r2, r3, #2
 8006a52:	441a      	add	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <UART_SetConfig+0x1c4>)
 8006a60:	fba3 0302 	umull	r0, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2064      	movs	r0, #100	; 0x64
 8006a68:	fb00 f303 	mul.w	r3, r0, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a08      	ldr	r2, [pc, #32]	; (8006a94 <UART_SetConfig+0x1c4>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 020f 	and.w	r2, r3, #15
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	440a      	add	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	40013800 	.word	0x40013800
 8006a94:	51eb851f 	.word	0x51eb851f

08006a98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a9c:	4904      	ldr	r1, [pc, #16]	; (8006ab0 <MX_FATFS_Init+0x18>)
 8006a9e:	4805      	ldr	r0, [pc, #20]	; (8006ab4 <MX_FATFS_Init+0x1c>)
 8006aa0:	f003 fb82 	bl	800a1a8 <FATFS_LinkDriver>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <MX_FATFS_Init+0x20>)
 8006aaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006aac:	bf00      	nop
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	200035a4 	.word	0x200035a4
 8006ab4:	20000098 	.word	0x20000098
 8006ab8:	200035a8 	.word	0x200035a8

08006abc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ac0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr
	...

08006acc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <USER_initialize+0x20>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006adc:	4b03      	ldr	r3, [pc, #12]	; (8006aec <USER_initialize+0x20>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr
 8006aec:	20000094 	.word	0x20000094

08006af0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	4603      	mov	r3, r0
 8006af8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <USER_status+0x20>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006b00:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <USER_status+0x20>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr
 8006b10:	20000094 	.word	0x20000094

08006b14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
 8006b1e:	603b      	str	r3, [r7, #0]
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006b24:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006b40:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	4603      	mov	r3, r0
 8006b54:	603a      	str	r2, [r7, #0]
 8006b56:	71fb      	strb	r3, [r7, #7]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bc80      	pop	{r7}
 8006b6a:	4770      	bx	lr

08006b6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <disk_status+0x30>)
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	79fa      	ldrb	r2, [r7, #7]
 8006b84:	4905      	ldr	r1, [pc, #20]	; (8006b9c <disk_status+0x30>)
 8006b86:	440a      	add	r2, r1
 8006b88:	7a12      	ldrb	r2, [r2, #8]
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4798      	blx	r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000035c 	.word	0x2000035c

08006ba0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	; (8006be8 <disk_initialize+0x48>)
 8006bb2:	5cd3      	ldrb	r3, [r2, r3]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d111      	bne.n	8006bdc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	4a0b      	ldr	r2, [pc, #44]	; (8006be8 <disk_initialize+0x48>)
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	4a09      	ldr	r2, [pc, #36]	; (8006be8 <disk_initialize+0x48>)
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	79fa      	ldrb	r2, [r7, #7]
 8006bce:	4906      	ldr	r1, [pc, #24]	; (8006be8 <disk_initialize+0x48>)
 8006bd0:	440a      	add	r2, r1
 8006bd2:	7a12      	ldrb	r2, [r2, #8]
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4798      	blx	r3
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	2000035c 	.word	0x2000035c

08006bec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bec:	b590      	push	{r4, r7, lr}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	4a0a      	ldr	r2, [pc, #40]	; (8006c28 <disk_read+0x3c>)
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	689c      	ldr	r4, [r3, #8]
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	4a07      	ldr	r2, [pc, #28]	; (8006c28 <disk_read+0x3c>)
 8006c0c:	4413      	add	r3, r2
 8006c0e:	7a18      	ldrb	r0, [r3, #8]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	47a0      	blx	r4
 8006c18:	4603      	mov	r3, r0
 8006c1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	2000035c 	.word	0x2000035c

08006c2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c2c:	b590      	push	{r4, r7, lr}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60b9      	str	r1, [r7, #8]
 8006c34:	607a      	str	r2, [r7, #4]
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <disk_write+0x3c>)
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	68dc      	ldr	r4, [r3, #12]
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	4a07      	ldr	r2, [pc, #28]	; (8006c68 <disk_write+0x3c>)
 8006c4c:	4413      	add	r3, r2
 8006c4e:	7a18      	ldrb	r0, [r3, #8]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	47a0      	blx	r4
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd90      	pop	{r4, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	2000035c 	.word	0x2000035c

08006c6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	4603      	mov	r3, r0
 8006c74:	603a      	str	r2, [r7, #0]
 8006c76:	71fb      	strb	r3, [r7, #7]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	4a09      	ldr	r2, [pc, #36]	; (8006ca4 <disk_ioctl+0x38>)
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	79fa      	ldrb	r2, [r7, #7]
 8006c8a:	4906      	ldr	r1, [pc, #24]	; (8006ca4 <disk_ioctl+0x38>)
 8006c8c:	440a      	add	r2, r1
 8006c8e:	7a10      	ldrb	r0, [r2, #8]
 8006c90:	79b9      	ldrb	r1, [r7, #6]
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	4798      	blx	r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
  return res;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	2000035c 	.word	0x2000035c

08006ca8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	b21a      	sxth	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b21b      	sxth	r3, r3
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	b21b      	sxth	r3, r3
 8006cc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006cca:	89fb      	ldrh	r3, [r7, #14]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr

08006cd6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	3202      	adds	r2, #2
 8006cee:	7812      	ldrb	r2, [r2, #0]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	3201      	adds	r2, #1
 8006cfc:	7812      	ldrb	r2, [r2, #0]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	887a      	ldrh	r2, [r7, #2]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	887b      	ldrh	r3, [r7, #2]
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	b2d2      	uxtb	r2, r2
 8006d42:	701a      	strb	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr

08006d4e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	b2d2      	uxtb	r2, r2
 8006d62:	701a      	strb	r2, [r3, #0]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	1c53      	adds	r3, r2, #1
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	1c59      	adds	r1, r3, #1
 8006dc8:	6179      	str	r1, [r7, #20]
 8006dca:	7812      	ldrb	r2, [r2, #0]
 8006dcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1f1      	bne.n	8006dbe <mem_cpy+0x1a>
	}
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	617a      	str	r2, [r7, #20]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	607b      	str	r3, [r7, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1f3      	bne.n	8006df4 <mem_set+0x10>
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr

08006e18 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e18:	b480      	push	{r7}
 8006e1a:	b089      	sub	sp, #36	; 0x24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	61fb      	str	r3, [r7, #28]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	61fa      	str	r2, [r7, #28]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	1c5a      	adds	r2, r3, #1
 8006e3e:	61ba      	str	r2, [r7, #24]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	1acb      	subs	r3, r1, r3
 8006e44:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d002      	beq.n	8006e58 <mem_cmp+0x40>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0eb      	beq.n	8006e30 <mem_cmp+0x18>

	return r;
 8006e58:	697b      	ldr	r3, [r7, #20]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3724      	adds	r7, #36	; 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e6e:	e002      	b.n	8006e76 <chk_chr+0x12>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3301      	adds	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <chk_chr+0x26>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d1f2      	bne.n	8006e70 <chk_chr+0xc>
	return *str;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	370c      	adds	r7, #12
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	e029      	b.n	8006f00 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006eac:	4a26      	ldr	r2, [pc, #152]	; (8006f48 <chk_lock+0xb0>)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	4413      	add	r3, r2
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01d      	beq.n	8006ef6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006eba:	4a23      	ldr	r2, [pc, #140]	; (8006f48 <chk_lock+0xb0>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	4413      	add	r3, r2
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d116      	bne.n	8006efa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ecc:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <chk_lock+0xb0>)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	011b      	lsls	r3, r3, #4
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d10c      	bne.n	8006efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <chk_lock+0xb0>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3308      	adds	r3, #8
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d102      	bne.n	8006efa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006ef4:	e007      	b.n	8006f06 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d9d2      	bls.n	8006eac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d109      	bne.n	8006f20 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <chk_lock+0x80>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d101      	bne.n	8006f1c <chk_lock+0x84>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e010      	b.n	8006f3e <chk_lock+0xa6>
 8006f1c:	2312      	movs	r3, #18
 8006f1e:	e00e      	b.n	8006f3e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d108      	bne.n	8006f38 <chk_lock+0xa0>
 8006f26:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <chk_lock+0xb0>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	011b      	lsls	r3, r3, #4
 8006f2c:	4413      	add	r3, r2
 8006f2e:	330c      	adds	r3, #12
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f36:	d101      	bne.n	8006f3c <chk_lock+0xa4>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	e000      	b.n	8006f3e <chk_lock+0xa6>
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bc80      	pop	{r7}
 8006f46:	4770      	bx	lr
 8006f48:	2000013c 	.word	0x2000013c

08006f4c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f52:	2300      	movs	r3, #0
 8006f54:	607b      	str	r3, [r7, #4]
 8006f56:	e002      	b.n	8006f5e <enq_lock+0x12>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d806      	bhi.n	8006f72 <enq_lock+0x26>
 8006f64:	4a08      	ldr	r2, [pc, #32]	; (8006f88 <enq_lock+0x3c>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	4413      	add	r3, r2
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f2      	bne.n	8006f58 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	2000013c 	.word	0x2000013c

08006f8c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e01f      	b.n	8006fdc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006f9c:	4a41      	ldr	r2, [pc, #260]	; (80070a4 <inc_lock+0x118>)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	4413      	add	r3, r2
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d113      	bne.n	8006fd6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006fae:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <inc_lock+0x118>)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d109      	bne.n	8006fd6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006fc2:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <inc_lock+0x118>)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	4413      	add	r3, r2
 8006fca:	3308      	adds	r3, #8
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d006      	beq.n	8006fe4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d9dc      	bls.n	8006f9c <inc_lock+0x10>
 8006fe2:	e000      	b.n	8006fe6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006fe4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d132      	bne.n	8007052 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e002      	b.n	8006ff8 <inc_lock+0x6c>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d806      	bhi.n	800700c <inc_lock+0x80>
 8006ffe:	4a29      	ldr	r2, [pc, #164]	; (80070a4 <inc_lock+0x118>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4413      	add	r3, r2
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1f2      	bne.n	8006ff2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d101      	bne.n	8007016 <inc_lock+0x8a>
 8007012:	2300      	movs	r3, #0
 8007014:	e040      	b.n	8007098 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	4922      	ldr	r1, [pc, #136]	; (80070a4 <inc_lock+0x118>)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	440b      	add	r3, r1
 8007022:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	491e      	ldr	r1, [pc, #120]	; (80070a4 <inc_lock+0x118>)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	011b      	lsls	r3, r3, #4
 800702e:	440b      	add	r3, r1
 8007030:	3304      	adds	r3, #4
 8007032:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	491a      	ldr	r1, [pc, #104]	; (80070a4 <inc_lock+0x118>)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	011b      	lsls	r3, r3, #4
 800703e:	440b      	add	r3, r1
 8007040:	3308      	adds	r3, #8
 8007042:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <inc_lock+0x118>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	4413      	add	r3, r2
 800704c:	330c      	adds	r3, #12
 800704e:	2200      	movs	r2, #0
 8007050:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <inc_lock+0xe0>
 8007058:	4a12      	ldr	r2, [pc, #72]	; (80070a4 <inc_lock+0x118>)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	4413      	add	r3, r2
 8007060:	330c      	adds	r3, #12
 8007062:	881b      	ldrh	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <inc_lock+0xe0>
 8007068:	2300      	movs	r3, #0
 800706a:	e015      	b.n	8007098 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d108      	bne.n	8007084 <inc_lock+0xf8>
 8007072:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <inc_lock+0x118>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	4413      	add	r3, r2
 800707a:	330c      	adds	r3, #12
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	e001      	b.n	8007088 <inc_lock+0xfc>
 8007084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007088:	4906      	ldr	r1, [pc, #24]	; (80070a4 <inc_lock+0x118>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	440b      	add	r3, r1
 8007090:	330c      	adds	r3, #12
 8007092:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	3301      	adds	r3, #1
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000013c 	.word	0x2000013c

080070a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d825      	bhi.n	8007108 <dec_lock+0x60>
		n = Files[i].ctr;
 80070bc:	4a16      	ldr	r2, [pc, #88]	; (8007118 <dec_lock+0x70>)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	4413      	add	r3, r2
 80070c4:	330c      	adds	r3, #12
 80070c6:	881b      	ldrh	r3, [r3, #0]
 80070c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070ca:	89fb      	ldrh	r3, [r7, #14]
 80070cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d0:	d101      	bne.n	80070d6 <dec_lock+0x2e>
 80070d2:	2300      	movs	r3, #0
 80070d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80070d6:	89fb      	ldrh	r3, [r7, #14]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <dec_lock+0x3a>
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	3b01      	subs	r3, #1
 80070e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80070e2:	4a0d      	ldr	r2, [pc, #52]	; (8007118 <dec_lock+0x70>)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	4413      	add	r3, r2
 80070ea:	330c      	adds	r3, #12
 80070ec:	89fa      	ldrh	r2, [r7, #14]
 80070ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d105      	bne.n	8007102 <dec_lock+0x5a>
 80070f6:	4a08      	ldr	r2, [pc, #32]	; (8007118 <dec_lock+0x70>)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4413      	add	r3, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	737b      	strb	r3, [r7, #13]
 8007106:	e001      	b.n	800710c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007108:	2302      	movs	r3, #2
 800710a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800710c:	7b7b      	ldrb	r3, [r7, #13]
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr
 8007118:	2000013c 	.word	0x2000013c

0800711c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e010      	b.n	800714c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800712a:	4a0d      	ldr	r2, [pc, #52]	; (8007160 <clear_lock+0x44>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	4413      	add	r3, r2
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	429a      	cmp	r2, r3
 8007138:	d105      	bne.n	8007146 <clear_lock+0x2a>
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <clear_lock+0x44>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	4413      	add	r3, r2
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d9eb      	bls.n	800712a <clear_lock+0xe>
	}
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	2000013c 	.word	0x2000013c

08007164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	78db      	ldrb	r3, [r3, #3]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d034      	beq.n	80071e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800717c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7858      	ldrb	r0, [r3, #1]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007188:	2301      	movs	r3, #1
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	f7ff fd4e 	bl	8006c2c <disk_write>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
 800719a:	e022      	b.n	80071e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d217      	bcs.n	80071e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	789b      	ldrb	r3, [r3, #2]
 80071b6:	613b      	str	r3, [r7, #16]
 80071b8:	e010      	b.n	80071dc <sync_window+0x78>
					wsect += fs->fsize;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7858      	ldrb	r0, [r3, #1]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80071ce:	2301      	movs	r3, #1
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	f7ff fd2b 	bl	8006c2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3b01      	subs	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d8eb      	bhi.n	80071ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d01b      	beq.n	800723c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7ff ffad 	bl	8007164 <sync_window>
 800720a:	4603      	mov	r3, r0
 800720c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d113      	bne.n	800723c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	7858      	ldrb	r0, [r3, #1]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800721e:	2301      	movs	r3, #1
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	f7ff fce3 	bl	8006bec <disk_read>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
 8007230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007232:	2301      	movs	r3, #1
 8007234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff87 	bl	8007164 <sync_window>
 8007256:	4603      	mov	r3, r0
 8007258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d159      	bne.n	8007314 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d149      	bne.n	80072fc <sync_fs+0xb4>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	791b      	ldrb	r3, [r3, #4]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d145      	bne.n	80072fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	899b      	ldrh	r3, [r3, #12]
 800727a:	461a      	mov	r2, r3
 800727c:	2100      	movs	r1, #0
 800727e:	f7ff fdb1 	bl	8006de4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3338      	adds	r3, #56	; 0x38
 8007286:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800728a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fd43 	bl	8006d1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3338      	adds	r3, #56	; 0x38
 8007298:	4921      	ldr	r1, [pc, #132]	; (8007320 <sync_fs+0xd8>)
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fd57 	bl	8006d4e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3338      	adds	r3, #56	; 0x38
 80072a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072a8:	491e      	ldr	r1, [pc, #120]	; (8007324 <sync_fs+0xdc>)
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fd4f 	bl	8006d4e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3338      	adds	r3, #56	; 0x38
 80072b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f7ff fd45 	bl	8006d4e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3338      	adds	r3, #56	; 0x38
 80072c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7ff fd3b 	bl	8006d4e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7858      	ldrb	r0, [r3, #1]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072f0:	2301      	movs	r3, #1
 80072f2:	f7ff fc9b 	bl	8006c2c <disk_write>
			fs->fsi_flag = 0;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2200      	movs	r2, #0
 8007302:	2100      	movs	r1, #0
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff fcb1 	bl	8006c6c <disk_ioctl>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <sync_fs+0xcc>
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	41615252 	.word	0x41615252
 8007324:	61417272 	.word	0x61417272

08007328 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	3b02      	subs	r3, #2
 8007336:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	3b02      	subs	r3, #2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d301      	bcc.n	8007348 <clust2sect+0x20>
 8007344:	2300      	movs	r3, #0
 8007346:	e008      	b.n	800735a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	895b      	ldrh	r3, [r3, #10]
 800734c:	461a      	mov	r2, r3
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	fb03 f202 	mul.w	r2, r3, r2
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	4413      	add	r3, r2
}
 800735a:	4618      	mov	r0, r3
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d904      	bls.n	8007384 <get_fat+0x20>
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d302      	bcc.n	800738a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e0bb      	b.n	8007502 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800738a:	f04f 33ff 	mov.w	r3, #4294967295
 800738e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b03      	cmp	r3, #3
 8007396:	f000 8083 	beq.w	80074a0 <get_fat+0x13c>
 800739a:	2b03      	cmp	r3, #3
 800739c:	f300 80a7 	bgt.w	80074ee <get_fat+0x18a>
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d002      	beq.n	80073aa <get_fat+0x46>
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d056      	beq.n	8007456 <get_fat+0xf2>
 80073a8:	e0a1      	b.n	80074ee <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	899b      	ldrh	r3, [r3, #12]
 80073c0:	4619      	mov	r1, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073c8:	4413      	add	r3, r2
 80073ca:	4619      	mov	r1, r3
 80073cc:	6938      	ldr	r0, [r7, #16]
 80073ce:	f7ff ff0d 	bl	80071ec <move_window>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f040 808d 	bne.w	80074f4 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1c5a      	adds	r2, r3, #1
 80073de:	60fa      	str	r2, [r7, #12]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	8992      	ldrh	r2, [r2, #12]
 80073e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073e8:	fb02 f201 	mul.w	r2, r2, r1
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80073f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	899b      	ldrh	r3, [r3, #12]
 8007400:	4619      	mov	r1, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	fbb3 f3f1 	udiv	r3, r3, r1
 8007408:	4413      	add	r3, r2
 800740a:	4619      	mov	r1, r3
 800740c:	6938      	ldr	r0, [r7, #16]
 800740e:	f7ff feed 	bl	80071ec <move_window>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d16f      	bne.n	80074f8 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	899b      	ldrh	r3, [r3, #12]
 800741c:	461a      	mov	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	fbb3 f1f2 	udiv	r1, r3, r2
 8007424:	fb02 f201 	mul.w	r2, r2, r1
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4413      	add	r3, r2
 800742e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4313      	orrs	r3, r2
 800743a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <get_fat+0xe8>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	e002      	b.n	8007452 <get_fat+0xee>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007452:	617b      	str	r3, [r7, #20]
			break;
 8007454:	e055      	b.n	8007502 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	899b      	ldrh	r3, [r3, #12]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	fbb3 f3f1 	udiv	r3, r3, r1
 800746a:	4413      	add	r3, r2
 800746c:	4619      	mov	r1, r3
 800746e:	6938      	ldr	r0, [r7, #16]
 8007470:	f7ff febc 	bl	80071ec <move_window>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d140      	bne.n	80074fc <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	8992      	ldrh	r2, [r2, #12]
 8007488:	fbb3 f0f2 	udiv	r0, r3, r2
 800748c:	fb02 f200 	mul.w	r2, r2, r0
 8007490:	1a9b      	subs	r3, r3, r2
 8007492:	440b      	add	r3, r1
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fc07 	bl	8006ca8 <ld_word>
 800749a:	4603      	mov	r3, r0
 800749c:	617b      	str	r3, [r7, #20]
			break;
 800749e:	e030      	b.n	8007502 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	899b      	ldrh	r3, [r3, #12]
 80074a8:	089b      	lsrs	r3, r3, #2
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4619      	mov	r1, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80074b4:	4413      	add	r3, r2
 80074b6:	4619      	mov	r1, r3
 80074b8:	6938      	ldr	r0, [r7, #16]
 80074ba:	f7ff fe97 	bl	80071ec <move_window>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11d      	bne.n	8007500 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	8992      	ldrh	r2, [r2, #12]
 80074d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80074d6:	fb02 f200 	mul.w	r2, r2, r0
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	440b      	add	r3, r1
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fbf9 	bl	8006cd6 <ld_dword>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074ea:	617b      	str	r3, [r7, #20]
			break;
 80074ec:	e009      	b.n	8007502 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e006      	b.n	8007502 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f4:	bf00      	nop
 80074f6:	e004      	b.n	8007502 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074f8:	bf00      	nop
 80074fa:	e002      	b.n	8007502 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007500:	bf00      	nop
		}
	}

	return val;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b089      	sub	sp, #36	; 0x24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007518:	2302      	movs	r3, #2
 800751a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b01      	cmp	r3, #1
 8007520:	f240 8102 	bls.w	8007728 <put_fat+0x21c>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	429a      	cmp	r2, r3
 800752c:	f080 80fc 	bcs.w	8007728 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b03      	cmp	r3, #3
 8007536:	f000 80b6 	beq.w	80076a6 <put_fat+0x19a>
 800753a:	2b03      	cmp	r3, #3
 800753c:	f300 80fd 	bgt.w	800773a <put_fat+0x22e>
 8007540:	2b01      	cmp	r3, #1
 8007542:	d003      	beq.n	800754c <put_fat+0x40>
 8007544:	2b02      	cmp	r3, #2
 8007546:	f000 8083 	beq.w	8007650 <put_fat+0x144>
 800754a:	e0f6      	b.n	800773a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61bb      	str	r3, [r7, #24]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	4413      	add	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	899b      	ldrh	r3, [r3, #12]
 8007562:	4619      	mov	r1, r3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	fbb3 f3f1 	udiv	r3, r3, r1
 800756a:	4413      	add	r3, r2
 800756c:	4619      	mov	r1, r3
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f7ff fe3c 	bl	80071ec <move_window>
 8007574:	4603      	mov	r3, r0
 8007576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007578:	7ffb      	ldrb	r3, [r7, #31]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 80d6 	bne.w	800772c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	61ba      	str	r2, [r7, #24]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	8992      	ldrh	r2, [r2, #12]
 8007590:	fbb3 f0f2 	udiv	r0, r3, r2
 8007594:	fb02 f200 	mul.w	r2, r2, r0
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	440b      	add	r3, r1
 800759c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <put_fat+0xb8>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b25b      	sxtb	r3, r3
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	b25a      	sxtb	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	b25b      	sxtb	r3, r3
 80075bc:	4313      	orrs	r3, r2
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	e001      	b.n	80075c8 <put_fat+0xbc>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	4619      	mov	r1, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	fbb3 f3f1 	udiv	r3, r3, r1
 80075e2:	4413      	add	r3, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fe00 	bl	80071ec <move_window>
 80075ec:	4603      	mov	r3, r0
 80075ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075f0:	7ffb      	ldrb	r3, [r7, #31]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 809c 	bne.w	8007730 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	899b      	ldrh	r3, [r3, #12]
 8007602:	461a      	mov	r2, r3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	fbb3 f0f2 	udiv	r0, r3, r2
 800760a:	fb02 f200 	mul.w	r2, r2, r0
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	440b      	add	r3, r1
 8007612:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <put_fat+0x11a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	091b      	lsrs	r3, r3, #4
 8007622:	b2db      	uxtb	r3, r3
 8007624:	e00e      	b.n	8007644 <put_fat+0x138>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b25b      	sxtb	r3, r3
 800762c:	f023 030f 	bic.w	r3, r3, #15
 8007630:	b25a      	sxtb	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	b25b      	sxtb	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b25b      	sxtb	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	70da      	strb	r2, [r3, #3]
			break;
 800764e:	e074      	b.n	800773a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	899b      	ldrh	r3, [r3, #12]
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	b29b      	uxth	r3, r3
 800765c:	4619      	mov	r1, r3
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	fbb3 f3f1 	udiv	r3, r3, r1
 8007664:	4413      	add	r3, r2
 8007666:	4619      	mov	r1, r3
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff fdbf 	bl	80071ec <move_window>
 800766e:	4603      	mov	r3, r0
 8007670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007672:	7ffb      	ldrb	r3, [r7, #31]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d15d      	bne.n	8007734 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	8992      	ldrh	r2, [r2, #12]
 8007686:	fbb3 f0f2 	udiv	r0, r3, r2
 800768a:	fb02 f200 	mul.w	r2, r2, r0
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	440b      	add	r3, r1
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	b292      	uxth	r2, r2
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fb3e 	bl	8006d1a <st_word>
			fs->wflag = 1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	70da      	strb	r2, [r3, #3]
			break;
 80076a4:	e049      	b.n	800773a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	899b      	ldrh	r3, [r3, #12]
 80076ae:	089b      	lsrs	r3, r3, #2
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4619      	mov	r1, r3
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076ba:	4413      	add	r3, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f7ff fd94 	bl	80071ec <move_window>
 80076c4:	4603      	mov	r3, r0
 80076c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c8:	7ffb      	ldrb	r3, [r7, #31]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d134      	bne.n	8007738 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	8992      	ldrh	r2, [r2, #12]
 80076e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80076e6:	fb02 f200 	mul.w	r2, r2, r0
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	440b      	add	r3, r1
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff faf1 	bl	8006cd6 <ld_dword>
 80076f4:	4603      	mov	r3, r0
 80076f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076fa:	4323      	orrs	r3, r4
 80076fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	8992      	ldrh	r2, [r2, #12]
 800770c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007710:	fb02 f200 	mul.w	r2, r2, r0
 8007714:	1a9b      	subs	r3, r3, r2
 8007716:	440b      	add	r3, r1
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fb17 	bl	8006d4e <st_dword>
			fs->wflag = 1;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	70da      	strb	r2, [r3, #3]
			break;
 8007726:	e008      	b.n	800773a <put_fat+0x22e>
		}
	}
 8007728:	bf00      	nop
 800772a:	e006      	b.n	800773a <put_fat+0x22e>
			if (res != FR_OK) break;
 800772c:	bf00      	nop
 800772e:	e004      	b.n	800773a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007730:	bf00      	nop
 8007732:	e002      	b.n	800773a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007734:	bf00      	nop
 8007736:	e000      	b.n	800773a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007738:	bf00      	nop
	return res;
 800773a:	7ffb      	ldrb	r3, [r7, #31]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3724      	adds	r7, #36	; 0x24
 8007740:	46bd      	mov	sp, r7
 8007742:	bd90      	pop	{r4, r7, pc}

08007744 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b088      	sub	sp, #32
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d904      	bls.n	800776a <remove_chain+0x26>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d301      	bcc.n	800776e <remove_chain+0x2a>
 800776a:	2302      	movs	r3, #2
 800776c:	e04b      	b.n	8007806 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007774:	f04f 32ff 	mov.w	r2, #4294967295
 8007778:	6879      	ldr	r1, [r7, #4]
 800777a:	69b8      	ldr	r0, [r7, #24]
 800777c:	f7ff fec6 	bl	800750c <put_fat>
 8007780:	4603      	mov	r3, r0
 8007782:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <remove_chain+0x4a>
 800778a:	7ffb      	ldrb	r3, [r7, #31]
 800778c:	e03b      	b.n	8007806 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f7ff fde7 	bl	8007364 <get_fat>
 8007796:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d031      	beq.n	8007802 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <remove_chain+0x64>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e02e      	b.n	8007806 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ae:	d101      	bne.n	80077b4 <remove_chain+0x70>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e028      	b.n	8007806 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80077b4:	2200      	movs	r2, #0
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	69b8      	ldr	r0, [r7, #24]
 80077ba:	f7ff fea7 	bl	800750c <put_fat>
 80077be:	4603      	mov	r3, r0
 80077c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <remove_chain+0x88>
 80077c8:	7ffb      	ldrb	r3, [r7, #31]
 80077ca:	e01c      	b.n	8007806 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	3b02      	subs	r3, #2
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d20b      	bcs.n	80077f2 <remove_chain+0xae>
			fs->free_clst++;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	1c5a      	adds	r2, r3, #1
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	791b      	ldrb	r3, [r3, #4]
 80077e8:	f043 0301 	orr.w	r3, r3, #1
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d3c6      	bcc.n	800778e <remove_chain+0x4a>
 8007800:	e000      	b.n	8007804 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007802:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b088      	sub	sp, #32
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <create_chain+0x2c>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	429a      	cmp	r2, r3
 8007838:	d31b      	bcc.n	8007872 <create_chain+0x64>
 800783a:	2301      	movs	r3, #1
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	e018      	b.n	8007872 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff fd8e 	bl	8007364 <get_fat>
 8007848:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d801      	bhi.n	8007854 <create_chain+0x46>
 8007850:	2301      	movs	r3, #1
 8007852:	e070      	b.n	8007936 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d101      	bne.n	8007860 <create_chain+0x52>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	e06a      	b.n	8007936 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	429a      	cmp	r2, r3
 8007868:	d201      	bcs.n	800786e <create_chain+0x60>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	e063      	b.n	8007936 <create_chain+0x128>
		scl = clst;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3301      	adds	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	429a      	cmp	r2, r3
 8007884:	d307      	bcc.n	8007896 <create_chain+0x88>
				ncl = 2;
 8007886:	2302      	movs	r3, #2
 8007888:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d901      	bls.n	8007896 <create_chain+0x88>
 8007892:	2300      	movs	r3, #0
 8007894:	e04f      	b.n	8007936 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007896:	69f9      	ldr	r1, [r7, #28]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fd63 	bl	8007364 <get_fat>
 800789e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00e      	beq.n	80078c4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d003      	beq.n	80078b4 <create_chain+0xa6>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d101      	bne.n	80078b8 <create_chain+0xaa>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	e03e      	b.n	8007936 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d1da      	bne.n	8007876 <create_chain+0x68>
 80078c0:	2300      	movs	r3, #0
 80078c2:	e038      	b.n	8007936 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80078c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	69f9      	ldr	r1, [r7, #28]
 80078cc:	6938      	ldr	r0, [r7, #16]
 80078ce:	f7ff fe1d 	bl	800750c <put_fat>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <create_chain+0xe2>
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d006      	beq.n	80078f0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6938      	ldr	r0, [r7, #16]
 80078e8:	f7ff fe10 	bl	800750c <put_fat>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d116      	bne.n	8007924 <create_chain+0x116>
		fs->last_clst = ncl;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	69fa      	ldr	r2, [r7, #28]
 80078fa:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	3b02      	subs	r3, #2
 8007906:	429a      	cmp	r2, r3
 8007908:	d804      	bhi.n	8007914 <create_chain+0x106>
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	1e5a      	subs	r2, r3, #1
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	791b      	ldrb	r3, [r3, #4]
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	711a      	strb	r2, [r3, #4]
 8007922:	e007      	b.n	8007934 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	2b01      	cmp	r3, #1
 8007928:	d102      	bne.n	8007930 <create_chain+0x122>
 800792a:	f04f 33ff 	mov.w	r3, #4294967295
 800792e:	e000      	b.n	8007932 <create_chain+0x124>
 8007930:	2301      	movs	r3, #1
 8007932:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007934:	69fb      	ldr	r3, [r7, #28]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3720      	adds	r7, #32
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800793e:	b480      	push	{r7}
 8007940:	b087      	sub	sp, #28
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	3304      	adds	r3, #4
 8007954:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	899b      	ldrh	r3, [r3, #12]
 800795a:	461a      	mov	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	8952      	ldrh	r2, [r2, #10]
 8007966:	fbb3 f3f2 	udiv	r3, r3, r2
 800796a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	1d1a      	adds	r2, r3, #4
 8007970:	613a      	str	r2, [r7, #16]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <clmt_clust+0x42>
 800797c:	2300      	movs	r3, #0
 800797e:	e010      	b.n	80079a2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	429a      	cmp	r2, r3
 8007986:	d307      	bcc.n	8007998 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	3304      	adds	r3, #4
 8007994:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007996:	e7e9      	b.n	800796c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007998:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	4413      	add	r3, r2
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079c2:	d204      	bcs.n	80079ce <dir_sdi+0x22>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80079ce:	2302      	movs	r3, #2
 80079d0:	e071      	b.n	8007ab6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	683a      	ldr	r2, [r7, #0]
 80079d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <dir_sdi+0x46>
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d902      	bls.n	80079f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	8912      	ldrh	r2, [r2, #8]
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d301      	bcc.n	8007a08 <dir_sdi+0x5c>
 8007a04:	2302      	movs	r3, #2
 8007a06:	e056      	b.n	8007ab6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	61da      	str	r2, [r3, #28]
 8007a10:	e02d      	b.n	8007a6e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	895b      	ldrh	r3, [r3, #10]
 8007a16:	461a      	mov	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	899b      	ldrh	r3, [r3, #12]
 8007a1c:	fb03 f302 	mul.w	r3, r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a22:	e019      	b.n	8007a58 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fc9b 	bl	8007364 <get_fat>
 8007a2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d101      	bne.n	8007a3c <dir_sdi+0x90>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e03c      	b.n	8007ab6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d904      	bls.n	8007a4c <dir_sdi+0xa0>
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d301      	bcc.n	8007a50 <dir_sdi+0xa4>
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e032      	b.n	8007ab6 <dir_sdi+0x10a>
			ofs -= csz;
 8007a50:	683a      	ldr	r2, [r7, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d2e1      	bcs.n	8007a24 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	6938      	ldr	r0, [r7, #16]
 8007a64:	f7ff fc60 	bl	8007328 <clust2sect>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <dir_sdi+0xd4>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e01a      	b.n	8007ab6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	899b      	ldrh	r3, [r3, #12]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a90:	441a      	add	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	899b      	ldrh	r3, [r3, #12]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007aa8:	fb02 f200 	mul.w	r2, r2, r0
 8007aac:	1a9b      	subs	r3, r3, r2
 8007aae:	18ca      	adds	r2, r1, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	3320      	adds	r3, #32
 8007ad4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <dir_next+0x28>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ae4:	d301      	bcc.n	8007aea <dir_next+0x2c>
 8007ae6:	2304      	movs	r3, #4
 8007ae8:	e0bb      	b.n	8007c62 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	899b      	ldrh	r3, [r3, #12]
 8007aee:	461a      	mov	r2, r3
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007af6:	fb02 f201 	mul.w	r2, r2, r1
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f040 809d 	bne.w	8007c3c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	8912      	ldrh	r2, [r2, #8]
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	f0c0 808d 	bcc.w	8007c3c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	61da      	str	r2, [r3, #28]
 8007b28:	2304      	movs	r3, #4
 8007b2a:	e09a      	b.n	8007c62 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	899b      	ldrh	r3, [r3, #12]
 8007b30:	461a      	mov	r2, r3
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	8952      	ldrh	r2, [r2, #10]
 8007b3c:	3a01      	subs	r2, #1
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17b      	bne.n	8007c3c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7ff fc09 	bl	8007364 <get_fat>
 8007b52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d801      	bhi.n	8007b5e <dir_next+0xa0>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e081      	b.n	8007c62 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d101      	bne.n	8007b6a <dir_next+0xac>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e07b      	b.n	8007c62 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d359      	bcc.n	8007c28 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	61da      	str	r2, [r3, #28]
 8007b80:	2304      	movs	r3, #4
 8007b82:	e06e      	b.n	8007c62 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7ff fe3e 	bl	800780e <create_chain>
 8007b92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <dir_next+0xe0>
 8007b9a:	2307      	movs	r3, #7
 8007b9c:	e061      	b.n	8007c62 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <dir_next+0xea>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e05c      	b.n	8007c62 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	d101      	bne.n	8007bb4 <dir_next+0xf6>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e056      	b.n	8007c62 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff fad5 	bl	8007164 <sync_window>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <dir_next+0x106>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e04e      	b.n	8007c62 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	899b      	ldrh	r3, [r3, #12]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	2100      	movs	r1, #0
 8007bd2:	f7ff f907 	bl	8006de4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	613b      	str	r3, [r7, #16]
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff fba3 	bl	8007328 <clust2sect>
 8007be2:	4602      	mov	r2, r0
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	635a      	str	r2, [r3, #52]	; 0x34
 8007be8:	e012      	b.n	8007c10 <dir_next+0x152>
						fs->wflag = 1;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff fab7 	bl	8007164 <sync_window>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <dir_next+0x142>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e030      	b.n	8007c62 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3301      	adds	r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	895b      	ldrh	r3, [r3, #10]
 8007c14:	461a      	mov	r2, r3
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d3e6      	bcc.n	8007bea <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c2e:	6979      	ldr	r1, [r7, #20]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff fb79 	bl	8007328 <clust2sect>
 8007c36:	4602      	mov	r2, r0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	899b      	ldrh	r3, [r3, #12]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c54:	fb02 f200 	mul.w	r2, r2, r0
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	18ca      	adds	r2, r1, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3718      	adds	r7, #24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b086      	sub	sp, #24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7ff fe95 	bl	80079ac <dir_sdi>
 8007c82:	4603      	mov	r3, r0
 8007c84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d12b      	bne.n	8007ce4 <dir_alloc+0x7a>
		n = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	4619      	mov	r1, r3
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff faa8 	bl	80071ec <move_window>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d11d      	bne.n	8007ce2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2be5      	cmp	r3, #229	; 0xe5
 8007cae:	d004      	beq.n	8007cba <dir_alloc+0x50>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	613b      	str	r3, [r7, #16]
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d102      	bne.n	8007cce <dir_alloc+0x64>
 8007cc8:	e00c      	b.n	8007ce4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007cca:	2300      	movs	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007cce:	2101      	movs	r1, #1
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff fef4 	bl	8007abe <dir_next>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0d7      	beq.n	8007c90 <dir_alloc+0x26>
 8007ce0:	e000      	b.n	8007ce4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007ce2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	d101      	bne.n	8007cee <dir_alloc+0x84>
 8007cea:	2307      	movs	r3, #7
 8007cec:	75fb      	strb	r3, [r7, #23]
	return res;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	331a      	adds	r3, #26
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe ffce 	bl	8006ca8 <ld_word>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d109      	bne.n	8007d2c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe ffc3 	bl	8006ca8 <ld_word>
 8007d22:	4603      	mov	r3, r0
 8007d24:	041b      	lsls	r3, r3, #16
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	331a      	adds	r3, #26
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	b292      	uxth	r2, r2
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe ffe4 	bl	8006d1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d109      	bne.n	8007d6e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f103 0214 	add.w	r2, r3, #20
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7fe ffd6 	bl	8006d1a <st_word>
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	331a      	adds	r3, #26
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe ff8e 	bl	8006ca8 <ld_word>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <cmp_lfn+0x1e>
 8007d92:	2300      	movs	r3, #0
 8007d94:	e059      	b.n	8007e4a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d9e:	1e5a      	subs	r2, r3, #1
 8007da0:	4613      	mov	r3, r2
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007dac:	2301      	movs	r3, #1
 8007dae:	81fb      	strh	r3, [r7, #14]
 8007db0:	2300      	movs	r3, #0
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	e033      	b.n	8007e1e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007db6:	4a27      	ldr	r2, [pc, #156]	; (8007e54 <cmp_lfn+0xdc>)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe ff6f 	bl	8006ca8 <ld_word>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007dce:	89fb      	ldrh	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01a      	beq.n	8007e0a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2bfe      	cmp	r3, #254	; 0xfe
 8007dd8:	d812      	bhi.n	8007e00 <cmp_lfn+0x88>
 8007dda:	89bb      	ldrh	r3, [r7, #12]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f002 fa2d 	bl	800a23c <ff_wtoupper>
 8007de2:	4603      	mov	r3, r0
 8007de4:	461c      	mov	r4, r3
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	617a      	str	r2, [r7, #20]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	4413      	add	r3, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f002 fa21 	bl	800a23c <ff_wtoupper>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d001      	beq.n	8007e04 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007e00:	2300      	movs	r3, #0
 8007e02:	e022      	b.n	8007e4a <cmp_lfn+0xd2>
			}
			wc = uc;
 8007e04:	89bb      	ldrh	r3, [r7, #12]
 8007e06:	81fb      	strh	r3, [r7, #14]
 8007e08:	e006      	b.n	8007e18 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007e0a:	89bb      	ldrh	r3, [r7, #12]
 8007e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d001      	beq.n	8007e18 <cmp_lfn+0xa0>
 8007e14:	2300      	movs	r3, #0
 8007e16:	e018      	b.n	8007e4a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	613b      	str	r3, [r7, #16]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d9c8      	bls.n	8007db6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <cmp_lfn+0xd0>
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <cmp_lfn+0xd0>
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <cmp_lfn+0xd0>
 8007e44:	2300      	movs	r3, #0
 8007e46:	e000      	b.n	8007e4a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007e48:	2301      	movs	r3, #1
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd90      	pop	{r4, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	0800ad78 	.word	0x0800ad78

08007e58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4611      	mov	r1, r2
 8007e64:	461a      	mov	r2, r3
 8007e66:	460b      	mov	r3, r1
 8007e68:	71fb      	strb	r3, [r7, #7]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	330d      	adds	r3, #13
 8007e72:	79ba      	ldrb	r2, [r7, #6]
 8007e74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	330b      	adds	r3, #11
 8007e7a:	220f      	movs	r2, #15
 8007e7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	330c      	adds	r3, #12
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	331a      	adds	r3, #26
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe ff44 	bl	8006d1a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007e92:	79fb      	ldrb	r3, [r7, #7]
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	4613      	mov	r3, r2
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	82fb      	strh	r3, [r7, #22]
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007eaa:	8afb      	ldrh	r3, [r7, #22]
 8007eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <put_lfn+0x6c>
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	61fa      	str	r2, [r7, #28]
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007ec4:	4a17      	ldr	r2, [pc, #92]	; (8007f24 <put_lfn+0xcc>)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	4413      	add	r3, r2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	8afa      	ldrh	r2, [r7, #22]
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe ff1f 	bl	8006d1a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007edc:	8afb      	ldrh	r3, [r7, #22]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <put_lfn+0x90>
 8007ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ee6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61bb      	str	r3, [r7, #24]
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b0c      	cmp	r3, #12
 8007ef2:	d9da      	bls.n	8007eaa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007ef4:	8afb      	ldrh	r3, [r7, #22]
 8007ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d006      	beq.n	8007f0c <put_lfn+0xb4>
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <put_lfn+0xbc>
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	79fa      	ldrb	r2, [r7, #7]
 8007f18:	701a      	strb	r2, [r3, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	0800ad78 	.word	0x0800ad78

08007f28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08c      	sub	sp, #48	; 0x30
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007f36:	220b      	movs	r2, #11
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fe ff32 	bl	8006da4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d92b      	bls.n	8007f9e <gen_numname+0x76>
		sr = seq;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007f4a:	e022      	b.n	8007f92 <gen_numname+0x6a>
			wc = *lfn++;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	1c9a      	adds	r2, r3, #2
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007f56:	2300      	movs	r3, #0
 8007f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f5a:	e017      	b.n	8007f8c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	005a      	lsls	r2, r3, #1
 8007f60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007f6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d005      	beq.n	8007f86 <gen_numname+0x5e>
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007f80:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007f84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	3301      	adds	r3, #1
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	d9e4      	bls.n	8007f5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1d8      	bne.n	8007f4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007f9e:	2307      	movs	r3, #7
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	3330      	adds	r3, #48	; 0x30
 8007fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fb6:	2b39      	cmp	r3, #57	; 0x39
 8007fb8:	d904      	bls.n	8007fc4 <gen_numname+0x9c>
 8007fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007fbe:	3307      	adds	r3, #7
 8007fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	1e5a      	subs	r2, r3, #1
 8007fc8:	62ba      	str	r2, [r7, #40]	; 0x28
 8007fca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007fce:	4413      	add	r3, r2
 8007fd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007fd4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	091b      	lsrs	r3, r3, #4
 8007fdc:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1de      	bne.n	8007fa2 <gen_numname+0x7a>
	ns[i] = '~';
 8007fe4:	f107 0214 	add.w	r2, r7, #20
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	4413      	add	r3, r2
 8007fec:	227e      	movs	r2, #126	; 0x7e
 8007fee:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff4:	e002      	b.n	8007ffc <gen_numname+0xd4>
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	429a      	cmp	r2, r3
 8008002:	d205      	bcs.n	8008010 <gen_numname+0xe8>
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	4413      	add	r3, r2
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2b20      	cmp	r3, #32
 800800e:	d1f2      	bne.n	8007ff6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008012:	2b07      	cmp	r3, #7
 8008014:	d808      	bhi.n	8008028 <gen_numname+0x100>
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	62ba      	str	r2, [r7, #40]	; 0x28
 800801c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008020:	4413      	add	r3, r2
 8008022:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008026:	e000      	b.n	800802a <gen_numname+0x102>
 8008028:	2120      	movs	r1, #32
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	627a      	str	r2, [r7, #36]	; 0x24
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	460a      	mov	r2, r1
 8008036:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	2b07      	cmp	r3, #7
 800803c:	d9e8      	bls.n	8008010 <gen_numname+0xe8>
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	3730      	adds	r7, #48	; 0x30
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008054:	230b      	movs	r3, #11
 8008056:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
 800805a:	b2da      	uxtb	r2, r3
 800805c:	0852      	lsrs	r2, r2, #1
 800805e:	01db      	lsls	r3, r3, #7
 8008060:	4313      	orrs	r3, r2
 8008062:	b2da      	uxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	1c59      	adds	r1, r3, #1
 8008068:	6079      	str	r1, [r7, #4]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4413      	add	r3, r2
 800806e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	3b01      	subs	r3, #1
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1ed      	bne.n	8008058 <sum_sfn+0x10>
	return sum;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008096:	2100      	movs	r1, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fc87 	bl	80079ac <dir_sdi>
 800809e:	4603      	mov	r3, r0
 80080a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <dir_find+0x24>
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	e0a9      	b.n	8008200 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080ac:	23ff      	movs	r3, #255	; 0xff
 80080ae:	753b      	strb	r3, [r7, #20]
 80080b0:	7d3b      	ldrb	r3, [r7, #20]
 80080b2:	757b      	strb	r3, [r7, #21]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6938      	ldr	r0, [r7, #16]
 80080c4:	f7ff f892 	bl	80071ec <move_window>
 80080c8:	4603      	mov	r3, r0
 80080ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f040 8090 	bne.w	80081f4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080dc:	7dbb      	ldrb	r3, [r7, #22]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <dir_find+0x60>
 80080e2:	2304      	movs	r3, #4
 80080e4:	75fb      	strb	r3, [r7, #23]
 80080e6:	e08a      	b.n	80081fe <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a1b      	ldr	r3, [r3, #32]
 80080ec:	330b      	adds	r3, #11
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080f4:	73fb      	strb	r3, [r7, #15]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	7bfa      	ldrb	r2, [r7, #15]
 80080fa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80080fc:	7dbb      	ldrb	r3, [r7, #22]
 80080fe:	2be5      	cmp	r3, #229	; 0xe5
 8008100:	d007      	beq.n	8008112 <dir_find+0x8a>
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d009      	beq.n	8008120 <dir_find+0x98>
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b0f      	cmp	r3, #15
 8008110:	d006      	beq.n	8008120 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008112:	23ff      	movs	r3, #255	; 0xff
 8008114:	757b      	strb	r3, [r7, #21]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f04f 32ff 	mov.w	r2, #4294967295
 800811c:	631a      	str	r2, [r3, #48]	; 0x30
 800811e:	e05e      	b.n	80081de <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008120:	7bfb      	ldrb	r3, [r7, #15]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d136      	bne.n	8008194 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d154      	bne.n	80081de <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008134:	7dbb      	ldrb	r3, [r7, #22]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	7b5b      	ldrb	r3, [r3, #13]
 8008144:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008146:	7dbb      	ldrb	r3, [r7, #22]
 8008148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814c:	75bb      	strb	r3, [r7, #22]
 800814e:	7dbb      	ldrb	r3, [r7, #22]
 8008150:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695a      	ldr	r2, [r3, #20]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800815a:	7dba      	ldrb	r2, [r7, #22]
 800815c:	7d7b      	ldrb	r3, [r7, #21]
 800815e:	429a      	cmp	r2, r3
 8008160:	d115      	bne.n	800818e <dir_find+0x106>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	330d      	adds	r3, #13
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	7d3a      	ldrb	r2, [r7, #20]
 800816c:	429a      	cmp	r2, r3
 800816e:	d10e      	bne.n	800818e <dir_find+0x106>
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	691a      	ldr	r2, [r3, #16]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7ff fdfc 	bl	8007d78 <cmp_lfn>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <dir_find+0x106>
 8008186:	7d7b      	ldrb	r3, [r7, #21]
 8008188:	3b01      	subs	r3, #1
 800818a:	b2db      	uxtb	r3, r3
 800818c:	e000      	b.n	8008190 <dir_find+0x108>
 800818e:	23ff      	movs	r3, #255	; 0xff
 8008190:	757b      	strb	r3, [r7, #21]
 8008192:	e024      	b.n	80081de <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008194:	7d7b      	ldrb	r3, [r7, #21]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <dir_find+0x126>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff ff52 	bl	8008048 <sum_sfn>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	7d3b      	ldrb	r3, [r7, #20]
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d024      	beq.n	80081f8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <dir_find+0x14a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a18      	ldr	r0, [r3, #32]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3324      	adds	r3, #36	; 0x24
 80081c4:	220b      	movs	r2, #11
 80081c6:	4619      	mov	r1, r3
 80081c8:	f7fe fe26 	bl	8006e18 <mem_cmp>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d014      	beq.n	80081fc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80081d2:	23ff      	movs	r3, #255	; 0xff
 80081d4:	757b      	strb	r3, [r7, #21]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f04f 32ff 	mov.w	r2, #4294967295
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80081de:	2100      	movs	r1, #0
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff fc6c 	bl	8007abe <dir_next>
 80081e6:	4603      	mov	r3, r0
 80081e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f43f af65 	beq.w	80080bc <dir_find+0x34>
 80081f2:	e004      	b.n	80081fe <dir_find+0x176>
		if (res != FR_OK) break;
 80081f4:	bf00      	nop
 80081f6:	e002      	b.n	80081fe <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80081f8:	bf00      	nop
 80081fa:	e000      	b.n	80081fe <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80081fc:	bf00      	nop

	return res;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08c      	sub	sp, #48	; 0x30
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800821c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <dir_register+0x20>
 8008224:	2306      	movs	r3, #6
 8008226:	e0e0      	b.n	80083ea <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008228:	2300      	movs	r3, #0
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
 800822c:	e002      	b.n	8008234 <dir_register+0x2c>
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	3301      	adds	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	4413      	add	r3, r2
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1f4      	bne.n	800822e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	220c      	movs	r2, #12
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fda7 	bl	8006da4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008256:	7dfb      	ldrb	r3, [r7, #23]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d032      	beq.n	80082c6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2240      	movs	r2, #64	; 0x40
 8008264:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008268:	2301      	movs	r3, #1
 800826a:	62bb      	str	r3, [r7, #40]	; 0x28
 800826c:	e016      	b.n	800829c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	691a      	ldr	r2, [r3, #16]
 8008278:	f107 010c 	add.w	r1, r7, #12
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f7ff fe53 	bl	8007f28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff ff00 	bl	8008088 <dir_find>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800828e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008298:	3301      	adds	r3, #1
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	2b63      	cmp	r3, #99	; 0x63
 80082a0:	d9e5      	bls.n	800826e <dir_register+0x66>
 80082a2:	e000      	b.n	80082a6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80082a4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80082a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a8:	2b64      	cmp	r3, #100	; 0x64
 80082aa:	d101      	bne.n	80082b0 <dir_register+0xa8>
 80082ac:	2307      	movs	r3, #7
 80082ae:	e09c      	b.n	80083ea <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80082b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d002      	beq.n	80082be <dir_register+0xb6>
 80082b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082bc:	e095      	b.n	80083ea <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80082be:	7dfa      	ldrb	r2, [r7, #23]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <dir_register+0xd8>
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	330c      	adds	r3, #12
 80082d4:	4a47      	ldr	r2, [pc, #284]	; (80083f4 <dir_register+0x1ec>)
 80082d6:	fba2 2303 	umull	r2, r3, r2, r3
 80082da:	089b      	lsrs	r3, r3, #2
 80082dc:	3301      	adds	r3, #1
 80082de:	e000      	b.n	80082e2 <dir_register+0xda>
 80082e0:	2301      	movs	r3, #1
 80082e2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80082e4:	6a39      	ldr	r1, [r7, #32]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff fcbf 	bl	8007c6a <dir_alloc>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80082f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d148      	bne.n	800838c <dir_register+0x184>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	3b01      	subs	r3, #1
 80082fe:	623b      	str	r3, [r7, #32]
 8008300:	6a3b      	ldr	r3, [r7, #32]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d042      	beq.n	800838c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695a      	ldr	r2, [r3, #20]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	015b      	lsls	r3, r3, #5
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7ff fb4a 	bl	80079ac <dir_sdi>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800831e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008322:	2b00      	cmp	r3, #0
 8008324:	d132      	bne.n	800838c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff fe8c 	bl	8008048 <sum_sfn>
 8008330:	4603      	mov	r3, r0
 8008332:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4619      	mov	r1, r3
 800833a:	69f8      	ldr	r0, [r7, #28]
 800833c:	f7fe ff56 	bl	80071ec <move_window>
 8008340:	4603      	mov	r3, r0
 8008342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800834a:	2b00      	cmp	r3, #0
 800834c:	d11d      	bne.n	800838a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	6918      	ldr	r0, [r3, #16]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a19      	ldr	r1, [r3, #32]
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	7efb      	ldrb	r3, [r7, #27]
 800835c:	f7ff fd7c 	bl	8007e58 <put_lfn>
				fs->wflag = 1;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2201      	movs	r2, #1
 8008364:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008366:	2100      	movs	r1, #0
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7ff fba8 	bl	8007abe <dir_next>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <dir_register+0x184>
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	3b01      	subs	r3, #1
 8008380:	623b      	str	r3, [r7, #32]
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1d5      	bne.n	8008334 <dir_register+0x12c>
 8008388:	e000      	b.n	800838c <dir_register+0x184>
				if (res != FR_OK) break;
 800838a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800838c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008390:	2b00      	cmp	r3, #0
 8008392:	d128      	bne.n	80083e6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	4619      	mov	r1, r3
 800839a:	69f8      	ldr	r0, [r7, #28]
 800839c:	f7fe ff26 	bl	80071ec <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80083a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d11b      	bne.n	80083e6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2220      	movs	r2, #32
 80083b4:	2100      	movs	r1, #0
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fd14 	bl	8006de4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a18      	ldr	r0, [r3, #32]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3324      	adds	r3, #36	; 0x24
 80083c4:	220b      	movs	r2, #11
 80083c6:	4619      	mov	r1, r3
 80083c8:	f7fe fcec 	bl	8006da4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	330c      	adds	r3, #12
 80083d8:	f002 0218 	and.w	r2, r2, #24
 80083dc:	b2d2      	uxtb	r2, r2
 80083de:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	2201      	movs	r2, #1
 80083e4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80083e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3730      	adds	r7, #48	; 0x30
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	4ec4ec4f 	.word	0x4ec4ec4f

080083f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	2300      	movs	r3, #0
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	61ba      	str	r2, [r7, #24]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4413      	add	r3, r2
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008428:	2b1f      	cmp	r3, #31
 800842a:	d940      	bls.n	80084ae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800842c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800842e:	2b2f      	cmp	r3, #47	; 0x2f
 8008430:	d006      	beq.n	8008440 <create_name+0x48>
 8008432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008434:	2b5c      	cmp	r3, #92	; 0x5c
 8008436:	d110      	bne.n	800845a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008438:	e002      	b.n	8008440 <create_name+0x48>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	3301      	adds	r3, #1
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	4413      	add	r3, r2
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b2f      	cmp	r3, #47	; 0x2f
 800844a:	d0f6      	beq.n	800843a <create_name+0x42>
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	4413      	add	r3, r2
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b5c      	cmp	r3, #92	; 0x5c
 8008456:	d0f0      	beq.n	800843a <create_name+0x42>
			break;
 8008458:	e02a      	b.n	80084b0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	2bfe      	cmp	r3, #254	; 0xfe
 800845e:	d901      	bls.n	8008464 <create_name+0x6c>
 8008460:	2306      	movs	r3, #6
 8008462:	e177      	b.n	8008754 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008466:	b2db      	uxtb	r3, r3
 8008468:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800846a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800846c:	2101      	movs	r1, #1
 800846e:	4618      	mov	r0, r3
 8008470:	f001 feaa 	bl	800a1c8 <ff_convert>
 8008474:	4603      	mov	r3, r0
 8008476:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <create_name+0x8a>
 800847e:	2306      	movs	r3, #6
 8008480:	e168      	b.n	8008754 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008484:	2b7f      	cmp	r3, #127	; 0x7f
 8008486:	d809      	bhi.n	800849c <create_name+0xa4>
 8008488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800848a:	4619      	mov	r1, r3
 800848c:	48b3      	ldr	r0, [pc, #716]	; (800875c <create_name+0x364>)
 800848e:	f7fe fce9 	bl	8006e64 <chk_chr>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <create_name+0xa4>
 8008498:	2306      	movs	r3, #6
 800849a:	e15b      	b.n	8008754 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	617a      	str	r2, [r7, #20]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	4413      	add	r3, r2
 80084a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084aa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80084ac:	e7b4      	b.n	8008418 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80084ae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	441a      	add	r2, r3
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80084ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084bc:	2b1f      	cmp	r3, #31
 80084be:	d801      	bhi.n	80084c4 <create_name+0xcc>
 80084c0:	2304      	movs	r3, #4
 80084c2:	e000      	b.n	80084c6 <create_name+0xce>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80084ca:	e011      	b.n	80084f0 <create_name+0xf8>
		w = lfn[di - 1];
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80084d2:	3b01      	subs	r3, #1
 80084d4:	005b      	lsls	r3, r3, #1
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4413      	add	r3, r2
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80084de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d002      	beq.n	80084ea <create_name+0xf2>
 80084e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084e6:	2b2e      	cmp	r3, #46	; 0x2e
 80084e8:	d106      	bne.n	80084f8 <create_name+0x100>
		di--;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1ea      	bne.n	80084cc <create_name+0xd4>
 80084f6:	e000      	b.n	80084fa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80084f8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	2200      	movs	r2, #0
 8008504:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <create_name+0x118>
 800850c:	2306      	movs	r3, #6
 800850e:	e121      	b.n	8008754 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3324      	adds	r3, #36	; 0x24
 8008514:	220b      	movs	r2, #11
 8008516:	2120      	movs	r1, #32
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fc63 	bl	8006de4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800851e:	2300      	movs	r3, #0
 8008520:	61bb      	str	r3, [r7, #24]
 8008522:	e002      	b.n	800852a <create_name+0x132>
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	3301      	adds	r3, #1
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4413      	add	r3, r2
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	2b20      	cmp	r3, #32
 8008536:	d0f5      	beq.n	8008524 <create_name+0x12c>
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	2b2e      	cmp	r3, #46	; 0x2e
 8008544:	d0ee      	beq.n	8008524 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <create_name+0x168>
 800854c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008550:	f043 0303 	orr.w	r3, r3, #3
 8008554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008558:	e002      	b.n	8008560 <create_name+0x168>
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3b01      	subs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <create_name+0x182>
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800856c:	3b01      	subs	r3, #1
 800856e:	005b      	lsls	r3, r3, #1
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	881b      	ldrh	r3, [r3, #0]
 8008576:	2b2e      	cmp	r3, #46	; 0x2e
 8008578:	d1ef      	bne.n	800855a <create_name+0x162>

	i = b = 0; ni = 8;
 800857a:	2300      	movs	r3, #0
 800857c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008580:	2300      	movs	r3, #0
 8008582:	623b      	str	r3, [r7, #32]
 8008584:	2308      	movs	r3, #8
 8008586:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	61ba      	str	r2, [r7, #24]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 8090 	beq.w	80086c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80085a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	d006      	beq.n	80085b4 <create_name+0x1bc>
 80085a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085a8:	2b2e      	cmp	r3, #46	; 0x2e
 80085aa:	d10a      	bne.n	80085c2 <create_name+0x1ca>
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d006      	beq.n	80085c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80085b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b8:	f043 0303 	orr.w	r3, r3, #3
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085c0:	e07d      	b.n	80086be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80085c2:	6a3a      	ldr	r2, [r7, #32]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d203      	bcs.n	80085d2 <create_name+0x1da>
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d123      	bne.n	800861a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b0b      	cmp	r3, #11
 80085d6:	d106      	bne.n	80085e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80085d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085dc:	f043 0303 	orr.w	r3, r3, #3
 80085e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085e4:	e06f      	b.n	80086c6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d005      	beq.n	80085fa <create_name+0x202>
 80085ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085f2:	f043 0303 	orr.w	r3, r3, #3
 80085f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d860      	bhi.n	80086c4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	2308      	movs	r3, #8
 8008608:	623b      	str	r3, [r7, #32]
 800860a:	230b      	movs	r3, #11
 800860c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800860e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008618:	e051      	b.n	80086be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800861a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800861c:	2b7f      	cmp	r3, #127	; 0x7f
 800861e:	d914      	bls.n	800864a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fdcf 	bl	800a1c8 <ff_convert>
 800862a:	4603      	mov	r3, r0
 800862c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800862e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d004      	beq.n	800863e <create_name+0x246>
 8008634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008636:	3b80      	subs	r3, #128	; 0x80
 8008638:	4a49      	ldr	r2, [pc, #292]	; (8008760 <create_name+0x368>)
 800863a:	5cd3      	ldrb	r3, [r2, r3]
 800863c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800863e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008642:	f043 0302 	orr.w	r3, r3, #2
 8008646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800864a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d007      	beq.n	8008660 <create_name+0x268>
 8008650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008652:	4619      	mov	r1, r3
 8008654:	4843      	ldr	r0, [pc, #268]	; (8008764 <create_name+0x36c>)
 8008656:	f7fe fc05 	bl	8006e64 <chk_chr>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008660:	235f      	movs	r3, #95	; 0x5f
 8008662:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008668:	f043 0303 	orr.w	r3, r3, #3
 800866c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008670:	e01b      	b.n	80086aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008674:	2b40      	cmp	r3, #64	; 0x40
 8008676:	d909      	bls.n	800868c <create_name+0x294>
 8008678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800867a:	2b5a      	cmp	r3, #90	; 0x5a
 800867c:	d806      	bhi.n	800868c <create_name+0x294>
					b |= 2;
 800867e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008682:	f043 0302 	orr.w	r3, r3, #2
 8008686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800868a:	e00e      	b.n	80086aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800868c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800868e:	2b60      	cmp	r3, #96	; 0x60
 8008690:	d90b      	bls.n	80086aa <create_name+0x2b2>
 8008692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008694:	2b7a      	cmp	r3, #122	; 0x7a
 8008696:	d808      	bhi.n	80086aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008698:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a6:	3b20      	subs	r3, #32
 80086a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	1c5a      	adds	r2, r3, #1
 80086ae:	623a      	str	r2, [r7, #32]
 80086b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086b2:	b2d1      	uxtb	r1, r2
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4413      	add	r3, r2
 80086b8:	460a      	mov	r2, r1
 80086ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80086be:	e763      	b.n	8008588 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80086c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086cc:	2be5      	cmp	r3, #229	; 0xe5
 80086ce:	d103      	bne.n	80086d8 <create_name+0x2e0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2205      	movs	r2, #5
 80086d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b08      	cmp	r3, #8
 80086dc:	d104      	bne.n	80086e8 <create_name+0x2f0>
 80086de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80086e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086ec:	f003 030c 	and.w	r3, r3, #12
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d005      	beq.n	8008700 <create_name+0x308>
 80086f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	d105      	bne.n	800870c <create_name+0x314>
 8008700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008704:	f043 0302 	orr.w	r3, r3, #2
 8008708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800870c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d117      	bne.n	8008748 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800871c:	f003 0303 	and.w	r3, r3, #3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d105      	bne.n	8008730 <create_name+0x338>
 8008724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008728:	f043 0310 	orr.w	r3, r3, #16
 800872c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008734:	f003 030c 	and.w	r3, r3, #12
 8008738:	2b04      	cmp	r3, #4
 800873a:	d105      	bne.n	8008748 <create_name+0x350>
 800873c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008740:	f043 0308 	orr.w	r3, r3, #8
 8008744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800874e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008752:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	; 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	0800ac5c 	.word	0x0800ac5c
 8008760:	0800acf8 	.word	0x0800acf8
 8008764:	0800ac68 	.word	0x0800ac68

08008768 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800877c:	e002      	b.n	8008784 <follow_path+0x1c>
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b2f      	cmp	r3, #47	; 0x2f
 800878a:	d0f8      	beq.n	800877e <follow_path+0x16>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b5c      	cmp	r3, #92	; 0x5c
 8008792:	d0f4      	beq.n	800877e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b1f      	cmp	r3, #31
 80087a0:	d80a      	bhi.n	80087b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2280      	movs	r2, #128	; 0x80
 80087a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff f8fd 	bl	80079ac <dir_sdi>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
 80087b6:	e048      	b.n	800884a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087b8:	463b      	mov	r3, r7
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fe1b 	bl	80083f8 <create_name>
 80087c2:	4603      	mov	r3, r0
 80087c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d139      	bne.n	8008840 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff fc5b 	bl	8008088 <dir_find>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80087dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087e4:	7dfb      	ldrb	r3, [r7, #23]
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d12c      	bne.n	8008844 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d127      	bne.n	8008844 <follow_path+0xdc>
 80087f4:	2305      	movs	r3, #5
 80087f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80087f8:	e024      	b.n	8008844 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087fa:	7afb      	ldrb	r3, [r7, #11]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b00      	cmp	r3, #0
 8008802:	d121      	bne.n	8008848 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	799b      	ldrb	r3, [r3, #6]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008810:	2305      	movs	r3, #5
 8008812:	75fb      	strb	r3, [r7, #23]
 8008814:	e019      	b.n	800884a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	8992      	ldrh	r2, [r2, #12]
 8008824:	fbb3 f0f2 	udiv	r0, r3, r2
 8008828:	fb02 f200 	mul.w	r2, r2, r0
 800882c:	1a9b      	subs	r3, r3, r2
 800882e:	440b      	add	r3, r1
 8008830:	4619      	mov	r1, r3
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7ff fa60 	bl	8007cf8 <ld_clust>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800883e:	e7bb      	b.n	80087b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008840:	bf00      	nop
 8008842:	e002      	b.n	800884a <follow_path+0xe2>
				break;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008848:	bf00      	nop
			}
		}
	}

	return res;
 800884a:	7dfb      	ldrb	r3, [r7, #23]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3718      	adds	r7, #24
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800885c:	f04f 33ff 	mov.w	r3, #4294967295
 8008860:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d031      	beq.n	80088ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	617b      	str	r3, [r7, #20]
 8008870:	e002      	b.n	8008878 <get_ldnumber+0x24>
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	3301      	adds	r3, #1
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b1f      	cmp	r3, #31
 800887e:	d903      	bls.n	8008888 <get_ldnumber+0x34>
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b3a      	cmp	r3, #58	; 0x3a
 8008886:	d1f4      	bne.n	8008872 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b3a      	cmp	r3, #58	; 0x3a
 800888e:	d11c      	bne.n	80088ca <get_ldnumber+0x76>
			tp = *path;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	60fa      	str	r2, [r7, #12]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	3b30      	subs	r3, #48	; 0x30
 80088a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d80e      	bhi.n	80088c6 <get_ldnumber+0x72>
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d10a      	bne.n	80088c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d107      	bne.n	80088c6 <get_ldnumber+0x72>
					vol = (int)i;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	3301      	adds	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	e002      	b.n	80088d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088ce:	693b      	ldr	r3, [r7, #16]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	371c      	adds	r7, #28
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
	...

080088dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	70da      	strb	r2, [r3, #3]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fe fc78 	bl	80071ec <move_window>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <check_fs+0x2a>
 8008902:	2304      	movs	r3, #4
 8008904:	e038      	b.n	8008978 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3338      	adds	r3, #56	; 0x38
 800890a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe f9ca 	bl	8006ca8 <ld_word>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800891c:	429a      	cmp	r2, r3
 800891e:	d001      	beq.n	8008924 <check_fs+0x48>
 8008920:	2303      	movs	r3, #3
 8008922:	e029      	b.n	8008978 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800892a:	2be9      	cmp	r3, #233	; 0xe9
 800892c:	d009      	beq.n	8008942 <check_fs+0x66>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008934:	2beb      	cmp	r3, #235	; 0xeb
 8008936:	d11e      	bne.n	8008976 <check_fs+0x9a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800893e:	2b90      	cmp	r3, #144	; 0x90
 8008940:	d119      	bne.n	8008976 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3338      	adds	r3, #56	; 0x38
 8008946:	3336      	adds	r3, #54	; 0x36
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe f9c4 	bl	8006cd6 <ld_dword>
 800894e:	4603      	mov	r3, r0
 8008950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <check_fs+0xa4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d101      	bne.n	800895e <check_fs+0x82>
 800895a:	2300      	movs	r3, #0
 800895c:	e00c      	b.n	8008978 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3338      	adds	r3, #56	; 0x38
 8008962:	3352      	adds	r3, #82	; 0x52
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe f9b6 	bl	8006cd6 <ld_dword>
 800896a:	4603      	mov	r3, r0
 800896c:	4a05      	ldr	r2, [pc, #20]	; (8008984 <check_fs+0xa8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d101      	bne.n	8008976 <check_fs+0x9a>
 8008972:	2300      	movs	r3, #0
 8008974:	e000      	b.n	8008978 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008976:	2302      	movs	r3, #2
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	00544146 	.word	0x00544146
 8008984:	33544146 	.word	0x33544146

08008988 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b096      	sub	sp, #88	; 0x58
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f7ff ff59 	bl	8008854 <get_ldnumber>
 80089a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da01      	bge.n	80089ae <find_volume+0x26>
 80089aa:	230b      	movs	r3, #11
 80089ac:	e268      	b.n	8008e80 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089ae:	4ab0      	ldr	r2, [pc, #704]	; (8008c70 <find_volume+0x2e8>)
 80089b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <find_volume+0x3a>
 80089be:	230c      	movs	r3, #12
 80089c0:	e25e      	b.n	8008e80 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	f023 0301 	bic.w	r3, r3, #1
 80089ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01a      	beq.n	8008a0e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe f8c5 	bl	8006b6c <disk_status>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80089e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10c      	bne.n	8008a0e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <find_volume+0x82>
 80089fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089fe:	f003 0304 	and.w	r3, r3, #4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008a06:	230a      	movs	r3, #10
 8008a08:	e23a      	b.n	8008e80 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e238      	b.n	8008e80 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	2200      	movs	r2, #0
 8008a12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe f8bd 	bl	8006ba0 <disk_initialize>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e221      	b.n	8008e80 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <find_volume+0xca>
 8008a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e216      	b.n	8008e80 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	7858      	ldrb	r0, [r3, #1]
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	330c      	adds	r3, #12
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	2102      	movs	r1, #2
 8008a5e:	f7fe f905 	bl	8006c6c <disk_ioctl>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d001      	beq.n	8008a6c <find_volume+0xe4>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e209      	b.n	8008e80 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6e:	899b      	ldrh	r3, [r3, #12]
 8008a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a74:	d80d      	bhi.n	8008a92 <find_volume+0x10a>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	899b      	ldrh	r3, [r3, #12]
 8008a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a7e:	d308      	bcc.n	8008a92 <find_volume+0x10a>
 8008a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a82:	899b      	ldrh	r3, [r3, #12]
 8008a84:	461a      	mov	r2, r3
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	899b      	ldrh	r3, [r3, #12]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <find_volume+0x10e>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e1f4      	b.n	8008e80 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a9e:	f7ff ff1d 	bl	80088dc <check_fs>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d14b      	bne.n	8008b48 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ab4:	e01f      	b.n	8008af6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008ac4:	4413      	add	r3, r2
 8008ac6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	3304      	adds	r3, #4
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d006      	beq.n	8008ae0 <find_volume+0x158>
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe f8fd 	bl	8006cd6 <ld_dword>
 8008adc:	4602      	mov	r2, r0
 8008ade:	e000      	b.n	8008ae2 <find_volume+0x15a>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008aea:	440b      	add	r3, r1
 8008aec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af2:	3301      	adds	r3, #1
 8008af4:	643b      	str	r3, [r7, #64]	; 0x40
 8008af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d9dc      	bls.n	8008ab6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008afc:	2300      	movs	r3, #0
 8008afe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d002      	beq.n	8008b0c <find_volume+0x184>
 8008b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008b14:	4413      	add	r3, r2
 8008b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d005      	beq.n	8008b2e <find_volume+0x1a6>
 8008b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b26:	f7ff fed9 	bl	80088dc <check_fs>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	e000      	b.n	8008b30 <find_volume+0x1a8>
 8008b2e:	2303      	movs	r3, #3
 8008b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d905      	bls.n	8008b48 <find_volume+0x1c0>
 8008b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3e:	3301      	adds	r3, #1
 8008b40:	643b      	str	r3, [r7, #64]	; 0x40
 8008b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d9e1      	bls.n	8008b0c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d101      	bne.n	8008b54 <find_volume+0x1cc>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e195      	b.n	8008e80 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d901      	bls.n	8008b60 <find_volume+0x1d8>
 8008b5c:	230d      	movs	r3, #13
 8008b5e:	e18f      	b.n	8008e80 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	3338      	adds	r3, #56	; 0x38
 8008b64:	330b      	adds	r3, #11
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe f89e 	bl	8006ca8 <ld_word>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b72:	899b      	ldrh	r3, [r3, #12]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d001      	beq.n	8008b7c <find_volume+0x1f4>
 8008b78:	230d      	movs	r3, #13
 8008b7a:	e181      	b.n	8008e80 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	3316      	adds	r3, #22
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe f890 	bl	8006ca8 <ld_word>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <find_volume+0x218>
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	3338      	adds	r3, #56	; 0x38
 8008b96:	3324      	adds	r3, #36	; 0x24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe f89c 	bl	8006cd6 <ld_dword>
 8008b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ba4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	789b      	ldrb	r3, [r3, #2]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <find_volume+0x23c>
 8008bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bba:	789b      	ldrb	r3, [r3, #2]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d001      	beq.n	8008bc4 <find_volume+0x23c>
 8008bc0:	230d      	movs	r3, #13
 8008bc2:	e15d      	b.n	8008e80 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	789b      	ldrb	r3, [r3, #2]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bcc:	fb02 f303 	mul.w	r3, r2, r3
 8008bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	895b      	ldrh	r3, [r3, #10]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <find_volume+0x270>
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	895b      	ldrh	r3, [r3, #10]
 8008bea:	461a      	mov	r2, r3
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	895b      	ldrh	r3, [r3, #10]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <find_volume+0x274>
 8008bf8:	230d      	movs	r3, #13
 8008bfa:	e141      	b.n	8008e80 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfe:	3338      	adds	r3, #56	; 0x38
 8008c00:	3311      	adds	r3, #17
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe f850 	bl	8006ca8 <ld_word>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	891b      	ldrh	r3, [r3, #8]
 8008c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c16:	8992      	ldrh	r2, [r2, #12]
 8008c18:	0952      	lsrs	r2, r2, #5
 8008c1a:	b292      	uxth	r2, r2
 8008c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c20:	fb02 f201 	mul.w	r2, r2, r1
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d001      	beq.n	8008c30 <find_volume+0x2a8>
 8008c2c:	230d      	movs	r3, #13
 8008c2e:	e127      	b.n	8008e80 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	3338      	adds	r3, #56	; 0x38
 8008c34:	3313      	adds	r3, #19
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe f836 	bl	8006ca8 <ld_word>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <find_volume+0x2cc>
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	3338      	adds	r3, #56	; 0x38
 8008c4a:	3320      	adds	r3, #32
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe f842 	bl	8006cd6 <ld_dword>
 8008c52:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	3338      	adds	r3, #56	; 0x38
 8008c58:	330e      	adds	r3, #14
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fe f824 	bl	8006ca8 <ld_word>
 8008c60:	4603      	mov	r3, r0
 8008c62:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <find_volume+0x2ec>
 8008c6a:	230d      	movs	r3, #13
 8008c6c:	e108      	b.n	8008e80 <find_volume+0x4f8>
 8008c6e:	bf00      	nop
 8008c70:	20000134 	.word	0x20000134

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c78:	4413      	add	r3, r2
 8008c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c7c:	8911      	ldrh	r1, [r2, #8]
 8008c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c80:	8992      	ldrh	r2, [r2, #12]
 8008c82:	0952      	lsrs	r2, r2, #5
 8008c84:	b292      	uxth	r2, r2
 8008c86:	fbb1 f2f2 	udiv	r2, r1, r2
 8008c8a:	b292      	uxth	r2, r2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d201      	bcs.n	8008c9c <find_volume+0x314>
 8008c98:	230d      	movs	r3, #13
 8008c9a:	e0f1      	b.n	8008e80 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ca4:	8952      	ldrh	r2, [r2, #10]
 8008ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <find_volume+0x32e>
 8008cb2:	230d      	movs	r3, #13
 8008cb4:	e0e4      	b.n	8008e80 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d802      	bhi.n	8008ccc <find_volume+0x344>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d802      	bhi.n	8008cdc <find_volume+0x354>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	1c9a      	adds	r2, r3, #2
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ce8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cee:	441a      	add	r2, r3
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008cf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf8:	441a      	add	r2, r3
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d11e      	bne.n	8008d44 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	3338      	adds	r3, #56	; 0x38
 8008d0a:	332a      	adds	r3, #42	; 0x2a
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fd ffcb 	bl	8006ca8 <ld_word>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <find_volume+0x394>
 8008d18:	230d      	movs	r3, #13
 8008d1a:	e0b1      	b.n	8008e80 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1e:	891b      	ldrh	r3, [r3, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <find_volume+0x3a0>
 8008d24:	230d      	movs	r3, #13
 8008d26:	e0ab      	b.n	8008e80 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	3338      	adds	r3, #56	; 0x38
 8008d2c:	332c      	adds	r3, #44	; 0x2c
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fd ffd1 	bl	8006cd6 <ld_dword>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	647b      	str	r3, [r7, #68]	; 0x44
 8008d42:	e01f      	b.n	8008d84 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	891b      	ldrh	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <find_volume+0x3c8>
 8008d4c:	230d      	movs	r3, #13
 8008d4e:	e097      	b.n	8008e80 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d56:	441a      	add	r2, r3
 8008d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d103      	bne.n	8008d6c <find_volume+0x3e4>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	e00a      	b.n	8008d82 <find_volume+0x3fa>
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	4613      	mov	r3, r2
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	4413      	add	r3, r2
 8008d76:	085a      	lsrs	r2, r3, #1
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d82:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	6a1a      	ldr	r2, [r3, #32]
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	899b      	ldrh	r3, [r3, #12]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d90:	440b      	add	r3, r1
 8008d92:	3b01      	subs	r3, #1
 8008d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d96:	8989      	ldrh	r1, [r1, #12]
 8008d98:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d201      	bcs.n	8008da4 <find_volume+0x41c>
 8008da0:	230d      	movs	r3, #13
 8008da2:	e06d      	b.n	8008e80 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da6:	f04f 32ff 	mov.w	r2, #4294967295
 8008daa:	619a      	str	r2, [r3, #24]
 8008dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dae:	699a      	ldr	r2, [r3, #24]
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	2280      	movs	r2, #128	; 0x80
 8008db8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d149      	bne.n	8008e56 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	3338      	adds	r3, #56	; 0x38
 8008dc6:	3330      	adds	r3, #48	; 0x30
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fd ff6d 	bl	8006ca8 <ld_word>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d140      	bne.n	8008e56 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ddc:	f7fe fa06 	bl	80071ec <move_window>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d137      	bne.n	8008e56 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	2200      	movs	r2, #0
 8008dea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	3338      	adds	r3, #56	; 0x38
 8008df0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fd ff57 	bl	8006ca8 <ld_word>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d127      	bne.n	8008e56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	3338      	adds	r3, #56	; 0x38
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7fd ff63 	bl	8006cd6 <ld_dword>
 8008e10:	4603      	mov	r3, r0
 8008e12:	4a1d      	ldr	r2, [pc, #116]	; (8008e88 <find_volume+0x500>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d11e      	bne.n	8008e56 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	3338      	adds	r3, #56	; 0x38
 8008e1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7fd ff58 	bl	8006cd6 <ld_dword>
 8008e26:	4603      	mov	r3, r0
 8008e28:	4a18      	ldr	r2, [pc, #96]	; (8008e8c <find_volume+0x504>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d113      	bne.n	8008e56 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	3338      	adds	r3, #56	; 0x38
 8008e32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd ff4d 	bl	8006cd6 <ld_dword>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e40:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	3338      	adds	r3, #56	; 0x38
 8008e46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd ff43 	bl	8006cd6 <ld_dword>
 8008e50:	4602      	mov	r2, r0
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008e5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e5e:	4b0c      	ldr	r3, [pc, #48]	; (8008e90 <find_volume+0x508>)
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <find_volume+0x508>)
 8008e68:	801a      	strh	r2, [r3, #0]
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <find_volume+0x508>)
 8008e6c:	881a      	ldrh	r2, [r3, #0]
 8008e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e70:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	4a07      	ldr	r2, [pc, #28]	; (8008e94 <find_volume+0x50c>)
 8008e76:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008e7a:	f7fe f94f 	bl	800711c <clear_lock>
#endif
	return FR_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3758      	adds	r7, #88	; 0x58
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	41615252 	.word	0x41615252
 8008e8c:	61417272 	.word	0x61417272
 8008e90:	20000138 	.word	0x20000138
 8008e94:	2000015c 	.word	0x2000015c

08008e98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008ea2:	2309      	movs	r3, #9
 8008ea4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01c      	beq.n	8008ee6 <validate+0x4e>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d018      	beq.n	8008ee6 <validate+0x4e>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d013      	beq.n	8008ee6 <validate+0x4e>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	889a      	ldrh	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	88db      	ldrh	r3, [r3, #6]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d10c      	bne.n	8008ee6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	785b      	ldrb	r3, [r3, #1]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fd fe4a 	bl	8006b6c <disk_status>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <validate+0x4e>
			res = FR_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <validate+0x5a>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	e000      	b.n	8008ef4 <validate+0x5c>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	6013      	str	r3, [r2, #0]
	return res;
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f16:	f107 0310 	add.w	r3, r7, #16
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7ff fc9a 	bl	8008854 <get_ldnumber>
 8008f20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	da01      	bge.n	8008f2c <f_mount+0x28>
 8008f28:	230b      	movs	r3, #11
 8008f2a:	e02b      	b.n	8008f84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f2c:	4a17      	ldr	r2, [pc, #92]	; (8008f8c <f_mount+0x88>)
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f3c:	69b8      	ldr	r0, [r7, #24]
 8008f3e:	f7fe f8ed 	bl	800711c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	490d      	ldr	r1, [pc, #52]	; (8008f8c <f_mount+0x88>)
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <f_mount+0x66>
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d001      	beq.n	8008f6e <f_mount+0x6a>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	e00a      	b.n	8008f84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008f6e:	f107 010c 	add.w	r1, r7, #12
 8008f72:	f107 0308 	add.w	r3, r7, #8
 8008f76:	2200      	movs	r2, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff fd05 	bl	8008988 <find_volume>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3720      	adds	r7, #32
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000134 	.word	0x20000134

08008f90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b09a      	sub	sp, #104	; 0x68
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <f_open+0x18>
 8008fa4:	2309      	movs	r3, #9
 8008fa6:	e1bb      	b.n	8009320 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008fa8:	79fb      	ldrb	r3, [r7, #7]
 8008faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	f107 0114 	add.w	r1, r7, #20
 8008fb6:	f107 0308 	add.w	r3, r7, #8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff fce4 	bl	8008988 <find_volume>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f040 819f 	bne.w	800930e <f_open+0x37e>
		dj.obj.fs = fs;
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fbc3 	bl	8008768 <follow_path>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008fe8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11a      	bne.n	8009026 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ff0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ff4:	b25b      	sxtb	r3, r3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da03      	bge.n	8009002 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008ffa:	2306      	movs	r3, #6
 8008ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009000:	e011      	b.n	8009026 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	2b00      	cmp	r3, #0
 800900a:	bf14      	ite	ne
 800900c:	2301      	movne	r3, #1
 800900e:	2300      	moveq	r3, #0
 8009010:	b2db      	uxtb	r3, r3
 8009012:	461a      	mov	r2, r3
 8009014:	f107 0318 	add.w	r3, r7, #24
 8009018:	4611      	mov	r1, r2
 800901a:	4618      	mov	r0, r3
 800901c:	f7fd ff3c 	bl	8006e98 <chk_lock>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	f003 031c 	and.w	r3, r3, #28
 800902c:	2b00      	cmp	r3, #0
 800902e:	d07f      	beq.n	8009130 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009030:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009034:	2b00      	cmp	r3, #0
 8009036:	d017      	beq.n	8009068 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009038:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800903c:	2b04      	cmp	r3, #4
 800903e:	d10e      	bne.n	800905e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009040:	f7fd ff84 	bl	8006f4c <enq_lock>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d006      	beq.n	8009058 <f_open+0xc8>
 800904a:	f107 0318 	add.w	r3, r7, #24
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff f8da 	bl	8008208 <dir_register>
 8009054:	4603      	mov	r3, r0
 8009056:	e000      	b.n	800905a <f_open+0xca>
 8009058:	2312      	movs	r3, #18
 800905a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	f043 0308 	orr.w	r3, r3, #8
 8009064:	71fb      	strb	r3, [r7, #7]
 8009066:	e010      	b.n	800908a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009068:	7fbb      	ldrb	r3, [r7, #30]
 800906a:	f003 0311 	and.w	r3, r3, #17
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <f_open+0xea>
					res = FR_DENIED;
 8009072:	2307      	movs	r3, #7
 8009074:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009078:	e007      	b.n	800908a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <f_open+0xfa>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800908a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800908e:	2b00      	cmp	r3, #0
 8009090:	d168      	bne.n	8009164 <f_open+0x1d4>
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d063      	beq.n	8009164 <f_open+0x1d4>
				dw = GET_FATTIME();
 800909c:	f7fd fd0e 	bl	8006abc <get_fattime>
 80090a0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	330e      	adds	r3, #14
 80090a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd fe50 	bl	8006d4e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	3316      	adds	r3, #22
 80090b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fd fe4a 	bl	8006d4e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80090ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090bc:	330b      	adds	r3, #11
 80090be:	2220      	movs	r2, #32
 80090c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fe15 	bl	8007cf8 <ld_clust>
 80090ce:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090d4:	2200      	movs	r2, #0
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fe fe2d 	bl	8007d36 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80090dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090de:	331c      	adds	r3, #28
 80090e0:	2100      	movs	r1, #0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fd fe33 	bl	8006d4e <st_dword>
					fs->wflag = 1;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2201      	movs	r2, #1
 80090ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80090ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d037      	beq.n	8009164 <f_open+0x1d4>
						dw = fs->winsect;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80090fa:	f107 0318 	add.w	r3, r7, #24
 80090fe:	2200      	movs	r2, #0
 8009100:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009102:	4618      	mov	r0, r3
 8009104:	f7fe fb1e 	bl	8007744 <remove_chain>
 8009108:	4603      	mov	r3, r0
 800910a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800910e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009112:	2b00      	cmp	r3, #0
 8009114:	d126      	bne.n	8009164 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe f866 	bl	80071ec <move_window>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800912a:	3a01      	subs	r2, #1
 800912c:	615a      	str	r2, [r3, #20]
 800912e:	e019      	b.n	8009164 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009134:	2b00      	cmp	r3, #0
 8009136:	d115      	bne.n	8009164 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009138:	7fbb      	ldrb	r3, [r7, #30]
 800913a:	f003 0310 	and.w	r3, r3, #16
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009142:	2304      	movs	r3, #4
 8009144:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009148:	e00c      	b.n	8009164 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800914a:	79fb      	ldrb	r3, [r7, #7]
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <f_open+0x1d4>
 8009154:	7fbb      	ldrb	r3, [r7, #30]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <f_open+0x1d4>
						res = FR_DENIED;
 800915e:	2307      	movs	r3, #7
 8009160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009164:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009168:	2b00      	cmp	r3, #0
 800916a:	d128      	bne.n	80091be <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	bf14      	ite	ne
 8009196:	2301      	movne	r3, #1
 8009198:	2300      	moveq	r3, #0
 800919a:	b2db      	uxtb	r3, r3
 800919c:	461a      	mov	r2, r3
 800919e:	f107 0318 	add.w	r3, r7, #24
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fd fef1 	bl	8006f8c <inc_lock>
 80091aa:	4602      	mov	r2, r0
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <f_open+0x22e>
 80091b8:	2302      	movs	r3, #2
 80091ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80091be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 80a3 	bne.w	800930e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fe fd92 	bl	8007cf8 <ld_clust>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	331c      	adds	r3, #28
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fd fd79 	bl	8006cd6 <ld_dword>
 80091e4:	4602      	mov	r2, r0
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	88da      	ldrh	r2, [r3, #6]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	79fa      	ldrb	r2, [r7, #7]
 8009202:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3330      	adds	r3, #48	; 0x30
 800921a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800921e:	2100      	movs	r1, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f7fd fddf 	bl	8006de4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d06e      	beq.n	800930e <f_open+0x37e>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d06a      	beq.n	800930e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	68da      	ldr	r2, [r3, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	895b      	ldrh	r3, [r3, #10]
 8009244:	461a      	mov	r2, r3
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	899b      	ldrh	r3, [r3, #12]
 800924a:	fb03 f302 	mul.w	r3, r3, r2
 800924e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800925c:	e016      	b.n	800928c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f87e 	bl	8007364 <get_fat>
 8009268:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800926a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800926c:	2b01      	cmp	r3, #1
 800926e:	d802      	bhi.n	8009276 <f_open+0x2e6>
 8009270:	2302      	movs	r3, #2
 8009272:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927c:	d102      	bne.n	8009284 <f_open+0x2f4>
 800927e:	2301      	movs	r3, #1
 8009280:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009288:	1ad3      	subs	r3, r2, r3
 800928a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800928c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <f_open+0x30c>
 8009294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009298:	429a      	cmp	r2, r3
 800929a:	d8e0      	bhi.n	800925e <f_open+0x2ce>
				}
				fp->clust = clst;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80092a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d131      	bne.n	800930e <f_open+0x37e>
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	899b      	ldrh	r3, [r3, #12]
 80092ae:	461a      	mov	r2, r3
 80092b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80092b6:	fb02 f201 	mul.w	r2, r2, r1
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d026      	beq.n	800930e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7fe f82f 	bl	8007328 <clust2sect>
 80092ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 80092cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d103      	bne.n	80092da <f_open+0x34a>
						res = FR_INT_ERR;
 80092d2:	2302      	movs	r3, #2
 80092d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80092d8:	e019      	b.n	800930e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	899b      	ldrh	r3, [r3, #12]
 80092de:	461a      	mov	r2, r3
 80092e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80092e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e8:	441a      	add	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	7858      	ldrb	r0, [r3, #1]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a1a      	ldr	r2, [r3, #32]
 80092fc:	2301      	movs	r3, #1
 80092fe:	f7fd fc75 	bl	8006bec <disk_read>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <f_open+0x37e>
 8009308:	2301      	movs	r3, #1
 800930a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800930e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <f_open+0x38c>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800931c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009320:	4618      	mov	r0, r3
 8009322:	3768      	adds	r7, #104	; 0x68
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08c      	sub	sp, #48	; 0x30
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
 8009334:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f107 0210 	add.w	r2, r7, #16
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff fda5 	bl	8008e98 <validate>
 800934e:	4603      	mov	r3, r0
 8009350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009358:	2b00      	cmp	r3, #0
 800935a:	d107      	bne.n	800936c <f_write+0x44>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	7d5b      	ldrb	r3, [r3, #21]
 8009360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <f_write+0x4a>
 800936c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009370:	e16a      	b.n	8009648 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	7d1b      	ldrb	r3, [r3, #20]
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <f_write+0x5a>
 800937e:	2307      	movs	r3, #7
 8009380:	e162      	b.n	8009648 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699a      	ldr	r2, [r3, #24]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	441a      	add	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	429a      	cmp	r2, r3
 8009390:	f080 814c 	bcs.w	800962c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	43db      	mvns	r3, r3
 800939a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800939c:	e146      	b.n	800962c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	8992      	ldrh	r2, [r2, #12]
 80093a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80093aa:	fb02 f201 	mul.w	r2, r2, r1
 80093ae:	1a9b      	subs	r3, r3, r2
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f040 80f1 	bne.w	8009598 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	8992      	ldrh	r2, [r2, #12]
 80093be:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	8952      	ldrh	r2, [r2, #10]
 80093c6:	3a01      	subs	r2, #1
 80093c8:	4013      	ands	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d143      	bne.n	800945a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10c      	bne.n	80093f4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80093e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d11a      	bne.n	800941c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fa0f 	bl	800780e <create_chain>
 80093f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80093f2:	e013      	b.n	800941c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	4619      	mov	r1, r3
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7fe fa9b 	bl	800793e <clmt_clust>
 8009408:	62b8      	str	r0, [r7, #40]	; 0x28
 800940a:	e007      	b.n	800941c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800940c:	68fa      	ldr	r2, [r7, #12]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fe f9fa 	bl	800780e <create_chain>
 800941a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	2b00      	cmp	r3, #0
 8009420:	f000 8109 	beq.w	8009636 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009426:	2b01      	cmp	r3, #1
 8009428:	d104      	bne.n	8009434 <f_write+0x10c>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	755a      	strb	r2, [r3, #21]
 8009430:	2302      	movs	r3, #2
 8009432:	e109      	b.n	8009648 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943a:	d104      	bne.n	8009446 <f_write+0x11e>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2201      	movs	r2, #1
 8009440:	755a      	strb	r2, [r3, #21]
 8009442:	2301      	movs	r3, #1
 8009444:	e100      	b.n	8009648 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800944a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <f_write+0x132>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009458:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	7d1b      	ldrb	r3, [r3, #20]
 800945e:	b25b      	sxtb	r3, r3
 8009460:	2b00      	cmp	r3, #0
 8009462:	da18      	bge.n	8009496 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	7858      	ldrb	r0, [r3, #1]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a1a      	ldr	r2, [r3, #32]
 8009472:	2301      	movs	r3, #1
 8009474:	f7fd fbda 	bl	8006c2c <disk_write>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d004      	beq.n	8009488 <f_write+0x160>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2201      	movs	r2, #1
 8009482:	755a      	strb	r2, [r3, #21]
 8009484:	2301      	movs	r3, #1
 8009486:	e0df      	b.n	8009648 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	7d1b      	ldrb	r3, [r3, #20]
 800948c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009490:	b2da      	uxtb	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fd ff42 	bl	8007328 <clust2sect>
 80094a4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <f_write+0x18e>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2202      	movs	r2, #2
 80094b0:	755a      	strb	r2, [r3, #21]
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0c8      	b.n	8009648 <f_write+0x320>
			sect += csect;
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	4413      	add	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	899b      	ldrh	r3, [r3, #12]
 80094c2:	461a      	mov	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ca:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d043      	beq.n	800955a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	4413      	add	r3, r2
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	8952      	ldrh	r2, [r2, #10]
 80094dc:	4293      	cmp	r3, r2
 80094de:	d905      	bls.n	80094ec <f_write+0x1c4>
					cc = fs->csize - csect;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	895b      	ldrh	r3, [r3, #10]
 80094e4:	461a      	mov	r2, r3
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	7858      	ldrb	r0, [r3, #1]
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	69f9      	ldr	r1, [r7, #28]
 80094f6:	f7fd fb99 	bl	8006c2c <disk_write>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <f_write+0x1e2>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	755a      	strb	r2, [r3, #21]
 8009506:	2301      	movs	r3, #1
 8009508:	e09e      	b.n	8009648 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a1a      	ldr	r2, [r3, #32]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	429a      	cmp	r2, r3
 8009516:	d918      	bls.n	800954a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1a      	ldr	r2, [r3, #32]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	693a      	ldr	r2, [r7, #16]
 8009528:	8992      	ldrh	r2, [r2, #12]
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	69fa      	ldr	r2, [r7, #28]
 8009530:	18d1      	adds	r1, r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	461a      	mov	r2, r3
 8009538:	f7fd fc34 	bl	8006da4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	7d1b      	ldrb	r3, [r3, #20]
 8009540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	899b      	ldrh	r3, [r3, #12]
 800954e:	461a      	mov	r2, r3
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	fb02 f303 	mul.w	r3, r2, r3
 8009556:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009558:	e04b      	b.n	80095f2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	429a      	cmp	r2, r3
 8009562:	d016      	beq.n	8009592 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	699a      	ldr	r2, [r3, #24]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800956c:	429a      	cmp	r2, r3
 800956e:	d210      	bcs.n	8009592 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	7858      	ldrb	r0, [r3, #1]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800957a:	2301      	movs	r3, #1
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	f7fd fb35 	bl	8006bec <disk_read>
 8009582:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2201      	movs	r2, #1
 800958c:	755a      	strb	r2, [r3, #21]
 800958e:	2301      	movs	r3, #1
 8009590:	e05a      	b.n	8009648 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	899b      	ldrh	r3, [r3, #12]
 800959c:	4618      	mov	r0, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	8992      	ldrh	r2, [r2, #12]
 80095a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80095aa:	fb02 f201 	mul.w	r2, r2, r1
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	1ac3      	subs	r3, r0, r3
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80095b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d901      	bls.n	80095c0 <f_write+0x298>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	8992      	ldrh	r2, [r2, #12]
 80095ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80095d2:	fb02 f200 	mul.w	r2, r2, r0
 80095d6:	1a9b      	subs	r3, r3, r2
 80095d8:	440b      	add	r3, r1
 80095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095dc:	69f9      	ldr	r1, [r7, #28]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fbe0 	bl	8006da4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7d1b      	ldrb	r3, [r3, #20]
 80095e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	4413      	add	r3, r2
 80095f8:	61fb      	str	r3, [r7, #28]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	619a      	str	r2, [r3, #24]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	429a      	cmp	r2, r3
 8009610:	bf38      	it	cc
 8009612:	461a      	movcc	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	60da      	str	r2, [r3, #12]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	441a      	add	r2, r3
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f47f aeb5 	bne.w	800939e <f_write+0x76>
 8009634:	e000      	b.n	8009638 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009636:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	7d1b      	ldrb	r3, [r3, #20]
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3730      	adds	r7, #48	; 0x30
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f107 0208 	add.w	r2, r7, #8
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fc19 	bl	8008e98 <validate>
 8009666:	4603      	mov	r3, r0
 8009668:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d168      	bne.n	8009742 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	7d1b      	ldrb	r3, [r3, #20]
 8009674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d062      	beq.n	8009742 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	7d1b      	ldrb	r3, [r3, #20]
 8009680:	b25b      	sxtb	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	da15      	bge.n	80096b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	7858      	ldrb	r0, [r3, #1]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1a      	ldr	r2, [r3, #32]
 8009694:	2301      	movs	r3, #1
 8009696:	f7fd fac9 	bl	8006c2c <disk_write>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <f_sync+0x54>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e04f      	b.n	8009744 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	7d1b      	ldrb	r3, [r3, #20]
 80096a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80096b2:	f7fd fa03 	bl	8006abc <get_fattime>
 80096b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fd fd93 	bl	80071ec <move_window>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d138      	bne.n	8009742 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	330b      	adds	r3, #11
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	330b      	adds	r3, #11
 80096e0:	f042 0220 	orr.w	r2, r2, #32
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	461a      	mov	r2, r3
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	f7fe fb1f 	bl	8007d36 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f103 021c 	add.w	r2, r3, #28
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	4619      	mov	r1, r3
 8009704:	4610      	mov	r0, r2
 8009706:	f7fd fb22 	bl	8006d4e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3316      	adds	r3, #22
 800970e:	6939      	ldr	r1, [r7, #16]
 8009710:	4618      	mov	r0, r3
 8009712:	f7fd fb1c 	bl	8006d4e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3312      	adds	r3, #18
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f7fd fafc 	bl	8006d1a <st_word>
					fs->wflag = 1;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2201      	movs	r2, #1
 8009726:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f7fd fd8c 	bl	8007248 <sync_fs>
 8009730:	4603      	mov	r3, r0
 8009732:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	7d1b      	ldrb	r3, [r3, #20]
 8009738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800973c:	b2da      	uxtb	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009742:	7dfb      	ldrb	r3, [r7, #23]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7ff ff7b 	bl	8009650 <f_sync>
 800975a:	4603      	mov	r3, r0
 800975c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800975e:	7bfb      	ldrb	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d118      	bne.n	8009796 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f107 0208 	add.w	r2, r7, #8
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fb93 	bl	8008e98 <validate>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10c      	bne.n	8009796 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	4618      	mov	r0, r3
 8009782:	f7fd fc91 	bl	80070a8 <dec_lock>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b090      	sub	sp, #64	; 0x40
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f107 0208 	add.w	r2, r7, #8
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7ff fb70 	bl	8008e98 <validate>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80097be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d103      	bne.n	80097ce <f_lseek+0x2e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	7d5b      	ldrb	r3, [r3, #21]
 80097ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80097ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <f_lseek+0x3c>
 80097d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80097da:	e201      	b.n	8009be0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 80d9 	beq.w	8009998 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ec:	d15a      	bne.n	80098a4 <f_lseek+0x104>
			tbl = fp->cltbl;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	627a      	str	r2, [r7, #36]	; 0x24
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	2302      	movs	r3, #2
 8009800:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	2b00      	cmp	r3, #0
 800980c:	d03a      	beq.n	8009884 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	613b      	str	r3, [r7, #16]
 8009812:	2300      	movs	r3, #0
 8009814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	3302      	adds	r3, #2
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009822:	3301      	adds	r3, #1
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800982a:	4618      	mov	r0, r3
 800982c:	f7fd fd9a 	bl	8007364 <get_fat>
 8009830:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	2b01      	cmp	r3, #1
 8009836:	d804      	bhi.n	8009842 <f_lseek+0xa2>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	755a      	strb	r2, [r3, #21]
 800983e:	2302      	movs	r3, #2
 8009840:	e1ce      	b.n	8009be0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009848:	d104      	bne.n	8009854 <f_lseek+0xb4>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	755a      	strb	r2, [r3, #21]
 8009850:	2301      	movs	r3, #1
 8009852:	e1c5      	b.n	8009be0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800985a:	429a      	cmp	r2, r3
 800985c:	d0de      	beq.n	800981c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800985e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	429a      	cmp	r2, r3
 8009864:	d809      	bhi.n	800987a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1d1a      	adds	r2, r3, #4
 800986a:	627a      	str	r2, [r7, #36]	; 0x24
 800986c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800986e:	601a      	str	r2, [r3, #0]
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	1d1a      	adds	r2, r3, #4
 8009874:	627a      	str	r2, [r7, #36]	; 0x24
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009880:	429a      	cmp	r2, r3
 8009882:	d3c4      	bcc.n	800980e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800988c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	429a      	cmp	r2, r3
 8009892:	d803      	bhi.n	800989c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	2200      	movs	r2, #0
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e19f      	b.n	8009bdc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800989c:	2311      	movs	r3, #17
 800989e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80098a2:	e19b      	b.n	8009bdc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d902      	bls.n	80098b4 <f_lseek+0x114>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 818d 	beq.w	8009bdc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fe f838 	bl	800793e <clmt_clust>
 80098ce:	4602      	mov	r2, r0
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	4619      	mov	r1, r3
 80098dc:	4610      	mov	r0, r2
 80098de:	f7fd fd23 	bl	8007328 <clust2sect>
 80098e2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d104      	bne.n	80098f4 <f_lseek+0x154>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	755a      	strb	r2, [r3, #21]
 80098f0:	2302      	movs	r3, #2
 80098f2:	e175      	b.n	8009be0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	8992      	ldrh	r2, [r2, #12]
 80098fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	8952      	ldrh	r2, [r2, #10]
 8009904:	3a01      	subs	r2, #1
 8009906:	4013      	ands	r3, r2
 8009908:	69ba      	ldr	r2, [r7, #24]
 800990a:	4413      	add	r3, r2
 800990c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	8992      	ldrh	r2, [r2, #12]
 8009916:	fbb3 f1f2 	udiv	r1, r3, r2
 800991a:	fb02 f201 	mul.w	r2, r2, r1
 800991e:	1a9b      	subs	r3, r3, r2
 8009920:	2b00      	cmp	r3, #0
 8009922:	f000 815b 	beq.w	8009bdc <f_lseek+0x43c>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	429a      	cmp	r2, r3
 800992e:	f000 8155 	beq.w	8009bdc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	7d1b      	ldrb	r3, [r3, #20]
 8009936:	b25b      	sxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	da18      	bge.n	800996e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	7858      	ldrb	r0, [r3, #1]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1a      	ldr	r2, [r3, #32]
 800994a:	2301      	movs	r3, #1
 800994c:	f7fd f96e 	bl	8006c2c <disk_write>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <f_lseek+0x1c0>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	755a      	strb	r2, [r3, #21]
 800995c:	2301      	movs	r3, #1
 800995e:	e13f      	b.n	8009be0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7d1b      	ldrb	r3, [r3, #20]
 8009964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009968:	b2da      	uxtb	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	7858      	ldrb	r0, [r3, #1]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009978:	2301      	movs	r3, #1
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	f7fd f936 	bl	8006bec <disk_read>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <f_lseek+0x1f0>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	755a      	strb	r2, [r3, #21]
 800998c:	2301      	movs	r3, #1
 800998e:	e127      	b.n	8009be0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	621a      	str	r2, [r3, #32]
 8009996:	e121      	b.n	8009bdc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	683a      	ldr	r2, [r7, #0]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d908      	bls.n	80099b4 <f_lseek+0x214>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7d1b      	ldrb	r3, [r3, #20]
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	637b      	str	r3, [r7, #52]	; 0x34
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099c2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	f000 80b5 	beq.w	8009b36 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	895b      	ldrh	r3, [r3, #10]
 80099d0:	461a      	mov	r2, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	899b      	ldrh	r3, [r3, #12]
 80099d6:	fb03 f302 	mul.w	r3, r3, r2
 80099da:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01b      	beq.n	8009a1a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	1e5a      	subs	r2, r3, #1
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	1e59      	subs	r1, r3, #1
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d30f      	bcc.n	8009a1a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80099fa:	6a3b      	ldr	r3, [r7, #32]
 80099fc:	1e5a      	subs	r2, r3, #1
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	425b      	negs	r3, r3
 8009a02:	401a      	ands	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a18:	e022      	b.n	8009a60 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d119      	bne.n	8009a5a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2100      	movs	r1, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fd feef 	bl	800780e <create_chain>
 8009a30:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d104      	bne.n	8009a42 <f_lseek+0x2a2>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	755a      	strb	r2, [r3, #21]
 8009a3e:	2302      	movs	r3, #2
 8009a40:	e0ce      	b.n	8009be0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a48:	d104      	bne.n	8009a54 <f_lseek+0x2b4>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	755a      	strb	r2, [r3, #21]
 8009a50:	2301      	movs	r3, #1
 8009a52:	e0c5      	b.n	8009be0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a58:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a5e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d067      	beq.n	8009b36 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009a66:	e03a      	b.n	8009ade <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	603b      	str	r3, [r7, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	441a      	add	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7d1b      	ldrb	r3, [r3, #20]
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7fd febe 	bl	800780e <create_chain>
 8009a92:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d108      	bne.n	8009aac <f_lseek+0x30c>
							ofs = 0; break;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	603b      	str	r3, [r7, #0]
 8009a9e:	e022      	b.n	8009ae6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fd fc5d 	bl	8007364 <get_fat>
 8009aaa:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d104      	bne.n	8009abe <f_lseek+0x31e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	755a      	strb	r2, [r3, #21]
 8009aba:	2301      	movs	r3, #1
 8009abc:	e090      	b.n	8009be0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d904      	bls.n	8009ace <f_lseek+0x32e>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d304      	bcc.n	8009ad8 <f_lseek+0x338>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	755a      	strb	r2, [r3, #21]
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e083      	b.n	8009be0 <f_lseek+0x440>
					fp->clust = clst;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009adc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d8c0      	bhi.n	8009a68 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	441a      	add	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	899b      	ldrh	r3, [r3, #12]
 8009af6:	461a      	mov	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009afe:	fb02 f201 	mul.w	r2, r2, r1
 8009b02:	1a9b      	subs	r3, r3, r2
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d016      	beq.n	8009b36 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd fc0b 	bl	8007328 <clust2sect>
 8009b12:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d104      	bne.n	8009b24 <f_lseek+0x384>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	755a      	strb	r2, [r3, #21]
 8009b20:	2302      	movs	r3, #2
 8009b22:	e05d      	b.n	8009be0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	899b      	ldrh	r3, [r3, #12]
 8009b28:	461a      	mov	r2, r3
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b32:	4413      	add	r3, r2
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d90a      	bls.n	8009b58 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699a      	ldr	r2, [r3, #24]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7d1b      	ldrb	r3, [r3, #20]
 8009b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	8992      	ldrh	r2, [r2, #12]
 8009b60:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b64:	fb02 f201 	mul.w	r2, r2, r1
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d036      	beq.n	8009bdc <f_lseek+0x43c>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d031      	beq.n	8009bdc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7d1b      	ldrb	r3, [r3, #20]
 8009b7c:	b25b      	sxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da18      	bge.n	8009bb4 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	7858      	ldrb	r0, [r3, #1]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a1a      	ldr	r2, [r3, #32]
 8009b90:	2301      	movs	r3, #1
 8009b92:	f7fd f84b 	bl	8006c2c <disk_write>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <f_lseek+0x406>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	755a      	strb	r2, [r3, #21]
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e01c      	b.n	8009be0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	7d1b      	ldrb	r3, [r3, #20]
 8009baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	7858      	ldrb	r0, [r3, #1]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc2:	f7fd f813 	bl	8006bec <disk_read>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <f_lseek+0x436>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	755a      	strb	r2, [r3, #21]
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e004      	b.n	8009be0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bda:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3740      	adds	r7, #64	; 0x40
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009bf4:	78fb      	ldrb	r3, [r7, #3]
 8009bf6:	2b0a      	cmp	r3, #10
 8009bf8:	d103      	bne.n	8009c02 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009bfa:	210d      	movs	r1, #13
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff fff3 	bl	8009be8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	db25      	blt.n	8009c5a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	60fa      	str	r2, [r7, #12]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	4413      	add	r3, r2
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b3c      	cmp	r3, #60	; 0x3c
 8009c20:	dd12      	ble.n	8009c48 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f103 010c 	add.w	r1, r3, #12
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	f107 0308 	add.w	r3, r7, #8
 8009c32:	f7ff fb79 	bl	8009328 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d101      	bne.n	8009c42 <putc_bfd+0x5a>
 8009c3e:	2300      	movs	r3, #0
 8009c40:	e001      	b.n	8009c46 <putc_bfd+0x5e>
 8009c42:	f04f 33ff 	mov.w	r3, #4294967295
 8009c46:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	609a      	str	r2, [r3, #8]
 8009c58:	e000      	b.n	8009c5c <putc_bfd+0x74>
	if (i < 0) return;
 8009c5a:	bf00      	nop
}
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	db16      	blt.n	8009ca0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f103 010c 	add.w	r1, r3, #12
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	461a      	mov	r2, r3
 8009c82:	f107 030c 	add.w	r3, r7, #12
 8009c86:	f7ff fb4f 	bl	8009328 <f_write>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d107      	bne.n	8009ca0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d102      	bne.n	8009ca0 <putc_flush+0x3e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	e001      	b.n	8009ca4 <putc_flush+0x42>
	return EOF;
 8009ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	609a      	str	r2, [r3, #8]
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr

08009cd4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8009cd4:	b40e      	push	{r1, r2, r3}
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b0a7      	sub	sp, #156	; 0x9c
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8009cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff ffe1 	bl	8009cac <putc_init>

	va_start(arp, fmt);
 8009cea:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009cee:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8009cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8009d00:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 81f4 	beq.w	800a0f2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 8009d0a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d0e:	2b25      	cmp	r3, #37	; 0x25
 8009d10:	d008      	beq.n	8009d24 <f_printf+0x50>
			putc_bfd(&pb, c);
 8009d12:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ff63 	bl	8009be8 <putc_bfd>
			continue;
 8009d22:	e1e5      	b.n	800a0f0 <f_printf+0x41c>
		}
		w = f = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009d30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009d40:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d44:	2b30      	cmp	r3, #48	; 0x30
 8009d46:	d10b      	bne.n	8009d60 <f_printf+0x8c>
			f = 1; c = *fmt++;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009d5e:	e024      	b.n	8009daa <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009d60:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d64:	2b2d      	cmp	r3, #45	; 0x2d
 8009d66:	d120      	bne.n	8009daa <f_printf+0xd6>
				f = 2; c = *fmt++;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d72:	1c5a      	adds	r2, r3, #1
 8009d74:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009d7e:	e014      	b.n	8009daa <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009d80:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009d92:	4413      	add	r3, r2
 8009d94:	3b30      	subs	r3, #48	; 0x30
 8009d96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 8009d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 8009daa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dae:	2b2f      	cmp	r3, #47	; 0x2f
 8009db0:	d903      	bls.n	8009dba <f_printf+0xe6>
 8009db2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009db6:	2b39      	cmp	r3, #57	; 0x39
 8009db8:	d9e2      	bls.n	8009d80 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8009dba:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dbe:	2b6c      	cmp	r3, #108	; 0x6c
 8009dc0:	d003      	beq.n	8009dca <f_printf+0xf6>
 8009dc2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dc6:	2b4c      	cmp	r3, #76	; 0x4c
 8009dc8:	d10d      	bne.n	8009de6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 8009dca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009dce:	f043 0304 	orr.w	r3, r3, #4
 8009dd2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009dd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8009de6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8183 	beq.w	800a0f6 <f_printf+0x422>
		d = c;
 8009df0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009df4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8009df8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009dfc:	2b60      	cmp	r3, #96	; 0x60
 8009dfe:	d908      	bls.n	8009e12 <f_printf+0x13e>
 8009e00:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e04:	2b7a      	cmp	r3, #122	; 0x7a
 8009e06:	d804      	bhi.n	8009e12 <f_printf+0x13e>
 8009e08:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e0c:	3b20      	subs	r3, #32
 8009e0e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8009e12:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009e16:	3b42      	subs	r3, #66	; 0x42
 8009e18:	2b16      	cmp	r3, #22
 8009e1a:	f200 8098 	bhi.w	8009f4e <f_printf+0x27a>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <f_printf+0x150>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009f2f 	.word	0x08009f2f
 8009e28:	08009f17 	.word	0x08009f17
 8009e2c:	08009f3f 	.word	0x08009f3f
 8009e30:	08009f4f 	.word	0x08009f4f
 8009e34:	08009f4f 	.word	0x08009f4f
 8009e38:	08009f4f 	.word	0x08009f4f
 8009e3c:	08009f4f 	.word	0x08009f4f
 8009e40:	08009f4f 	.word	0x08009f4f
 8009e44:	08009f4f 	.word	0x08009f4f
 8009e48:	08009f4f 	.word	0x08009f4f
 8009e4c:	08009f4f 	.word	0x08009f4f
 8009e50:	08009f4f 	.word	0x08009f4f
 8009e54:	08009f4f 	.word	0x08009f4f
 8009e58:	08009f37 	.word	0x08009f37
 8009e5c:	08009f4f 	.word	0x08009f4f
 8009e60:	08009f4f 	.word	0x08009f4f
 8009e64:	08009f4f 	.word	0x08009f4f
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009f4f 	.word	0x08009f4f
 8009e70:	08009f3f 	.word	0x08009f3f
 8009e74:	08009f4f 	.word	0x08009f4f
 8009e78:	08009f4f 	.word	0x08009f4f
 8009e7c:	08009f47 	.word	0x08009f47
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e82:	1d1a      	adds	r2, r3, #4
 8009e84:	67ba      	str	r2, [r7, #120]	; 0x78
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e90:	e004      	b.n	8009e9c <f_printf+0x1c8>
 8009e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e96:	3301      	adds	r3, #1
 8009e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009e9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f3      	bne.n	8009e92 <f_printf+0x1be>
			if (!(f & 2)) {
 8009eaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d11a      	bne.n	8009eec <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8009eb6:	e005      	b.n	8009ec4 <f_printf+0x1f0>
 8009eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ebc:	2120      	movs	r1, #32
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff fe92 	bl	8009be8 <putc_bfd>
 8009ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ece:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d8f0      	bhi.n	8009eb8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8009ed6:	e009      	b.n	8009eec <f_printf+0x218>
 8009ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff fe7e 	bl	8009be8 <putc_bfd>
 8009eec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d1f1      	bne.n	8009ed8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009ef4:	e005      	b.n	8009f02 <f_printf+0x22e>
 8009ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009efa:	2120      	movs	r1, #32
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7ff fe73 	bl	8009be8 <putc_bfd>
 8009f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d8f0      	bhi.n	8009ef6 <f_printf+0x222>
			continue;
 8009f14:	e0ec      	b.n	800a0f0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8009f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f18:	1d1a      	adds	r2, r3, #4
 8009f1a:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	b2da      	uxtb	r2, r3
 8009f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fe5e 	bl	8009be8 <putc_bfd>
 8009f2c:	e0e0      	b.n	800a0f0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8009f2e:	2302      	movs	r3, #2
 8009f30:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f34:	e014      	b.n	8009f60 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8009f36:	2308      	movs	r3, #8
 8009f38:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f3c:	e010      	b.n	8009f60 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009f3e:	230a      	movs	r3, #10
 8009f40:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f44:	e00c      	b.n	8009f60 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8009f46:	2310      	movs	r3, #16
 8009f48:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009f4c:	e008      	b.n	8009f60 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009f4e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff fe45 	bl	8009be8 <putc_bfd>
 8009f5e:	e0c7      	b.n	800a0f0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009f60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <f_printf+0x2a2>
 8009f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f6e:	1d1a      	adds	r2, r3, #4
 8009f70:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	e00c      	b.n	8009f90 <f_printf+0x2bc>
 8009f76:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009f7a:	2b44      	cmp	r3, #68	; 0x44
 8009f7c:	d104      	bne.n	8009f88 <f_printf+0x2b4>
 8009f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f80:	1d1a      	adds	r2, r3, #4
 8009f82:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	e003      	b.n	8009f90 <f_printf+0x2bc>
 8009f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	67ba      	str	r2, [r7, #120]	; 0x78
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 8009f94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009f98:	2b44      	cmp	r3, #68	; 0x44
 8009f9a:	d10e      	bne.n	8009fba <f_printf+0x2e6>
 8009f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da0a      	bge.n	8009fba <f_printf+0x2e6>
			v = 0 - v;
 8009fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa8:	425b      	negs	r3, r3
 8009faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 8009fae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009fb2:	f043 0308 	orr.w	r3, r3, #8
 8009fb6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8009fc0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8009fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fcc:	fb02 f201 	mul.w	r2, r2, r1
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8009fd6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8009fda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8009fe6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009fea:	2b09      	cmp	r3, #9
 8009fec:	d90b      	bls.n	800a006 <f_printf+0x332>
 8009fee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009ff2:	2b78      	cmp	r3, #120	; 0x78
 8009ff4:	d101      	bne.n	8009ffa <f_printf+0x326>
 8009ff6:	2227      	movs	r2, #39	; 0x27
 8009ff8:	e000      	b.n	8009ffc <f_printf+0x328>
 8009ffa:	2207      	movs	r2, #7
 8009ffc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a000:	4413      	add	r3, r2
 800a002:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a006:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a00a:	1c5a      	adds	r2, r3, #1
 800a00c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a010:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a014:	3230      	adds	r2, #48	; 0x30
 800a016:	b2d2      	uxtb	r2, r2
 800a018:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a01c:	440b      	add	r3, r1
 800a01e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <f_printf+0x35e>
 800a02a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a02e:	2b1f      	cmp	r3, #31
 800a030:	d9c6      	bls.n	8009fc0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a032:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a036:	f003 0308 	and.w	r3, r3, #8
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <f_printf+0x380>
 800a03e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a048:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a04c:	4413      	add	r3, r2
 800a04e:	222d      	movs	r2, #45	; 0x2d
 800a050:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a05c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a060:	f003 0301 	and.w	r3, r3, #1
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <f_printf+0x398>
 800a068:	2330      	movs	r3, #48	; 0x30
 800a06a:	e000      	b.n	800a06e <f_printf+0x39a>
 800a06c:	2320      	movs	r3, #32
 800a06e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a072:	e007      	b.n	800a084 <f_printf+0x3b0>
 800a074:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a07c:	4611      	mov	r1, r2
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff fdb2 	bl	8009be8 <putc_bfd>
 800a084:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a088:	f003 0302 	and.w	r3, r3, #2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d108      	bne.n	800a0a2 <f_printf+0x3ce>
 800a090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a09a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d8e8      	bhi.n	800a074 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800a0a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0ac:	f107 020c 	add.w	r2, r7, #12
 800a0b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0b4:	4413      	add	r3, r2
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff fd92 	bl	8009be8 <putc_bfd>
		} while (i);
 800a0c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1ea      	bne.n	800a0a2 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800a0cc:	e007      	b.n	800a0de <f_printf+0x40a>
 800a0ce:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a0d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0d6:	4611      	mov	r1, r2
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fd85 	bl	8009be8 <putc_bfd>
 800a0de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0e2:	1c5a      	adds	r2, r3, #1
 800a0e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a0e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d8ee      	bhi.n	800a0ce <f_printf+0x3fa>
		c = *fmt++;
 800a0f0:	e5fe      	b.n	8009cf0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <f_printf+0x424>
		if (!c) break;
 800a0f6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a0f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fdb0 	bl	8009c62 <putc_flush>
 800a102:	4603      	mov	r3, r0
}
 800a104:	4618      	mov	r0, r3
 800a106:	379c      	adds	r7, #156	; 0x9c
 800a108:	46bd      	mov	sp, r7
 800a10a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a10e:	b003      	add	sp, #12
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop

0800a114 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a122:	2301      	movs	r3, #1
 800a124:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a126:	2300      	movs	r3, #0
 800a128:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a12a:	4b1e      	ldr	r3, [pc, #120]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a12c:	7a5b      	ldrb	r3, [r3, #9]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d131      	bne.n	800a198 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a134:	4b1b      	ldr	r3, [pc, #108]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a136:	7a5b      	ldrb	r3, [r3, #9]
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	4b19      	ldr	r3, [pc, #100]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a13e:	2100      	movs	r1, #0
 800a140:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a142:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a144:	7a5b      	ldrb	r3, [r3, #9]
 800a146:	b2db      	uxtb	r3, r3
 800a148:	4a16      	ldr	r2, [pc, #88]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a152:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a154:	7a5b      	ldrb	r3, [r3, #9]
 800a156:	b2db      	uxtb	r3, r3
 800a158:	461a      	mov	r2, r3
 800a15a:	4b12      	ldr	r3, [pc, #72]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a15c:	4413      	add	r3, r2
 800a15e:	79fa      	ldrb	r2, [r7, #7]
 800a160:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a162:	4b10      	ldr	r3, [pc, #64]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a164:	7a5b      	ldrb	r3, [r3, #9]
 800a166:	b2db      	uxtb	r3, r3
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	b2d1      	uxtb	r1, r2
 800a16c:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <FATFS_LinkDriverEx+0x90>)
 800a16e:	7251      	strb	r1, [r2, #9]
 800a170:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	3330      	adds	r3, #48	; 0x30
 800a176:	b2da      	uxtb	r2, r3
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	3301      	adds	r3, #1
 800a180:	223a      	movs	r2, #58	; 0x3a
 800a182:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	3302      	adds	r3, #2
 800a188:	222f      	movs	r2, #47	; 0x2f
 800a18a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	3303      	adds	r3, #3
 800a190:	2200      	movs	r2, #0
 800a192:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	371c      	adds	r7, #28
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr
 800a1a4:	2000035c 	.word	0x2000035c

0800a1a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff ffac 	bl	800a114 <FATFS_LinkDriverEx>
 800a1bc:	4603      	mov	r3, r0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	6039      	str	r1, [r7, #0]
 800a1d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a1d4:	88fb      	ldrh	r3, [r7, #6]
 800a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d8:	d802      	bhi.n	800a1e0 <ff_convert+0x18>
		c = chr;
 800a1da:	88fb      	ldrh	r3, [r7, #6]
 800a1dc:	81fb      	strh	r3, [r7, #14]
 800a1de:	e025      	b.n	800a22c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	2bff      	cmp	r3, #255	; 0xff
 800a1ea:	d805      	bhi.n	800a1f8 <ff_convert+0x30>
 800a1ec:	88fb      	ldrh	r3, [r7, #6]
 800a1ee:	3b80      	subs	r3, #128	; 0x80
 800a1f0:	4a11      	ldr	r2, [pc, #68]	; (800a238 <ff_convert+0x70>)
 800a1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1f6:	e000      	b.n	800a1fa <ff_convert+0x32>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	81fb      	strh	r3, [r7, #14]
 800a1fc:	e016      	b.n	800a22c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a1fe:	2300      	movs	r3, #0
 800a200:	81fb      	strh	r3, [r7, #14]
 800a202:	e009      	b.n	800a218 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a204:	89fb      	ldrh	r3, [r7, #14]
 800a206:	4a0c      	ldr	r2, [pc, #48]	; (800a238 <ff_convert+0x70>)
 800a208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d006      	beq.n	800a220 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a212:	89fb      	ldrh	r3, [r7, #14]
 800a214:	3301      	adds	r3, #1
 800a216:	81fb      	strh	r3, [r7, #14]
 800a218:	89fb      	ldrh	r3, [r7, #14]
 800a21a:	2b7f      	cmp	r3, #127	; 0x7f
 800a21c:	d9f2      	bls.n	800a204 <ff_convert+0x3c>
 800a21e:	e000      	b.n	800a222 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a220:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a222:	89fb      	ldrh	r3, [r7, #14]
 800a224:	3380      	adds	r3, #128	; 0x80
 800a226:	b29b      	uxth	r3, r3
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a22c:	89fb      	ldrh	r3, [r7, #14]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3714      	adds	r7, #20
 800a232:	46bd      	mov	sp, r7
 800a234:	bc80      	pop	{r7}
 800a236:	4770      	bx	lr
 800a238:	0800ad88 	.word	0x0800ad88

0800a23c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	4603      	mov	r3, r0
 800a244:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24c:	d201      	bcs.n	800a252 <ff_wtoupper+0x16>
 800a24e:	4b3d      	ldr	r3, [pc, #244]	; (800a344 <ff_wtoupper+0x108>)
 800a250:	e000      	b.n	800a254 <ff_wtoupper+0x18>
 800a252:	4b3d      	ldr	r3, [pc, #244]	; (800a348 <ff_wtoupper+0x10c>)
 800a254:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	1c9a      	adds	r2, r3, #2
 800a25a:	617a      	str	r2, [r7, #20]
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a260:	8a7b      	ldrh	r3, [r7, #18]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d068      	beq.n	800a338 <ff_wtoupper+0xfc>
 800a266:	88fa      	ldrh	r2, [r7, #6]
 800a268:	8a7b      	ldrh	r3, [r7, #18]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d364      	bcc.n	800a338 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	1c9a      	adds	r2, r3, #2
 800a272:	617a      	str	r2, [r7, #20]
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	823b      	strh	r3, [r7, #16]
 800a278:	8a3b      	ldrh	r3, [r7, #16]
 800a27a:	0a1b      	lsrs	r3, r3, #8
 800a27c:	81fb      	strh	r3, [r7, #14]
 800a27e:	8a3b      	ldrh	r3, [r7, #16]
 800a280:	b2db      	uxtb	r3, r3
 800a282:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a284:	88fa      	ldrh	r2, [r7, #6]
 800a286:	8a79      	ldrh	r1, [r7, #18]
 800a288:	8a3b      	ldrh	r3, [r7, #16]
 800a28a:	440b      	add	r3, r1
 800a28c:	429a      	cmp	r2, r3
 800a28e:	da49      	bge.n	800a324 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a290:	89fb      	ldrh	r3, [r7, #14]
 800a292:	2b08      	cmp	r3, #8
 800a294:	d84f      	bhi.n	800a336 <ff_wtoupper+0xfa>
 800a296:	a201      	add	r2, pc, #4	; (adr r2, 800a29c <ff_wtoupper+0x60>)
 800a298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2d3 	.word	0x0800a2d3
 800a2a4:	0800a2e9 	.word	0x0800a2e9
 800a2a8:	0800a2f1 	.word	0x0800a2f1
 800a2ac:	0800a2f9 	.word	0x0800a2f9
 800a2b0:	0800a301 	.word	0x0800a301
 800a2b4:	0800a309 	.word	0x0800a309
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a319 	.word	0x0800a319
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a2c0:	88fa      	ldrh	r2, [r7, #6]
 800a2c2:	8a7b      	ldrh	r3, [r7, #18]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	80fb      	strh	r3, [r7, #6]
 800a2d0:	e027      	b.n	800a322 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a2d2:	88fa      	ldrh	r2, [r7, #6]
 800a2d4:	8a7b      	ldrh	r3, [r7, #18]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	88fa      	ldrh	r2, [r7, #6]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	80fb      	strh	r3, [r7, #6]
 800a2e6:	e01c      	b.n	800a322 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	3b10      	subs	r3, #16
 800a2ec:	80fb      	strh	r3, [r7, #6]
 800a2ee:	e018      	b.n	800a322 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a2f0:	88fb      	ldrh	r3, [r7, #6]
 800a2f2:	3b20      	subs	r3, #32
 800a2f4:	80fb      	strh	r3, [r7, #6]
 800a2f6:	e014      	b.n	800a322 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a2f8:	88fb      	ldrh	r3, [r7, #6]
 800a2fa:	3b30      	subs	r3, #48	; 0x30
 800a2fc:	80fb      	strh	r3, [r7, #6]
 800a2fe:	e010      	b.n	800a322 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	3b1a      	subs	r3, #26
 800a304:	80fb      	strh	r3, [r7, #6]
 800a306:	e00c      	b.n	800a322 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a308:	88fb      	ldrh	r3, [r7, #6]
 800a30a:	3308      	adds	r3, #8
 800a30c:	80fb      	strh	r3, [r7, #6]
 800a30e:	e008      	b.n	800a322 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	3b50      	subs	r3, #80	; 0x50
 800a314:	80fb      	strh	r3, [r7, #6]
 800a316:	e004      	b.n	800a322 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a31e:	80fb      	strh	r3, [r7, #6]
 800a320:	bf00      	nop
			}
			break;
 800a322:	e008      	b.n	800a336 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a324:	89fb      	ldrh	r3, [r7, #14]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d195      	bne.n	800a256 <ff_wtoupper+0x1a>
 800a32a:	8a3b      	ldrh	r3, [r7, #16]
 800a32c:	005b      	lsls	r3, r3, #1
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	4413      	add	r3, r2
 800a332:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a334:	e78f      	b.n	800a256 <ff_wtoupper+0x1a>
			break;
 800a336:	bf00      	nop
	}

	return chr;
 800a338:	88fb      	ldrh	r3, [r7, #6]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr
 800a344:	0800ae88 	.word	0x0800ae88
 800a348:	0800b07c 	.word	0x0800b07c

0800a34c <__errno>:
 800a34c:	4b01      	ldr	r3, [pc, #4]	; (800a354 <__errno+0x8>)
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	200000ac 	.word	0x200000ac

0800a358 <__libc_init_array>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	2600      	movs	r6, #0
 800a35c:	4d0c      	ldr	r5, [pc, #48]	; (800a390 <__libc_init_array+0x38>)
 800a35e:	4c0d      	ldr	r4, [pc, #52]	; (800a394 <__libc_init_array+0x3c>)
 800a360:	1b64      	subs	r4, r4, r5
 800a362:	10a4      	asrs	r4, r4, #2
 800a364:	42a6      	cmp	r6, r4
 800a366:	d109      	bne.n	800a37c <__libc_init_array+0x24>
 800a368:	f000 fc5c 	bl	800ac24 <_init>
 800a36c:	2600      	movs	r6, #0
 800a36e:	4d0a      	ldr	r5, [pc, #40]	; (800a398 <__libc_init_array+0x40>)
 800a370:	4c0a      	ldr	r4, [pc, #40]	; (800a39c <__libc_init_array+0x44>)
 800a372:	1b64      	subs	r4, r4, r5
 800a374:	10a4      	asrs	r4, r4, #2
 800a376:	42a6      	cmp	r6, r4
 800a378:	d105      	bne.n	800a386 <__libc_init_array+0x2e>
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a380:	4798      	blx	r3
 800a382:	3601      	adds	r6, #1
 800a384:	e7ee      	b.n	800a364 <__libc_init_array+0xc>
 800a386:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38a:	4798      	blx	r3
 800a38c:	3601      	adds	r6, #1
 800a38e:	e7f2      	b.n	800a376 <__libc_init_array+0x1e>
 800a390:	0800b174 	.word	0x0800b174
 800a394:	0800b174 	.word	0x0800b174
 800a398:	0800b174 	.word	0x0800b174
 800a39c:	0800b178 	.word	0x0800b178

0800a3a0 <memset>:
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	4402      	add	r2, r0
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d100      	bne.n	800a3aa <memset+0xa>
 800a3a8:	4770      	bx	lr
 800a3aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ae:	e7f9      	b.n	800a3a4 <memset+0x4>

0800a3b0 <siprintf>:
 800a3b0:	b40e      	push	{r1, r2, r3}
 800a3b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3b6:	b500      	push	{lr}
 800a3b8:	b09c      	sub	sp, #112	; 0x70
 800a3ba:	ab1d      	add	r3, sp, #116	; 0x74
 800a3bc:	9002      	str	r0, [sp, #8]
 800a3be:	9006      	str	r0, [sp, #24]
 800a3c0:	9107      	str	r1, [sp, #28]
 800a3c2:	9104      	str	r1, [sp, #16]
 800a3c4:	4808      	ldr	r0, [pc, #32]	; (800a3e8 <siprintf+0x38>)
 800a3c6:	4909      	ldr	r1, [pc, #36]	; (800a3ec <siprintf+0x3c>)
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	9105      	str	r1, [sp, #20]
 800a3ce:	6800      	ldr	r0, [r0, #0]
 800a3d0:	a902      	add	r1, sp, #8
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	f000 f868 	bl	800a4a8 <_svfiprintf_r>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	9b02      	ldr	r3, [sp, #8]
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	b01c      	add	sp, #112	; 0x70
 800a3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e4:	b003      	add	sp, #12
 800a3e6:	4770      	bx	lr
 800a3e8:	200000ac 	.word	0x200000ac
 800a3ec:	ffff0208 	.word	0xffff0208

0800a3f0 <__ssputs_r>:
 800a3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f4:	688e      	ldr	r6, [r1, #8]
 800a3f6:	4682      	mov	sl, r0
 800a3f8:	429e      	cmp	r6, r3
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	4690      	mov	r8, r2
 800a3fe:	461f      	mov	r7, r3
 800a400:	d838      	bhi.n	800a474 <__ssputs_r+0x84>
 800a402:	898a      	ldrh	r2, [r1, #12]
 800a404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a408:	d032      	beq.n	800a470 <__ssputs_r+0x80>
 800a40a:	6825      	ldr	r5, [r4, #0]
 800a40c:	6909      	ldr	r1, [r1, #16]
 800a40e:	3301      	adds	r3, #1
 800a410:	eba5 0901 	sub.w	r9, r5, r1
 800a414:	6965      	ldr	r5, [r4, #20]
 800a416:	444b      	add	r3, r9
 800a418:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a41c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a420:	106d      	asrs	r5, r5, #1
 800a422:	429d      	cmp	r5, r3
 800a424:	bf38      	it	cc
 800a426:	461d      	movcc	r5, r3
 800a428:	0553      	lsls	r3, r2, #21
 800a42a:	d531      	bpl.n	800a490 <__ssputs_r+0xa0>
 800a42c:	4629      	mov	r1, r5
 800a42e:	f000 fb53 	bl	800aad8 <_malloc_r>
 800a432:	4606      	mov	r6, r0
 800a434:	b950      	cbnz	r0, 800a44c <__ssputs_r+0x5c>
 800a436:	230c      	movs	r3, #12
 800a438:	f04f 30ff 	mov.w	r0, #4294967295
 800a43c:	f8ca 3000 	str.w	r3, [sl]
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a446:	81a3      	strh	r3, [r4, #12]
 800a448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a44c:	464a      	mov	r2, r9
 800a44e:	6921      	ldr	r1, [r4, #16]
 800a450:	f000 face 	bl	800a9f0 <memcpy>
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	6126      	str	r6, [r4, #16]
 800a462:	444e      	add	r6, r9
 800a464:	6026      	str	r6, [r4, #0]
 800a466:	463e      	mov	r6, r7
 800a468:	6165      	str	r5, [r4, #20]
 800a46a:	eba5 0509 	sub.w	r5, r5, r9
 800a46e:	60a5      	str	r5, [r4, #8]
 800a470:	42be      	cmp	r6, r7
 800a472:	d900      	bls.n	800a476 <__ssputs_r+0x86>
 800a474:	463e      	mov	r6, r7
 800a476:	4632      	mov	r2, r6
 800a478:	4641      	mov	r1, r8
 800a47a:	6820      	ldr	r0, [r4, #0]
 800a47c:	f000 fac6 	bl	800aa0c <memmove>
 800a480:	68a3      	ldr	r3, [r4, #8]
 800a482:	6822      	ldr	r2, [r4, #0]
 800a484:	1b9b      	subs	r3, r3, r6
 800a486:	4432      	add	r2, r6
 800a488:	2000      	movs	r0, #0
 800a48a:	60a3      	str	r3, [r4, #8]
 800a48c:	6022      	str	r2, [r4, #0]
 800a48e:	e7db      	b.n	800a448 <__ssputs_r+0x58>
 800a490:	462a      	mov	r2, r5
 800a492:	f000 fb7b 	bl	800ab8c <_realloc_r>
 800a496:	4606      	mov	r6, r0
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1e1      	bne.n	800a460 <__ssputs_r+0x70>
 800a49c:	4650      	mov	r0, sl
 800a49e:	6921      	ldr	r1, [r4, #16]
 800a4a0:	f000 face 	bl	800aa40 <_free_r>
 800a4a4:	e7c7      	b.n	800a436 <__ssputs_r+0x46>
	...

0800a4a8 <_svfiprintf_r>:
 800a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ac:	4698      	mov	r8, r3
 800a4ae:	898b      	ldrh	r3, [r1, #12]
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	061b      	lsls	r3, r3, #24
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	4614      	mov	r4, r2
 800a4b8:	b09d      	sub	sp, #116	; 0x74
 800a4ba:	d50e      	bpl.n	800a4da <_svfiprintf_r+0x32>
 800a4bc:	690b      	ldr	r3, [r1, #16]
 800a4be:	b963      	cbnz	r3, 800a4da <_svfiprintf_r+0x32>
 800a4c0:	2140      	movs	r1, #64	; 0x40
 800a4c2:	f000 fb09 	bl	800aad8 <_malloc_r>
 800a4c6:	6028      	str	r0, [r5, #0]
 800a4c8:	6128      	str	r0, [r5, #16]
 800a4ca:	b920      	cbnz	r0, 800a4d6 <_svfiprintf_r+0x2e>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e0d1      	b.n	800a67a <_svfiprintf_r+0x1d2>
 800a4d6:	2340      	movs	r3, #64	; 0x40
 800a4d8:	616b      	str	r3, [r5, #20]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4de:	2320      	movs	r3, #32
 800a4e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4e4:	2330      	movs	r3, #48	; 0x30
 800a4e6:	f04f 0901 	mov.w	r9, #1
 800a4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a694 <_svfiprintf_r+0x1ec>
 800a4f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	469a      	mov	sl, r3
 800a4fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4fe:	b10a      	cbz	r2, 800a504 <_svfiprintf_r+0x5c>
 800a500:	2a25      	cmp	r2, #37	; 0x25
 800a502:	d1f9      	bne.n	800a4f8 <_svfiprintf_r+0x50>
 800a504:	ebba 0b04 	subs.w	fp, sl, r4
 800a508:	d00b      	beq.n	800a522 <_svfiprintf_r+0x7a>
 800a50a:	465b      	mov	r3, fp
 800a50c:	4622      	mov	r2, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	4638      	mov	r0, r7
 800a512:	f7ff ff6d 	bl	800a3f0 <__ssputs_r>
 800a516:	3001      	adds	r0, #1
 800a518:	f000 80aa 	beq.w	800a670 <_svfiprintf_r+0x1c8>
 800a51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a51e:	445a      	add	r2, fp
 800a520:	9209      	str	r2, [sp, #36]	; 0x24
 800a522:	f89a 3000 	ldrb.w	r3, [sl]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 80a2 	beq.w	800a670 <_svfiprintf_r+0x1c8>
 800a52c:	2300      	movs	r3, #0
 800a52e:	f04f 32ff 	mov.w	r2, #4294967295
 800a532:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a536:	f10a 0a01 	add.w	sl, sl, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	9307      	str	r3, [sp, #28]
 800a53e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a542:	931a      	str	r3, [sp, #104]	; 0x68
 800a544:	4654      	mov	r4, sl
 800a546:	2205      	movs	r2, #5
 800a548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a54c:	4851      	ldr	r0, [pc, #324]	; (800a694 <_svfiprintf_r+0x1ec>)
 800a54e:	f000 fa41 	bl	800a9d4 <memchr>
 800a552:	9a04      	ldr	r2, [sp, #16]
 800a554:	b9d8      	cbnz	r0, 800a58e <_svfiprintf_r+0xe6>
 800a556:	06d0      	lsls	r0, r2, #27
 800a558:	bf44      	itt	mi
 800a55a:	2320      	movmi	r3, #32
 800a55c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a560:	0711      	lsls	r1, r2, #28
 800a562:	bf44      	itt	mi
 800a564:	232b      	movmi	r3, #43	; 0x2b
 800a566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a56a:	f89a 3000 	ldrb.w	r3, [sl]
 800a56e:	2b2a      	cmp	r3, #42	; 0x2a
 800a570:	d015      	beq.n	800a59e <_svfiprintf_r+0xf6>
 800a572:	4654      	mov	r4, sl
 800a574:	2000      	movs	r0, #0
 800a576:	f04f 0c0a 	mov.w	ip, #10
 800a57a:	9a07      	ldr	r2, [sp, #28]
 800a57c:	4621      	mov	r1, r4
 800a57e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a582:	3b30      	subs	r3, #48	; 0x30
 800a584:	2b09      	cmp	r3, #9
 800a586:	d94e      	bls.n	800a626 <_svfiprintf_r+0x17e>
 800a588:	b1b0      	cbz	r0, 800a5b8 <_svfiprintf_r+0x110>
 800a58a:	9207      	str	r2, [sp, #28]
 800a58c:	e014      	b.n	800a5b8 <_svfiprintf_r+0x110>
 800a58e:	eba0 0308 	sub.w	r3, r0, r8
 800a592:	fa09 f303 	lsl.w	r3, r9, r3
 800a596:	4313      	orrs	r3, r2
 800a598:	46a2      	mov	sl, r4
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	e7d2      	b.n	800a544 <_svfiprintf_r+0x9c>
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	1d19      	adds	r1, r3, #4
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	9103      	str	r1, [sp, #12]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	bfbb      	ittet	lt
 800a5aa:	425b      	neglt	r3, r3
 800a5ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b0:	9307      	strge	r3, [sp, #28]
 800a5b2:	9307      	strlt	r3, [sp, #28]
 800a5b4:	bfb8      	it	lt
 800a5b6:	9204      	strlt	r2, [sp, #16]
 800a5b8:	7823      	ldrb	r3, [r4, #0]
 800a5ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a5bc:	d10c      	bne.n	800a5d8 <_svfiprintf_r+0x130>
 800a5be:	7863      	ldrb	r3, [r4, #1]
 800a5c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c2:	d135      	bne.n	800a630 <_svfiprintf_r+0x188>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3402      	adds	r4, #2
 800a5c8:	1d1a      	adds	r2, r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	9203      	str	r2, [sp, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfb8      	it	lt
 800a5d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5d6:	9305      	str	r3, [sp, #20]
 800a5d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6a4 <_svfiprintf_r+0x1fc>
 800a5dc:	2203      	movs	r2, #3
 800a5de:	4650      	mov	r0, sl
 800a5e0:	7821      	ldrb	r1, [r4, #0]
 800a5e2:	f000 f9f7 	bl	800a9d4 <memchr>
 800a5e6:	b140      	cbz	r0, 800a5fa <_svfiprintf_r+0x152>
 800a5e8:	2340      	movs	r3, #64	; 0x40
 800a5ea:	eba0 000a 	sub.w	r0, r0, sl
 800a5ee:	fa03 f000 	lsl.w	r0, r3, r0
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	3401      	adds	r4, #1
 800a5f6:	4303      	orrs	r3, r0
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5fe:	2206      	movs	r2, #6
 800a600:	4825      	ldr	r0, [pc, #148]	; (800a698 <_svfiprintf_r+0x1f0>)
 800a602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a606:	f000 f9e5 	bl	800a9d4 <memchr>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d038      	beq.n	800a680 <_svfiprintf_r+0x1d8>
 800a60e:	4b23      	ldr	r3, [pc, #140]	; (800a69c <_svfiprintf_r+0x1f4>)
 800a610:	bb1b      	cbnz	r3, 800a65a <_svfiprintf_r+0x1b2>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	3307      	adds	r3, #7
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	3308      	adds	r3, #8
 800a61c:	9303      	str	r3, [sp, #12]
 800a61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a620:	4433      	add	r3, r6
 800a622:	9309      	str	r3, [sp, #36]	; 0x24
 800a624:	e767      	b.n	800a4f6 <_svfiprintf_r+0x4e>
 800a626:	460c      	mov	r4, r1
 800a628:	2001      	movs	r0, #1
 800a62a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a62e:	e7a5      	b.n	800a57c <_svfiprintf_r+0xd4>
 800a630:	2300      	movs	r3, #0
 800a632:	f04f 0c0a 	mov.w	ip, #10
 800a636:	4619      	mov	r1, r3
 800a638:	3401      	adds	r4, #1
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	4620      	mov	r0, r4
 800a63e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a642:	3a30      	subs	r2, #48	; 0x30
 800a644:	2a09      	cmp	r2, #9
 800a646:	d903      	bls.n	800a650 <_svfiprintf_r+0x1a8>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d0c5      	beq.n	800a5d8 <_svfiprintf_r+0x130>
 800a64c:	9105      	str	r1, [sp, #20]
 800a64e:	e7c3      	b.n	800a5d8 <_svfiprintf_r+0x130>
 800a650:	4604      	mov	r4, r0
 800a652:	2301      	movs	r3, #1
 800a654:	fb0c 2101 	mla	r1, ip, r1, r2
 800a658:	e7f0      	b.n	800a63c <_svfiprintf_r+0x194>
 800a65a:	ab03      	add	r3, sp, #12
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	462a      	mov	r2, r5
 800a660:	4638      	mov	r0, r7
 800a662:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <_svfiprintf_r+0x1f8>)
 800a664:	a904      	add	r1, sp, #16
 800a666:	f3af 8000 	nop.w
 800a66a:	1c42      	adds	r2, r0, #1
 800a66c:	4606      	mov	r6, r0
 800a66e:	d1d6      	bne.n	800a61e <_svfiprintf_r+0x176>
 800a670:	89ab      	ldrh	r3, [r5, #12]
 800a672:	065b      	lsls	r3, r3, #25
 800a674:	f53f af2c 	bmi.w	800a4d0 <_svfiprintf_r+0x28>
 800a678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a67a:	b01d      	add	sp, #116	; 0x74
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	ab03      	add	r3, sp, #12
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	462a      	mov	r2, r5
 800a686:	4638      	mov	r0, r7
 800a688:	4b05      	ldr	r3, [pc, #20]	; (800a6a0 <_svfiprintf_r+0x1f8>)
 800a68a:	a904      	add	r1, sp, #16
 800a68c:	f000 f87c 	bl	800a788 <_printf_i>
 800a690:	e7eb      	b.n	800a66a <_svfiprintf_r+0x1c2>
 800a692:	bf00      	nop
 800a694:	0800b138 	.word	0x0800b138
 800a698:	0800b142 	.word	0x0800b142
 800a69c:	00000000 	.word	0x00000000
 800a6a0:	0800a3f1 	.word	0x0800a3f1
 800a6a4:	0800b13e 	.word	0x0800b13e

0800a6a8 <_printf_common>:
 800a6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	4616      	mov	r6, r2
 800a6ae:	4699      	mov	r9, r3
 800a6b0:	688a      	ldr	r2, [r1, #8]
 800a6b2:	690b      	ldr	r3, [r1, #16]
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	bfb8      	it	lt
 800a6ba:	4613      	movlt	r3, r2
 800a6bc:	6033      	str	r3, [r6, #0]
 800a6be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6c8:	b10a      	cbz	r2, 800a6ce <_printf_common+0x26>
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	0699      	lsls	r1, r3, #26
 800a6d2:	bf42      	ittt	mi
 800a6d4:	6833      	ldrmi	r3, [r6, #0]
 800a6d6:	3302      	addmi	r3, #2
 800a6d8:	6033      	strmi	r3, [r6, #0]
 800a6da:	6825      	ldr	r5, [r4, #0]
 800a6dc:	f015 0506 	ands.w	r5, r5, #6
 800a6e0:	d106      	bne.n	800a6f0 <_printf_common+0x48>
 800a6e2:	f104 0a19 	add.w	sl, r4, #25
 800a6e6:	68e3      	ldr	r3, [r4, #12]
 800a6e8:	6832      	ldr	r2, [r6, #0]
 800a6ea:	1a9b      	subs	r3, r3, r2
 800a6ec:	42ab      	cmp	r3, r5
 800a6ee:	dc28      	bgt.n	800a742 <_printf_common+0x9a>
 800a6f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6f4:	1e13      	subs	r3, r2, #0
 800a6f6:	6822      	ldr	r2, [r4, #0]
 800a6f8:	bf18      	it	ne
 800a6fa:	2301      	movne	r3, #1
 800a6fc:	0692      	lsls	r2, r2, #26
 800a6fe:	d42d      	bmi.n	800a75c <_printf_common+0xb4>
 800a700:	4649      	mov	r1, r9
 800a702:	4638      	mov	r0, r7
 800a704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a708:	47c0      	blx	r8
 800a70a:	3001      	adds	r0, #1
 800a70c:	d020      	beq.n	800a750 <_printf_common+0xa8>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	68e5      	ldr	r5, [r4, #12]
 800a712:	f003 0306 	and.w	r3, r3, #6
 800a716:	2b04      	cmp	r3, #4
 800a718:	bf18      	it	ne
 800a71a:	2500      	movne	r5, #0
 800a71c:	6832      	ldr	r2, [r6, #0]
 800a71e:	f04f 0600 	mov.w	r6, #0
 800a722:	68a3      	ldr	r3, [r4, #8]
 800a724:	bf08      	it	eq
 800a726:	1aad      	subeq	r5, r5, r2
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	bf08      	it	eq
 800a72c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a730:	4293      	cmp	r3, r2
 800a732:	bfc4      	itt	gt
 800a734:	1a9b      	subgt	r3, r3, r2
 800a736:	18ed      	addgt	r5, r5, r3
 800a738:	341a      	adds	r4, #26
 800a73a:	42b5      	cmp	r5, r6
 800a73c:	d11a      	bne.n	800a774 <_printf_common+0xcc>
 800a73e:	2000      	movs	r0, #0
 800a740:	e008      	b.n	800a754 <_printf_common+0xac>
 800a742:	2301      	movs	r3, #1
 800a744:	4652      	mov	r2, sl
 800a746:	4649      	mov	r1, r9
 800a748:	4638      	mov	r0, r7
 800a74a:	47c0      	blx	r8
 800a74c:	3001      	adds	r0, #1
 800a74e:	d103      	bne.n	800a758 <_printf_common+0xb0>
 800a750:	f04f 30ff 	mov.w	r0, #4294967295
 800a754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a758:	3501      	adds	r5, #1
 800a75a:	e7c4      	b.n	800a6e6 <_printf_common+0x3e>
 800a75c:	2030      	movs	r0, #48	; 0x30
 800a75e:	18e1      	adds	r1, r4, r3
 800a760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a76a:	4422      	add	r2, r4
 800a76c:	3302      	adds	r3, #2
 800a76e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a772:	e7c5      	b.n	800a700 <_printf_common+0x58>
 800a774:	2301      	movs	r3, #1
 800a776:	4622      	mov	r2, r4
 800a778:	4649      	mov	r1, r9
 800a77a:	4638      	mov	r0, r7
 800a77c:	47c0      	blx	r8
 800a77e:	3001      	adds	r0, #1
 800a780:	d0e6      	beq.n	800a750 <_printf_common+0xa8>
 800a782:	3601      	adds	r6, #1
 800a784:	e7d9      	b.n	800a73a <_printf_common+0x92>
	...

0800a788 <_printf_i>:
 800a788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	460c      	mov	r4, r1
 800a78e:	7e27      	ldrb	r7, [r4, #24]
 800a790:	4691      	mov	r9, r2
 800a792:	2f78      	cmp	r7, #120	; 0x78
 800a794:	4680      	mov	r8, r0
 800a796:	469a      	mov	sl, r3
 800a798:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a79a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a79e:	d807      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7a0:	2f62      	cmp	r7, #98	; 0x62
 800a7a2:	d80a      	bhi.n	800a7ba <_printf_i+0x32>
 800a7a4:	2f00      	cmp	r7, #0
 800a7a6:	f000 80d9 	beq.w	800a95c <_printf_i+0x1d4>
 800a7aa:	2f58      	cmp	r7, #88	; 0x58
 800a7ac:	f000 80a4 	beq.w	800a8f8 <_printf_i+0x170>
 800a7b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a7b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a7b8:	e03a      	b.n	800a830 <_printf_i+0xa8>
 800a7ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a7be:	2b15      	cmp	r3, #21
 800a7c0:	d8f6      	bhi.n	800a7b0 <_printf_i+0x28>
 800a7c2:	a001      	add	r0, pc, #4	; (adr r0, 800a7c8 <_printf_i+0x40>)
 800a7c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a7c8:	0800a821 	.word	0x0800a821
 800a7cc:	0800a835 	.word	0x0800a835
 800a7d0:	0800a7b1 	.word	0x0800a7b1
 800a7d4:	0800a7b1 	.word	0x0800a7b1
 800a7d8:	0800a7b1 	.word	0x0800a7b1
 800a7dc:	0800a7b1 	.word	0x0800a7b1
 800a7e0:	0800a835 	.word	0x0800a835
 800a7e4:	0800a7b1 	.word	0x0800a7b1
 800a7e8:	0800a7b1 	.word	0x0800a7b1
 800a7ec:	0800a7b1 	.word	0x0800a7b1
 800a7f0:	0800a7b1 	.word	0x0800a7b1
 800a7f4:	0800a943 	.word	0x0800a943
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a925 	.word	0x0800a925
 800a800:	0800a7b1 	.word	0x0800a7b1
 800a804:	0800a7b1 	.word	0x0800a7b1
 800a808:	0800a965 	.word	0x0800a965
 800a80c:	0800a7b1 	.word	0x0800a7b1
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a7b1 	.word	0x0800a7b1
 800a818:	0800a7b1 	.word	0x0800a7b1
 800a81c:	0800a92d 	.word	0x0800a92d
 800a820:	680b      	ldr	r3, [r1, #0]
 800a822:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a826:	1d1a      	adds	r2, r3, #4
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	600a      	str	r2, [r1, #0]
 800a82c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a830:	2301      	movs	r3, #1
 800a832:	e0a4      	b.n	800a97e <_printf_i+0x1f6>
 800a834:	6825      	ldr	r5, [r4, #0]
 800a836:	6808      	ldr	r0, [r1, #0]
 800a838:	062e      	lsls	r6, r5, #24
 800a83a:	f100 0304 	add.w	r3, r0, #4
 800a83e:	d50a      	bpl.n	800a856 <_printf_i+0xce>
 800a840:	6805      	ldr	r5, [r0, #0]
 800a842:	600b      	str	r3, [r1, #0]
 800a844:	2d00      	cmp	r5, #0
 800a846:	da03      	bge.n	800a850 <_printf_i+0xc8>
 800a848:	232d      	movs	r3, #45	; 0x2d
 800a84a:	426d      	negs	r5, r5
 800a84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a850:	230a      	movs	r3, #10
 800a852:	485e      	ldr	r0, [pc, #376]	; (800a9cc <_printf_i+0x244>)
 800a854:	e019      	b.n	800a88a <_printf_i+0x102>
 800a856:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a85a:	6805      	ldr	r5, [r0, #0]
 800a85c:	600b      	str	r3, [r1, #0]
 800a85e:	bf18      	it	ne
 800a860:	b22d      	sxthne	r5, r5
 800a862:	e7ef      	b.n	800a844 <_printf_i+0xbc>
 800a864:	680b      	ldr	r3, [r1, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	1d18      	adds	r0, r3, #4
 800a86a:	6008      	str	r0, [r1, #0]
 800a86c:	0628      	lsls	r0, r5, #24
 800a86e:	d501      	bpl.n	800a874 <_printf_i+0xec>
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	e002      	b.n	800a87a <_printf_i+0xf2>
 800a874:	0669      	lsls	r1, r5, #25
 800a876:	d5fb      	bpl.n	800a870 <_printf_i+0xe8>
 800a878:	881d      	ldrh	r5, [r3, #0]
 800a87a:	2f6f      	cmp	r7, #111	; 0x6f
 800a87c:	bf0c      	ite	eq
 800a87e:	2308      	moveq	r3, #8
 800a880:	230a      	movne	r3, #10
 800a882:	4852      	ldr	r0, [pc, #328]	; (800a9cc <_printf_i+0x244>)
 800a884:	2100      	movs	r1, #0
 800a886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a88a:	6866      	ldr	r6, [r4, #4]
 800a88c:	2e00      	cmp	r6, #0
 800a88e:	bfa8      	it	ge
 800a890:	6821      	ldrge	r1, [r4, #0]
 800a892:	60a6      	str	r6, [r4, #8]
 800a894:	bfa4      	itt	ge
 800a896:	f021 0104 	bicge.w	r1, r1, #4
 800a89a:	6021      	strge	r1, [r4, #0]
 800a89c:	b90d      	cbnz	r5, 800a8a2 <_printf_i+0x11a>
 800a89e:	2e00      	cmp	r6, #0
 800a8a0:	d04d      	beq.n	800a93e <_printf_i+0x1b6>
 800a8a2:	4616      	mov	r6, r2
 800a8a4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8a8:	fb03 5711 	mls	r7, r3, r1, r5
 800a8ac:	5dc7      	ldrb	r7, [r0, r7]
 800a8ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b2:	462f      	mov	r7, r5
 800a8b4:	42bb      	cmp	r3, r7
 800a8b6:	460d      	mov	r5, r1
 800a8b8:	d9f4      	bls.n	800a8a4 <_printf_i+0x11c>
 800a8ba:	2b08      	cmp	r3, #8
 800a8bc:	d10b      	bne.n	800a8d6 <_printf_i+0x14e>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	07df      	lsls	r7, r3, #31
 800a8c2:	d508      	bpl.n	800a8d6 <_printf_i+0x14e>
 800a8c4:	6923      	ldr	r3, [r4, #16]
 800a8c6:	6861      	ldr	r1, [r4, #4]
 800a8c8:	4299      	cmp	r1, r3
 800a8ca:	bfde      	ittt	le
 800a8cc:	2330      	movle	r3, #48	; 0x30
 800a8ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8d6:	1b92      	subs	r2, r2, r6
 800a8d8:	6122      	str	r2, [r4, #16]
 800a8da:	464b      	mov	r3, r9
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4640      	mov	r0, r8
 800a8e0:	f8cd a000 	str.w	sl, [sp]
 800a8e4:	aa03      	add	r2, sp, #12
 800a8e6:	f7ff fedf 	bl	800a6a8 <_printf_common>
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d14c      	bne.n	800a988 <_printf_i+0x200>
 800a8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f2:	b004      	add	sp, #16
 800a8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f8:	4834      	ldr	r0, [pc, #208]	; (800a9cc <_printf_i+0x244>)
 800a8fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a8fe:	680e      	ldr	r6, [r1, #0]
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	f856 5b04 	ldr.w	r5, [r6], #4
 800a906:	061f      	lsls	r7, r3, #24
 800a908:	600e      	str	r6, [r1, #0]
 800a90a:	d514      	bpl.n	800a936 <_printf_i+0x1ae>
 800a90c:	07d9      	lsls	r1, r3, #31
 800a90e:	bf44      	itt	mi
 800a910:	f043 0320 	orrmi.w	r3, r3, #32
 800a914:	6023      	strmi	r3, [r4, #0]
 800a916:	b91d      	cbnz	r5, 800a920 <_printf_i+0x198>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	f023 0320 	bic.w	r3, r3, #32
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	2310      	movs	r3, #16
 800a922:	e7af      	b.n	800a884 <_printf_i+0xfc>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	f043 0320 	orr.w	r3, r3, #32
 800a92a:	6023      	str	r3, [r4, #0]
 800a92c:	2378      	movs	r3, #120	; 0x78
 800a92e:	4828      	ldr	r0, [pc, #160]	; (800a9d0 <_printf_i+0x248>)
 800a930:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a934:	e7e3      	b.n	800a8fe <_printf_i+0x176>
 800a936:	065e      	lsls	r6, r3, #25
 800a938:	bf48      	it	mi
 800a93a:	b2ad      	uxthmi	r5, r5
 800a93c:	e7e6      	b.n	800a90c <_printf_i+0x184>
 800a93e:	4616      	mov	r6, r2
 800a940:	e7bb      	b.n	800a8ba <_printf_i+0x132>
 800a942:	680b      	ldr	r3, [r1, #0]
 800a944:	6826      	ldr	r6, [r4, #0]
 800a946:	1d1d      	adds	r5, r3, #4
 800a948:	6960      	ldr	r0, [r4, #20]
 800a94a:	600d      	str	r5, [r1, #0]
 800a94c:	0635      	lsls	r5, r6, #24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	d501      	bpl.n	800a956 <_printf_i+0x1ce>
 800a952:	6018      	str	r0, [r3, #0]
 800a954:	e002      	b.n	800a95c <_printf_i+0x1d4>
 800a956:	0671      	lsls	r1, r6, #25
 800a958:	d5fb      	bpl.n	800a952 <_printf_i+0x1ca>
 800a95a:	8018      	strh	r0, [r3, #0]
 800a95c:	2300      	movs	r3, #0
 800a95e:	4616      	mov	r6, r2
 800a960:	6123      	str	r3, [r4, #16]
 800a962:	e7ba      	b.n	800a8da <_printf_i+0x152>
 800a964:	680b      	ldr	r3, [r1, #0]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	600a      	str	r2, [r1, #0]
 800a96a:	681e      	ldr	r6, [r3, #0]
 800a96c:	2100      	movs	r1, #0
 800a96e:	4630      	mov	r0, r6
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	f000 f82f 	bl	800a9d4 <memchr>
 800a976:	b108      	cbz	r0, 800a97c <_printf_i+0x1f4>
 800a978:	1b80      	subs	r0, r0, r6
 800a97a:	6060      	str	r0, [r4, #4]
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	2300      	movs	r3, #0
 800a982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a986:	e7a8      	b.n	800a8da <_printf_i+0x152>
 800a988:	4632      	mov	r2, r6
 800a98a:	4649      	mov	r1, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	47d0      	blx	sl
 800a992:	3001      	adds	r0, #1
 800a994:	d0ab      	beq.n	800a8ee <_printf_i+0x166>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	079b      	lsls	r3, r3, #30
 800a99a:	d413      	bmi.n	800a9c4 <_printf_i+0x23c>
 800a99c:	68e0      	ldr	r0, [r4, #12]
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	4298      	cmp	r0, r3
 800a9a2:	bfb8      	it	lt
 800a9a4:	4618      	movlt	r0, r3
 800a9a6:	e7a4      	b.n	800a8f2 <_printf_i+0x16a>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	47d0      	blx	sl
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d09b      	beq.n	800a8ee <_printf_i+0x166>
 800a9b6:	3501      	adds	r5, #1
 800a9b8:	68e3      	ldr	r3, [r4, #12]
 800a9ba:	9903      	ldr	r1, [sp, #12]
 800a9bc:	1a5b      	subs	r3, r3, r1
 800a9be:	42ab      	cmp	r3, r5
 800a9c0:	dcf2      	bgt.n	800a9a8 <_printf_i+0x220>
 800a9c2:	e7eb      	b.n	800a99c <_printf_i+0x214>
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	f104 0619 	add.w	r6, r4, #25
 800a9ca:	e7f5      	b.n	800a9b8 <_printf_i+0x230>
 800a9cc:	0800b149 	.word	0x0800b149
 800a9d0:	0800b15a 	.word	0x0800b15a

0800a9d4 <memchr>:
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	b2c9      	uxtb	r1, r1
 800a9da:	4402      	add	r2, r0
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	d101      	bne.n	800a9e6 <memchr+0x12>
 800a9e2:	2000      	movs	r0, #0
 800a9e4:	e003      	b.n	800a9ee <memchr+0x1a>
 800a9e6:	7804      	ldrb	r4, [r0, #0]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	428c      	cmp	r4, r1
 800a9ec:	d1f6      	bne.n	800a9dc <memchr+0x8>
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <memcpy>:
 800a9f0:	440a      	add	r2, r1
 800a9f2:	4291      	cmp	r1, r2
 800a9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9f8:	d100      	bne.n	800a9fc <memcpy+0xc>
 800a9fa:	4770      	bx	lr
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa02:	4291      	cmp	r1, r2
 800aa04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa08:	d1f9      	bne.n	800a9fe <memcpy+0xe>
 800aa0a:	bd10      	pop	{r4, pc}

0800aa0c <memmove>:
 800aa0c:	4288      	cmp	r0, r1
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	eb01 0402 	add.w	r4, r1, r2
 800aa14:	d902      	bls.n	800aa1c <memmove+0x10>
 800aa16:	4284      	cmp	r4, r0
 800aa18:	4623      	mov	r3, r4
 800aa1a:	d807      	bhi.n	800aa2c <memmove+0x20>
 800aa1c:	1e43      	subs	r3, r0, #1
 800aa1e:	42a1      	cmp	r1, r4
 800aa20:	d008      	beq.n	800aa34 <memmove+0x28>
 800aa22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa2a:	e7f8      	b.n	800aa1e <memmove+0x12>
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4402      	add	r2, r0
 800aa30:	428a      	cmp	r2, r1
 800aa32:	d100      	bne.n	800aa36 <memmove+0x2a>
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa3e:	e7f7      	b.n	800aa30 <memmove+0x24>

0800aa40 <_free_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4605      	mov	r5, r0
 800aa44:	2900      	cmp	r1, #0
 800aa46:	d043      	beq.n	800aad0 <_free_r+0x90>
 800aa48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa4c:	1f0c      	subs	r4, r1, #4
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bfb8      	it	lt
 800aa52:	18e4      	addlt	r4, r4, r3
 800aa54:	f000 f8d0 	bl	800abf8 <__malloc_lock>
 800aa58:	4a1e      	ldr	r2, [pc, #120]	; (800aad4 <_free_r+0x94>)
 800aa5a:	6813      	ldr	r3, [r2, #0]
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	b933      	cbnz	r3, 800aa6e <_free_r+0x2e>
 800aa60:	6063      	str	r3, [r4, #4]
 800aa62:	6014      	str	r4, [r2, #0]
 800aa64:	4628      	mov	r0, r5
 800aa66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa6a:	f000 b8cb 	b.w	800ac04 <__malloc_unlock>
 800aa6e:	42a3      	cmp	r3, r4
 800aa70:	d90a      	bls.n	800aa88 <_free_r+0x48>
 800aa72:	6821      	ldr	r1, [r4, #0]
 800aa74:	1862      	adds	r2, r4, r1
 800aa76:	4293      	cmp	r3, r2
 800aa78:	bf01      	itttt	eq
 800aa7a:	681a      	ldreq	r2, [r3, #0]
 800aa7c:	685b      	ldreq	r3, [r3, #4]
 800aa7e:	1852      	addeq	r2, r2, r1
 800aa80:	6022      	streq	r2, [r4, #0]
 800aa82:	6063      	str	r3, [r4, #4]
 800aa84:	6004      	str	r4, [r0, #0]
 800aa86:	e7ed      	b.n	800aa64 <_free_r+0x24>
 800aa88:	461a      	mov	r2, r3
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	b10b      	cbz	r3, 800aa92 <_free_r+0x52>
 800aa8e:	42a3      	cmp	r3, r4
 800aa90:	d9fa      	bls.n	800aa88 <_free_r+0x48>
 800aa92:	6811      	ldr	r1, [r2, #0]
 800aa94:	1850      	adds	r0, r2, r1
 800aa96:	42a0      	cmp	r0, r4
 800aa98:	d10b      	bne.n	800aab2 <_free_r+0x72>
 800aa9a:	6820      	ldr	r0, [r4, #0]
 800aa9c:	4401      	add	r1, r0
 800aa9e:	1850      	adds	r0, r2, r1
 800aaa0:	4283      	cmp	r3, r0
 800aaa2:	6011      	str	r1, [r2, #0]
 800aaa4:	d1de      	bne.n	800aa64 <_free_r+0x24>
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	4401      	add	r1, r0
 800aaac:	6011      	str	r1, [r2, #0]
 800aaae:	6053      	str	r3, [r2, #4]
 800aab0:	e7d8      	b.n	800aa64 <_free_r+0x24>
 800aab2:	d902      	bls.n	800aaba <_free_r+0x7a>
 800aab4:	230c      	movs	r3, #12
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	e7d4      	b.n	800aa64 <_free_r+0x24>
 800aaba:	6820      	ldr	r0, [r4, #0]
 800aabc:	1821      	adds	r1, r4, r0
 800aabe:	428b      	cmp	r3, r1
 800aac0:	bf01      	itttt	eq
 800aac2:	6819      	ldreq	r1, [r3, #0]
 800aac4:	685b      	ldreq	r3, [r3, #4]
 800aac6:	1809      	addeq	r1, r1, r0
 800aac8:	6021      	streq	r1, [r4, #0]
 800aaca:	6063      	str	r3, [r4, #4]
 800aacc:	6054      	str	r4, [r2, #4]
 800aace:	e7c9      	b.n	800aa64 <_free_r+0x24>
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
 800aad2:	bf00      	nop
 800aad4:	20000368 	.word	0x20000368

0800aad8 <_malloc_r>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	1ccd      	adds	r5, r1, #3
 800aadc:	f025 0503 	bic.w	r5, r5, #3
 800aae0:	3508      	adds	r5, #8
 800aae2:	2d0c      	cmp	r5, #12
 800aae4:	bf38      	it	cc
 800aae6:	250c      	movcc	r5, #12
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	4606      	mov	r6, r0
 800aaec:	db01      	blt.n	800aaf2 <_malloc_r+0x1a>
 800aaee:	42a9      	cmp	r1, r5
 800aaf0:	d903      	bls.n	800aafa <_malloc_r+0x22>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	6033      	str	r3, [r6, #0]
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aafa:	f000 f87d 	bl	800abf8 <__malloc_lock>
 800aafe:	4921      	ldr	r1, [pc, #132]	; (800ab84 <_malloc_r+0xac>)
 800ab00:	680a      	ldr	r2, [r1, #0]
 800ab02:	4614      	mov	r4, r2
 800ab04:	b99c      	cbnz	r4, 800ab2e <_malloc_r+0x56>
 800ab06:	4f20      	ldr	r7, [pc, #128]	; (800ab88 <_malloc_r+0xb0>)
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	b923      	cbnz	r3, 800ab16 <_malloc_r+0x3e>
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f000 f862 	bl	800abd8 <_sbrk_r>
 800ab14:	6038      	str	r0, [r7, #0]
 800ab16:	4629      	mov	r1, r5
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f000 f85d 	bl	800abd8 <_sbrk_r>
 800ab1e:	1c43      	adds	r3, r0, #1
 800ab20:	d123      	bne.n	800ab6a <_malloc_r+0x92>
 800ab22:	230c      	movs	r3, #12
 800ab24:	4630      	mov	r0, r6
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f000 f86c 	bl	800ac04 <__malloc_unlock>
 800ab2c:	e7e3      	b.n	800aaf6 <_malloc_r+0x1e>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	1b5b      	subs	r3, r3, r5
 800ab32:	d417      	bmi.n	800ab64 <_malloc_r+0x8c>
 800ab34:	2b0b      	cmp	r3, #11
 800ab36:	d903      	bls.n	800ab40 <_malloc_r+0x68>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	441c      	add	r4, r3
 800ab3c:	6025      	str	r5, [r4, #0]
 800ab3e:	e004      	b.n	800ab4a <_malloc_r+0x72>
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	42a2      	cmp	r2, r4
 800ab44:	bf0c      	ite	eq
 800ab46:	600b      	streq	r3, [r1, #0]
 800ab48:	6053      	strne	r3, [r2, #4]
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f000 f85a 	bl	800ac04 <__malloc_unlock>
 800ab50:	f104 000b 	add.w	r0, r4, #11
 800ab54:	1d23      	adds	r3, r4, #4
 800ab56:	f020 0007 	bic.w	r0, r0, #7
 800ab5a:	1ac2      	subs	r2, r0, r3
 800ab5c:	d0cc      	beq.n	800aaf8 <_malloc_r+0x20>
 800ab5e:	1a1b      	subs	r3, r3, r0
 800ab60:	50a3      	str	r3, [r4, r2]
 800ab62:	e7c9      	b.n	800aaf8 <_malloc_r+0x20>
 800ab64:	4622      	mov	r2, r4
 800ab66:	6864      	ldr	r4, [r4, #4]
 800ab68:	e7cc      	b.n	800ab04 <_malloc_r+0x2c>
 800ab6a:	1cc4      	adds	r4, r0, #3
 800ab6c:	f024 0403 	bic.w	r4, r4, #3
 800ab70:	42a0      	cmp	r0, r4
 800ab72:	d0e3      	beq.n	800ab3c <_malloc_r+0x64>
 800ab74:	1a21      	subs	r1, r4, r0
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 f82e 	bl	800abd8 <_sbrk_r>
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d1dd      	bne.n	800ab3c <_malloc_r+0x64>
 800ab80:	e7cf      	b.n	800ab22 <_malloc_r+0x4a>
 800ab82:	bf00      	nop
 800ab84:	20000368 	.word	0x20000368
 800ab88:	2000036c 	.word	0x2000036c

0800ab8c <_realloc_r>:
 800ab8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8e:	4607      	mov	r7, r0
 800ab90:	4614      	mov	r4, r2
 800ab92:	460e      	mov	r6, r1
 800ab94:	b921      	cbnz	r1, 800aba0 <_realloc_r+0x14>
 800ab96:	4611      	mov	r1, r2
 800ab98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab9c:	f7ff bf9c 	b.w	800aad8 <_malloc_r>
 800aba0:	b922      	cbnz	r2, 800abac <_realloc_r+0x20>
 800aba2:	f7ff ff4d 	bl	800aa40 <_free_r>
 800aba6:	4625      	mov	r5, r4
 800aba8:	4628      	mov	r0, r5
 800abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abac:	f000 f830 	bl	800ac10 <_malloc_usable_size_r>
 800abb0:	42a0      	cmp	r0, r4
 800abb2:	d20f      	bcs.n	800abd4 <_realloc_r+0x48>
 800abb4:	4621      	mov	r1, r4
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff ff8e 	bl	800aad8 <_malloc_r>
 800abbc:	4605      	mov	r5, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0f2      	beq.n	800aba8 <_realloc_r+0x1c>
 800abc2:	4631      	mov	r1, r6
 800abc4:	4622      	mov	r2, r4
 800abc6:	f7ff ff13 	bl	800a9f0 <memcpy>
 800abca:	4631      	mov	r1, r6
 800abcc:	4638      	mov	r0, r7
 800abce:	f7ff ff37 	bl	800aa40 <_free_r>
 800abd2:	e7e9      	b.n	800aba8 <_realloc_r+0x1c>
 800abd4:	4635      	mov	r5, r6
 800abd6:	e7e7      	b.n	800aba8 <_realloc_r+0x1c>

0800abd8 <_sbrk_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	2300      	movs	r3, #0
 800abdc:	4d05      	ldr	r5, [pc, #20]	; (800abf4 <_sbrk_r+0x1c>)
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f7 f812 	bl	8001c0c <_sbrk>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_sbrk_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_sbrk_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20005614 	.word	0x20005614

0800abf8 <__malloc_lock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_lock+0x8>)
 800abfa:	f000 b811 	b.w	800ac20 <__retarget_lock_acquire_recursive>
 800abfe:	bf00      	nop
 800ac00:	2000561c 	.word	0x2000561c

0800ac04 <__malloc_unlock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_unlock+0x8>)
 800ac06:	f000 b80c 	b.w	800ac22 <__retarget_lock_release_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	2000561c 	.word	0x2000561c

0800ac10 <_malloc_usable_size_r>:
 800ac10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac14:	1f18      	subs	r0, r3, #4
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bfbc      	itt	lt
 800ac1a:	580b      	ldrlt	r3, [r1, r0]
 800ac1c:	18c0      	addlt	r0, r0, r3
 800ac1e:	4770      	bx	lr

0800ac20 <__retarget_lock_acquire_recursive>:
 800ac20:	4770      	bx	lr

0800ac22 <__retarget_lock_release_recursive>:
 800ac22:	4770      	bx	lr

0800ac24 <_init>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	bf00      	nop
 800ac28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2a:	bc08      	pop	{r3}
 800ac2c:	469e      	mov	lr, r3
 800ac2e:	4770      	bx	lr

0800ac30 <_fini>:
 800ac30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac32:	bf00      	nop
 800ac34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac36:	bc08      	pop	{r3}
 800ac38:	469e      	mov	lr, r3
 800ac3a:	4770      	bx	lr
