
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a994  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800aad0  0800aad0  0001aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd0  0800afd0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afd8  0800afd8  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afd8  0800afd8  0001afd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  0800afe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000452c  200000f0  0800b0d0  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000461c  0800b0d0  0002461c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199f2  00000000  00000000  00020119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003734  00000000  00000000  00039b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003d240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018461  00000000  00000000  0003f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019221  00000000  00000000  00057c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d6a  00000000  00000000  00070ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fac0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051bc  00000000  00000000  000fac60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000f0 	.word	0x200000f0
 8000158:	00000000 	.word	0x00000000
 800015c:	0800aab8 	.word	0x0800aab8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000f4 	.word	0x200000f4
 8000178:	0800aab8 	.word	0x0800aab8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	2140      	movs	r1, #64	; 0x40
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <SELECT+0x18>)
 800047e:	f002 fc6e 	bl	8002d5e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000482:	2001      	movs	r0, #1
 8000484:	f001 fcbe 	bl	8001e04 <HAL_Delay>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40020400 	.word	0x40020400

08000490 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4803      	ldr	r0, [pc, #12]	; (80004a8 <DESELECT+0x18>)
 800049a:	f002 fc60 	bl	8002d5e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800049e:	2001      	movs	r0, #1
 80004a0:	f001 fcb0 	bl	8001e04 <HAL_Delay>
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40020400 	.word	0x40020400

080004ac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004b6:	bf00      	nop
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <SPI_TxByte+0x30>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f003 0302 	and.w	r3, r3, #2
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d1f8      	bne.n	80004b8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80004c6:	1df9      	adds	r1, r7, #7
 80004c8:	2364      	movs	r3, #100	; 0x64
 80004ca:	2201      	movs	r2, #1
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <SPI_TxByte+0x30>)
 80004ce:	f005 fd50 	bl	8005f72 <HAL_SPI_Transmit>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000034c 	.word	0x2000034c

080004e0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80004ec:	bf00      	nop
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <SPI_TxBuffer+0x30>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	f003 0302 	and.w	r3, r3, #2
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d1f8      	bne.n	80004ee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80004fc:	887a      	ldrh	r2, [r7, #2]
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <SPI_TxBuffer+0x30>)
 8000504:	f005 fd35 	bl	8005f72 <HAL_SPI_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	2000034c 	.word	0x2000034c

08000514 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800051e:	bf00      	nop
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <SPI_RxByte+0x34>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b02      	cmp	r3, #2
 800052c:	d1f8      	bne.n	8000520 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800052e:	1dba      	adds	r2, r7, #6
 8000530:	1df9      	adds	r1, r7, #7
 8000532:	2364      	movs	r3, #100	; 0x64
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <SPI_RxByte+0x34>)
 800053a:	f005 fe56 	bl	80061ea <HAL_SPI_TransmitReceive>

	return data;
 800053e:	79bb      	ldrb	r3, [r7, #6]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000034c 	.word	0x2000034c

0800054c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000554:	f7ff ffde 	bl	8000514 <SPI_RxByte>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	701a      	strb	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SD_ReadyWait+0x30>)
 8000570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000574:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000576:	f7ff ffcd 	bl	8000514 <SPI_RxByte>
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2bff      	cmp	r3, #255	; 0xff
 8000582:	d003      	beq.n	800058c <SD_ReadyWait+0x24>
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <SD_ReadyWait+0x30>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <SD_ReadyWait+0xe>

	return res;
 800058c:	79fb      	ldrb	r3, [r7, #7]
}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000344 	.word	0x20000344

0800059c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80005a2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80005a6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80005a8:	f7ff ff72 	bl	8000490 <DESELECT>
	for(int i = 0; i < 10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e005      	b.n	80005be <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80005b2:	20ff      	movs	r0, #255	; 0xff
 80005b4:	f7ff ff7a 	bl	80004ac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b09      	cmp	r3, #9
 80005c2:	ddf6      	ble.n	80005b2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80005c4:	f7ff ff56 	bl	8000474 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80005dc:	2395      	movs	r3, #149	; 0x95
 80005de:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80005e0:	463b      	mov	r3, r7
 80005e2:	2106      	movs	r1, #6
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ff7b 	bl	80004e0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80005ea:	e002      	b.n	80005f2 <SD_PowerOn+0x56>
	{
		cnt--;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80005f2:	f7ff ff8f 	bl	8000514 <SPI_RxByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d002      	beq.n	8000602 <SD_PowerOn+0x66>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f4      	bne.n	80005ec <SD_PowerOn+0x50>
	}

	DESELECT();
 8000602:	f7ff ff45 	bl	8000490 <DESELECT>
	SPI_TxByte(0XFF);
 8000606:	20ff      	movs	r0, #255	; 0xff
 8000608:	f7ff ff50 	bl	80004ac <SPI_TxByte>

	PowerFlag = 1;
 800060c:	4b03      	ldr	r3, [pc, #12]	; (800061c <SD_PowerOn+0x80>)
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000010d 	.word	0x2000010d

08000620 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <SD_PowerOff+0x14>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	2000010d 	.word	0x2000010d

08000638 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <SD_CheckPower+0x10>)
 800063e:	781b      	ldrb	r3, [r3, #0]
}
 8000640:	4618      	mov	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	2000010d 	.word	0x2000010d

0800064c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <SD_RxDataBlock+0x58>)
 8000658:	22c8      	movs	r2, #200	; 0xc8
 800065a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800065c:	f7ff ff5a 	bl	8000514 <SPI_RxByte>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d103      	bne.n	8000672 <SD_RxDataBlock+0x26>
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <SD_RxDataBlock+0x58>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d1f4      	bne.n	800065c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2bfe      	cmp	r3, #254	; 0xfe
 8000676:	d001      	beq.n	800067c <SD_RxDataBlock+0x30>
 8000678:	2300      	movs	r3, #0
 800067a:	e00f      	b.n	800069c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	607a      	str	r2, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff62 	bl	800054c <SPI_RxBytePtr>
	} while(len--);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	603a      	str	r2, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1f4      	bne.n	800067c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000692:	f7ff ff3f 	bl	8000514 <SPI_RxByte>
	SPI_RxByte();
 8000696:	f7ff ff3d 	bl	8000514 <SPI_RxByte>

	return TRUE;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000346 	.word	0x20000346

080006a8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80006b8:	f7ff ff56 	bl	8000568 <SD_ReadyWait>
 80006bc:	4603      	mov	r3, r0
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d001      	beq.n	80006c6 <SD_TxDataBlock+0x1e>
 80006c2:	2300      	movs	r3, #0
 80006c4:	e02f      	b.n	8000726 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80006c6:	78fb      	ldrb	r3, [r7, #3]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff feef 	bl	80004ac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	2bfd      	cmp	r3, #253	; 0xfd
 80006d2:	d020      	beq.n	8000716 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80006d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff01 	bl	80004e0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80006de:	f7ff ff19 	bl	8000514 <SPI_RxByte>
		SPI_RxByte();
 80006e2:	f7ff ff17 	bl	8000514 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80006e6:	e00b      	b.n	8000700 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80006e8:	f7ff ff14 	bl	8000514 <SPI_RxByte>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80006f0:	7bfb      	ldrb	r3, [r7, #15]
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d006      	beq.n	8000708 <SD_TxDataBlock+0x60>
			i++;
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	3301      	adds	r3, #1
 80006fe:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000700:	7bbb      	ldrb	r3, [r7, #14]
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d9f0      	bls.n	80006e8 <SD_TxDataBlock+0x40>
 8000706:	e000      	b.n	800070a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000708:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800070a:	bf00      	nop
 800070c:	f7ff ff02 	bl	8000514 <SPI_RxByte>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d0fa      	beq.n	800070c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	2b05      	cmp	r3, #5
 800071e:	d101      	bne.n	8000724 <SD_TxDataBlock+0x7c>
 8000720:	2301      	movs	r3, #1
 8000722:	e000      	b.n	8000726 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b084      	sub	sp, #16
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	6039      	str	r1, [r7, #0]
 8000738:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800073a:	f7ff ff15 	bl	8000568 <SD_ReadyWait>
 800073e:	4603      	mov	r3, r0
 8000740:	2bff      	cmp	r3, #255	; 0xff
 8000742:	d001      	beq.n	8000748 <SD_SendCmd+0x1a>
 8000744:	23ff      	movs	r3, #255	; 0xff
 8000746:	e042      	b.n	80007ce <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff feae 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	0e1b      	lsrs	r3, r3, #24
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fea8 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	0c1b      	lsrs	r3, r3, #16
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fea2 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0a1b      	lsrs	r3, r3, #8
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe9c 	bl	80004ac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fe97 	bl	80004ac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b40      	cmp	r3, #64	; 0x40
 8000782:	d102      	bne.n	800078a <SD_SendCmd+0x5c>
 8000784:	2395      	movs	r3, #149	; 0x95
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e007      	b.n	800079a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b48      	cmp	r3, #72	; 0x48
 800078e:	d102      	bne.n	8000796 <SD_SendCmd+0x68>
 8000790:	2387      	movs	r3, #135	; 0x87
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e001      	b.n	800079a <SD_SendCmd+0x6c>
	else crc = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe85 	bl	80004ac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b4c      	cmp	r3, #76	; 0x4c
 80007a6:	d101      	bne.n	80007ac <SD_SendCmd+0x7e>
 80007a8:	f7ff feb4 	bl	8000514 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80007ac:	230a      	movs	r3, #10
 80007ae:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80007b0:	f7ff feb0 	bl	8000514 <SPI_RxByte>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80007b8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da05      	bge.n	80007cc <SD_SendCmd+0x9e>
 80007c0:	7bbb      	ldrb	r3, [r7, #14]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	73bb      	strb	r3, [r7, #14]
 80007c6:	7bbb      	ldrb	r3, [r7, #14]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f1      	bne.n	80007b0 <SD_SendCmd+0x82>

	return res;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SD_disk_initialize+0x14>
 80007e8:	2301      	movs	r3, #1
 80007ea:	e0d1      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80007ec:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <SD_disk_initialize+0x2a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <SD_disk_initialize+0x1c0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	e0c6      	b.n	8000990 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000802:	f7ff fecb 	bl	800059c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000806:	f7ff fe35 	bl	8000474 <SELECT>

	/* check disk type */
	type = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800080e:	2100      	movs	r1, #0
 8000810:	2040      	movs	r0, #64	; 0x40
 8000812:	f7ff ff8c 	bl	800072e <SD_SendCmd>
 8000816:	4603      	mov	r3, r0
 8000818:	2b01      	cmp	r3, #1
 800081a:	f040 80a1 	bne.w	8000960 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <SD_disk_initialize+0x1c4>)
 8000820:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000824:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000826:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800082a:	2048      	movs	r0, #72	; 0x48
 800082c:	f7ff ff7f 	bl	800072e <SD_SendCmd>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d155      	bne.n	80008e2 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
 800083a:	e00c      	b.n	8000856 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800083c:	7bfc      	ldrb	r4, [r7, #15]
 800083e:	f7ff fe69 	bl	8000514 <SPI_RxByte>
 8000842:	4603      	mov	r3, r0
 8000844:	461a      	mov	r2, r3
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4423      	add	r3, r4
 800084c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b03      	cmp	r3, #3
 800085a:	d9ef      	bls.n	800083c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800085c:	7abb      	ldrb	r3, [r7, #10]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d17e      	bne.n	8000960 <SD_disk_initialize+0x188>
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	2baa      	cmp	r3, #170	; 0xaa
 8000866:	d17b      	bne.n	8000960 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000868:	2100      	movs	r1, #0
 800086a:	2077      	movs	r0, #119	; 0x77
 800086c:	f7ff ff5f 	bl	800072e <SD_SendCmd>
 8000870:	4603      	mov	r3, r0
 8000872:	2b01      	cmp	r3, #1
 8000874:	d807      	bhi.n	8000886 <SD_disk_initialize+0xae>
 8000876:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800087a:	2069      	movs	r0, #105	; 0x69
 800087c:	f7ff ff57 	bl	800072e <SD_SendCmd>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d004      	beq.n	8000890 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000886:	4b45      	ldr	r3, [pc, #276]	; (800099c <SD_disk_initialize+0x1c4>)
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1ec      	bne.n	8000868 <SD_disk_initialize+0x90>
 800088e:	e000      	b.n	8000892 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000890:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000892:	4b42      	ldr	r3, [pc, #264]	; (800099c <SD_disk_initialize+0x1c4>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d062      	beq.n	8000960 <SD_disk_initialize+0x188>
 800089a:	2100      	movs	r1, #0
 800089c:	207a      	movs	r0, #122	; 0x7a
 800089e:	f7ff ff46 	bl	800072e <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d15b      	bne.n	8000960 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e00c      	b.n	80008c8 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80008ae:	7bfc      	ldrb	r4, [r7, #15]
 80008b0:	f7ff fe30 	bl	8000514 <SPI_RxByte>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4423      	add	r3, r4
 80008be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3301      	adds	r3, #1
 80008c6:	73fb      	strb	r3, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d9ef      	bls.n	80008ae <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80008ce:	7a3b      	ldrb	r3, [r7, #8]
 80008d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SD_disk_initialize+0x104>
 80008d8:	230c      	movs	r3, #12
 80008da:	e000      	b.n	80008de <SD_disk_initialize+0x106>
 80008dc:	2304      	movs	r3, #4
 80008de:	73bb      	strb	r3, [r7, #14]
 80008e0:	e03e      	b.n	8000960 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80008e2:	2100      	movs	r1, #0
 80008e4:	2077      	movs	r0, #119	; 0x77
 80008e6:	f7ff ff22 	bl	800072e <SD_SendCmd>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d808      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008f0:	2100      	movs	r1, #0
 80008f2:	2069      	movs	r0, #105	; 0x69
 80008f4:	f7ff ff1b 	bl	800072e <SD_SendCmd>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d801      	bhi.n	8000902 <SD_disk_initialize+0x12a>
 80008fe:	2302      	movs	r3, #2
 8000900:	e000      	b.n	8000904 <SD_disk_initialize+0x12c>
 8000902:	2301      	movs	r3, #1
 8000904:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d10e      	bne.n	800092a <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800090c:	2100      	movs	r1, #0
 800090e:	2077      	movs	r0, #119	; 0x77
 8000910:	f7ff ff0d 	bl	800072e <SD_SendCmd>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d80e      	bhi.n	8000938 <SD_disk_initialize+0x160>
 800091a:	2100      	movs	r1, #0
 800091c:	2069      	movs	r0, #105	; 0x69
 800091e:	f7ff ff06 	bl	800072e <SD_SendCmd>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d107      	bne.n	8000938 <SD_disk_initialize+0x160>
 8000928:	e00c      	b.n	8000944 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800092a:	2100      	movs	r1, #0
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fefe 	bl	800072e <SD_SendCmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d004      	beq.n	8000942 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <SD_disk_initialize+0x1c4>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1e2      	bne.n	8000906 <SD_disk_initialize+0x12e>
 8000940:	e000      	b.n	8000944 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000942:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <SD_disk_initialize+0x1c4>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d007      	beq.n	800095c <SD_disk_initialize+0x184>
 800094c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000950:	2050      	movs	r0, #80	; 0x50
 8000952:	f7ff feec 	bl	800072e <SD_SendCmd>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SD_disk_initialize+0x188>
 800095c:	2300      	movs	r3, #0
 800095e:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <SD_disk_initialize+0x1c8>)
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000966:	f7ff fd93 	bl	8000490 <DESELECT>
	SPI_RxByte();
 800096a:	f7ff fdd3 	bl	8000514 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SD_disk_initialize+0x1c0>)
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	e001      	b.n	800098a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000986:	f7ff fe4b 	bl	8000620 <SD_PowerOff>
	}

	return Stat;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <SD_disk_initialize+0x1c0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000346 	.word	0x20000346
 80009a0:	2000010c 	.word	0x2000010c

080009a4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SD_disk_status+0x14>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e002      	b.n	80009be <SD_disk_status+0x1a>
	return Stat;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <SD_disk_status+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	20000000 	.word	0x20000000

080009cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	4603      	mov	r3, r0
 80009da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <SD_disk_read+0x1c>
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d101      	bne.n	80009ec <SD_disk_read+0x20>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e051      	b.n	8000a90 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SD_disk_read+0xcc>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SD_disk_read+0x32>
 80009fa:	2303      	movs	r3, #3
 80009fc:	e048      	b.n	8000a90 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <SD_disk_read+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <SD_disk_read+0x44>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000a10:	f7ff fd30 	bl	8000474 <SELECT>

	if (count == 1)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d111      	bne.n	8000a3e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2051      	movs	r0, #81	; 0x51
 8000a1e:	f7ff fe86 	bl	800072e <SD_SendCmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d129      	bne.n	8000a7c <SD_disk_read+0xb0>
 8000a28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a2c:	68b8      	ldr	r0, [r7, #8]
 8000a2e:	f7ff fe0d 	bl	800064c <SD_RxDataBlock>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d021      	beq.n	8000a7c <SD_disk_read+0xb0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	e01e      	b.n	8000a7c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	2052      	movs	r0, #82	; 0x52
 8000a42:	f7ff fe74 	bl	800072e <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d117      	bne.n	8000a7c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	68b8      	ldr	r0, [r7, #8]
 8000a52:	f7ff fdfb 	bl	800064c <SD_RxDataBlock>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <SD_disk_read+0xa6>
				buff += 512;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a62:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1ed      	bne.n	8000a4c <SD_disk_read+0x80>
 8000a70:	e000      	b.n	8000a74 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000a72:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000a74:	2100      	movs	r1, #0
 8000a76:	204c      	movs	r0, #76	; 0x4c
 8000a78:	f7ff fe59 	bl	800072e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000a7c:	f7ff fd08 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000a80:	f7ff fd48 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	2000010c 	.word	0x2000010c

08000aa0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4603      	mov	r3, r0
 8000aae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <SD_disk_write+0x1c>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d101      	bne.n	8000ac0 <SD_disk_write+0x20>
 8000abc:	2304      	movs	r3, #4
 8000abe:	e06b      	b.n	8000b98 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ac0:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <SD_disk_write+0x100>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SD_disk_write+0x32>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e062      	b.n	8000b98 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <SD_disk_write+0x100>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SD_disk_write+0x44>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e059      	b.n	8000b98 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <SD_disk_write+0x104>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <SD_disk_write+0x56>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	025b      	lsls	r3, r3, #9
 8000af4:	607b      	str	r3, [r7, #4]

	SELECT();
 8000af6:	f7ff fcbd 	bl	8000474 <SELECT>

	if (count == 1)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d110      	bne.n	8000b22 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2058      	movs	r0, #88	; 0x58
 8000b04:	f7ff fe13 	bl	800072e <SD_SendCmd>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d13a      	bne.n	8000b84 <SD_disk_write+0xe4>
 8000b0e:	21fe      	movs	r1, #254	; 0xfe
 8000b10:	68b8      	ldr	r0, [r7, #8]
 8000b12:	f7ff fdc9 	bl	80006a8 <SD_TxDataBlock>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d033      	beq.n	8000b84 <SD_disk_write+0xe4>
			count = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e030      	b.n	8000b84 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <SD_disk_write+0x104>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2077      	movs	r0, #119	; 0x77
 8000b32:	f7ff fdfc 	bl	800072e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	2057      	movs	r0, #87	; 0x57
 8000b3a:	f7ff fdf8 	bl	800072e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2059      	movs	r0, #89	; 0x59
 8000b42:	f7ff fdf4 	bl	800072e <SD_SendCmd>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11b      	bne.n	8000b84 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b4c:	21fc      	movs	r1, #252	; 0xfc
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f7ff fdaa 	bl	80006a8 <SD_TxDataBlock>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00a      	beq.n	8000b70 <SD_disk_write+0xd0>
				buff += 512;
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b60:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1ee      	bne.n	8000b4c <SD_disk_write+0xac>
 8000b6e:	e000      	b.n	8000b72 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000b70:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000b72:	21fd      	movs	r1, #253	; 0xfd
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd97 	bl	80006a8 <SD_TxDataBlock>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <SD_disk_write+0xe4>
			{
				count = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000b84:	f7ff fc84 	bl	8000490 <DESELECT>
	SPI_RxByte();
 8000b88:	f7ff fcc4 	bl	8000514 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	2000010c 	.word	0x2000010c

08000ba8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SD_disk_ioctl+0x1e>
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e115      	b.n	8000df2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b05      	cmp	r3, #5
 8000bd0:	d124      	bne.n	8000c1c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d012      	beq.n	8000c00 <SD_disk_ioctl+0x58>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	dc1a      	bgt.n	8000c14 <SD_disk_ioctl+0x6c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d002      	beq.n	8000be8 <SD_disk_ioctl+0x40>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d006      	beq.n	8000bf4 <SD_disk_ioctl+0x4c>
 8000be6:	e015      	b.n	8000c14 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000be8:	f7ff fd1a 	bl	8000620 <SD_PowerOff>
			res = RES_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bf2:	e0fc      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000bf4:	f7ff fcd2 	bl	800059c <SD_PowerOn>
			res = RES_OK;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bfe:	e0f6      	b.n	8000dee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	1c5c      	adds	r4, r3, #1
 8000c04:	f7ff fd18 	bl	8000638 <SD_CheckPower>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000c12:	e0ec      	b.n	8000dee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000c14:	2304      	movs	r3, #4
 8000c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c1a:	e0e8      	b.n	8000dee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c1c:	4b77      	ldr	r3, [pc, #476]	; (8000dfc <SD_disk_ioctl+0x254>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SD_disk_ioctl+0x86>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e0e1      	b.n	8000df2 <SD_disk_ioctl+0x24a>

		SELECT();
 8000c2e:	f7ff fc21 	bl	8000474 <SELECT>

		switch (ctrl)
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	2b0d      	cmp	r3, #13
 8000c36:	f200 80cb 	bhi.w	8000dd0 <SD_disk_ioctl+0x228>
 8000c3a:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <SD_disk_ioctl+0x98>)
 8000c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c40:	08000d3b 	.word	0x08000d3b
 8000c44:	08000c79 	.word	0x08000c79
 8000c48:	08000d2b 	.word	0x08000d2b
 8000c4c:	08000dd1 	.word	0x08000dd1
 8000c50:	08000dd1 	.word	0x08000dd1
 8000c54:	08000dd1 	.word	0x08000dd1
 8000c58:	08000dd1 	.word	0x08000dd1
 8000c5c:	08000dd1 	.word	0x08000dd1
 8000c60:	08000dd1 	.word	0x08000dd1
 8000c64:	08000dd1 	.word	0x08000dd1
 8000c68:	08000dd1 	.word	0x08000dd1
 8000c6c:	08000d4d 	.word	0x08000d4d
 8000c70:	08000d71 	.word	0x08000d71
 8000c74:	08000d95 	.word	0x08000d95
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2049      	movs	r0, #73	; 0x49
 8000c7c:	f7ff fd57 	bl	800072e <SD_SendCmd>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 80a8 	bne.w	8000dd8 <SD_disk_ioctl+0x230>
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fcdc 	bl	800064c <SD_RxDataBlock>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809e 	beq.w	8000dd8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000c9c:	7b3b      	ldrb	r3, [r7, #12]
 8000c9e:	099b      	lsrs	r3, r3, #6
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ca6:	7d7b      	ldrb	r3, [r7, #21]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	7d3b      	ldrb	r3, [r7, #20]
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000cba:	8bfb      	ldrh	r3, [r7, #30]
 8000cbc:	029a      	lsls	r2, r3, #10
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e02e      	b.n	8000d22 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000cc4:	7c7b      	ldrb	r3, [r7, #17]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	09db      	lsrs	r3, r3, #7
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4413      	add	r3, r2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	f003 0306 	and.w	r3, r3, #6
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000cec:	7d3b      	ldrb	r3, [r7, #20]
 8000cee:	099b      	lsrs	r3, r3, #6
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	7cfb      	ldrb	r3, [r7, #19]
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	7cbb      	ldrb	r3, [r7, #18]
 8000d02:	029b      	lsls	r3, r3, #10
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	3301      	adds	r3, #1
 8000d12:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000d14:	8bfa      	ldrh	r2, [r7, #30]
 8000d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d1a:	3b09      	subs	r3, #9
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000d28:	e056      	b.n	8000dd8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d30:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d38:	e055      	b.n	8000de6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000d3a:	f7ff fc15 	bl	8000568 <SD_ReadyWait>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2bff      	cmp	r3, #255	; 0xff
 8000d42:	d14b      	bne.n	8000ddc <SD_disk_ioctl+0x234>
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d4a:	e047      	b.n	8000ddc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2049      	movs	r0, #73	; 0x49
 8000d50:	f7ff fced 	bl	800072e <SD_SendCmd>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d142      	bne.n	8000de0 <SD_disk_ioctl+0x238>
 8000d5a:	2110      	movs	r1, #16
 8000d5c:	6a38      	ldr	r0, [r7, #32]
 8000d5e:	f7ff fc75 	bl	800064c <SD_RxDataBlock>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d03b      	beq.n	8000de0 <SD_disk_ioctl+0x238>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d6e:	e037      	b.n	8000de0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000d70:	2100      	movs	r1, #0
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fcdb 	bl	800072e <SD_SendCmd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d132      	bne.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d7e:	2110      	movs	r1, #16
 8000d80:	6a38      	ldr	r0, [r7, #32]
 8000d82:	f7ff fc63 	bl	800064c <SD_RxDataBlock>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <SD_disk_ioctl+0x23c>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d92:	e027      	b.n	8000de4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000d94:	2100      	movs	r1, #0
 8000d96:	207a      	movs	r0, #122	; 0x7a
 8000d98:	f7ff fcc9 	bl	800072e <SD_SendCmd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d116      	bne.n	8000dd0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000da8:	e00b      	b.n	8000dc2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000daa:	6a3c      	ldr	r4, [r7, #32]
 8000dac:	1c63      	adds	r3, r4, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	f7ff fbb0 	bl	8000514 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000dc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9ef      	bls.n	8000daa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000dd6:	e006      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000dd8:	bf00      	nop
 8000dda:	e004      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <SD_disk_ioctl+0x23e>
			break;
 8000de4:	bf00      	nop
		}

		DESELECT();
 8000de6:	f7ff fb53 	bl	8000490 <DESELECT>
		SPI_RxByte();
 8000dea:	f7ff fb93 	bl	8000514 <SPI_RxByte>
	}

	return res;
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	372c      	adds	r7, #44	; 0x2c
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000000 	.word	0x20000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b0a6      	sub	sp, #152	; 0x98
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 ff8e 	bl	8001d26 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f889 	bl	8000f20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f000 fa5b 	bl	80012c8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000e12:	f000 f8eb 	bl	8000fec <MX_ADC_Init>
  MX_I2C1_Init();
 8000e16:	f000 f941 	bl	800109c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000e1a:	f000 f9f5 	bl	8001208 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000e1e:	f000 fa29 	bl	8001274 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000e22:	f006 f9a5 	bl	8007170 <MX_FATFS_Init>
  MX_RTC_Init();
 8000e26:	f000 f967 	bl	80010f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  muxInit();
 8000e2a:	f000 fb57 	bl	80014dc <muxInit>


  int pressure_data[NUM_NODES] = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2290      	movs	r2, #144	; 0x90
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f009 fe37 	bl	800aaa8 <memset>
//
//    /* Mount the SD card */
  fr = f_mount(&fs, "", 0) && FR_OK;
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4932      	ldr	r1, [pc, #200]	; (8000f08 <main+0x108>)
 8000e3e:	4833      	ldr	r0, [pc, #204]	; (8000f0c <main+0x10c>)
 8000e40:	f008 fbd0 	bl	80095e4 <f_mount>
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <main+0x110>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
//  /* Infinite loop */
//  /* USER CODE BEGIN WHILE */
//


  int cycle_cnt = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94


    // Wait for Button press
    while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin) == GPIO_PIN_SET){}
 8000e50:	bf00      	nop
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	482f      	ldr	r0, [pc, #188]	; (8000f14 <main+0x114>)
 8000e56:	f001 ff6b 	bl	8002d30 <HAL_GPIO_ReadPin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d0f8      	beq.n	8000e52 <main+0x52>
//
//    // Start time for 30 seconds to settle
    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e66:	482b      	ldr	r0, [pc, #172]	; (8000f14 <main+0x114>)
 8000e68:	f001 ff79 	bl	8002d5e <HAL_GPIO_WritePin>
    HAL_Delay(WAITTIME);
 8000e6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000e70:	f000 ffc8 	bl	8001e04 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7a:	4826      	ldr	r0, [pc, #152]	; (8000f14 <main+0x114>)
 8000e7c:	f001 ff6f 	bl	8002d5e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4823      	ldr	r0, [pc, #140]	; (8000f14 <main+0x114>)
 8000e86:	f001 ff6a 	bl	8002d5e <HAL_GPIO_WritePin>

    /*Open the file*/
    fr = f_open(&fil, file_name, FA_CREATE_ALWAYS | FA_WRITE) && FR_OK;
 8000e8a:	220a      	movs	r2, #10
 8000e8c:	4922      	ldr	r1, [pc, #136]	; (8000f18 <main+0x118>)
 8000e8e:	4823      	ldr	r0, [pc, #140]	; (8000f1c <main+0x11c>)
 8000e90:	f008 fbee 	bl	8009670 <f_open>
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <main+0x110>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    	if (fr != FR_OK) {
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <main+0x110>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <main+0xa6>
    		Error_Handler();
 8000ea2:	f000 fced 	bl	8001880 <Error_Handler>
    	}

//    	sampleSingleSquare(0,0,0,0);
    	samplePrototypeMat(0, 0, pressure_data);
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 fc8f 	bl	80017d0 <samplePrototypeMat>

//      /* Write to SD card */
    	logData2SDCard(pressure_data, sizeof(pressure_data)/sizeof(*pressure_data));
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2124      	movs	r1, #36	; 0x24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fac6 	bl	8001448 <logData2SDCard>
    	HAL_Delay(50);
 8000ebc:	2032      	movs	r0, #50	; 0x32
 8000ebe:	f000 ffa1 	bl	8001e04 <HAL_Delay>


      if (cycle_cnt >= 15) {
 8000ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ec6:	2b0e      	cmp	r3, #14
 8000ec8:	dd17      	ble.n	8000efa <main+0xfa>
  		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_B_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <main+0x114>)
 8000ed0:	f001 ff45 	bl	8002d5e <HAL_GPIO_WritePin>

		// Read SD card and send data to ESP8266 via UART
//		readSDCardSendUART();

	    /* Unmount the default drive */
  		fr = f_close(&fil);
 8000ed4:	4811      	ldr	r0, [pc, #68]	; (8000f1c <main+0x11c>)
 8000ed6:	f008 ffa9 	bl	8009e2c <f_close>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <main+0x110>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		fr = f_mount(0, "", 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4908      	ldr	r1, [pc, #32]	; (8000f08 <main+0x108>)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f008 fb7c 	bl	80095e4 <f_mount>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <main+0x110>)
 8000ef2:	701a      	strb	r2, [r3, #0]

	    exit(0);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f009 fd9f 	bl	800aa38 <exit>
      }

      cycle_cnt++;
 8000efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    	if (fr != FR_OK) {
 8000f04:	e7c9      	b.n	8000e9a <main+0x9a>
 8000f06:	bf00      	nop
 8000f08:	0800aad0 	.word	0x0800aad0
 8000f0c:	200003e8 	.word	0x200003e8
 8000f10:	2000010e 	.word	0x2000010e
 8000f14:	40020800 	.word	0x40020800
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20001578 	.word	0x20001578

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b096      	sub	sp, #88	; 0x58
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	2234      	movs	r2, #52	; 0x34
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f009 fdba 	bl	800aaa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4e:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemClock_Config+0xc8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f56:	4a24      	ldr	r2, [pc, #144]	; (8000fe8 <SystemClock_Config+0xc8>)
 8000f58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f5c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000f5e:	230b      	movs	r3, #11
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f62:	2301      	movs	r3, #1
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f66:	2301      	movs	r3, #1
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000f80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fd06 	bl	800499c <HAL_RCC_OscConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f96:	f000 fc73 	bl	8001880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9a:	230f      	movs	r3, #15
 8000f9c:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f004 f821 	bl	8004ffc <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fc0:	f000 fc5e 	bl	8001880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 fa7f 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fdc:	f000 fc50 	bl	8001880 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3758      	adds	r7, #88	; 0x58
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN ADC_Init 1 */
  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <MX_ADC_Init+0xa8>)
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <MX_ADC_Init+0xac>)
 8001000:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001002:	4b24      	ldr	r3, [pc, #144]	; (8001094 <MX_ADC_Init+0xa8>)
 8001004:	2200      	movs	r2, #0
 8001006:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_ADC_Init+0xa8>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_ADC_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_ADC_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_ADC_Init+0xa8>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_ADC_Init+0xa8>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_ADC_Init+0xa8>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_ADC_Init+0xa8>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_ADC_Init+0xa8>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_ADC_Init+0xa8>)
 800103c:	2201      	movs	r2, #1
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_ADC_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_ADC_Init+0xa8>)
 800104a:	2210      	movs	r2, #16
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_ADC_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_ADC_Init+0xa8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_ADC_Init+0xa8>)
 800105e:	f000 fef3 	bl	8001e48 <HAL_ADC_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8001068:	f000 fc0a 	bl	8001880 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800106c:	2309      	movs	r3, #9
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001070:	2301      	movs	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_48CYCLES;
 8001074:	2304      	movs	r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_ADC_Init+0xa8>)
 800107e:	f001 f951 	bl	8002324 <HAL_ADC_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001088:	f000 fbfa 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  /* USER CODE END ADC_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20001524 	.word	0x20001524
 8001098:	40012400 	.word	0x40012400

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f001 fe59 	bl	8002d90 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fbcc 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20001420 	.word	0x20001420
 80010f0:	40005400 	.word	0x40005400
 80010f4:	000186a0 	.word	0x000186a0

080010f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08c      	sub	sp, #48	; 0x30
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
  RTC_DateTypeDef sDate = {0};
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  RTC_AlarmTypeDef sAlarm = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <MX_RTC_Init+0x108>)
 8001122:	4a38      	ldr	r2, [pc, #224]	; (8001204 <MX_RTC_Init+0x10c>)
 8001124:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <MX_RTC_Init+0x108>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <MX_RTC_Init+0x108>)
 800112e:	227f      	movs	r2, #127	; 0x7f
 8001130:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <MX_RTC_Init+0x108>)
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <MX_RTC_Init+0x108>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <MX_RTC_Init+0x108>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001144:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <MX_RTC_Init+0x108>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800114a:	482d      	ldr	r0, [pc, #180]	; (8001200 <MX_RTC_Init+0x108>)
 800114c:	f004 facc 	bl	80056e8 <HAL_RTC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001156:	f000 fb93 	bl	8001880 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 22;
 800115a:	2316      	movs	r3, #22
 800115c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sTime.Minutes = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sTime.Seconds = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	2200      	movs	r2, #0
 800117a:	4619      	mov	r1, r3
 800117c:	4820      	ldr	r0, [pc, #128]	; (8001200 <MX_RTC_Init+0x108>)
 800117e:	f004 fb3d 	bl	80057fc <HAL_RTC_SetTime>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001188:	f000 fb7a 	bl	8001880 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800118c:	2305      	movs	r3, #5
 800118e:	f887 3020 	strb.w	r3, [r7, #32]
  sDate.Month = RTC_MONTH_MARCH;
 8001192:	2303      	movs	r3, #3
 8001194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  sDate.Date = 11;
 8001198:	230b      	movs	r3, #11
 800119a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  sDate.Year = 22;
 800119e:	2316      	movs	r3, #22
 80011a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_RTC_Init+0x108>)
 80011ae:	f004 fbd9 	bl	8005964 <HAL_RTC_SetDate>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011b8:	f000 fb62 	bl	8001880 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 6;
 80011bc:	2306      	movs	r3, #6
 80011be:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmDateWeekDay = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	763b      	strb	r3, [r7, #24]
  sAlarm.Alarm = RTC_ALARM_A;
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_RTC_Init+0x108>)
 80011ea:	f004 fc59 	bl	8005aa0 <HAL_RTC_SetAlarm_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_RTC_Init+0x100>
  {
    Error_Handler();
 80011f4:	f000 fb44 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200014e0 	.word	0x200014e0
 8001204:	40002800 	.word	0x40002800

08001208 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */
  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI2_Init+0x64>)
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <MX_SPI2_Init+0x68>)
 8001210:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0x64>)
 8001214:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001218:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0x64>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0x64>)
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0x64>)
 800123c:	2210      	movs	r2, #16
 800123e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_SPI2_Init+0x64>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0x64>)
 8001248:	2200      	movs	r2, #0
 800124a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_SPI2_Init+0x64>)
 800124e:	2200      	movs	r2, #0
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0x64>)
 8001254:	220a      	movs	r2, #10
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_SPI2_Init+0x64>)
 800125a:	f004 fe0e 	bl	8005e7a <HAL_SPI_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 fb0c 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	2000034c 	.word	0x2000034c
 8001270:	40003800 	.word	0x40003800

08001274 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_USART3_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_USART3_UART_Init+0x4c>)
 80012ac:	f005 fb0e 	bl	80068cc <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 fae3 	bl	8001880 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200003a4 	.word	0x200003a4
 80012c4:	40004800 	.word	0x40004800

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	4b55      	ldr	r3, [pc, #340]	; (8001434 <MX_GPIO_Init+0x16c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	4a54      	ldr	r2, [pc, #336]	; (8001434 <MX_GPIO_Init+0x16c>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	61d3      	str	r3, [r2, #28]
 80012ea:	4b52      	ldr	r3, [pc, #328]	; (8001434 <MX_GPIO_Init+0x16c>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <MX_GPIO_Init+0x16c>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a4e      	ldr	r2, [pc, #312]	; (8001434 <MX_GPIO_Init+0x16c>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	61d3      	str	r3, [r2, #28]
 8001302:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b49      	ldr	r3, [pc, #292]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a48      	ldr	r2, [pc, #288]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	61d3      	str	r3, [r2, #28]
 800131a:	4b46      	ldr	r3, [pc, #280]	; (8001434 <MX_GPIO_Init+0x16c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a42      	ldr	r2, [pc, #264]	; (8001434 <MX_GPIO_Init+0x16c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	61d3      	str	r3, [r2, #28]
 8001332:	4b40      	ldr	r3, [pc, #256]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <MX_GPIO_Init+0x16c>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <MX_GPIO_Init+0x16c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001356:	2200      	movs	r2, #0
 8001358:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 800135c:	4836      	ldr	r0, [pc, #216]	; (8001438 <MX_GPIO_Init+0x170>)
 800135e:	f001 fcfe 	bl	8002d5e <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8001362:	2200      	movs	r2, #0
 8001364:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8001368:	4834      	ldr	r0, [pc, #208]	; (800143c <MX_GPIO_Init+0x174>)
 800136a:	f001 fcf8 	bl	8002d5e <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 800136e:	2200      	movs	r2, #0
 8001370:	f641 4165 	movw	r1, #7269	; 0x1c65
 8001374:	4832      	ldr	r0, [pc, #200]	; (8001440 <MX_GPIO_Init+0x178>)
 8001376:	f001 fcf2 	bl	8002d5e <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2104      	movs	r1, #4
 800137e:	4831      	ldr	r0, [pc, #196]	; (8001444 <MX_GPIO_Init+0x17c>)
 8001380:	f001 fced 	bl	8002d5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8001384:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8001388:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4826      	ldr	r0, [pc, #152]	; (8001438 <MX_GPIO_Init+0x170>)
 800139e:	f001 fb47 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 80013a2:	f241 03f7 	movw	r3, #4343	; 0x10f7
 80013a6:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4820      	ldr	r0, [pc, #128]	; (800143c <MX_GPIO_Init+0x174>)
 80013bc:	f001 fb38 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80013c0:	f641 4365 	movw	r3, #7269	; 0x1c65
 80013c4:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <MX_GPIO_Init+0x178>)
 80013da:	f001 fb29 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 80013de:	2340      	movs	r3, #64	; 0x40
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <MX_GPIO_Init+0x170>)
 80013f2:	f001 fb1d 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_GPIO_Init+0x174>)
 800140c:	f001 fb10 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8001410:	2304      	movs	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_GPIO_Init+0x17c>)
 8001428:	f001 fb02 	bl	8002a30 <HAL_GPIO_Init>

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020c00 	.word	0x40020c00

08001448 <logData2SDCard>:
    * @brief
    * @param  :
    * @retval :
    */
void logData2SDCard(int *data, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	/* Make space for line of data */
    f_lseek(&fil, FILE_LINE_SIZE);
 8001452:	21b4      	movs	r1, #180	; 0xb4
 8001454:	481d      	ldr	r0, [pc, #116]	; (80014cc <logData2SDCard+0x84>)
 8001456:	f008 fd13 	bl	8009e80 <f_lseek>
    f_lseek(&fil, f_size(&fil));
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <logData2SDCard+0x84>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	481a      	ldr	r0, [pc, #104]	; (80014cc <logData2SDCard+0x84>)
 8001462:	f008 fd0d 	bl	8009e80 <f_lseek>

	/* Construct string to put into file */
    for(int node = 0; node < len - 1; node++)
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e00f      	b.n	800148c <logData2SDCard+0x44>
    {
        fr = f_printf(&fil, "%d,", data[node]) && FR_OK;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4915      	ldr	r1, [pc, #84]	; (80014d0 <logData2SDCard+0x88>)
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <logData2SDCard+0x84>)
 800147c:	f008 ff9a 	bl	800a3b4 <f_printf>
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <logData2SDCard+0x8c>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
    for(int node = 0; node < len - 1; node++)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbea      	blt.n	800146c <logData2SDCard+0x24>
    }

    fr = f_printf(&fil, "%d\n", data[len - 1]) && FR_OK;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800149c:	3b01      	subs	r3, #1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <logData2SDCard+0x90>)
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <logData2SDCard+0x84>)
 80014ac:	f008 ff82 	bl	800a3b4 <f_printf>
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <logData2SDCard+0x8c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]

    // Flush file after every mat reading
    fr = f_sync(&fil) && FR_OK;
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <logData2SDCard+0x84>)
 80014b8:	f008 fc3a 	bl	8009d30 <f_sync>
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <logData2SDCard+0x8c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001578 	.word	0x20001578
 80014d0:	0800aae8 	.word	0x0800aae8
 80014d4:	2000010e 	.word	0x2000010e
 80014d8:	0800aaec 	.word	0x0800aaec

080014dc <muxInit>:
/**
    * @brief
    * @param  :
    * @retval :
    */
void muxInit(void) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	/* Set load switch */
	HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4819      	ldr	r0, [pc, #100]	; (800154c <muxInit+0x70>)
 80014e8:	f001 fc39 	bl	8002d5e <HAL_GPIO_WritePin>

	/* All muxes are active low. We want to set them high (disabled) at startup */
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	e00e      	b.n	8001510 <muxInit+0x34>
	{
		disableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <muxInit+0x74>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014fa:	4916      	ldr	r1, [pc, #88]	; (8001554 <muxInit+0x78>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f000 f935 	bl	8001774 <disableMux>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3301      	adds	r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b03      	cmp	r3, #3
 8001514:	dded      	ble.n	80014f2 <muxInit+0x16>
	}
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	e00e      	b.n	800153a <muxInit+0x5e>
	{
		disableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 800151c:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <muxInit+0x7c>)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001524:	490d      	ldr	r1, [pc, #52]	; (800155c <muxInit+0x80>)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f000 f920 	bl	8001774 <disableMux>
	for (int sense_mux = 0; sense_mux < 8; sense_mux++)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b07      	cmp	r3, #7
 800153e:	dded      	ble.n	800151c <muxInit+0x40>
	}
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40020800 	.word	0x40020800
 8001550:	20000024 	.word	0x20000024
 8001554:	0800ab38 	.word	0x0800ab38
 8001558:	20000034 	.word	0x20000034
 800155c:	0800ab48 	.word	0x0800ab48

08001560 <selectChannel>:

/**
    * @brief  Sets to S0, S1, and S2 select pins
    */
void selectChannel(int pin, int array[]) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b07      	cmp	r3, #7
 800156e:	f200 80eb 	bhi.w	8001748 <selectChannel+0x1e8>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <selectChannel+0x18>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	08001599 	.word	0x08001599
 800157c:	080015cf 	.word	0x080015cf
 8001580:	08001605 	.word	0x08001605
 8001584:	0800163b 	.word	0x0800163b
 8001588:	08001671 	.word	0x08001671
 800158c:	080016a7 	.word	0x080016a7
 8001590:	080016dd 	.word	0x080016dd
 8001594:	08001713 	.word	0x08001713
	switch (pin) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	486b      	ldr	r0, [pc, #428]	; (8001750 <selectChannel+0x1f0>)
 80015a4:	f001 fbdb 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3304      	adds	r3, #4
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4866      	ldr	r0, [pc, #408]	; (8001750 <selectChannel+0x1f0>)
 80015b6:	f001 fbd2 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	3308      	adds	r3, #8
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	2200      	movs	r2, #0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4862      	ldr	r0, [pc, #392]	; (8001750 <selectChannel+0x1f0>)
 80015c8:	f001 fbc9 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 80015cc:	e0bc      	b.n	8001748 <selectChannel+0x1e8>
		case 1:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	485d      	ldr	r0, [pc, #372]	; (8001750 <selectChannel+0x1f0>)
 80015da:	f001 fbc0 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	3304      	adds	r3, #4
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4859      	ldr	r0, [pc, #356]	; (8001750 <selectChannel+0x1f0>)
 80015ec:	f001 fbb7 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3308      	adds	r3, #8
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2200      	movs	r2, #0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4854      	ldr	r0, [pc, #336]	; (8001750 <selectChannel+0x1f0>)
 80015fe:	f001 fbae 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 8001602:	e0a1      	b.n	8001748 <selectChannel+0x1e8>
		case 2:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	4850      	ldr	r0, [pc, #320]	; (8001750 <selectChannel+0x1f0>)
 8001610:	f001 fba5 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	3304      	adds	r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	484b      	ldr	r0, [pc, #300]	; (8001750 <selectChannel+0x1f0>)
 8001622:	f001 fb9c 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3308      	adds	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2200      	movs	r2, #0
 8001630:	4619      	mov	r1, r3
 8001632:	4847      	ldr	r0, [pc, #284]	; (8001750 <selectChannel+0x1f0>)
 8001634:	f001 fb93 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 8001638:	e086      	b.n	8001748 <selectChannel+0x1e8>
		case 3:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29b      	uxth	r3, r3
 8001640:	2201      	movs	r2, #1
 8001642:	4619      	mov	r1, r3
 8001644:	4842      	ldr	r0, [pc, #264]	; (8001750 <selectChannel+0x1f0>)
 8001646:	f001 fb8a 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b29b      	uxth	r3, r3
 8001652:	2201      	movs	r2, #1
 8001654:	4619      	mov	r1, r3
 8001656:	483e      	ldr	r0, [pc, #248]	; (8001750 <selectChannel+0x1f0>)
 8001658:	f001 fb81 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_RESET);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3308      	adds	r3, #8
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	2200      	movs	r2, #0
 8001666:	4619      	mov	r1, r3
 8001668:	4839      	ldr	r0, [pc, #228]	; (8001750 <selectChannel+0x1f0>)
 800166a:	f001 fb78 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 800166e:	e06b      	b.n	8001748 <selectChannel+0x1e8>
		case 4:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	4835      	ldr	r0, [pc, #212]	; (8001750 <selectChannel+0x1f0>)
 800167c:	f001 fb6f 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3304      	adds	r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <selectChannel+0x1f0>)
 800168e:	f001 fb66 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	2201      	movs	r2, #1
 800169c:	4619      	mov	r1, r3
 800169e:	482c      	ldr	r0, [pc, #176]	; (8001750 <selectChannel+0x1f0>)
 80016a0:	f001 fb5d 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 80016a4:	e050      	b.n	8001748 <selectChannel+0x1e8>
		case 5:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	4827      	ldr	r0, [pc, #156]	; (8001750 <selectChannel+0x1f0>)
 80016b2:	f001 fb54 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_RESET);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	3304      	adds	r3, #4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2200      	movs	r2, #0
 80016c0:	4619      	mov	r1, r3
 80016c2:	4823      	ldr	r0, [pc, #140]	; (8001750 <selectChannel+0x1f0>)
 80016c4:	f001 fb4b 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3308      	adds	r3, #8
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	481e      	ldr	r0, [pc, #120]	; (8001750 <selectChannel+0x1f0>)
 80016d6:	f001 fb42 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 80016da:	e035      	b.n	8001748 <selectChannel+0x1e8>
		case 6:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_RESET);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	4619      	mov	r1, r3
 80016e6:	481a      	ldr	r0, [pc, #104]	; (8001750 <selectChannel+0x1f0>)
 80016e8:	f001 fb39 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2201      	movs	r2, #1
 80016f6:	4619      	mov	r1, r3
 80016f8:	4815      	ldr	r0, [pc, #84]	; (8001750 <selectChannel+0x1f0>)
 80016fa:	f001 fb30 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	2201      	movs	r2, #1
 8001708:	4619      	mov	r1, r3
 800170a:	4811      	ldr	r0, [pc, #68]	; (8001750 <selectChannel+0x1f0>)
 800170c:	f001 fb27 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 8001710:	e01a      	b.n	8001748 <selectChannel+0x1e8>
		case 7:
			HAL_GPIO_WritePin(GPIOA, array[0], GPIO_PIN_SET);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	2201      	movs	r2, #1
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <selectChannel+0x1f0>)
 800171e:	f001 fb1e 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[1], GPIO_PIN_SET);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	2201      	movs	r2, #1
 800172c:	4619      	mov	r1, r3
 800172e:	4808      	ldr	r0, [pc, #32]	; (8001750 <selectChannel+0x1f0>)
 8001730:	f001 fb15 	bl	8002d5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, array[2], GPIO_PIN_SET);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3308      	adds	r3, #8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	2201      	movs	r2, #1
 800173e:	4619      	mov	r1, r3
 8001740:	4803      	ldr	r0, [pc, #12]	; (8001750 <selectChannel+0x1f0>)
 8001742:	f001 fb0c 	bl	8002d5e <HAL_GPIO_WritePin>
			break;
 8001746:	bf00      	nop
	}
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40020000 	.word	0x40020000

08001754 <enableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void enableMux(GPIO_TypeDef *type, int pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_RESET);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2200      	movs	r2, #0
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f001 faf9 	bl	8002d5e <HAL_GPIO_WritePin>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <disableMux>:
    * @brief
    * @param  :
    * @retval :
    */
void disableMux(GPIO_TypeDef *type, int pin)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	2201      	movs	r2, #1
 8001784:	4619      	mov	r1, r3
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 fae9 	bl	8002d5e <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <readPressure>:
    * @brief  :
    * @param  :
    * @retval :
    */
int readPressure(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	HAL_Delay(3);
 800179a:	2003      	movs	r0, #3
 800179c:	f000 fb32 	bl	8001e04 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 80017a0:	480a      	ldr	r0, [pc, #40]	; (80017cc <readPressure+0x38>)
 80017a2:	f000 fc97 	bl	80020d4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80017a6:	f04f 31ff 	mov.w	r1, #4294967295
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <readPressure+0x38>)
 80017ac:	f000 fd1e 	bl	80021ec <HAL_ADC_PollForConversion>
    int data = HAL_ADC_GetValue(&hadc);
 80017b0:	4806      	ldr	r0, [pc, #24]	; (80017cc <readPressure+0x38>)
 80017b2:	f000 fdab 	bl	800230c <HAL_ADC_GetValue>
 80017b6:	4603      	mov	r3, r0
 80017b8:	607b      	str	r3, [r7, #4]
    HAL_ADC_Stop(&hadc);
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <readPressure+0x38>)
 80017bc:	f000 fcea 	bl	8002194 <HAL_ADC_Stop>
    return data;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20001524 	.word	0x20001524

080017d0 <samplePrototypeMat>:
/**
    * @brief  :
    * @param  :
    * @retval :
    */
void samplePrototypeMat(int pwr_mux, int sense_mux, int* data) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	int array_cnt = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
	enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 80017e0:	4a21      	ldr	r2, [pc, #132]	; (8001868 <samplePrototypeMat+0x98>)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017e8:	4920      	ldr	r1, [pc, #128]	; (800186c <samplePrototypeMat+0x9c>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4610      	mov	r0, r2
 80017f4:	f7ff ffae 	bl	8001754 <enableMux>
	enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <samplePrototypeMat+0xa0>)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001800:	491c      	ldr	r1, [pc, #112]	; (8001874 <samplePrototypeMat+0xa4>)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff ffa2 	bl	8001754 <enableMux>

	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
 8001814:	e01f      	b.n	8001856 <samplePrototypeMat+0x86>
		selectChannel(pwr_sel, pwrMuxSelect);
 8001816:	4918      	ldr	r1, [pc, #96]	; (8001878 <samplePrototypeMat+0xa8>)
 8001818:	69b8      	ldr	r0, [r7, #24]
 800181a:	f7ff fea1 	bl	8001560 <selectChannel>
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e012      	b.n	800184a <samplePrototypeMat+0x7a>

			selectChannel(sense_sel, senseMuxSelect);
 8001824:	4915      	ldr	r1, [pc, #84]	; (800187c <samplePrototypeMat+0xac>)
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff fe9a 	bl	8001560 <selectChannel>

			/* Read voltage */
			int raw_ADC_pressure = readPressure();
 800182c:	f7ff ffb2 	bl	8001794 <readPressure>
 8001830:	6138      	str	r0, [r7, #16]

			data[array_cnt] = raw_ADC_pressure;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]
			array_cnt++;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
		for (int sense_sel = 0; sense_sel < 6; sense_sel++) {
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b05      	cmp	r3, #5
 800184e:	dde9      	ble.n	8001824 <samplePrototypeMat+0x54>
	for (int pwr_sel = 0; pwr_sel < 6; pwr_sel++) {
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3301      	adds	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b05      	cmp	r3, #5
 800185a:	dddc      	ble.n	8001816 <samplePrototypeMat+0x46>
		}
	}

}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3720      	adds	r7, #32
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000024 	.word	0x20000024
 800186c:	0800ab38 	.word	0x0800ab38
 8001870:	20000034 	.word	0x20000034
 8001874:	0800ab48 	.word	0x0800ab48
 8001878:	20000060 	.word	0x20000060
 800187c:	20000054 	.word	0x20000054

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
}
 8001886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188e:	4807      	ldr	r0, [pc, #28]	; (80018ac <Error_Handler+0x2c>)
 8001890:	f001 fa65 	bl	8002d5e <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001894:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001898:	f000 fab4 	bl	8001e04 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a2:	4802      	ldr	r0, [pc, #8]	; (80018ac <Error_Handler+0x2c>)
 80018a4:	f001 fa5b 	bl	8002d5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_RGB_R_Pin, GPIO_PIN_SET);
 80018a8:	e7ee      	b.n	8001888 <Error_Handler+0x8>
 80018aa:	bf00      	nop
 80018ac:	40020800 	.word	0x40020800

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_MspInit+0x68>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	4a17      	ldr	r2, [pc, #92]	; (8001918 <HAL_MspInit+0x68>)
 80018bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	6253      	str	r3, [r2, #36]	; 0x24
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_MspInit+0x68>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_MspInit+0x68>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_MspInit+0x68>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6213      	str	r3, [r2, #32]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_MspInit+0x68>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_MspInit+0x68>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_MspInit+0x68>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6253      	str	r3, [r2, #36]	; 0x24
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_MspInit+0x68>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2005      	movs	r0, #5
 8001904:	f000 ffd3 	bl	80028ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001908:	2005      	movs	r0, #5
 800190a:	f000 ffec 	bl	80028e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_ADC_MspInit+0x74>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d123      	bne.n	8001986 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_ADC_MspInit+0x78>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_ADC_MspInit+0x78>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_ADC_MspInit+0x78>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_ADC_MspInit+0x78>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_ADC_MspInit+0x78>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_ADC_MspInit+0x78>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 800196e:	2302      	movs	r3, #2
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001972:	2303      	movs	r3, #3
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_ADC_MspInit+0x7c>)
 8001982:	f001 f855 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40012400 	.word	0x40012400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_I2C_MspInit+0x9c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d138      	bne.n	8001a30 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	61d3      	str	r3, [r2, #28]
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 80019d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019dc:	2312      	movs	r3, #18
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e8:	2304      	movs	r3, #4
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4813      	ldr	r0, [pc, #76]	; (8001a40 <HAL_I2C_MspInit+0xa4>)
 80019f4:	f001 f81c 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 80019fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a02:	6253      	str	r3, [r2, #36]	; 0x24
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_I2C_MspInit+0xa0>)
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2100      	movs	r1, #0
 8001a14:	201f      	movs	r0, #31
 8001a16:	f000 ff4a 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a1a:	201f      	movs	r0, #31
 8001a1c:	f000 ff63 	bl	80028e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2020      	movs	r0, #32
 8001a26:	f000 ff42 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a2a:	2020      	movs	r0, #32
 8001a2c:	f000 ff5b 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400

08001a44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a08      	ldr	r2, [pc, #32]	; (8001a74 <HAL_RTC_MspInit+0x30>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d10a      	bne.n	8001a6c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_RTC_MspInit+0x34>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2029      	movs	r0, #41	; 0x29
 8001a62:	f000 ff24 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a66:	2029      	movs	r0, #41	; 0x29
 8001a68:	f000 ff3d 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40002800 	.word	0x40002800
 8001a78:	424706d8 	.word	0x424706d8

08001a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	; 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <HAL_SPI_MspInit+0x8c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d130      	bne.n	8001b00 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6253      	str	r3, [r2, #36]	; 0x24
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_SPI_MspInit+0x90>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ace:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 0314 	add.w	r3, r7, #20
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4809      	ldr	r0, [pc, #36]	; (8001b10 <HAL_SPI_MspInit+0x94>)
 8001aec:	f000 ffa0 	bl	8002a30 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2024      	movs	r0, #36	; 0x24
 8001af6:	f000 feda 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001afa:	2024      	movs	r0, #36	; 0x24
 8001afc:	f000 fef3 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40003800 	.word	0x40003800
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020400 	.word	0x40020400

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_UART_MspInit+0x8c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d130      	bne.n	8001b98 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6253      	str	r3, [r2, #36]	; 0x24
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	61d3      	str	r3, [r2, #28]
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8001b66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_UART_MspInit+0x94>)
 8001b84:	f000 ff54 	bl	8002a30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2027      	movs	r0, #39	; 0x27
 8001b8e:	f000 fe8e 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b92:	2027      	movs	r0, #39	; 0x27
 8001b94:	f000 fea7 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	; 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40004800 	.word	0x40004800
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020800 	.word	0x40020800

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr

08001bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <SysTick_Handler+0x34>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <SysTick_Handler+0x18>
		Timer1--;
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <SysTick_Handler+0x34>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <SysTick_Handler+0x34>)
 8001c06:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <SysTick_Handler+0x38>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <SysTick_Handler+0x2c>
		Timer2--;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Handler+0x38>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <SysTick_Handler+0x38>)
 8001c1a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f8d6 	bl	8001dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000346 	.word	0x20000346
 8001c28:	20000344 	.word	0x20000344

08001c2c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <I2C1_EV_IRQHandler+0x10>)
 8001c3e:	f001 f9eb 	bl	8003018 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20001420 	.word	0x20001420

08001c4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <I2C1_ER_IRQHandler+0x10>)
 8001c52:	f001 fb52 	bl	80032fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20001420 	.word	0x20001420

08001c60 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <SPI2_IRQHandler+0x10>)
 8001c66:	f004 fc63 	bl	8006530 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000034c 	.word	0x2000034c

08001c74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <USART3_IRQHandler+0x10>)
 8001c7a:	f004 fe75 	bl	8006968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200003a4 	.word	0x200003a4

08001c88 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupts through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <RTC_Alarm_IRQHandler+0x10>)
 8001c8e:	f004 f82d 	bl	8005cec <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200014e0 	.word	0x200014e0

08001c9c <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ca6:	f008 fec1 	bl	800aa2c <__errno>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
	return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_exit>:

void _exit (int status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cce:	e7fe      	b.n	8001cce <_exit+0x12>

08001cd0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d02:	f7ff ffe5 	bl	8001cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d06:	f008 feab 	bl	800aa60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d0a:	f7ff f879 	bl	8000e00 <main>
  bx lr
 8001d0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001d18:	0800afe0 	.word	0x0800afe0
  ldr r2, =_sbss
 8001d1c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001d20:	2000461c 	.word	0x2000461c

08001d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_IRQHandler>

08001d26 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f000 fdb1 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	200f      	movs	r0, #15
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fdb2 	bl	80018b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_InitTick+0x68>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d022      	beq.n	8001db2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_InitTick+0x68>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fdbe 	bl	8002902 <HAL_SYSTICK_Config>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10f      	bne.n	8001dac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d809      	bhi.n	8001da6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9a:	f000 fd88 	bl	80028ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_InitTick+0x70>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	e004      	b.n	8001db6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000074 	.word	0x20000074
 8001dc4:	2000006c 	.word	0x2000006c
 8001dc8:	20000070 	.word	0x20000070

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_IncTick+0x1c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_IncTick+0x20>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_IncTick+0x1c>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200025a8 	.word	0x200025a8
 8001dec:	20000074 	.word	0x20000074

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b02      	ldr	r3, [pc, #8]	; (8001e00 <HAL_GetTick+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	200025a8 	.word	0x200025a8

08001e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_GetTick>
 8001e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d004      	beq.n	8001e28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_Delay+0x40>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e28:	bf00      	nop
 8001e2a:	f7ff ffe1 	bl	8001df0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d8f7      	bhi.n	8001e2a <HAL_Delay+0x26>
  {
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000074 	.word	0x20000074

08001e48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e127      	b.n	80020b8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e84:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <HAL_ADC_Init+0x278>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a8d      	ldr	r2, [pc, #564]	; (80020c0 <HAL_ADC_Init+0x278>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_ADC_Init+0x278>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fd3d 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80ff 	bne.w	80020ae <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eb8:	f023 0302 	bic.w	r3, r3, #2
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	; (80020c4 <HAL_ADC_Init+0x27c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	497c      	ldr	r1, [pc, #496]	; (80020c4 <HAL_ADC_Init+0x27c>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001ede:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eec:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001f02:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001f2a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001f42:	4313      	orrs	r3, r2
 8001f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f46:	4313      	orrs	r3, r2
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	d04f      	beq.n	8001ff8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f6a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6912      	ldr	r2, [r2, #16]
 8001f70:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001f74:	d003      	beq.n	8001f7e <HAL_ADC_Init+0x136>
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6912      	ldr	r2, [r2, #16]
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_ADC_Init+0x13c>
 8001f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f82:	e000      	b.n	8001f86 <HAL_ADC_Init+0x13e>
 8001f84:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001f86:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d125      	bne.n	8001fe4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d114      	bne.n	8001fcc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001fac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	fa92 f2a2 	rbit	r2, r2
 8001fb4:	617a      	str	r2, [r7, #20]
  return result;
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	fab2 f282 	clz	r2, r2
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fca:	e00b      	b.n	8001fe4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_ADC_Init+0x280>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ff4:	430b      	orrs	r3, r1
 8001ff6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	4b33      	ldr	r3, [pc, #204]	; (80020cc <HAL_ADC_Init+0x284>)
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6812      	ldr	r2, [r2, #0]
 8002006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002008:	430b      	orrs	r3, r1
 800200a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002014:	d003      	beq.n	800201e <HAL_ADC_Init+0x1d6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d119      	bne.n	8002052 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	3b01      	subs	r3, #1
 800202e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002032:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	fa92 f2a2 	rbit	r2, r2
 800203a:	60fa      	str	r2, [r7, #12]
  return result;
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	fa03 f202 	lsl.w	r2, r3, r2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
 8002050:	e007      	b.n	8002062 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_ADC_Init+0x288>)
 800206a:	4013      	ands	r3, r2
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	429a      	cmp	r2, r3
 8002070:	d10b      	bne.n	800208a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207c:	f023 0303 	bic.w	r3, r3, #3
 8002080:	f043 0201 	orr.w	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	64da      	str	r2, [r3, #76]	; 0x4c
 8002088:	e014      	b.n	80020b4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	f023 0312 	bic.w	r3, r3, #18
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80020ac:	e002      	b.n	80020b4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40012700 	.word	0x40012700
 80020c8:	fcfc16ff 	.word	0xfcfc16ff
 80020cc:	c0fff18d 	.word	0xc0fff18d
 80020d0:	bf80fffe 	.word	0xbf80fffe

080020d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Start+0x1a>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e04e      	b.n	800218c <HAL_ADC_Start+0xb8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fa64 	bl	80025c4 <ADC_Enable>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d141      	bne.n	800218a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002130:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002144:	d106      	bne.n	8002154 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214a:	f023 0206 	bic.w	r2, r3, #6
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	651a      	str	r2, [r3, #80]	; 0x50
 8002152:	e002      	b.n	800215a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800216a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002188:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800218a:	7bfb      	ldrb	r3, [r7, #15]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_Stop+0x1a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e01a      	b.n	80021e4 <HAL_ADC_Stop+0x50>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa60 	bl	800267c <ADC_ConversionStop_Disable>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002208:	d113      	bne.n	8002232 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002218:	d10b      	bne.n	8002232 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e068      	b.n	8002304 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002232:	f7ff fddd 	bl	8001df0 <HAL_GetTick>
 8002236:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002238:	e021      	b.n	800227e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d01d      	beq.n	800227e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_ADC_PollForConversion+0x6c>
 8002248:	f7ff fdd2 	bl	8001df0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d212      	bcs.n	800227e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10b      	bne.n	800227e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	f043 0204 	orr.w	r2, r3, #4
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e042      	b.n	8002304 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0d6      	beq.n	800223a <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0212 	mvn.w	r2, #18
 800229c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d124      	bne.n	8002302 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d11f      	bne.n	8002302 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d111      	bne.n	8002302 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d105      	bne.n	8002302 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x20>
 8002340:	2302      	movs	r3, #2
 8002342:	e134      	b.n	80025ae <HAL_ADC_ConfigChannel+0x28a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d81c      	bhi.n	800238e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b05      	subs	r3, #5
 8002366:	221f      	movs	r2, #31
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	4019      	ands	r1, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	3b05      	subs	r3, #5
 8002380:	fa00 f203 	lsl.w	r2, r0, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
 800238c:	e07e      	b.n	800248c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d81c      	bhi.n	80023d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b23      	subs	r3, #35	; 0x23
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	4019      	ands	r1, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	3b23      	subs	r3, #35	; 0x23
 80023c2:	fa00 f203 	lsl.w	r2, r0, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80023ce:	e05d      	b.n	800248c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b12      	cmp	r3, #18
 80023d6:	d81c      	bhi.n	8002412 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	3b41      	subs	r3, #65	; 0x41
 80023ea:	221f      	movs	r2, #31
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	4019      	ands	r1, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	3b41      	subs	r3, #65	; 0x41
 8002404:	fa00 f203 	lsl.w	r2, r0, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
 8002410:	e03c      	b.n	800248c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b18      	cmp	r3, #24
 8002418:	d81c      	bhi.n	8002454 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	3b5f      	subs	r3, #95	; 0x5f
 800242c:	221f      	movs	r2, #31
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	4019      	ands	r1, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3b5f      	subs	r3, #95	; 0x5f
 8002446:	fa00 f203 	lsl.w	r2, r0, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
 8002452:	e01b      	b.n	800248c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b7d      	subs	r3, #125	; 0x7d
 8002466:	221f      	movs	r2, #31
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	4019      	ands	r1, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b7d      	subs	r3, #125	; 0x7d
 8002480:	fa00 f203 	lsl.w	r2, r0, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d81a      	bhi.n	80024ca <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6959      	ldr	r1, [r3, #20]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	2207      	movs	r2, #7
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	4019      	ands	r1, r3
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6898      	ldr	r0, [r3, #8]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	fa00 f203 	lsl.w	r2, r0, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	e042      	b.n	8002550 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b13      	cmp	r3, #19
 80024d0:	d81c      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6919      	ldr	r1, [r3, #16]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	3b1e      	subs	r3, #30
 80024e4:	2207      	movs	r2, #7
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	4019      	ands	r1, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6898      	ldr	r0, [r3, #8]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	e021      	b.n	8002550 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b1a      	cmp	r3, #26
 8002512:	d81c      	bhi.n	800254e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	3b3c      	subs	r3, #60	; 0x3c
 8002526:	2207      	movs	r2, #7
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	4019      	ands	r1, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6898      	ldr	r0, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4413      	add	r3, r2
 800253e:	3b3c      	subs	r3, #60	; 0x3c
 8002540:	fa00 f203 	lsl.w	r2, r0, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800254e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d003      	beq.n	8002560 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255c:	2b11      	cmp	r3, #17
 800255e:	d121      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_ADC_ConfigChannel+0x294>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d11b      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_ADC_ConfigChannel+0x294>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_ADC_ConfigChannel+0x294>)
 8002572:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002576:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d111      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_ADC_ConfigChannel+0x298>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_ADC_ConfigChannel+0x29c>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9a      	lsrs	r2, r3, #18
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002596:	e002      	b.n	800259e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3b01      	subs	r3, #1
 800259c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	40012700 	.word	0x40012700
 80025bc:	2000006c 	.word	0x2000006c
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d043      	beq.n	800266a <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <ADC_Enable+0xb0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a20      	ldr	r2, [pc, #128]	; (8002678 <ADC_Enable+0xb4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	0c9a      	lsrs	r2, r3, #18
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002606:	e002      	b.n	800260e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3b01      	subs	r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f9      	bne.n	8002608 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002614:	f7ff fbec 	bl	8001df0 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800261a:	e01f      	b.n	800265c <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800261c:	f7ff fbe8 	bl	8001df0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d918      	bls.n	800265c <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b40      	cmp	r3, #64	; 0x40
 8002636:	d011      	beq.n	800265c <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e007      	b.n	800266c <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b40      	cmp	r3, #64	; 0x40
 8002668:	d1d8      	bne.n	800261c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000006c 	.word	0x2000006c
 8002678:	431bde83 	.word	0x431bde83

0800267c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d12e      	bne.n	80026f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026a6:	f7ff fba3 	bl	8001df0 <HAL_GetTick>
 80026aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026ac:	e01b      	b.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 80026ae:	f7ff fb9f 	bl	8001df0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d914      	bls.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c6:	2b40      	cmp	r3, #64	; 0x40
 80026c8:	d10d      	bne.n	80026e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d0dc      	beq.n	80026ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800271c:	4013      	ands	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002732:	4a04      	ldr	r2, [pc, #16]	; (8002744 <__NVIC_SetPriorityGrouping+0x44>)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	60d3      	str	r3, [r2, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800274c:	4b04      	ldr	r3, [pc, #16]	; (8002760 <__NVIC_GetPriorityGrouping+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	f003 0307 	and.w	r3, r3, #7
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	db0b      	blt.n	800278e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	f003 021f 	and.w	r2, r3, #31
 800277c:	4906      	ldr	r1, [pc, #24]	; (8002798 <__NVIC_EnableIRQ+0x34>)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	2001      	movs	r0, #1
 8002786:	fa00 f202 	lsl.w	r2, r0, r2
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	e000e100 	.word	0xe000e100

0800279c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	db0a      	blt.n	80027c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	490c      	ldr	r1, [pc, #48]	; (80027e8 <__NVIC_SetPriority+0x4c>)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	440b      	add	r3, r1
 80027c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c4:	e00a      	b.n	80027dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4908      	ldr	r1, [pc, #32]	; (80027ec <__NVIC_SetPriority+0x50>)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	3b04      	subs	r3, #4
 80027d4:	0112      	lsls	r2, r2, #4
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	440b      	add	r3, r1
 80027da:	761a      	strb	r2, [r3, #24]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b089      	sub	sp, #36	; 0x24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f1c3 0307 	rsb	r3, r3, #7
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf28      	it	cs
 800280e:	2304      	movcs	r3, #4
 8002810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3304      	adds	r3, #4
 8002816:	2b06      	cmp	r3, #6
 8002818:	d902      	bls.n	8002820 <NVIC_EncodePriority+0x30>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3b03      	subs	r3, #3
 800281e:	e000      	b.n	8002822 <NVIC_EncodePriority+0x32>
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43da      	mvns	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002838:	f04f 31ff 	mov.w	r1, #4294967295
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43d9      	mvns	r1, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002848:	4313      	orrs	r3, r2
         );
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	; 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff90 	bl	800279c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff2d 	bl	8002700 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff42 	bl	8002748 <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff90 	bl	80027f0 <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5f 	bl	800279c <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff35 	bl	8002764 <__NVIC_EnableIRQ>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa2 	bl	8002854 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291a:	b480      	push	{r7}
 800291c:	b085      	sub	sp, #20
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d008      	beq.n	8002944 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e022      	b.n	800298a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 020e 	bic.w	r2, r2, #14
 8002952:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 021c 	and.w	r2, r3, #28
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d005      	beq.n	80029b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e029      	b.n	8002a0c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 020e 	bic.w	r2, r2, #14
 80029c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f003 021c 	and.w	r2, r3, #28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
    }
  }
  return status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a24:	b2db      	uxtb	r3, r3
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002a42:	2300      	movs	r3, #0
 8002a44:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a46:	e154      	b.n	8002cf2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8146 	beq.w	8002cec <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d005      	beq.n	8002a78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d130      	bne.n	8002ada <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68da      	ldr	r2, [r3, #12]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002aae:	2201      	movs	r2, #1
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0201 	and.w	r2, r3, #1
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d017      	beq.n	8002b16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d123      	bne.n	8002b6a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	08da      	lsrs	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3208      	adds	r2, #8
 8002b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	6939      	ldr	r1, [r7, #16]
 8002b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0203 	and.w	r2, r3, #3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80a0 	beq.w	8002cec <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bac:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	4b55      	ldr	r3, [pc, #340]	; (8002d10 <HAL_GPIO_Init+0x2e0>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bc4:	4a53      	ldr	r2, [pc, #332]	; (8002d14 <HAL_GPIO_Init+0x2e4>)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	089b      	lsrs	r3, r3, #2
 8002bca:	3302      	adds	r3, #2
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	220f      	movs	r2, #15
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d019      	beq.n	8002c24 <HAL_GPIO_Init+0x1f4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <HAL_GPIO_Init+0x2ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d013      	beq.n	8002c20 <HAL_GPIO_Init+0x1f0>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a49      	ldr	r2, [pc, #292]	; (8002d20 <HAL_GPIO_Init+0x2f0>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d00d      	beq.n	8002c1c <HAL_GPIO_Init+0x1ec>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a48      	ldr	r2, [pc, #288]	; (8002d24 <HAL_GPIO_Init+0x2f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d007      	beq.n	8002c18 <HAL_GPIO_Init+0x1e8>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a47      	ldr	r2, [pc, #284]	; (8002d28 <HAL_GPIO_Init+0x2f8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d101      	bne.n	8002c14 <HAL_GPIO_Init+0x1e4>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e008      	b.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c14:	2305      	movs	r3, #5
 8002c16:	e006      	b.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e004      	b.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e002      	b.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c24:	2300      	movs	r3, #0
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	f002 0203 	and.w	r2, r2, #3
 8002c2c:	0092      	lsls	r2, r2, #2
 8002c2e:	4093      	lsls	r3, r2
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c36:	4937      	ldr	r1, [pc, #220]	; (8002d14 <HAL_GPIO_Init+0x2e4>)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c44:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c68:	4a30      	ldr	r2, [pc, #192]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c92:	4a26      	ldr	r2, [pc, #152]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c98:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f aea3 	bne.w	8002a48 <HAL_GPIO_Init+0x18>
  }
}
 8002d02:	bf00      	nop
 8002d04:	bf00      	nop
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40010000 	.word	0x40010000
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010400 	.word	0x40010400

08002d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr

08002d5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	807b      	strh	r3, [r7, #2]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d6e:	787b      	ldrb	r3, [r7, #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d74:	887a      	ldrh	r2, [r7, #2]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002d7a:	e003      	b.n	8002d84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002d7c:	887b      	ldrh	r3, [r7, #2]
 8002d7e:	041a      	lsls	r2, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e12b      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fdf0 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2224      	movs	r2, #36	; 0x24
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df4:	f002 fae6 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8002df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a81      	ldr	r2, [pc, #516]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d807      	bhi.n	8002e14 <HAL_I2C_Init+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a80      	ldr	r2, [pc, #512]	; (8003008 <HAL_I2C_Init+0x278>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	bf94      	ite	ls
 8002e0c:	2301      	movls	r3, #1
 8002e0e:	2300      	movhi	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	e006      	b.n	8002e22 <HAL_I2C_Init+0x92>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a7d      	ldr	r2, [pc, #500]	; (800300c <HAL_I2C_Init+0x27c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e7      	b.n	8002ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a78      	ldr	r2, [pc, #480]	; (8003010 <HAL_I2C_Init+0x280>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9b      	lsrs	r3, r3, #18
 8002e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d802      	bhi.n	8002e64 <HAL_I2C_Init+0xd4>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3301      	adds	r3, #1
 8002e62:	e009      	b.n	8002e78 <HAL_I2C_Init+0xe8>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a69      	ldr	r2, [pc, #420]	; (8003014 <HAL_I2C_Init+0x284>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	3301      	adds	r3, #1
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	495c      	ldr	r1, [pc, #368]	; (8003004 <HAL_I2C_Init+0x274>)
 8002e94:	428b      	cmp	r3, r1
 8002e96:	d819      	bhi.n	8002ecc <HAL_I2C_Init+0x13c>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e59      	subs	r1, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002eac:	400b      	ands	r3, r1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_I2C_Init+0x138>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e59      	subs	r1, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	e051      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ec8:	2304      	movs	r3, #4
 8002eca:	e04f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d111      	bne.n	8002ef8 <HAL_I2C_Init+0x168>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e58      	subs	r0, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6859      	ldr	r1, [r3, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	e012      	b.n	8002f1e <HAL_I2C_Init+0x18e>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Init+0x196>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e022      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10e      	bne.n	8002f4c <HAL_I2C_Init+0x1bc>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e58      	subs	r0, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6859      	ldr	r1, [r3, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	440b      	add	r3, r1
 8002f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f40:	3301      	adds	r3, #1
 8002f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	e00f      	b.n	8002f6c <HAL_I2C_Init+0x1dc>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6809      	ldr	r1, [r1, #0]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69da      	ldr	r2, [r3, #28]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6911      	ldr	r1, [r2, #16]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68d2      	ldr	r2, [r2, #12]
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	000186a0 	.word	0x000186a0
 8003008:	001e847f 	.word	0x001e847f
 800300c:	003d08ff 	.word	0x003d08ff
 8003010:	431bde83 	.word	0x431bde83
 8003014:	10624dd3 	.word	0x10624dd3

08003018 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003040:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d003      	beq.n	8003050 <HAL_I2C_EV_IRQHandler+0x38>
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	f040 80c1 	bne.w	80031d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_I2C_EV_IRQHandler+0x6e>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003070:	d003      	beq.n	800307a <HAL_I2C_EV_IRQHandler+0x62>
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003078:	d101      	bne.n	800307e <HAL_I2C_EV_IRQHandler+0x66>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_I2C_EV_IRQHandler+0x68>
 800307e:	2300      	movs	r3, #0
 8003080:	2b01      	cmp	r3, #1
 8003082:	f000 8132 	beq.w	80032ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <HAL_I2C_EV_IRQHandler+0x92>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	0a5b      	lsrs	r3, r3, #9
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 fc63 	bl	8004968 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fd6f 	bl	8003b86 <I2C_Master_SB>
 80030a8:	e092      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d009      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0xb2>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	0a5b      	lsrs	r3, r3, #9
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fde4 	bl	8003c90 <I2C_Master_ADD10>
 80030c8:	e082      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0xd2>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	0a5b      	lsrs	r3, r3, #9
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fdfd 	bl	8003ce2 <I2C_Master_ADDR>
 80030e8:	e072      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d03b      	beq.n	800316e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003104:	f000 80f3 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	09db      	lsrs	r3, r3, #7
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00f      	beq.n	8003134 <HAL_I2C_EV_IRQHandler+0x11c>
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_I2C_EV_IRQHandler+0x11c>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f9e9 	bl	8003504 <I2C_MasterTransmit_TXE>
 8003132:	e04d      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80d6 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	0a5b      	lsrs	r3, r3, #9
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80cf 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003150:	7bbb      	ldrb	r3, [r7, #14]
 8003152:	2b21      	cmp	r3, #33	; 0x21
 8003154:	d103      	bne.n	800315e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa70 	bl	800363c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315c:	e0c7      	b.n	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	f040 80c4 	bne.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fade 	bl	8003728 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800316c:	e0bf      	b.n	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317c:	f000 80b7 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00f      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x194>
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_I2C_EV_IRQHandler+0x194>
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 fb53 	bl	8003850 <I2C_MasterReceive_RXNE>
 80031aa:	e011      	b.n	80031d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 809a 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	0a5b      	lsrs	r3, r3, #9
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8093 	beq.w	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fbf2 	bl	80039b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ce:	e08e      	b.n	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80031d0:	e08d      	b.n	80032ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d004      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e007      	b.n	80031f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x20e>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 ffab 	bl	800417a <I2C_Slave_ADDR>
 8003224:	e066      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x22e>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	0a5b      	lsrs	r3, r3, #9
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 ffe6 	bl	8004210 <I2C_Slave_STOPF>
 8003244:	e056      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003246:	7bbb      	ldrb	r3, [r7, #14]
 8003248:	2b21      	cmp	r3, #33	; 0x21
 800324a:	d002      	beq.n	8003252 <HAL_I2C_EV_IRQHandler+0x23a>
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	2b29      	cmp	r3, #41	; 0x29
 8003250:	d125      	bne.n	800329e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	09db      	lsrs	r3, r3, #7
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00f      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x266>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	0a9b      	lsrs	r3, r3, #10
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_I2C_EV_IRQHandler+0x266>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fec3 	bl	8004002 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800327c:	e039      	b.n	80032f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	089b      	lsrs	r3, r3, #2
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d033      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	0a5b      	lsrs	r3, r3, #9
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02d      	beq.n	80032f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fef0 	bl	800407c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329c:	e029      	b.n	80032f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00f      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	0a9b      	lsrs	r3, r3, #10
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fefa 	bl	80040bc <I2C_SlaveReceive_RXNE>
 80032c8:	e014      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	0a5b      	lsrs	r3, r3, #9
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 ff28 	bl	8004138 <I2C_SlaveReceive_BTF>
 80032e8:	e004      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80032ea:	bf00      	nop
 80032ec:	e002      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	; 0x28
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800331c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <HAL_I2C_ER_IRQHandler+0x4e>
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	0a1b      	lsrs	r3, r3, #8
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003346:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00e      	beq.n	8003372 <HAL_I2C_ER_IRQHandler+0x78>
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	0a1b      	lsrs	r3, r3, #8
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003370:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	0a9b      	lsrs	r3, r3, #10
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03f      	beq.n	80033fe <HAL_I2C_ER_IRQHandler+0x104>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d039      	beq.n	80033fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800338a:	7efb      	ldrb	r3, [r7, #27]
 800338c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80033a4:	7ebb      	ldrb	r3, [r7, #26]
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d112      	bne.n	80033d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10f      	bne.n	80033d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80033b0:	7cfb      	ldrb	r3, [r7, #19]
 80033b2:	2b21      	cmp	r3, #33	; 0x21
 80033b4:	d008      	beq.n	80033c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b29      	cmp	r3, #41	; 0x29
 80033ba:	d005      	beq.n	80033c8 <HAL_I2C_ER_IRQHandler+0xce>
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b28      	cmp	r3, #40	; 0x28
 80033c0:	d106      	bne.n	80033d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b21      	cmp	r3, #33	; 0x21
 80033c6:	d103      	bne.n	80033d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f001 f851 	bl	8004470 <I2C_Slave_AF>
 80033ce:	e016      	b.n	80033fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80033e2:	7efb      	ldrb	r3, [r7, #27]
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d002      	beq.n	80033ee <HAL_I2C_ER_IRQHandler+0xf4>
 80033e8:	7efb      	ldrb	r3, [r7, #27]
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d107      	bne.n	80033fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	0adb      	lsrs	r3, r3, #11
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00e      	beq.n	8003428 <HAL_I2C_ER_IRQHandler+0x12e>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	0a1b      	lsrs	r3, r3, #8
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	f043 0308 	orr.w	r3, r3, #8
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003426:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f001 f888 	bl	8004550 <I2C_ITError>
  }
}
 8003440:	bf00      	nop
 8003442:	3728      	adds	r7, #40	; 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]
 800349c:	4613      	mov	r3, r2
 800349e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800351a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d150      	bne.n	80035cc <I2C_MasterTransmit_TXE+0xc8>
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	2b21      	cmp	r3, #33	; 0x21
 800352e:	d14d      	bne.n	80035cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b08      	cmp	r3, #8
 8003534:	d01d      	beq.n	8003572 <I2C_MasterTransmit_TXE+0x6e>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b20      	cmp	r3, #32
 800353a:	d01a      	beq.n	8003572 <I2C_MasterTransmit_TXE+0x6e>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003542:	d016      	beq.n	8003572 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003552:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2211      	movs	r2, #17
 8003558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff6c 	bl	8003448 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003570:	e060      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003580:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003590:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b40      	cmp	r3, #64	; 0x40
 80035aa:	d107      	bne.n	80035bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff81 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ba:	e03b      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff3f 	bl	8003448 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035ca:	e033      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b21      	cmp	r3, #33	; 0x21
 80035d0:	d005      	beq.n	80035de <I2C_MasterTransmit_TXE+0xda>
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2b40      	cmp	r3, #64	; 0x40
 80035d6:	d12d      	bne.n	8003634 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	2b22      	cmp	r3, #34	; 0x22
 80035dc:	d12a      	bne.n	8003634 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d108      	bne.n	80035fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80035f8:	e01c      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d103      	bne.n	800360e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f88e 	bl	8003728 <I2C_MemoryTransmit_TXE_BTF>
}
 800360c:	e012      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003632:	e7ff      	b.n	8003634 <I2C_MasterTransmit_TXE+0x130>
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b21      	cmp	r3, #33	; 0x21
 8003654:	d164      	bne.n	8003720 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003684:	e04c      	b.n	8003720 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d01d      	beq.n	80036c8 <I2C_MasterTransmit_BTF+0x8c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b20      	cmp	r3, #32
 8003690:	d01a      	beq.n	80036c8 <I2C_MasterTransmit_BTF+0x8c>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003698:	d016      	beq.n	80036c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2211      	movs	r2, #17
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fec1 	bl	8003448 <HAL_I2C_MasterTxCpltCallback>
}
 80036c6:	e02b      	b.n	8003720 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b40      	cmp	r3, #64	; 0x40
 8003700:	d107      	bne.n	8003712 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff fed6 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
}
 8003710:	e006      	b.n	8003720 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fe94 	bl	8003448 <HAL_I2C_MasterTxCpltCallback>
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11d      	bne.n	800377c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003744:	2b01      	cmp	r3, #1
 8003746:	d10b      	bne.n	8003760 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	b2da      	uxtb	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800375e:	e073      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003764:	b29b      	uxth	r3, r3
 8003766:	121b      	asrs	r3, r3, #8
 8003768:	b2da      	uxtb	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800377a:	e065      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	2b01      	cmp	r3, #1
 8003782:	d10b      	bne.n	800379c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	b2da      	uxtb	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
}
 800379a:	e055      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d151      	bne.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b22      	cmp	r3, #34	; 0x22
 80037a8:	d10d      	bne.n	80037c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80037c4:	e040      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d015      	beq.n	80037fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	2b21      	cmp	r3, #33	; 0x21
 80037d4:	d112      	bne.n	80037fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	781a      	ldrb	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037fa:	e025      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d120      	bne.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b21      	cmp	r3, #33	; 0x21
 800380a:	d11d      	bne.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800381a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fe3a 	bl	80034bc <HAL_I2C_MemTxCpltCallback>
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b22      	cmp	r3, #34	; 0x22
 8003862:	f040 80a2 	bne.w	80039aa <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d921      	bls.n	80038b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	f040 8082 	bne.w	80039aa <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80038b6:	e078      	b.n	80039aa <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d074      	beq.n	80039aa <I2C_MasterReceive_RXNE+0x15a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d002      	beq.n	80038cc <I2C_MasterReceive_RXNE+0x7c>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d16e      	bne.n	80039aa <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f001 f819 	bl	8004904 <I2C_WaitOnSTOPRequestThroughIT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d142      	bne.n	800395e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d10a      	bne.n	8003948 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fdc4 	bl	80034ce <HAL_I2C_MemRxCpltCallback>
}
 8003946:	e030      	b.n	80039aa <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2212      	movs	r2, #18
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fd7f 	bl	800345a <HAL_I2C_MasterRxCpltCallback>
}
 800395c:	e025      	b.n	80039aa <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800396c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff fd9b 	bl	80034e0 <HAL_I2C_ErrorCallback>
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d11b      	bne.n	8003a02 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a00:	e0bd      	b.n	8003b7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d129      	bne.n	8003a60 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a1a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d00a      	beq.n	8003a38 <I2C_MasterReceive_BTF+0x86>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d007      	beq.n	8003a38 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a5e:	e08e      	b.n	8003b7e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d176      	bne.n	8003b58 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d002      	beq.n	8003a76 <I2C_MasterReceive_BTF+0xc4>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d108      	bne.n	8003a88 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e019      	b.n	8003abc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d002      	beq.n	8003a94 <I2C_MasterReceive_BTF+0xe2>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d108      	bne.n	8003aa6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e00a      	b.n	8003abc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d007      	beq.n	8003abc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b16:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d10a      	bne.n	8003b42 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fcc7 	bl	80034ce <HAL_I2C_MemRxCpltCallback>
}
 8003b40:	e01d      	b.n	8003b7e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2212      	movs	r2, #18
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fc82 	bl	800345a <HAL_I2C_MasterRxCpltCallback>
}
 8003b56:	e012      	b.n	8003b7e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d117      	bne.n	8003bca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003bb4:	e067      	b.n	8003c86 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
}
 8003bc8:	e05d      	b.n	8003c86 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd2:	d133      	bne.n	8003c3c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b21      	cmp	r3, #33	; 0x21
 8003bde:	d109      	bne.n	8003bf4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	e008      	b.n	8003c06 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d004      	beq.n	8003c18 <I2C_Master_SB+0x92>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d032      	beq.n	8003c86 <I2C_Master_SB+0x100>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02d      	beq.n	8003c86 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c38:	605a      	str	r2, [r3, #4]
}
 8003c3a:	e024      	b.n	8003c86 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10e      	bne.n	8003c62 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	11db      	asrs	r3, r3, #7
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	f003 0306 	and.w	r3, r3, #6
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f063 030f 	orn	r3, r3, #15
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	611a      	str	r2, [r3, #16]
}
 8003c60:	e011      	b.n	8003c86 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10d      	bne.n	8003c86 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	11db      	asrs	r3, r3, #7
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	f003 0306 	and.w	r3, r3, #6
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f063 030e 	orn	r3, r3, #14
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d004      	beq.n	8003cb6 <I2C_Master_ADD10+0x26>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <I2C_Master_ADD10+0x48>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	605a      	str	r2, [r3, #4]
  }
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr

08003ce2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b091      	sub	sp, #68	; 0x44
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b22      	cmp	r3, #34	; 0x22
 8003d0a:	f040 8169 	bne.w	8003fe0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <I2C_Master_ADDR+0x54>
 8003d16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d10b      	bne.n	8003d36 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	633b      	str	r3, [r7, #48]	; 0x30
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	e160      	b.n	8003ff8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d11d      	bne.n	8003d7a <I2C_Master_ADDR+0x98>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d46:	d118      	bne.n	8003d7a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	651a      	str	r2, [r3, #80]	; 0x50
 8003d78:	e13e      	b.n	8003ff8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d113      	bne.n	8003dac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	2300      	movs	r3, #0
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e115      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	f040 808a 	bne.w	8003ecc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dbe:	d137      	bne.n	8003e30 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dde:	d113      	bne.n	8003e08 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	e0e7      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	623b      	str	r3, [r7, #32]
 8003e1c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e0d3      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d02e      	beq.n	8003e94 <I2C_Master_ADDR+0x1b2>
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d02b      	beq.n	8003e94 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	2b12      	cmp	r3, #18
 8003e40:	d102      	bne.n	8003e48 <I2C_Master_ADDR+0x166>
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d125      	bne.n	8003e94 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d00e      	beq.n	8003e6c <I2C_Master_ADDR+0x18a>
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d00b      	beq.n	8003e6c <I2C_Master_ADDR+0x18a>
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d008      	beq.n	8003e6c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e007      	b.n	8003e7c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e7a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	e0a1      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e085      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d14d      	bne.n	8003f72 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d016      	beq.n	8003f0a <I2C_Master_ADDR+0x228>
 8003edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d013      	beq.n	8003f0a <I2C_Master_ADDR+0x228>
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d010      	beq.n	8003f0a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e007      	b.n	8003f1a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f18:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f28:	d117      	bne.n	8003f5a <I2C_Master_ADDR+0x278>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f30:	d00b      	beq.n	8003f4a <I2C_Master_ADDR+0x268>
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d008      	beq.n	8003f4a <I2C_Master_ADDR+0x268>
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d005      	beq.n	8003f4a <I2C_Master_ADDR+0x268>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d002      	beq.n	8003f4a <I2C_Master_ADDR+0x268>
 8003f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d107      	bne.n	8003f5a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e032      	b.n	8003fd8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f80:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	d117      	bne.n	8003fc2 <I2C_Master_ADDR+0x2e0>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f98:	d00b      	beq.n	8003fb2 <I2C_Master_ADDR+0x2d0>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d008      	beq.n	8003fb2 <I2C_Master_ADDR+0x2d0>
 8003fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d005      	beq.n	8003fb2 <I2C_Master_ADDR+0x2d0>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b10      	cmp	r3, #16
 8003faa:	d002      	beq.n	8003fb2 <I2C_Master_ADDR+0x2d0>
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d107      	bne.n	8003fc2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fc0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003fde:	e00b      	b.n	8003ff8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
}
 8003ff6:	e7ff      	b.n	8003ff8 <I2C_Master_ADDR+0x316>
 8003ff8:	bf00      	nop
 8003ffa:	3744      	adds	r7, #68	; 0x44
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004010:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d02b      	beq.n	8004074 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d114      	bne.n	8004074 <I2C_SlaveTransmit_TXE+0x72>
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b29      	cmp	r3, #41	; 0x29
 800404e:	d111      	bne.n	8004074 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2221      	movs	r2, #33	; 0x21
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2228      	movs	r2, #40	; 0x28
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff f9fc 	bl	800346c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	781a      	ldrb	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02c      	beq.n	8004130 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d114      	bne.n	8004130 <I2C_SlaveReceive_RXNE+0x74>
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b2a      	cmp	r3, #42	; 0x2a
 800410a:	d111      	bne.n	8004130 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2222      	movs	r2, #34	; 0x22
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2228      	movs	r2, #40	; 0x28
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff f9a7 	bl	800347e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d012      	beq.n	8004170 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418e:	b2db      	uxtb	r3, r3
 8004190:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004194:	2b28      	cmp	r3, #40	; 0x28
 8004196:	d127      	bne.n	80041e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	09db      	lsrs	r3, r3, #7
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	81bb      	strh	r3, [r7, #12]
 80041ca:	e002      	b.n	80041d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80041da:	89ba      	ldrh	r2, [r7, #12]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	4619      	mov	r1, r3
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f7ff f955 	bl	8003490 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041e6:	e00e      	b.n	8004206 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800422e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800425c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	d172      	bne.n	8004354 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	d002      	beq.n	800427a <I2C_Slave_STOPF+0x6a>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b2a      	cmp	r3, #42	; 0x2a
 8004278:	d135      	bne.n	80042e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	b29a      	uxth	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0204 	orr.w	r2, r3, #4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fbaf 	bl	8002a16 <HAL_DMA_GetState>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d049      	beq.n	8004352 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	4a69      	ldr	r2, [pc, #420]	; (8004468 <I2C_Slave_STOPF+0x258>)
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fe fb62 	bl	8002994 <HAL_DMA_Abort_IT>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d03d      	beq.n	8004352 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042e0:	4610      	mov	r0, r2
 80042e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042e4:	e035      	b.n	8004352 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0204 	orr.w	r2, r3, #4
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004318:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fb79 	bl	8002a16 <HAL_DMA_GetState>
 8004324:	4603      	mov	r3, r0
 8004326:	2b01      	cmp	r3, #1
 8004328:	d014      	beq.n	8004354 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <I2C_Slave_STOPF+0x258>)
 8004330:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fb2c 	bl	8002994 <HAL_DMA_Abort_IT>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800434c:	4610      	mov	r0, r2
 800434e:	4798      	blx	r3
 8004350:	e000      	b.n	8004354 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004352:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d03e      	beq.n	80043dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b04      	cmp	r3, #4
 800436a:	d112      	bne.n	8004392 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d112      	bne.n	80043c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	f043 0204 	orr.w	r2, r3, #4
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8b3 	bl	8004550 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80043ea:	e039      	b.n	8004460 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b2a      	cmp	r3, #42	; 0x2a
 80043f0:	d109      	bne.n	8004406 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2228      	movs	r2, #40	; 0x28
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff f83c 	bl	800347e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b28      	cmp	r3, #40	; 0x28
 8004410:	d111      	bne.n	8004436 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a15      	ldr	r2, [pc, #84]	; (800446c <I2C_Slave_STOPF+0x25c>)
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff f83b 	bl	80034aa <HAL_I2C_ListenCpltCallback>
}
 8004434:	e014      	b.n	8004460 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	2b22      	cmp	r3, #34	; 0x22
 800443c:	d002      	beq.n	8004444 <I2C_Slave_STOPF+0x234>
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b22      	cmp	r3, #34	; 0x22
 8004442:	d10d      	bne.n	8004460 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff f80f 	bl	800347e <HAL_I2C_SlaveRxCpltCallback>
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	080047b5 	.word	0x080047b5
 800446c:	ffff0000 	.word	0xffff0000

08004470 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d002      	beq.n	8004492 <I2C_Slave_AF+0x22>
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b20      	cmp	r3, #32
 8004490:	d129      	bne.n	80044e6 <I2C_Slave_AF+0x76>
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	2b28      	cmp	r3, #40	; 0x28
 8004496:	d126      	bne.n	80044e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a2c      	ldr	r2, [pc, #176]	; (800454c <I2C_Slave_AF+0xdc>)
 800449c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fe ffe3 	bl	80034aa <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80044e4:	e02e      	b.n	8004544 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b21      	cmp	r3, #33	; 0x21
 80044ea:	d126      	bne.n	800453a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a17      	ldr	r2, [pc, #92]	; (800454c <I2C_Slave_AF+0xdc>)
 80044f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2221      	movs	r2, #33	; 0x21
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004516:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004520:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fe ff9a 	bl	800346c <HAL_I2C_SlaveTxCpltCallback>
}
 8004538:	e004      	b.n	8004544 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004542:	615a      	str	r2, [r3, #20]
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	ffff0000 	.word	0xffff0000

08004550 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	2b10      	cmp	r3, #16
 800456c:	d002      	beq.n	8004574 <I2C_ITError+0x24>
 800456e:	7bbb      	ldrb	r3, [r7, #14]
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d10a      	bne.n	800458a <I2C_ITError+0x3a>
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b22      	cmp	r3, #34	; 0x22
 8004578:	d107      	bne.n	800458a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004588:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004590:	2b28      	cmp	r3, #40	; 0x28
 8004592:	d107      	bne.n	80045a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2228      	movs	r2, #40	; 0x28
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045a2:	e015      	b.n	80045d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b2:	d00a      	beq.n	80045ca <I2C_ITError+0x7a>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b60      	cmp	r3, #96	; 0x60
 80045b8:	d007      	beq.n	80045ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2220      	movs	r2, #32
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d162      	bne.n	80046a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d020      	beq.n	8004640 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	4a6a      	ldr	r2, [pc, #424]	; (80047ac <I2C_ITError+0x25c>)
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe f9c2 	bl	8002994 <HAL_DMA_Abort_IT>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8089 	beq.w	800472a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800463a:	4610      	mov	r0, r2
 800463c:	4798      	blx	r3
 800463e:	e074      	b.n	800472a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	4a59      	ldr	r2, [pc, #356]	; (80047ac <I2C_ITError+0x25c>)
 8004646:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe f9a1 	bl	8002994 <HAL_DMA_Abort_IT>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d068      	beq.n	800472a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b40      	cmp	r3, #64	; 0x40
 8004664:	d10b      	bne.n	800467e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046a0:	4610      	mov	r0, r2
 80046a2:	4798      	blx	r3
 80046a4:	e041      	b.n	800472a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b60      	cmp	r3, #96	; 0x60
 80046b0:	d125      	bne.n	80046fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d10b      	bne.n	80046e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fe fefb 	bl	80034f2 <HAL_I2C_AbortCpltCallback>
 80046fc:	e015      	b.n	800472a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d10b      	bne.n	8004724 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe fedb 	bl	80034e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10e      	bne.n	8004758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d113      	bne.n	80047a4 <I2C_ITError+0x254>
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b28      	cmp	r3, #40	; 0x28
 8004780:	d110      	bne.n	80047a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <I2C_ITError+0x260>)
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fe fe83 	bl	80034aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	080047b5 	.word	0x080047b5
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ce:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <I2C_DMAAbort+0x148>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	08db      	lsrs	r3, r3, #3
 80047d4:	4a4a      	ldr	r2, [pc, #296]	; (8004900 <I2C_DMAAbort+0x14c>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0a1a      	lsrs	r2, r3, #8
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00da      	lsls	r2, r3, #3
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80047fa:	e00a      	b.n	8004812 <I2C_DMAAbort+0x5e>
    }
    count--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3b01      	subs	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d0ea      	beq.n	80047e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481e:	2200      	movs	r2, #0
 8004820:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004840:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	2200      	movs	r2, #0
 8004856:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	2200      	movs	r2, #0
 8004866:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d10e      	bne.n	80048a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800489a:	6978      	ldr	r0, [r7, #20]
 800489c:	f7fe fe29 	bl	80034f2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048a0:	e027      	b.n	80048f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048a2:	7cfb      	ldrb	r3, [r7, #19]
 80048a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048a8:	2b28      	cmp	r3, #40	; 0x28
 80048aa:	d117      	bne.n	80048dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2228      	movs	r2, #40	; 0x28
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048da:	e007      	b.n	80048ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f7fe fdf7 	bl	80034e0 <HAL_I2C_ErrorCallback>
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	2000006c 	.word	0x2000006c
 8004900:	14f8b589 	.word	0x14f8b589

08004904 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	4a13      	ldr	r2, [pc, #76]	; (8004964 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	0a1a      	lsrs	r2, r3, #8
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3b01      	subs	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d107      	bne.n	8004942 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e008      	b.n	8004954 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004950:	d0e9      	beq.n	8004926 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2000006c 	.word	0x2000006c
 8004964:	14f8b589 	.word	0x14f8b589

08004968 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004978:	d103      	bne.n	8004982 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004980:	e007      	b.n	8004992 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800498a:	d102      	bne.n	8004992 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2208      	movs	r2, #8
 8004990:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr

0800499c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e31d      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ae:	4b94      	ldr	r3, [pc, #592]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049b8:	4b91      	ldr	r3, [pc, #580]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d07b      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d006      	beq.n	80049e2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d10f      	bne.n	80049fa <HAL_RCC_OscConfig+0x5e>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d10b      	bne.n	80049fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e2:	4b87      	ldr	r3, [pc, #540]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d06a      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x128>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d166      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e2f7      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x74>
 8004a02:	4b7f      	ldr	r3, [pc, #508]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7e      	ldr	r2, [pc, #504]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e02d      	b.n	8004a6c <HAL_RCC_OscConfig+0xd0>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10c      	bne.n	8004a32 <HAL_RCC_OscConfig+0x96>
 8004a18:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a78      	ldr	r2, [pc, #480]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a75      	ldr	r2, [pc, #468]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	e01c      	b.n	8004a6c <HAL_RCC_OscConfig+0xd0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b05      	cmp	r3, #5
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCC_OscConfig+0xb8>
 8004a3a:	4b71      	ldr	r3, [pc, #452]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a70      	ldr	r2, [pc, #448]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	4b6e      	ldr	r3, [pc, #440]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a6d      	ldr	r2, [pc, #436]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	e00b      	b.n	8004a6c <HAL_RCC_OscConfig+0xd0>
 8004a54:	4b6a      	ldr	r3, [pc, #424]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a69      	ldr	r2, [pc, #420]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d013      	beq.n	8004a9c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a74:	f7fd f9bc 	bl	8001df0 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd f9b8 	bl	8001df0 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e2ad      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a8e:	4b5c      	ldr	r3, [pc, #368]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0xe0>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd f9a8 	bl	8001df0 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fd f9a4 	bl	8001df0 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	; 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e299      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ab6:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x108>
 8004ac2:	e000      	b.n	8004ac6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d05a      	beq.n	8004b88 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d005      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d119      	bne.n	8004b12 <HAL_RCC_OscConfig+0x176>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d116      	bne.n	8004b12 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae4:	4b46      	ldr	r3, [pc, #280]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d005      	beq.n	8004afc <HAL_RCC_OscConfig+0x160>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e276      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	493d      	ldr	r1, [pc, #244]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b10:	e03a      	b.n	8004b88 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1a:	4b3a      	ldr	r3, [pc, #232]	; (8004c04 <HAL_RCC_OscConfig+0x268>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd f966 	bl	8001df0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b28:	f7fd f962 	bl	8001df0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e257      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	492a      	ldr	r1, [pc, #168]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5c:	4b29      	ldr	r3, [pc, #164]	; (8004c04 <HAL_RCC_OscConfig+0x268>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd f945 	bl	8001df0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd f941 	bl	8001df0 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e236      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b8 	beq.w	8004d06 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d170      	bne.n	8004c7e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x218>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e21a      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d921      	bls.n	8004c08 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fc23 	bl	8005414 <RCC_SetFlashLatencyFromMSIRange>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e208      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4906      	ldr	r1, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	061b      	lsls	r3, r3, #24
 8004bf8:	4901      	ldr	r1, [pc, #4]	; (8004c00 <HAL_RCC_OscConfig+0x264>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
 8004bfe:	e020      	b.n	8004c42 <HAL_RCC_OscConfig+0x2a6>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c08:	4ba4      	ldr	r3, [pc, #656]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	49a1      	ldr	r1, [pc, #644]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1a:	4ba0      	ldr	r3, [pc, #640]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	499c      	ldr	r1, [pc, #624]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fbee 	bl	8005414 <RCC_SetFlashLatencyFromMSIRange>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e1d3      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	0b5b      	lsrs	r3, r3, #13
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004c52:	4a92      	ldr	r2, [pc, #584]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004c54:	6892      	ldr	r2, [r2, #8]
 8004c56:	0912      	lsrs	r2, r2, #4
 8004c58:	f002 020f 	and.w	r2, r2, #15
 8004c5c:	4990      	ldr	r1, [pc, #576]	; (8004ea0 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	5c8a      	ldrb	r2, [r1, r2]
 8004c60:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004c62:	4a90      	ldr	r2, [pc, #576]	; (8004ea4 <HAL_RCC_OscConfig+0x508>)
 8004c64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c66:	4b90      	ldr	r3, [pc, #576]	; (8004ea8 <HAL_RCC_OscConfig+0x50c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd f874 	bl	8001d58 <HAL_InitTick>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d045      	beq.n	8004d06 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	e1b5      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d029      	beq.n	8004cda <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c86:	4b89      	ldr	r3, [pc, #548]	; (8004eac <HAL_RCC_OscConfig+0x510>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8c:	f7fd f8b0 	bl	8001df0 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c94:	f7fd f8ac 	bl	8001df0 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1a1      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ca6:	4b7d      	ldr	r3, [pc, #500]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cb2:	4b7a      	ldr	r3, [pc, #488]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	4977      	ldr	r1, [pc, #476]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc4:	4b75      	ldr	r3, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	061b      	lsls	r3, r3, #24
 8004cd2:	4972      	ldr	r1, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
 8004cd8:	e015      	b.n	8004d06 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cda:	4b74      	ldr	r3, [pc, #464]	; (8004eac <HAL_RCC_OscConfig+0x510>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fd f886 	bl	8001df0 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce8:	f7fd f882 	bl	8001df0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e177      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004cfa:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d030      	beq.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d1a:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x514>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d20:	f7fd f866 	bl	8001df0 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d28:	f7fd f862 	bl	8001df0 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e157      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d3a:	4b58      	ldr	r3, [pc, #352]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0x38c>
 8004d46:	e015      	b.n	8004d74 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d48:	4b59      	ldr	r3, [pc, #356]	; (8004eb0 <HAL_RCC_OscConfig+0x514>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4e:	f7fd f84f 	bl	8001df0 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d56:	f7fd f84b 	bl	8001df0 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e140      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d68:	4b4c      	ldr	r3, [pc, #304]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80b5 	beq.w	8004eec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d82:	2300      	movs	r3, #0
 8004d84:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d86:	4b45      	ldr	r3, [pc, #276]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10d      	bne.n	8004dae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d92:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	4a41      	ldr	r2, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6253      	str	r3, [r2, #36]	; 0x24
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCC_OscConfig+0x518>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d118      	bne.n	8004dec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <HAL_RCC_OscConfig+0x518>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <HAL_RCC_OscConfig+0x518>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fd f813 	bl	8001df0 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fd f80f 	bl	8001df0 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b64      	cmp	r3, #100	; 0x64
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e104      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de0:	4b34      	ldr	r3, [pc, #208]	; (8004eb4 <HAL_RCC_OscConfig+0x518>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_OscConfig+0x466>
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	4a28      	ldr	r2, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6353      	str	r3, [r2, #52]	; 0x34
 8004e00:	e02d      	b.n	8004e5e <HAL_RCC_OscConfig+0x4c2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x488>
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e14:	6353      	str	r3, [r2, #52]	; 0x34
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e20:	6353      	str	r3, [r2, #52]	; 0x34
 8004e22:	e01c      	b.n	8004e5e <HAL_RCC_OscConfig+0x4c2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b05      	cmp	r3, #5
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCC_OscConfig+0x4aa>
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e36:	6353      	str	r3, [r2, #52]	; 0x34
 8004e38:	4b18      	ldr	r3, [pc, #96]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e42:	6353      	str	r3, [r2, #52]	; 0x34
 8004e44:	e00b      	b.n	8004e5e <HAL_RCC_OscConfig+0x4c2>
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e50:	6353      	str	r3, [r2, #52]	; 0x34
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d015      	beq.n	8004e92 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e66:	f7fc ffc3 	bl	8001df0 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fc ffbf 	bl	8001df0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e0b2      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_RCC_OscConfig+0x500>)
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ee      	beq.n	8004e6e <HAL_RCC_OscConfig+0x4d2>
 8004e90:	e023      	b.n	8004eda <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7fc ffad 	bl	8001df0 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e98:	e019      	b.n	8004ece <HAL_RCC_OscConfig+0x532>
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	0800ab74 	.word	0x0800ab74
 8004ea4:	2000006c 	.word	0x2000006c
 8004ea8:	20000070 	.word	0x20000070
 8004eac:	42470020 	.word	0x42470020
 8004eb0:	42470680 	.word	0x42470680
 8004eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fc ff9a 	bl	8001df0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e08d      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ece:	4b49      	ldr	r3, [pc, #292]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ee      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004eda:	7ffb      	ldrb	r3, [r7, #31]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b44      	ldr	r3, [pc, #272]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	4a43      	ldr	r2, [pc, #268]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d079      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b0c      	cmp	r3, #12
 8004ef8:	d056      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d13b      	bne.n	8004f7a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b3d      	ldr	r3, [pc, #244]	; (8004ff8 <HAL_RCC_OscConfig+0x65c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fc ff72 	bl	8001df0 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fc ff6e 	bl	8001df0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e063      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f22:	4b34      	ldr	r3, [pc, #208]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2e:	4b31      	ldr	r3, [pc, #196]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	4319      	orrs	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	430b      	orrs	r3, r1
 8004f46:	492b      	ldr	r1, [pc, #172]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <HAL_RCC_OscConfig+0x65c>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fc ff4d 	bl	8001df0 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fc ff49 	bl	8001df0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e03e      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x5be>
 8004f78:	e036      	b.n	8004fe8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <HAL_RCC_OscConfig+0x65c>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f80:	f7fc ff36 	bl	8001df0 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fc ff32 	bl	8001df0 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e027      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x5ec>
 8004fa6:	e01f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e01a      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <HAL_RCC_OscConfig+0x658>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d10d      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d106      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470060 	.word	0x42470060

08004ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e11a      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d919      	bls.n	8005052 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <HAL_RCC_ClockConfig+0x34>
 8005024:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a89      	ldr	r2, [pc, #548]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 800502a:	f043 0304 	orr.w	r3, r3, #4
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b87      	ldr	r3, [pc, #540]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 0201 	bic.w	r2, r3, #1
 8005038:	4985      	ldr	r1, [pc, #532]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005040:	4b83      	ldr	r3, [pc, #524]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d001      	beq.n	8005052 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e0f9      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d008      	beq.n	8005070 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505e:	4b7d      	ldr	r3, [pc, #500]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	497a      	ldr	r1, [pc, #488]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 800506c:	4313      	orrs	r3, r2
 800506e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 808e 	beq.w	800519a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005086:	4b73      	ldr	r3, [pc, #460]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d121      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0d7      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d107      	bne.n	80050ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800509e:	4b6d      	ldr	r3, [pc, #436]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d115      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e0cb      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b6:	4b67      	ldr	r3, [pc, #412]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0bf      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050c6:	4b63      	ldr	r3, [pc, #396]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e0b7      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d6:	4b5f      	ldr	r3, [pc, #380]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f023 0203 	bic.w	r2, r3, #3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	495c      	ldr	r1, [pc, #368]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e8:	f7fc fe82 	bl	8001df0 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d112      	bne.n	800511c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fc fe7a 	bl	8001df0 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e09b      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800510e:	4b51      	ldr	r3, [pc, #324]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b08      	cmp	r3, #8
 8005118:	d1ee      	bne.n	80050f8 <HAL_RCC_ClockConfig+0xfc>
 800511a:	e03e      	b.n	800519a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d112      	bne.n	800514a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005124:	e00a      	b.n	800513c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005126:	f7fc fe63 	bl	8001df0 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	f241 3288 	movw	r2, #5000	; 0x1388
 8005134:	4293      	cmp	r3, r2
 8005136:	d901      	bls.n	800513c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e084      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800513c:	4b45      	ldr	r3, [pc, #276]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b0c      	cmp	r3, #12
 8005146:	d1ee      	bne.n	8005126 <HAL_RCC_ClockConfig+0x12a>
 8005148:	e027      	b.n	800519a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11d      	bne.n	800518e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005152:	e00a      	b.n	800516a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005154:	f7fc fe4c 	bl	8001df0 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e06d      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800516a:	4b3a      	ldr	r3, [pc, #232]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f003 030c 	and.w	r3, r3, #12
 8005172:	2b04      	cmp	r3, #4
 8005174:	d1ee      	bne.n	8005154 <HAL_RCC_ClockConfig+0x158>
 8005176:	e010      	b.n	800519a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005178:	f7fc fe3a 	bl	8001df0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e05b      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ee      	bne.n	8005178 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d219      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1be>
 80051ae:	4b28      	ldr	r3, [pc, #160]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 80051b4:	f043 0304 	orr.w	r3, r3, #4
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b25      	ldr	r3, [pc, #148]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 0201 	bic.w	r2, r3, #1
 80051c2:	4923      	ldr	r1, [pc, #140]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b21      	ldr	r3, [pc, #132]	; (8005250 <HAL_RCC_ClockConfig+0x254>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e034      	b.n	8005246 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b1a      	ldr	r3, [pc, #104]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4917      	ldr	r1, [pc, #92]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005206:	4b13      	ldr	r3, [pc, #76]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	490f      	ldr	r1, [pc, #60]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800521a:	f000 f823 	bl	8005264 <HAL_RCC_GetSysClockFreq>
 800521e:	4602      	mov	r2, r0
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_RCC_ClockConfig+0x258>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	490b      	ldr	r1, [pc, #44]	; (8005258 <HAL_RCC_ClockConfig+0x25c>)
 800522c:	5ccb      	ldrb	r3, [r1, r3]
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x260>)
 8005234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <HAL_RCC_ClockConfig+0x264>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fc fd8c 	bl	8001d58 <HAL_InitTick>
 8005240:	4603      	mov	r3, r0
 8005242:	72fb      	strb	r3, [r7, #11]

  return status;
 8005244:	7afb      	ldrb	r3, [r7, #11]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023c00 	.word	0x40023c00
 8005254:	40023800 	.word	0x40023800
 8005258:	0800ab74 	.word	0x0800ab74
 800525c:	2000006c 	.word	0x2000006c
 8005260:	20000070 	.word	0x20000070

08005264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800526a:	4b4d      	ldr	r3, [pc, #308]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b0c      	cmp	r3, #12
 8005278:	d00c      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x30>
 800527a:	2b0c      	cmp	r3, #12
 800527c:	d87c      	bhi.n	8005378 <HAL_RCC_GetSysClockFreq+0x114>
 800527e:	2b04      	cmp	r3, #4
 8005280:	d002      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x24>
 8005282:	2b08      	cmp	r3, #8
 8005284:	d003      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x2a>
 8005286:	e077      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x140>)
 800528a:	613b      	str	r3, [r7, #16]
      break;
 800528c:	e082      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800528e:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005290:	613b      	str	r3, [r7, #16]
      break;
 8005292:	e07f      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	0c9b      	lsrs	r3, r3, #18
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	4a43      	ldr	r2, [pc, #268]	; (80053ac <HAL_RCC_GetSysClockFreq+0x148>)
 800529e:	5cd3      	ldrb	r3, [r2, r3]
 80052a0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0d9b      	lsrs	r3, r3, #22
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	3301      	adds	r3, #1
 80052ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ae:	4b3c      	ldr	r3, [pc, #240]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01a      	beq.n	80052f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	461a      	mov	r2, r3
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	4939      	ldr	r1, [pc, #228]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80052c4:	fb01 f003 	mul.w	r0, r1, r3
 80052c8:	2100      	movs	r1, #0
 80052ca:	fb01 f102 	mul.w	r1, r1, r2
 80052ce:	1844      	adds	r4, r0, r1
 80052d0:	4935      	ldr	r1, [pc, #212]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80052d2:	fba2 0101 	umull	r0, r1, r2, r1
 80052d6:	1863      	adds	r3, r4, r1
 80052d8:	4619      	mov	r1, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	f7fa ff4b 	bl	800017c <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4613      	mov	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e040      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	461c      	mov	r4, r3
 80052f4:	f04f 0500 	mov.w	r5, #0
 80052f8:	4620      	mov	r0, r4
 80052fa:	4629      	mov	r1, r5
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	014b      	lsls	r3, r1, #5
 8005306:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800530a:	0142      	lsls	r2, r0, #5
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	1b00      	subs	r0, r0, r4
 8005312:	eb61 0105 	sbc.w	r1, r1, r5
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	018b      	lsls	r3, r1, #6
 8005320:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005324:	0182      	lsls	r2, r0, #6
 8005326:	1a12      	subs	r2, r2, r0
 8005328:	eb63 0301 	sbc.w	r3, r3, r1
 800532c:	f04f 0000 	mov.w	r0, #0
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	00d9      	lsls	r1, r3, #3
 8005336:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800533a:	00d0      	lsls	r0, r2, #3
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	1912      	adds	r2, r2, r4
 8005342:	eb45 0303 	adc.w	r3, r5, r3
 8005346:	f04f 0000 	mov.w	r0, #0
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	0299      	lsls	r1, r3, #10
 8005350:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005354:	0290      	lsls	r0, r2, #10
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4610      	mov	r0, r2
 800535c:	4619      	mov	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	461a      	mov	r2, r3
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f7fa ff09 	bl	800017c <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	613b      	str	r3, [r7, #16]
      break;
 8005376:	e00d      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	0b5b      	lsrs	r3, r3, #13
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	613b      	str	r3, [r7, #16]
      break;
 8005392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005394:	693b      	ldr	r3, [r7, #16]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3718      	adds	r7, #24
 800539a:	46bd      	mov	sp, r7
 800539c:	bdb0      	pop	{r4, r5, r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	00f42400 	.word	0x00f42400
 80053a8:	01312d00 	.word	0x01312d00
 80053ac:	0800ab68 	.word	0x0800ab68

080053b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b4:	4b02      	ldr	r3, [pc, #8]	; (80053c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80053b6:	681b      	ldr	r3, [r3, #0]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	2000006c 	.word	0x2000006c

080053c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053c8:	f7ff fff2 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053cc:	4602      	mov	r2, r0
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	4903      	ldr	r1, [pc, #12]	; (80053e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40023800 	.word	0x40023800
 80053e8:	0800ab84 	.word	0x0800ab84

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f0:	f7ff ffde 	bl	80053b0 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	0adb      	lsrs	r3, r3, #11
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40023800 	.word	0x40023800
 8005410:	0800ab84 	.word	0x0800ab84

08005414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005420:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d12c      	bne.n	8005486 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800542c:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e016      	b.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005444:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6253      	str	r3, [r2, #36]	; 0x24
 8005450:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005464:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005466:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005470:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005478:	d105      	bne.n	8005486 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005480:	d101      	bne.n	8005486 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005482:	2301      	movs	r3, #1
 8005484:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d105      	bne.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 0201 	bic.w	r2, r3, #1
 80054a0:	490b      	ldr	r1, [pc, #44]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40023800 	.word	0x40023800
 80054cc:	40007000 	.word	0x40007000
 80054d0:	40023c00 	.word	0x40023c00

080054d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 80ed 	beq.w	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054fa:	4b78      	ldr	r3, [pc, #480]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005506:	4b75      	ldr	r3, [pc, #468]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	4a74      	ldr	r2, [pc, #464]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005510:	6253      	str	r3, [r2, #36]	; 0x24
 8005512:	4b72      	ldr	r3, [pc, #456]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005522:	4b6f      	ldr	r3, [pc, #444]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d118      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800552e:	4b6c      	ldr	r3, [pc, #432]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6b      	ldr	r2, [pc, #428]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553a:	f7fc fc59 	bl	8001df0 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005542:	f7fc fc55 	bl	8001df0 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b64      	cmp	r3, #100	; 0x64
 800554e:	d901      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e0be      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005554:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005560:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005568:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	429a      	cmp	r2, r3
 8005576:	d106      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	429a      	cmp	r2, r3
 8005584:	d00f      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800558e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005592:	d108      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005594:	4b51      	ldr	r3, [pc, #324]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a0:	d101      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e095      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80055a6:	4b4d      	ldr	r3, [pc, #308]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055ae:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d041      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d005      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10c      	bne.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d02d      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d027      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80055ea:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80055f2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055f4:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055fa:	4b3a      	ldr	r3, [pc, #232]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005600:	4a36      	ldr	r2, [pc, #216]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d014      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7fc fbee 	bl	8001df0 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005616:	e00a      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005618:	f7fc fbea 	bl	8001df0 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	f241 3288 	movw	r2, #5000	; 0x1388
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e051      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0ee      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800564e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005652:	d10a      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005654:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005664:	491d      	ldr	r1, [pc, #116]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]
 800566a:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800566c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005676:	4919      	ldr	r1, [pc, #100]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005678:	4313      	orrs	r3, r2
 800567a:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005690:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005694:	d10a      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005696:	4b11      	ldr	r3, [pc, #68]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80056a6:	490d      	ldr	r1, [pc, #52]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	600b      	str	r3, [r1, #0]
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056b8:	4908      	ldr	r1, [pc, #32]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80056ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ce:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40007000 	.word	0x40007000
 80056e4:	424706dc 	.word	0x424706dc

080056e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e07c      	b.n	80057f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7f5b      	ldrb	r3, [r3, #29]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fc f99a 	bl	8001a44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	22ca      	movs	r2, #202	; 0xca
 800571c:	625a      	str	r2, [r3, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2253      	movs	r2, #83	; 0x53
 8005724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb55 	bl	8005dd6 <RTC_EnterInitMode>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	22ff      	movs	r2, #255	; 0xff
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2204      	movs	r2, #4
 800573e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e057      	b.n	80057f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6919      	ldr	r1, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	041a      	lsls	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a2:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 faf0 	bl	8005d8a <HAL_RTC_WaitForSynchro>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d008      	beq.n	80057c2 <HAL_RTC_Init+0xda>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2204      	movs	r2, #4
 80057bc:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e018      	b.n	80057f4 <HAL_RTC_Init+0x10c>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699a      	ldr	r2, [r3, #24]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	22ff      	movs	r2, #255	; 0xff
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
  }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	7f1b      	ldrb	r3, [r3, #28]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_RTC_SetTime+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e0a3      	b.n	800595c <HAL_RTC_SetTime+0x160>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2202      	movs	r2, #2
 800581e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d126      	bne.n	8005874 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b00      	cmp	r3, #0
 8005832:	d102      	bne.n	800583a <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2200      	movs	r2, #0
 8005838:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 faf3 	bl	8005e2a <RTC_ByteToBcd2>
 8005844:	4603      	mov	r3, r0
 8005846:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 faec 	bl	8005e2a <RTC_ByteToBcd2>
 8005852:	4603      	mov	r3, r0
 8005854:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005856:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	789b      	ldrb	r3, [r3, #2]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 fae4 	bl	8005e2a <RTC_ByteToBcd2>
 8005862:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005864:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	e018      	b.n	80058a6 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2200      	movs	r2, #0
 8005886:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005894:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800589a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	78db      	ldrb	r3, [r3, #3]
 80058a0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	22ca      	movs	r2, #202	; 0xca
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2253      	movs	r2, #83	; 0x53
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fa8d 	bl	8005dd6 <RTC_EnterInitMode>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	22ff      	movs	r2, #255	; 0xff
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e040      	b.n	800595c <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80058e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80058e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005920:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa31 	bl	8005d8a <HAL_RTC_WaitForSynchro>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	22ff      	movs	r2, #255	; 0xff
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2204      	movs	r2, #4
 800593a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e00a      	b.n	800595c <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800595a:	2300      	movs	r3, #0
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd90      	pop	{r4, r7, pc}

08005964 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7f1b      	ldrb	r3, [r3, #28]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_RTC_SetDate+0x18>
 8005978:	2302      	movs	r3, #2
 800597a:	e08d      	b.n	8005a98 <HAL_RTC_SetDate+0x134>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2202      	movs	r2, #2
 8005986:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <HAL_RTC_SetDate+0x48>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	f003 0310 	and.w	r3, r3, #16
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	785b      	ldrb	r3, [r3, #1]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	330a      	adds	r3, #10
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11c      	bne.n	80059ec <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	78db      	ldrb	r3, [r3, #3]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fa37 	bl	8005e2a <RTC_ByteToBcd2>
 80059bc:	4603      	mov	r3, r0
 80059be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 fa30 	bl	8005e2a <RTC_ByteToBcd2>
 80059ca:	4603      	mov	r3, r0
 80059cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	789b      	ldrb	r3, [r3, #2]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fa28 	bl	8005e2a <RTC_ByteToBcd2>
 80059da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80059dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	e00e      	b.n	8005a0a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	78db      	ldrb	r3, [r3, #3]
 80059f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80059f8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80059fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	22ca      	movs	r2, #202	; 0xca
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2253      	movs	r2, #83	; 0x53
 8005a18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f9db 	bl	8005dd6 <RTC_EnterInitMode>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00b      	beq.n	8005a3e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2204      	movs	r2, #4
 8005a32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e02c      	b.n	8005a98 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005a4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5c:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f993 	bl	8005d8a <HAL_RTC_WaitForSynchro>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	22ff      	movs	r2, #255	; 0xff
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2204      	movs	r2, #4
 8005a76:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e00a      	b.n	8005a98 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd90      	pop	{r4, r7, pc}

08005aa0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	7f1b      	ldrb	r3, [r3, #28]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_RTC_SetAlarm_IT+0x20>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e10f      	b.n	8005ce0 <HAL_RTC_SetAlarm_IT+0x240>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d136      	bne.n	8005b40 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <HAL_RTC_SetAlarm_IT+0x46>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f99d 	bl	8005e2a <RTC_ByteToBcd2>
 8005af0:	4603      	mov	r3, r0
 8005af2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f996 	bl	8005e2a <RTC_ByteToBcd2>
 8005afe:	4603      	mov	r3, r0
 8005b00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	789b      	ldrb	r3, [r3, #2]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f98e 	bl	8005e2a <RTC_ByteToBcd2>
 8005b0e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b10:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	78db      	ldrb	r3, [r3, #3]
 8005b18:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005b1a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	7d1b      	ldrb	r3, [r3, #20]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f981 	bl	8005e2a <RTC_ByteToBcd2>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b2c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e022      	b.n	8005b86 <HAL_RTC_SetAlarm_IT+0xe6>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b60:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005b66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	78db      	ldrb	r3, [r3, #3]
 8005b6c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005b6e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	7d1b      	ldrb	r3, [r3, #20]
 8005b74:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005b76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691b      	ldr	r3, [r3, #16]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005b7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	22ca      	movs	r2, #202	; 0xca
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2253      	movs	r2, #83	; 0x53
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9e:	d144      	bne.n	8005c2a <HAL_RTC_SetAlarm_IT+0x18a>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bae:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005bc0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005bc2:	f7fc f915 	bl	8001df0 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bc8:	e013      	b.n	8005bf2 <HAL_RTC_SetAlarm_IT+0x152>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bca:	f7fc f911 	bl	8001df0 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd8:	d90b      	bls.n	8005bf2 <HAL_RTC_SetAlarm_IT+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	22ff      	movs	r2, #255	; 0xff
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2203      	movs	r2, #3
 8005be6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e076      	b.n	8005ce0 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0e4      	beq.n	8005bca <HAL_RTC_SetAlarm_IT+0x12a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	e043      	b.n	8005cb2 <HAL_RTC_SetAlarm_IT+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c38:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c4c:	f7fc f8d0 	bl	8001df0 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c52:	e013      	b.n	8005c7c <HAL_RTC_SetAlarm_IT+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c54:	f7fc f8cc 	bl	8001df0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c62:	d90b      	bls.n	8005c7c <HAL_RTC_SetAlarm_IT+0x1dc>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	22ff      	movs	r2, #255	; 0xff
 8005c6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e031      	b.n	8005ce0 <HAL_RTC_SetAlarm_IT+0x240>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0e4      	beq.n	8005c54 <HAL_RTC_SetAlarm_IT+0x1b4>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ca0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ce8 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cbc:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4a09      	ldr	r2, [pc, #36]	; (8005ce8 <HAL_RTC_SetAlarm_IT+0x248>)
 8005cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd90      	pop	{r4, r7, pc}
 8005ce8:	40010400 	.word	0x40010400

08005cec <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d012      	beq.n	8005d28 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00b      	beq.n	8005d28 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f831 	bl	8005d78 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005d26:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d012      	beq.n	8005d5c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f88f 	bl	8005e68 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005d5a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d62:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	775a      	strb	r2, [r3, #29]
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40010400 	.word	0x40010400

08005d78 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005da0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005da2:	f7fc f825 	bl	8001df0 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005da8:	e009      	b.n	8005dbe <HAL_RTC_WaitForSynchro+0x34>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005daa:	f7fc f821 	bl	8001df0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db8:	d901      	bls.n	8005dbe <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e007      	b.n	8005dce <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ee      	beq.n	8005daa <HAL_RTC_WaitForSynchro+0x20>
      }
    }
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d119      	bne.n	8005e20 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005df6:	f7fb fffb 	bl	8001df0 <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dfc:	e009      	b.n	8005e12 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005dfe:	f7fb fff7 	bl	8001df0 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e0c:	d901      	bls.n	8005e12 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e007      	b.n	8005e22 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0ee      	beq.n	8005dfe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	4603      	mov	r3, r0
 8005e32:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8005e3c:	e005      	b.n	8005e4a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	3b0a      	subs	r3, #10
 8005e48:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8005e4a:	7afb      	ldrb	r3, [r7, #11]
 8005e4c:	2b09      	cmp	r3, #9
 8005e4e:	d8f6      	bhi.n	8005e3e <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	7afb      	ldrb	r3, [r7, #11]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b2db      	uxtb	r3, r3
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bc80      	pop	{r7}
 8005e66:	4770      	bx	lr

08005e68 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b082      	sub	sp, #8
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e06e      	b.n	8005f6a <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9c:	d009      	beq.n	8005eb2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	61da      	str	r2, [r3, #28]
 8005ea4:	e005      	b.n	8005eb2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d106      	bne.n	8005ed2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fb fdd5 	bl	8001a7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	ea42 0103 	orr.w	r1, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	0c1a      	lsrs	r2, r3, #16
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f002 0204 	and.w	r2, r2, #4
 8005f58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b088      	sub	sp, #32
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <HAL_SPI_Transmit+0x22>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e126      	b.n	80061e2 <HAL_SPI_Transmit+0x270>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f9c:	f7fb ff28 	bl	8001df0 <HAL_GetTick>
 8005fa0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fb6:	e10b      	b.n	80061d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Transmit+0x52>
 8005fbe:	88fb      	ldrh	r3, [r7, #6]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d102      	bne.n	8005fca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fc8:	e102      	b.n	80061d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2203      	movs	r2, #3
 8005fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	88fa      	ldrh	r2, [r7, #6]
 8005fe2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	88fa      	ldrh	r2, [r7, #6]
 8005fe8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006010:	d10f      	bne.n	8006032 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006020:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006030:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b40      	cmp	r3, #64	; 0x40
 800603e:	d007      	beq.n	8006050 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800604e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006058:	d14b      	bne.n	80060f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Transmit+0xf6>
 8006062:	8afb      	ldrh	r3, [r7, #22]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d13e      	bne.n	80060e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	881a      	ldrh	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	1c9a      	adds	r2, r3, #2
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800608c:	e02b      	b.n	80060e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d112      	bne.n	80060c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ac:	1c9a      	adds	r2, r3, #2
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	86da      	strh	r2, [r3, #54]	; 0x36
 80060c0:	e011      	b.n	80060e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060c2:	f7fb fe95 	bl	8001df0 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	683a      	ldr	r2, [r7, #0]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d803      	bhi.n	80060da <HAL_SPI_Transmit+0x168>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d102      	bne.n	80060e0 <HAL_SPI_Transmit+0x16e>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060e4:	e074      	b.n	80061d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1ce      	bne.n	800608e <HAL_SPI_Transmit+0x11c>
 80060f0:	e04c      	b.n	800618c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Transmit+0x18e>
 80060fa:	8afb      	ldrh	r3, [r7, #22]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d140      	bne.n	8006182 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800611c:	b29b      	uxth	r3, r3
 800611e:	3b01      	subs	r3, #1
 8006120:	b29a      	uxth	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006126:	e02c      	b.n	8006182 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b02      	cmp	r3, #2
 8006134:	d113      	bne.n	800615e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	86da      	strh	r2, [r3, #54]	; 0x36
 800615c:	e011      	b.n	8006182 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800615e:	f7fb fe47 	bl	8001df0 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d803      	bhi.n	8006176 <HAL_SPI_Transmit+0x204>
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006174:	d102      	bne.n	800617c <HAL_SPI_Transmit+0x20a>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006180:	e026      	b.n	80061d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006186:	b29b      	uxth	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1cd      	bne.n	8006128 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fb59 	bl	8006848 <SPI_EndRxTxTransaction>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10a      	bne.n	80061c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e000      	b.n	80061d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08c      	sub	sp, #48	; 0x30
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	607a      	str	r2, [r7, #4]
 80061f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061f8:	2301      	movs	r3, #1
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_SPI_TransmitReceive+0x26>
 800620c:	2302      	movs	r3, #2
 800620e:	e18a      	b.n	8006526 <HAL_SPI_TransmitReceive+0x33c>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006218:	f7fb fdea 	bl	8001df0 <HAL_GetTick>
 800621c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800622e:	887b      	ldrh	r3, [r7, #2]
 8006230:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006236:	2b01      	cmp	r3, #1
 8006238:	d00f      	beq.n	800625a <HAL_SPI_TransmitReceive+0x70>
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006240:	d107      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_SPI_TransmitReceive+0x68>
 800624a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800624e:	2b04      	cmp	r3, #4
 8006250:	d003      	beq.n	800625a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006252:	2302      	movs	r3, #2
 8006254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006258:	e15b      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_SPI_TransmitReceive+0x82>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_SPI_TransmitReceive+0x82>
 8006266:	887b      	ldrh	r3, [r7, #2]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006272:	e14e      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b04      	cmp	r3, #4
 800627e:	d003      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2205      	movs	r2, #5
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	887a      	ldrh	r2, [r7, #2]
 800629e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	887a      	ldrh	r2, [r7, #2]
 80062aa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d007      	beq.n	80062dc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e4:	d178      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x10a>
 80062ee:	8b7b      	ldrh	r3, [r7, #26]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d166      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f8:	881a      	ldrh	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006318:	e053      	b.n	80063c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b02      	cmp	r3, #2
 8006326:	d11b      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x176>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_SPI_TransmitReceive+0x176>
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d113      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633c:	881a      	ldrh	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	1c9a      	adds	r2, r3, #2
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006352:	b29b      	uxth	r3, r3
 8006354:	3b01      	subs	r3, #1
 8006356:	b29a      	uxth	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d119      	bne.n	80063a2 <HAL_SPI_TransmitReceive+0x1b8>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d014      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	b292      	uxth	r2, r2
 8006384:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800639e:	2301      	movs	r3, #1
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063a2:	f7fb fd25 	bl	8001df0 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d807      	bhi.n	80063c2 <HAL_SPI_TransmitReceive+0x1d8>
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d003      	beq.n	80063c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063c0:	e0a7      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1a6      	bne.n	800631a <HAL_SPI_TransmitReceive+0x130>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1a1      	bne.n	800631a <HAL_SPI_TransmitReceive+0x130>
 80063d6:	e07c      	b.n	80064d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_SPI_TransmitReceive+0x1fc>
 80063e0:	8b7b      	ldrh	r3, [r7, #26]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d16b      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800640c:	e057      	b.n	80064be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b02      	cmp	r3, #2
 800641a:	d11c      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x26c>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d017      	beq.n	8006456 <HAL_SPI_TransmitReceive+0x26c>
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d114      	bne.n	8006456 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	2b01      	cmp	r3, #1
 8006462:	d119      	bne.n	8006498 <HAL_SPI_TransmitReceive+0x2ae>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d014      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006480:	1c5a      	adds	r2, r3, #1
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648a:	b29b      	uxth	r3, r3
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006494:	2301      	movs	r3, #1
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006498:	f7fb fcaa 	bl	8001df0 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d803      	bhi.n	80064b0 <HAL_SPI_TransmitReceive+0x2c6>
 80064a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ae:	d102      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0x2cc>
 80064b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064bc:	e029      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1a2      	bne.n	800640e <HAL_SPI_TransmitReceive+0x224>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d19d      	bne.n	800640e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f9b6 	bl	8006848 <SPI_EndRxTxTransaction>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80064ee:	e010      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	e000      	b.n	8006512 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006522:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006526:	4618      	mov	r0, r3
 8006528:	3730      	adds	r7, #48	; 0x30
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	099b      	lsrs	r3, r3, #6
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10f      	bne.n	8006574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	099b      	lsrs	r3, r3, #6
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	d004      	beq.n	8006574 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
    return;
 8006572:	e0be      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	085b      	lsrs	r3, r3, #1
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <HAL_SPI_IRQHandler+0x66>
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	09db      	lsrs	r3, r3, #7
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	4798      	blx	r3
    return;
 8006594:	e0ad      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	095b      	lsrs	r3, r3, #5
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_SPI_IRQHandler+0x80>
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	099b      	lsrs	r3, r3, #6
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f000 80a1 	beq.w	80066f2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 809a 	beq.w	80066f2 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	099b      	lsrs	r3, r3, #6
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d023      	beq.n	8006612 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d011      	beq.n	80065fa <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065da:	f043 0204 	orr.w	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e00b      	b.n	8006612 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	613b      	str	r3, [r7, #16]
 800660e:	693b      	ldr	r3, [r7, #16]
        return;
 8006610:	e06f      	b.n	80066f2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	f043 0201 	orr.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664c:	2b00      	cmp	r3, #0
 800664e:	d04f      	beq.n	80066f0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800665e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <HAL_SPI_IRQHandler+0x14c>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d034      	beq.n	80066e6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0203 	bic.w	r2, r2, #3
 800668a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_SPI_IRQHandler+0x1c8>)
 800669a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fc f977 	bl	8002994 <HAL_DMA_Abort_IT>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d016      	beq.n	80066ee <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <HAL_SPI_IRQHandler+0x1c8>)
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fc f961 	bl	8002994 <HAL_DMA_Abort_IT>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80066e4:	e003      	b.n	80066ee <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f808 	bl	80066fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80066ec:	e000      	b.n	80066f0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80066ee:	bf00      	nop
    return;
 80066f0:	bf00      	nop
  }
}
 80066f2:	3720      	adds	r7, #32
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	0800670f 	.word	0x0800670f

080066fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr

0800670e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff ffe7 	bl	80066fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800672e:	bf00      	nop
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4613      	mov	r3, r2
 8006746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006748:	f7fb fb52 	bl	8001df0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006750:	1a9b      	subs	r3, r3, r2
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	4413      	add	r3, r2
 8006756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006758:	f7fb fb4a 	bl	8001df0 <HAL_GetTick>
 800675c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800675e:	4b39      	ldr	r3, [pc, #228]	; (8006844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	015b      	lsls	r3, r3, #5
 8006764:	0d1b      	lsrs	r3, r3, #20
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	fb02 f303 	mul.w	r3, r2, r3
 800676c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800676e:	e054      	b.n	800681a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d050      	beq.n	800681a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006778:	f7fb fb3a 	bl	8001df0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	429a      	cmp	r2, r3
 8006786:	d902      	bls.n	800678e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d13d      	bne.n	800680a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800679c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a6:	d111      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067b0:	d004      	beq.n	80067bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ba:	d107      	bne.n	80067cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d4:	d10f      	bne.n	80067f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e017      	b.n	800683a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	3b01      	subs	r3, #1
 8006818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	429a      	cmp	r2, r3
 8006836:	d19b      	bne.n	8006770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	2000006c 	.word	0x2000006c

08006848 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af02      	add	r7, sp, #8
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <SPI_EndRxTxTransaction+0x7c>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <SPI_EndRxTxTransaction+0x80>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	0d5b      	lsrs	r3, r3, #21
 8006860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006864:	fb02 f303 	mul.w	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d112      	bne.n	800689a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2200      	movs	r2, #0
 800687c:	2180      	movs	r1, #128	; 0x80
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f7ff ff5a 	bl	8006738 <SPI_WaitFlagStateUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f043 0220 	orr.w	r2, r3, #32
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00f      	b.n	80068ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00a      	beq.n	80068b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	2b80      	cmp	r3, #128	; 0x80
 80068b2:	d0f2      	beq.n	800689a <SPI_EndRxTxTransaction+0x52>
 80068b4:	e000      	b.n	80068b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80068b6:	bf00      	nop
  }

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	2000006c 	.word	0x2000006c
 80068c8:	165e9f81 	.word	0x165e9f81

080068cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e03f      	b.n	800695e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb f90e 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	; 0x24
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800690e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fb49 	bl	8006fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800698c:	2300      	movs	r3, #0
 800698e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10d      	bne.n	80069ba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_UART_IRQHandler+0x52>
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa4f 	bl	8006e56 <UART_Receive_IT>
      return;
 80069b8:	e17b      	b.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80b1 	beq.w	8006b24 <HAL_UART_IRQHandler+0x1bc>
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d105      	bne.n	80069d8 <HAL_UART_IRQHandler+0x70>
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80a6 	beq.w	8006b24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_UART_IRQHandler+0x90>
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f043 0201 	orr.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_UART_IRQHandler+0xb0>
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	f043 0202 	orr.w	r2, r3, #2
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <HAL_UART_IRQHandler+0xd0>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00f      	beq.n	8006a62 <HAL_UART_IRQHandler+0xfa>
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <HAL_UART_IRQHandler+0xee>
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d005      	beq.n	8006a62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f043 0208 	orr.w	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 811e 	beq.w	8006ca8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <HAL_UART_IRQHandler+0x11e>
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9e8 	bl	8006e56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	bf0c      	ite	eq
 8006a94:	2301      	moveq	r3, #1
 8006a96:	2300      	movne	r3, #0
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d102      	bne.n	8006aae <HAL_UART_IRQHandler+0x146>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d031      	beq.n	8006b12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f92a 	bl	8006d08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d123      	bne.n	8006b0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ad0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d013      	beq.n	8006b02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	4a76      	ldr	r2, [pc, #472]	; (8006cb8 <HAL_UART_IRQHandler+0x350>)
 8006ae0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fb ff54 	bl	8002994 <HAL_DMA_Abort_IT>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d016      	beq.n	8006b20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006afc:	4610      	mov	r0, r2
 8006afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	e00e      	b.n	8006b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8ec 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	e00a      	b.n	8006b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f8e8 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	e006      	b.n	8006b20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f8e4 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b1e:	e0c3      	b.n	8006ca8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b20:	bf00      	nop
    return;
 8006b22:	e0c1      	b.n	8006ca8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 80a1 	bne.w	8006c70 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 809b 	beq.w	8006c70 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8095 	beq.w	8006c70 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b66:	2b40      	cmp	r3, #64	; 0x40
 8006b68:	d14e      	bne.n	8006c08 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006b74:	8a3b      	ldrh	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 8098 	beq.w	8006cac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b80:	8a3a      	ldrh	r2, [r7, #16]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	f080 8092 	bcs.w	8006cac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	8a3a      	ldrh	r2, [r7, #16]
 8006b8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d02b      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ba6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 0210 	bic.w	r2, r2, #16
 8006be4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fb fe95 	bl	800291a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f876 	bl	8006cf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c06:	e051      	b.n	8006cac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d047      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006c20:	8a7b      	ldrh	r3, [r7, #18]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d044      	beq.n	8006cb0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c34:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695a      	ldr	r2, [r3, #20]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f022 0201 	bic.w	r2, r2, #1
 8006c44:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0210 	bic.w	r2, r2, #16
 8006c62:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c64:	8a7b      	ldrh	r3, [r7, #18]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f842 	bl	8006cf2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c6e:	e01f      	b.n	8006cb0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d008      	beq.n	8006c8c <HAL_UART_IRQHandler+0x324>
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f87f 	bl	8006d88 <UART_Transmit_IT>
    return;
 8006c8a:	e012      	b.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00d      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d008      	beq.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f8c0 	bl	8006e26 <UART_EndTransmit_IT>
    return;
 8006ca6:	e004      	b.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
    return;
 8006ca8:	bf00      	nop
 8006caa:	e002      	b.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8006cac:	bf00      	nop
 8006cae:	e000      	b.n	8006cb2 <HAL_UART_IRQHandler+0x34a>
      return;
 8006cb0:	bf00      	nop
  }
}
 8006cb2:	3728      	adds	r7, #40	; 0x28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	08006d61 	.word	0x08006d61

08006cbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr

08006cce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bc80      	pop	{r7}
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695a      	ldr	r2, [r3, #20]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0201 	bic.w	r2, r2, #1
 8006d2e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d107      	bne.n	8006d48 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0210 	bic.w	r2, r2, #16
 8006d46:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr

08006d60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff ffb0 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b21      	cmp	r3, #33	; 0x21
 8006d9a:	d13e      	bne.n	8006e1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da4:	d114      	bne.n	8006dd0 <UART_Transmit_IT+0x48>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d110      	bne.n	8006dd0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	621a      	str	r2, [r3, #32]
 8006dce:	e008      	b.n	8006de2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	1c59      	adds	r1, r3, #1
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6211      	str	r1, [r2, #32]
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	4619      	mov	r1, r3
 8006df0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68da      	ldr	r2, [r3, #12]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
  }
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr

08006e26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2220      	movs	r2, #32
 8006e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff ff38 	bl	8006cbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b22      	cmp	r3, #34	; 0x22
 8006e68:	f040 8099 	bne.w	8006f9e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e74:	d117      	bne.n	8006ea6 <UART_Receive_IT+0x50>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d113      	bne.n	8006ea6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	1c9a      	adds	r2, r3, #2
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ea4:	e026      	b.n	8006ef4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb8:	d007      	beq.n	8006eca <UART_Receive_IT+0x74>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10a      	bne.n	8006ed8 <UART_Receive_IT+0x82>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	e008      	b.n	8006eea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	1c5a      	adds	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4619      	mov	r1, r3
 8006f02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d148      	bne.n	8006f9a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0220 	bic.w	r2, r2, #32
 8006f16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	695a      	ldr	r2, [r3, #20]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d123      	bne.n	8006f90 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0210 	bic.w	r2, r2, #16
 8006f5c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d10a      	bne.n	8006f82 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7ff feb2 	bl	8006cf2 <HAL_UARTEx_RxEventCallback>
 8006f8e:	e002      	b.n	8006f96 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fe9c 	bl	8006cce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e002      	b.n	8006fa0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006fe8:	f023 030c 	bic.w	r3, r3, #12
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a55      	ldr	r2, [pc, #340]	; (8007168 <UART_SetConfig+0x1c0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d103      	bne.n	800701e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007016:	f7fe f9e9 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	e002      	b.n	8007024 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800701e:	f7fe f9d1 	bl	80053c4 <HAL_RCC_GetPCLK1Freq>
 8007022:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69db      	ldr	r3, [r3, #28]
 8007028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702c:	d14c      	bne.n	80070c8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	4613      	mov	r3, r2
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	4413      	add	r3, r2
 8007036:	009a      	lsls	r2, r3, #2
 8007038:	441a      	add	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	005b      	lsls	r3, r3, #1
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	4a49      	ldr	r2, [pc, #292]	; (800716c <UART_SetConfig+0x1c4>)
 8007046:	fba2 2303 	umull	r2, r3, r2, r3
 800704a:	095b      	lsrs	r3, r3, #5
 800704c:	0119      	lsls	r1, r3, #4
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009a      	lsls	r2, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	005b      	lsls	r3, r3, #1
 8007060:	fbb2 f2f3 	udiv	r2, r2, r3
 8007064:	4b41      	ldr	r3, [pc, #260]	; (800716c <UART_SetConfig+0x1c4>)
 8007066:	fba3 0302 	umull	r0, r3, r3, r2
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	2064      	movs	r0, #100	; 0x64
 800706e:	fb00 f303 	mul.w	r3, r0, r3
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	3332      	adds	r3, #50	; 0x32
 8007078:	4a3c      	ldr	r2, [pc, #240]	; (800716c <UART_SetConfig+0x1c4>)
 800707a:	fba2 2303 	umull	r2, r3, r2, r3
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007086:	4419      	add	r1, r3
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009a      	lsls	r2, r3, #2
 8007092:	441a      	add	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	fbb2 f2f3 	udiv	r2, r2, r3
 800709e:	4b33      	ldr	r3, [pc, #204]	; (800716c <UART_SetConfig+0x1c4>)
 80070a0:	fba3 0302 	umull	r0, r3, r3, r2
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	2064      	movs	r0, #100	; 0x64
 80070a8:	fb00 f303 	mul.w	r3, r0, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	3332      	adds	r3, #50	; 0x32
 80070b2:	4a2e      	ldr	r2, [pc, #184]	; (800716c <UART_SetConfig+0x1c4>)
 80070b4:	fba2 2303 	umull	r2, r3, r2, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	f003 0207 	and.w	r2, r3, #7
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	440a      	add	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070c6:	e04a      	b.n	800715e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	009a      	lsls	r2, r3, #2
 80070d2:	441a      	add	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	fbb2 f3f3 	udiv	r3, r2, r3
 80070de:	4a23      	ldr	r2, [pc, #140]	; (800716c <UART_SetConfig+0x1c4>)
 80070e0:	fba2 2303 	umull	r2, r3, r2, r3
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	0119      	lsls	r1, r3, #4
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4613      	mov	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4413      	add	r3, r2
 80070f0:	009a      	lsls	r2, r3, #2
 80070f2:	441a      	add	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80070fe:	4b1b      	ldr	r3, [pc, #108]	; (800716c <UART_SetConfig+0x1c4>)
 8007100:	fba3 0302 	umull	r0, r3, r3, r2
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	2064      	movs	r0, #100	; 0x64
 8007108:	fb00 f303 	mul.w	r3, r0, r3
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	3332      	adds	r3, #50	; 0x32
 8007112:	4a16      	ldr	r2, [pc, #88]	; (800716c <UART_SetConfig+0x1c4>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800711e:	4419      	add	r1, r3
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009a      	lsls	r2, r3, #2
 800712a:	441a      	add	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	fbb2 f2f3 	udiv	r2, r2, r3
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <UART_SetConfig+0x1c4>)
 8007138:	fba3 0302 	umull	r0, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	2064      	movs	r0, #100	; 0x64
 8007140:	fb00 f303 	mul.w	r3, r0, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	3332      	adds	r3, #50	; 0x32
 800714a:	4a08      	ldr	r2, [pc, #32]	; (800716c <UART_SetConfig+0x1c4>)
 800714c:	fba2 2303 	umull	r2, r3, r2, r3
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f003 020f 	and.w	r2, r3, #15
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	440a      	add	r2, r1
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40013800 	.word	0x40013800
 800716c:	51eb851f 	.word	0x51eb851f

08007170 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007174:	4904      	ldr	r1, [pc, #16]	; (8007188 <MX_FATFS_Init+0x18>)
 8007176:	4805      	ldr	r0, [pc, #20]	; (800718c <MX_FATFS_Init+0x1c>)
 8007178:	f003 fb86 	bl	800a888 <FATFS_LinkDriver>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	4b03      	ldr	r3, [pc, #12]	; (8007190 <MX_FATFS_Init+0x20>)
 8007182:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007184:	bf00      	nop
 8007186:	bd80      	pop	{r7, pc}
 8007188:	200025ac 	.word	0x200025ac
 800718c:	20000078 	.word	0x20000078
 8007190:	200025b0 	.word	0x200025b0

08007194 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007194:	b480      	push	{r7}
 8007196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007198:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800719a:	4618      	mov	r0, r3
 800719c:	46bd      	mov	sp, r7
 800719e:	bc80      	pop	{r7}
 80071a0:	4770      	bx	lr

080071a2 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b082      	sub	sp, #8
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	4603      	mov	r3, r0
 80071aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7f9 fb12 	bl	80007d8 <SD_disk_initialize>
 80071b4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	4603      	mov	r3, r0
 80071c6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7f9 fbea 	bl	80009a4 <SD_disk_status>
 80071d0:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80071ea:	7bf8      	ldrb	r0, [r7, #15]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	f7f9 fbeb 	bl	80009cc <SD_disk_read>
 80071f6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8007210:	7bf8      	ldrb	r0, [r7, #15]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	f7f9 fc42 	bl	8000aa0 <SD_disk_write>
 800721c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b082      	sub	sp, #8
 800722a:	af00      	add	r7, sp, #0
 800722c:	4603      	mov	r3, r0
 800722e:	603a      	str	r2, [r7, #0]
 8007230:	71fb      	strb	r3, [r7, #7]
 8007232:	460b      	mov	r3, r1
 8007234:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007236:	79b9      	ldrb	r1, [r7, #6]
 8007238:	79fb      	ldrb	r3, [r7, #7]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 fcb3 	bl	8000ba8 <SD_disk_ioctl>
 8007242:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	4a08      	ldr	r2, [pc, #32]	; (800727c <disk_status+0x30>)
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	79fa      	ldrb	r2, [r7, #7]
 8007264:	4905      	ldr	r1, [pc, #20]	; (800727c <disk_status+0x30>)
 8007266:	440a      	add	r2, r1
 8007268:	7a12      	ldrb	r2, [r2, #8]
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000338 	.word	0x20000338

08007280 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	4a0d      	ldr	r2, [pc, #52]	; (80072c8 <disk_initialize+0x48>)
 8007292:	5cd3      	ldrb	r3, [r2, r3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d111      	bne.n	80072bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	4a0b      	ldr	r2, [pc, #44]	; (80072c8 <disk_initialize+0x48>)
 800729c:	2101      	movs	r1, #1
 800729e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	4a09      	ldr	r2, [pc, #36]	; (80072c8 <disk_initialize+0x48>)
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	79fa      	ldrb	r2, [r7, #7]
 80072ae:	4906      	ldr	r1, [pc, #24]	; (80072c8 <disk_initialize+0x48>)
 80072b0:	440a      	add	r2, r1
 80072b2:	7a12      	ldrb	r2, [r2, #8]
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	20000338 	.word	0x20000338

080072cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4a0a      	ldr	r2, [pc, #40]	; (8007308 <disk_read+0x3c>)
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	689c      	ldr	r4, [r3, #8]
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <disk_read+0x3c>)
 80072ec:	4413      	add	r3, r2
 80072ee:	7a18      	ldrb	r0, [r3, #8]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	47a0      	blx	r4
 80072f8:	4603      	mov	r3, r0
 80072fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd90      	pop	{r4, r7, pc}
 8007306:	bf00      	nop
 8007308:	20000338 	.word	0x20000338

0800730c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	603b      	str	r3, [r7, #0]
 8007318:	4603      	mov	r3, r0
 800731a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <disk_write+0x3c>)
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	68dc      	ldr	r4, [r3, #12]
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	4a07      	ldr	r2, [pc, #28]	; (8007348 <disk_write+0x3c>)
 800732c:	4413      	add	r3, r2
 800732e:	7a18      	ldrb	r0, [r3, #8]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	47a0      	blx	r4
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]
  return res;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd90      	pop	{r4, r7, pc}
 8007346:	bf00      	nop
 8007348:	20000338 	.word	0x20000338

0800734c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	603a      	str	r2, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
 8007358:	460b      	mov	r3, r1
 800735a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	4a09      	ldr	r2, [pc, #36]	; (8007384 <disk_ioctl+0x38>)
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	79fa      	ldrb	r2, [r7, #7]
 800736a:	4906      	ldr	r1, [pc, #24]	; (8007384 <disk_ioctl+0x38>)
 800736c:	440a      	add	r2, r1
 800736e:	7a10      	ldrb	r0, [r2, #8]
 8007370:	79b9      	ldrb	r1, [r7, #6]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	4798      	blx	r3
 8007376:	4603      	mov	r3, r0
 8007378:	73fb      	strb	r3, [r7, #15]
  return res;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000338 	.word	0x20000338

08007388 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3301      	adds	r3, #1
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	b21a      	sxth	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	b21b      	sxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b21b      	sxth	r3, r3
 80073a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80073aa:	89fb      	ldrh	r3, [r7, #14]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80073b6:	b480      	push	{r7}
 80073b8:	b085      	sub	sp, #20
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3303      	adds	r3, #3
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	021b      	lsls	r3, r3, #8
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	3202      	adds	r2, #2
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	021b      	lsls	r3, r3, #8
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	3201      	adds	r2, #1
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	7812      	ldrb	r2, [r2, #0]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
	return rv;
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	460b      	mov	r3, r1
 8007404:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	887a      	ldrh	r2, [r7, #2]
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	607a      	str	r2, [r7, #4]
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	701a      	strb	r2, [r3, #0]
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr

0800742e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	0a1b      	lsrs	r3, r3, #8
 8007448:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	0a1b      	lsrs	r3, r3, #8
 800745a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1c5a      	adds	r2, r3, #1
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	701a      	strb	r2, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr

08007484 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00d      	beq.n	80074ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	1c53      	adds	r3, r2, #1
 80074a2:	613b      	str	r3, [r7, #16]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	1c59      	adds	r1, r3, #1
 80074a8:	6179      	str	r1, [r7, #20]
 80074aa:	7812      	ldrb	r2, [r2, #0]
 80074ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f1      	bne.n	800749e <mem_cpy+0x1a>
	}
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80074c4:	b480      	push	{r7}
 80074c6:	b087      	sub	sp, #28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	617a      	str	r2, [r7, #20]
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	b2d2      	uxtb	r2, r2
 80074de:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	607b      	str	r3, [r7, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f3      	bne.n	80074d4 <mem_set+0x10>
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr

080074f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	61fa      	str	r2, [r7, #28]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	61ba      	str	r2, [r7, #24]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	1acb      	subs	r3, r1, r3
 8007524:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <mem_cmp+0x40>
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0eb      	beq.n	8007510 <mem_cmp+0x18>

	return r;
 8007538:	697b      	ldr	r3, [r7, #20]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3724      	adds	r7, #36	; 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	bc80      	pop	{r7}
 8007542:	4770      	bx	lr

08007544 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800754e:	e002      	b.n	8007556 <chk_chr+0x12>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3301      	adds	r3, #1
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <chk_chr+0x26>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	4293      	cmp	r3, r2
 8007568:	d1f2      	bne.n	8007550 <chk_chr+0xc>
	return *str;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	781b      	ldrb	r3, [r3, #0]
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	bc80      	pop	{r7}
 8007576:	4770      	bx	lr

08007578 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	e029      	b.n	80075e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800758c:	4a26      	ldr	r2, [pc, #152]	; (8007628 <chk_lock+0xb0>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4413      	add	r3, r2
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d01d      	beq.n	80075d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800759a:	4a23      	ldr	r2, [pc, #140]	; (8007628 <chk_lock+0xb0>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4413      	add	r3, r2
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d116      	bne.n	80075da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80075ac:	4a1e      	ldr	r2, [pc, #120]	; (8007628 <chk_lock+0xb0>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4413      	add	r3, r2
 80075b4:	3304      	adds	r3, #4
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80075bc:	429a      	cmp	r2, r3
 80075be:	d10c      	bne.n	80075da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80075c0:	4a19      	ldr	r2, [pc, #100]	; (8007628 <chk_lock+0xb0>)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	4413      	add	r3, r2
 80075c8:	3308      	adds	r3, #8
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d102      	bne.n	80075da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80075d4:	e007      	b.n	80075e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80075d6:	2301      	movs	r3, #1
 80075d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d9d2      	bls.n	800758c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	d109      	bne.n	8007600 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <chk_lock+0x80>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d101      	bne.n	80075fc <chk_lock+0x84>
 80075f8:	2300      	movs	r3, #0
 80075fa:	e010      	b.n	800761e <chk_lock+0xa6>
 80075fc:	2312      	movs	r3, #18
 80075fe:	e00e      	b.n	800761e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d108      	bne.n	8007618 <chk_lock+0xa0>
 8007606:	4a08      	ldr	r2, [pc, #32]	; (8007628 <chk_lock+0xb0>)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	4413      	add	r3, r2
 800760e:	330c      	adds	r3, #12
 8007610:	881b      	ldrh	r3, [r3, #0]
 8007612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007616:	d101      	bne.n	800761c <chk_lock+0xa4>
 8007618:	2310      	movs	r3, #16
 800761a:	e000      	b.n	800761e <chk_lock+0xa6>
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr
 8007628:	20000118 	.word	0x20000118

0800762c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007632:	2300      	movs	r3, #0
 8007634:	607b      	str	r3, [r7, #4]
 8007636:	e002      	b.n	800763e <enq_lock+0x12>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3301      	adds	r3, #1
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d806      	bhi.n	8007652 <enq_lock+0x26>
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <enq_lock+0x3c>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1f2      	bne.n	8007638 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b02      	cmp	r3, #2
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
}
 800765e:	4618      	mov	r0, r3
 8007660:	370c      	adds	r7, #12
 8007662:	46bd      	mov	sp, r7
 8007664:	bc80      	pop	{r7}
 8007666:	4770      	bx	lr
 8007668:	20000118 	.word	0x20000118

0800766c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e01f      	b.n	80076bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800767c:	4a41      	ldr	r2, [pc, #260]	; (8007784 <inc_lock+0x118>)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	4413      	add	r3, r2
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d113      	bne.n	80076b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800768e:	4a3d      	ldr	r2, [pc, #244]	; (8007784 <inc_lock+0x118>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	4413      	add	r3, r2
 8007696:	3304      	adds	r3, #4
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800769e:	429a      	cmp	r2, r3
 80076a0:	d109      	bne.n	80076b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80076a2:	4a38      	ldr	r2, [pc, #224]	; (8007784 <inc_lock+0x118>)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	3308      	adds	r3, #8
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d006      	beq.n	80076c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d9dc      	bls.n	800767c <inc_lock+0x10>
 80076c2:	e000      	b.n	80076c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80076c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d132      	bne.n	8007732 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	e002      	b.n	80076d8 <inc_lock+0x6c>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3301      	adds	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d806      	bhi.n	80076ec <inc_lock+0x80>
 80076de:	4a29      	ldr	r2, [pc, #164]	; (8007784 <inc_lock+0x118>)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	4413      	add	r3, r2
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1f2      	bne.n	80076d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d101      	bne.n	80076f6 <inc_lock+0x8a>
 80076f2:	2300      	movs	r3, #0
 80076f4:	e040      	b.n	8007778 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4922      	ldr	r1, [pc, #136]	; (8007784 <inc_lock+0x118>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	440b      	add	r3, r1
 8007702:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	491e      	ldr	r1, [pc, #120]	; (8007784 <inc_lock+0x118>)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	440b      	add	r3, r1
 8007710:	3304      	adds	r3, #4
 8007712:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695a      	ldr	r2, [r3, #20]
 8007718:	491a      	ldr	r1, [pc, #104]	; (8007784 <inc_lock+0x118>)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	440b      	add	r3, r1
 8007720:	3308      	adds	r3, #8
 8007722:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <inc_lock+0x118>)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	4413      	add	r3, r2
 800772c:	330c      	adds	r3, #12
 800772e:	2200      	movs	r2, #0
 8007730:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <inc_lock+0xe0>
 8007738:	4a12      	ldr	r2, [pc, #72]	; (8007784 <inc_lock+0x118>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	011b      	lsls	r3, r3, #4
 800773e:	4413      	add	r3, r2
 8007740:	330c      	adds	r3, #12
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <inc_lock+0xe0>
 8007748:	2300      	movs	r3, #0
 800774a:	e015      	b.n	8007778 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d108      	bne.n	8007764 <inc_lock+0xf8>
 8007752:	4a0c      	ldr	r2, [pc, #48]	; (8007784 <inc_lock+0x118>)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	011b      	lsls	r3, r3, #4
 8007758:	4413      	add	r3, r2
 800775a:	330c      	adds	r3, #12
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	e001      	b.n	8007768 <inc_lock+0xfc>
 8007764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007768:	4906      	ldr	r1, [pc, #24]	; (8007784 <inc_lock+0x118>)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	440b      	add	r3, r1
 8007770:	330c      	adds	r3, #12
 8007772:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000118 	.word	0x20000118

08007788 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3b01      	subs	r3, #1
 8007794:	607b      	str	r3, [r7, #4]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d825      	bhi.n	80077e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800779c:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <dec_lock+0x70>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	4413      	add	r3, r2
 80077a4:	330c      	adds	r3, #12
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80077aa:	89fb      	ldrh	r3, [r7, #14]
 80077ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b0:	d101      	bne.n	80077b6 <dec_lock+0x2e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80077b6:	89fb      	ldrh	r3, [r7, #14]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <dec_lock+0x3a>
 80077bc:	89fb      	ldrh	r3, [r7, #14]
 80077be:	3b01      	subs	r3, #1
 80077c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80077c2:	4a0d      	ldr	r2, [pc, #52]	; (80077f8 <dec_lock+0x70>)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	4413      	add	r3, r2
 80077ca:	330c      	adds	r3, #12
 80077cc:	89fa      	ldrh	r2, [r7, #14]
 80077ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80077d0:	89fb      	ldrh	r3, [r7, #14]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d105      	bne.n	80077e2 <dec_lock+0x5a>
 80077d6:	4a08      	ldr	r2, [pc, #32]	; (80077f8 <dec_lock+0x70>)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	4413      	add	r3, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	737b      	strb	r3, [r7, #13]
 80077e6:	e001      	b.n	80077ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80077e8:	2302      	movs	r3, #2
 80077ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80077ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr
 80077f8:	20000118 	.word	0x20000118

080077fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	e010      	b.n	800782c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800780a:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <clear_lock+0x44>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	4413      	add	r3, r2
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	429a      	cmp	r2, r3
 8007818:	d105      	bne.n	8007826 <clear_lock+0x2a>
 800781a:	4a09      	ldr	r2, [pc, #36]	; (8007840 <clear_lock+0x44>)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	4413      	add	r3, r2
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b01      	cmp	r3, #1
 8007830:	d9eb      	bls.n	800780a <clear_lock+0xe>
	}
}
 8007832:	bf00      	nop
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	bc80      	pop	{r7}
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000118 	.word	0x20000118

08007844 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	78db      	ldrb	r3, [r3, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d034      	beq.n	80078c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	7858      	ldrb	r0, [r3, #1]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007868:	2301      	movs	r3, #1
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	f7ff fd4e 	bl	800730c <disk_write>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d002      	beq.n	800787c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007876:	2301      	movs	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]
 800787a:	e022      	b.n	80078c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	1ad2      	subs	r2, r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	429a      	cmp	r2, r3
 8007890:	d217      	bcs.n	80078c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	789b      	ldrb	r3, [r3, #2]
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	e010      	b.n	80078bc <sync_window+0x78>
					wsect += fs->fsize;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7858      	ldrb	r0, [r3, #1]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078ae:	2301      	movs	r3, #1
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	f7ff fd2b 	bl	800730c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d8eb      	bhi.n	800789a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80078c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d01b      	beq.n	800791c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ffad 	bl	8007844 <sync_window>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d113      	bne.n	800791c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7858      	ldrb	r0, [r3, #1]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078fe:	2301      	movs	r3, #1
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	f7ff fce3 	bl	80072cc <disk_read>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800790c:	f04f 33ff 	mov.w	r3, #4294967295
 8007910:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007912:	2301      	movs	r3, #1
 8007914:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
	...

08007928 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff ff87 	bl	8007844 <sync_window>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d159      	bne.n	80079f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d149      	bne.n	80079dc <sync_fs+0xb4>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	791b      	ldrb	r3, [r3, #4]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d145      	bne.n	80079dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	899b      	ldrh	r3, [r3, #12]
 800795a:	461a      	mov	r2, r3
 800795c:	2100      	movs	r1, #0
 800795e:	f7ff fdb1 	bl	80074c4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3338      	adds	r3, #56	; 0x38
 8007966:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800796a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff fd43 	bl	80073fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3338      	adds	r3, #56	; 0x38
 8007978:	4921      	ldr	r1, [pc, #132]	; (8007a00 <sync_fs+0xd8>)
 800797a:	4618      	mov	r0, r3
 800797c:	f7ff fd57 	bl	800742e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3338      	adds	r3, #56	; 0x38
 8007984:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007988:	491e      	ldr	r1, [pc, #120]	; (8007a04 <sync_fs+0xdc>)
 800798a:	4618      	mov	r0, r3
 800798c:	f7ff fd4f 	bl	800742e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3338      	adds	r3, #56	; 0x38
 8007994:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7ff fd45 	bl	800742e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3338      	adds	r3, #56	; 0x38
 80079a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f7ff fd3b 	bl	800742e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7858      	ldrb	r0, [r3, #1]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079d0:	2301      	movs	r3, #1
 80079d2:	f7ff fc9b 	bl	800730c <disk_write>
			fs->fsi_flag = 0;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2200      	movs	r2, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff fcb1 	bl	800734c <disk_ioctl>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <sync_fs+0xcc>
 80079f0:	2301      	movs	r3, #1
 80079f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	41615252 	.word	0x41615252
 8007a04:	61417272 	.word	0x61417272

08007a08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	3b02      	subs	r3, #2
 8007a16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	3b02      	subs	r3, #2
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d301      	bcc.n	8007a28 <clust2sect+0x20>
 8007a24:	2300      	movs	r3, #0
 8007a26:	e008      	b.n	8007a3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	895b      	ldrh	r3, [r3, #10]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	fb03 f202 	mul.w	r2, r3, r2
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	4413      	add	r3, r2
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d904      	bls.n	8007a64 <get_fat+0x20>
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d302      	bcc.n	8007a6a <get_fat+0x26>
		val = 1;	/* Internal error */
 8007a64:	2301      	movs	r3, #1
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e0bb      	b.n	8007be2 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b03      	cmp	r3, #3
 8007a76:	f000 8083 	beq.w	8007b80 <get_fat+0x13c>
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	f300 80a7 	bgt.w	8007bce <get_fat+0x18a>
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d002      	beq.n	8007a8a <get_fat+0x46>
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d056      	beq.n	8007b36 <get_fat+0xf2>
 8007a88:	e0a1      	b.n	8007bce <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	4413      	add	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	899b      	ldrh	r3, [r3, #12]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aa8:	4413      	add	r3, r2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6938      	ldr	r0, [r7, #16]
 8007aae:	f7ff ff0d 	bl	80078cc <move_window>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 808d 	bne.w	8007bd4 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	60fa      	str	r2, [r7, #12]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	8992      	ldrh	r2, [r2, #12]
 8007ac4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ac8:	fb02 f201 	mul.w	r2, r2, r1
 8007acc:	1a9b      	subs	r3, r3, r2
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007ad6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	899b      	ldrh	r3, [r3, #12]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ae8:	4413      	add	r3, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	6938      	ldr	r0, [r7, #16]
 8007aee:	f7ff feed 	bl	80078cc <move_window>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d16f      	bne.n	8007bd8 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	899b      	ldrh	r3, [r3, #12]
 8007afc:	461a      	mov	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b04:	fb02 f201 	mul.w	r2, r2, r1
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	461a      	mov	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <get_fat+0xe8>
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	091b      	lsrs	r3, r3, #4
 8007b2a:	e002      	b.n	8007b32 <get_fat+0xee>
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b32:	617b      	str	r3, [r7, #20]
			break;
 8007b34:	e055      	b.n	8007be2 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	899b      	ldrh	r3, [r3, #12]
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f7ff febc 	bl	80078cc <move_window>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d140      	bne.n	8007bdc <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	8992      	ldrh	r2, [r2, #12]
 8007b68:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b6c:	fb02 f200 	mul.w	r2, r2, r0
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	440b      	add	r3, r1
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fc07 	bl	8007388 <ld_word>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	617b      	str	r3, [r7, #20]
			break;
 8007b7e:	e030      	b.n	8007be2 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	899b      	ldrh	r3, [r3, #12]
 8007b88:	089b      	lsrs	r3, r3, #2
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b94:	4413      	add	r3, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	6938      	ldr	r0, [r7, #16]
 8007b9a:	f7ff fe97 	bl	80078cc <move_window>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d11d      	bne.n	8007be0 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	8992      	ldrh	r2, [r2, #12]
 8007bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bb6:	fb02 f200 	mul.w	r2, r2, r0
 8007bba:	1a9b      	subs	r3, r3, r2
 8007bbc:	440b      	add	r3, r1
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fbf9 	bl	80073b6 <ld_dword>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bca:	617b      	str	r3, [r7, #20]
			break;
 8007bcc:	e009      	b.n	8007be2 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e006      	b.n	8007be2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bd4:	bf00      	nop
 8007bd6:	e004      	b.n	8007be2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bd8:	bf00      	nop
 8007bda:	e002      	b.n	8007be2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bdc:	bf00      	nop
 8007bde:	e000      	b.n	8007be2 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007be0:	bf00      	nop
		}
	}

	return val;
 8007be2:	697b      	ldr	r3, [r7, #20]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b089      	sub	sp, #36	; 0x24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	f240 8102 	bls.w	8007e08 <put_fat+0x21c>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	f080 80fc 	bcs.w	8007e08 <put_fat+0x21c>
		switch (fs->fs_type) {
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	f000 80b6 	beq.w	8007d86 <put_fat+0x19a>
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	f300 80fd 	bgt.w	8007e1a <put_fat+0x22e>
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d003      	beq.n	8007c2c <put_fat+0x40>
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	f000 8083 	beq.w	8007d30 <put_fat+0x144>
 8007c2a:	e0f6      	b.n	8007e1a <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	61bb      	str	r3, [r7, #24]
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	4413      	add	r3, r2
 8007c38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	899b      	ldrh	r3, [r3, #12]
 8007c42:	4619      	mov	r1, r3
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c4a:	4413      	add	r3, r2
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff fe3c 	bl	80078cc <move_window>
 8007c54:	4603      	mov	r3, r0
 8007c56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c58:	7ffb      	ldrb	r3, [r7, #31]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f040 80d6 	bne.w	8007e0c <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	61ba      	str	r2, [r7, #24]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	8992      	ldrh	r2, [r2, #12]
 8007c70:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c74:	fb02 f200 	mul.w	r2, r2, r0
 8007c78:	1a9b      	subs	r3, r3, r2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <put_fat+0xb8>
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	b25a      	sxtb	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	011b      	lsls	r3, r3, #4
 8007c9a:	b25b      	sxtb	r3, r3
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e001      	b.n	8007ca8 <put_fat+0xbc>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	899b      	ldrh	r3, [r3, #12]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f7ff fe00 	bl	80078cc <move_window>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cd0:	7ffb      	ldrb	r3, [r7, #31]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f040 809c 	bne.w	8007e10 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	899b      	ldrh	r3, [r3, #12]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	fbb3 f0f2 	udiv	r0, r3, r2
 8007cea:	fb02 f200 	mul.w	r2, r2, r0
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <put_fat+0x11a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e00e      	b.n	8007d24 <put_fat+0x138>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b25b      	sxtb	r3, r3
 8007d0c:	f023 030f 	bic.w	r3, r3, #15
 8007d10:	b25a      	sxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	0a1b      	lsrs	r3, r3, #8
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	b25b      	sxtb	r3, r3
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	70da      	strb	r2, [r3, #3]
			break;
 8007d2e:	e074      	b.n	8007e1a <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	899b      	ldrh	r3, [r3, #12]
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d44:	4413      	add	r3, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fdbf 	bl	80078cc <move_window>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d15d      	bne.n	8007e14 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	005b      	lsls	r3, r3, #1
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	8992      	ldrh	r2, [r2, #12]
 8007d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d6a:	fb02 f200 	mul.w	r2, r2, r0
 8007d6e:	1a9b      	subs	r3, r3, r2
 8007d70:	440b      	add	r3, r1
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	b292      	uxth	r2, r2
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fb3e 	bl	80073fa <st_word>
			fs->wflag = 1;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	70da      	strb	r2, [r3, #3]
			break;
 8007d84:	e049      	b.n	8007e1a <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	899b      	ldrh	r3, [r3, #12]
 8007d8e:	089b      	lsrs	r3, r3, #2
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4619      	mov	r1, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fd94 	bl	80078cc <move_window>
 8007da4:	4603      	mov	r3, r0
 8007da6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007da8:	7ffb      	ldrb	r3, [r7, #31]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d134      	bne.n	8007e18 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	8992      	ldrh	r2, [r2, #12]
 8007dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dc6:	fb02 f200 	mul.w	r2, r2, r0
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	440b      	add	r3, r1
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff faf1 	bl	80073b6 <ld_dword>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007dda:	4323      	orrs	r3, r4
 8007ddc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	8992      	ldrh	r2, [r2, #12]
 8007dec:	fbb3 f0f2 	udiv	r0, r3, r2
 8007df0:	fb02 f200 	mul.w	r2, r2, r0
 8007df4:	1a9b      	subs	r3, r3, r2
 8007df6:	440b      	add	r3, r1
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff fb17 	bl	800742e <st_dword>
			fs->wflag = 1;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2201      	movs	r2, #1
 8007e04:	70da      	strb	r2, [r3, #3]
			break;
 8007e06:	e008      	b.n	8007e1a <put_fat+0x22e>
		}
	}
 8007e08:	bf00      	nop
 8007e0a:	e006      	b.n	8007e1a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e0c:	bf00      	nop
 8007e0e:	e004      	b.n	8007e1a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <put_fat+0x22e>
			if (res != FR_OK) break;
 8007e18:	bf00      	nop
	return res;
 8007e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3724      	adds	r7, #36	; 0x24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd90      	pop	{r4, r7, pc}

08007e24 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d904      	bls.n	8007e4a <remove_chain+0x26>
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d301      	bcc.n	8007e4e <remove_chain+0x2a>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e04b      	b.n	8007ee6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	69b8      	ldr	r0, [r7, #24]
 8007e5c:	f7ff fec6 	bl	8007bec <put_fat>
 8007e60:	4603      	mov	r3, r0
 8007e62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e64:	7ffb      	ldrb	r3, [r7, #31]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <remove_chain+0x4a>
 8007e6a:	7ffb      	ldrb	r3, [r7, #31]
 8007e6c:	e03b      	b.n	8007ee6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff fde7 	bl	8007a44 <get_fat>
 8007e76:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d031      	beq.n	8007ee2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <remove_chain+0x64>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e02e      	b.n	8007ee6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d101      	bne.n	8007e94 <remove_chain+0x70>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e028      	b.n	8007ee6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e94:	2200      	movs	r2, #0
 8007e96:	68b9      	ldr	r1, [r7, #8]
 8007e98:	69b8      	ldr	r0, [r7, #24]
 8007e9a:	f7ff fea7 	bl	8007bec <put_fat>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007ea2:	7ffb      	ldrb	r3, [r7, #31]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <remove_chain+0x88>
 8007ea8:	7ffb      	ldrb	r3, [r7, #31]
 8007eaa:	e01c      	b.n	8007ee6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	3b02      	subs	r3, #2
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d20b      	bcs.n	8007ed2 <remove_chain+0xae>
			fs->free_clst++;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d3c6      	bcc.n	8007e6e <remove_chain+0x4a>
 8007ee0:	e000      	b.n	8007ee4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ee2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b088      	sub	sp, #32
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <create_chain+0x2c>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	69db      	ldr	r3, [r3, #28]
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d31b      	bcc.n	8007f52 <create_chain+0x64>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	e018      	b.n	8007f52 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fd8e 	bl	8007a44 <get_fat>
 8007f28:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d801      	bhi.n	8007f34 <create_chain+0x46>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e070      	b.n	8008016 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f3a:	d101      	bne.n	8007f40 <create_chain+0x52>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	e06a      	b.n	8008016 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d201      	bcs.n	8007f4e <create_chain+0x60>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	e063      	b.n	8008016 <create_chain+0x128>
		scl = clst;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d307      	bcc.n	8007f76 <create_chain+0x88>
				ncl = 2;
 8007f66:	2302      	movs	r3, #2
 8007f68:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d901      	bls.n	8007f76 <create_chain+0x88>
 8007f72:	2300      	movs	r3, #0
 8007f74:	e04f      	b.n	8008016 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f76:	69f9      	ldr	r1, [r7, #28]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff fd63 	bl	8007a44 <get_fat>
 8007f7e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d003      	beq.n	8007f94 <create_chain+0xa6>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d101      	bne.n	8007f98 <create_chain+0xaa>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	e03e      	b.n	8008016 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d1da      	bne.n	8007f56 <create_chain+0x68>
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e038      	b.n	8008016 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007fa4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007faa:	69f9      	ldr	r1, [r7, #28]
 8007fac:	6938      	ldr	r0, [r7, #16]
 8007fae:	f7ff fe1d 	bl	8007bec <put_fat>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007fb6:	7dfb      	ldrb	r3, [r7, #23]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d109      	bne.n	8007fd0 <create_chain+0xe2>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6938      	ldr	r0, [r7, #16]
 8007fc8:	f7ff fe10 	bl	8007bec <put_fat>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007fd0:	7dfb      	ldrb	r3, [r7, #23]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d116      	bne.n	8008004 <create_chain+0x116>
		fs->last_clst = ncl;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	699a      	ldr	r2, [r3, #24]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	3b02      	subs	r3, #2
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d804      	bhi.n	8007ff4 <create_chain+0x106>
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	1e5a      	subs	r2, r3, #1
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	791b      	ldrb	r3, [r3, #4]
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	711a      	strb	r2, [r3, #4]
 8008002:	e007      	b.n	8008014 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d102      	bne.n	8008010 <create_chain+0x122>
 800800a:	f04f 33ff 	mov.w	r3, #4294967295
 800800e:	e000      	b.n	8008012 <create_chain+0x124>
 8008010:	2301      	movs	r3, #1
 8008012:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008014:	69fb      	ldr	r3, [r7, #28]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3720      	adds	r7, #32
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800801e:	b480      	push	{r7}
 8008020:	b087      	sub	sp, #28
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	3304      	adds	r3, #4
 8008034:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	899b      	ldrh	r3, [r3, #12]
 800803a:	461a      	mov	r2, r3
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	8952      	ldrh	r2, [r2, #10]
 8008046:	fbb3 f3f2 	udiv	r3, r3, r2
 800804a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	1d1a      	adds	r2, r3, #4
 8008050:	613a      	str	r2, [r7, #16]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <clmt_clust+0x42>
 800805c:	2300      	movs	r3, #0
 800805e:	e010      	b.n	8008082 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	429a      	cmp	r2, r3
 8008066:	d307      	bcc.n	8008078 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	617b      	str	r3, [r7, #20]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3304      	adds	r3, #4
 8008074:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008076:	e7e9      	b.n	800804c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008078:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
}
 8008082:	4618      	mov	r0, r3
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	bc80      	pop	{r7}
 800808a:	4770      	bx	lr

0800808c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080a2:	d204      	bcs.n	80080ae <dir_sdi+0x22>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	f003 031f 	and.w	r3, r3, #31
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80080ae:	2302      	movs	r3, #2
 80080b0:	e071      	b.n	8008196 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <dir_sdi+0x46>
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d902      	bls.n	80080d2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10c      	bne.n	80080f2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	095b      	lsrs	r3, r3, #5
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	8912      	ldrh	r2, [r2, #8]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d301      	bcc.n	80080e8 <dir_sdi+0x5c>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e056      	b.n	8008196 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	61da      	str	r2, [r3, #28]
 80080f0:	e02d      	b.n	800814e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	895b      	ldrh	r3, [r3, #10]
 80080f6:	461a      	mov	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	899b      	ldrh	r3, [r3, #12]
 80080fc:	fb03 f302 	mul.w	r3, r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008102:	e019      	b.n	8008138 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6979      	ldr	r1, [r7, #20]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff fc9b 	bl	8007a44 <get_fat>
 800810e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008116:	d101      	bne.n	800811c <dir_sdi+0x90>
 8008118:	2301      	movs	r3, #1
 800811a:	e03c      	b.n	8008196 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d904      	bls.n	800812c <dir_sdi+0xa0>
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	429a      	cmp	r2, r3
 800812a:	d301      	bcc.n	8008130 <dir_sdi+0xa4>
 800812c:	2302      	movs	r3, #2
 800812e:	e032      	b.n	8008196 <dir_sdi+0x10a>
			ofs -= csz;
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d2e1      	bcs.n	8008104 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	6938      	ldr	r0, [r7, #16]
 8008144:	f7ff fc60 	bl	8007a08 <clust2sect>
 8008148:	4602      	mov	r2, r0
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <dir_sdi+0xd4>
 800815c:	2302      	movs	r3, #2
 800815e:	e01a      	b.n	8008196 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	899b      	ldrh	r3, [r3, #12]
 8008168:	4619      	mov	r1, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008170:	441a      	add	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	899b      	ldrh	r3, [r3, #12]
 8008180:	461a      	mov	r2, r3
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	fbb3 f0f2 	udiv	r0, r3, r2
 8008188:	fb02 f200 	mul.w	r2, r2, r0
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	18ca      	adds	r2, r1, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	3320      	adds	r3, #32
 80081b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <dir_next+0x28>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081c4:	d301      	bcc.n	80081ca <dir_next+0x2c>
 80081c6:	2304      	movs	r3, #4
 80081c8:	e0bb      	b.n	8008342 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	899b      	ldrh	r3, [r3, #12]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80081d6:	fb02 f201 	mul.w	r2, r2, r1
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f040 809d 	bne.w	800831c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10b      	bne.n	800820c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	8912      	ldrh	r2, [r2, #8]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	f0c0 808d 	bcc.w	800831c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	61da      	str	r2, [r3, #28]
 8008208:	2304      	movs	r3, #4
 800820a:	e09a      	b.n	8008342 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	899b      	ldrh	r3, [r3, #12]
 8008210:	461a      	mov	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	fbb3 f3f2 	udiv	r3, r3, r2
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	8952      	ldrh	r2, [r2, #10]
 800821c:	3a01      	subs	r2, #1
 800821e:	4013      	ands	r3, r2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d17b      	bne.n	800831c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7ff fc09 	bl	8007a44 <get_fat>
 8008232:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d801      	bhi.n	800823e <dir_next+0xa0>
 800823a:	2302      	movs	r3, #2
 800823c:	e081      	b.n	8008342 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d101      	bne.n	800824a <dir_next+0xac>
 8008246:	2301      	movs	r3, #1
 8008248:	e07b      	b.n	8008342 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	429a      	cmp	r2, r3
 8008252:	d359      	bcc.n	8008308 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	61da      	str	r2, [r3, #28]
 8008260:	2304      	movs	r3, #4
 8008262:	e06e      	b.n	8008342 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	4619      	mov	r1, r3
 800826c:	4610      	mov	r0, r2
 800826e:	f7ff fe3e 	bl	8007eee <create_chain>
 8008272:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <dir_next+0xe0>
 800827a:	2307      	movs	r3, #7
 800827c:	e061      	b.n	8008342 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <dir_next+0xea>
 8008284:	2302      	movs	r3, #2
 8008286:	e05c      	b.n	8008342 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828e:	d101      	bne.n	8008294 <dir_next+0xf6>
 8008290:	2301      	movs	r3, #1
 8008292:	e056      	b.n	8008342 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f7ff fad5 	bl	8007844 <sync_window>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <dir_next+0x106>
 80082a0:	2301      	movs	r3, #1
 80082a2:	e04e      	b.n	8008342 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	899b      	ldrh	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	2100      	movs	r1, #0
 80082b2:	f7ff f907 	bl	80074c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082b6:	2300      	movs	r3, #0
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	6979      	ldr	r1, [r7, #20]
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f7ff fba3 	bl	8007a08 <clust2sect>
 80082c2:	4602      	mov	r2, r0
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	635a      	str	r2, [r3, #52]	; 0x34
 80082c8:	e012      	b.n	80082f0 <dir_next+0x152>
						fs->wflag = 1;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f7ff fab7 	bl	8007844 <sync_window>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <dir_next+0x142>
 80082dc:	2301      	movs	r3, #1
 80082de:	e030      	b.n	8008342 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	3301      	adds	r3, #1
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	635a      	str	r2, [r3, #52]	; 0x34
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	895b      	ldrh	r3, [r3, #10]
 80082f4:	461a      	mov	r2, r3
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d3e6      	bcc.n	80082ca <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800830e:	6979      	ldr	r1, [r7, #20]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fb79 	bl	8007a08 <clust2sect>
 8008316:	4602      	mov	r2, r0
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	899b      	ldrh	r3, [r3, #12]
 800832c:	461a      	mov	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	fbb3 f0f2 	udiv	r0, r3, r2
 8008334:	fb02 f200 	mul.w	r2, r2, r0
 8008338:	1a9b      	subs	r3, r3, r2
 800833a:	18ca      	adds	r2, r1, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3718      	adds	r7, #24
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fe95 	bl	800808c <dir_sdi>
 8008362:	4603      	mov	r3, r0
 8008364:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008366:	7dfb      	ldrb	r3, [r7, #23]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d12b      	bne.n	80083c4 <dir_alloc+0x7a>
		n = 0;
 800836c:	2300      	movs	r3, #0
 800836e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	4619      	mov	r1, r3
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff faa8 	bl	80078cc <move_window>
 800837c:	4603      	mov	r3, r0
 800837e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d11d      	bne.n	80083c2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2be5      	cmp	r3, #229	; 0xe5
 800838e:	d004      	beq.n	800839a <dir_alloc+0x50>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d107      	bne.n	80083aa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	3301      	adds	r3, #1
 800839e:	613b      	str	r3, [r7, #16]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d102      	bne.n	80083ae <dir_alloc+0x64>
 80083a8:	e00c      	b.n	80083c4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80083ae:	2101      	movs	r1, #1
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fef4 	bl	800819e <dir_next>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0d7      	beq.n	8008370 <dir_alloc+0x26>
 80083c0:	e000      	b.n	80083c4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80083c2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d101      	bne.n	80083ce <dir_alloc+0x84>
 80083ca:	2307      	movs	r3, #7
 80083cc:	75fb      	strb	r3, [r7, #23]
	return res;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	331a      	adds	r3, #26
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe ffce 	bl	8007388 <ld_word>
 80083ec:	4603      	mov	r3, r0
 80083ee:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b03      	cmp	r3, #3
 80083f6:	d109      	bne.n	800840c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3314      	adds	r3, #20
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe ffc3 	bl	8007388 <ld_word>
 8008402:	4603      	mov	r3, r0
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800840c:	68fb      	ldr	r3, [r7, #12]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	60f8      	str	r0, [r7, #12]
 800841e:	60b9      	str	r1, [r7, #8]
 8008420:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	331a      	adds	r3, #26
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	b292      	uxth	r2, r2
 800842a:	4611      	mov	r1, r2
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe ffe4 	bl	80073fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d109      	bne.n	800844e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f103 0214 	add.w	r2, r3, #20
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	0c1b      	lsrs	r3, r3, #16
 8008444:	b29b      	uxth	r3, r3
 8008446:	4619      	mov	r1, r3
 8008448:	4610      	mov	r0, r2
 800844a:	f7fe ffd6 	bl	80073fa <st_word>
	}
}
 800844e:	bf00      	nop
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008458:	b590      	push	{r4, r7, lr}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	331a      	adds	r3, #26
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ff8e 	bl	8007388 <ld_word>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <cmp_lfn+0x1e>
 8008472:	2300      	movs	r3, #0
 8008474:	e059      	b.n	800852a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800847e:	1e5a      	subs	r2, r3, #1
 8008480:	4613      	mov	r3, r2
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4413      	add	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800848c:	2301      	movs	r3, #1
 800848e:	81fb      	strh	r3, [r7, #14]
 8008490:	2300      	movs	r3, #0
 8008492:	613b      	str	r3, [r7, #16]
 8008494:	e033      	b.n	80084fe <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008496:	4a27      	ldr	r2, [pc, #156]	; (8008534 <cmp_lfn+0xdc>)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	4413      	add	r3, r2
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fe ff6f 	bl	8007388 <ld_word>
 80084aa:	4603      	mov	r3, r0
 80084ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80084ae:	89fb      	ldrh	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01a      	beq.n	80084ea <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2bfe      	cmp	r3, #254	; 0xfe
 80084b8:	d812      	bhi.n	80084e0 <cmp_lfn+0x88>
 80084ba:	89bb      	ldrh	r3, [r7, #12]
 80084bc:	4618      	mov	r0, r3
 80084be:	f002 fa2d 	bl	800a91c <ff_wtoupper>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461c      	mov	r4, r3
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	1c5a      	adds	r2, r3, #1
 80084ca:	617a      	str	r2, [r7, #20]
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	4413      	add	r3, r2
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f002 fa21 	bl	800a91c <ff_wtoupper>
 80084da:	4603      	mov	r3, r0
 80084dc:	429c      	cmp	r4, r3
 80084de:	d001      	beq.n	80084e4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80084e0:	2300      	movs	r3, #0
 80084e2:	e022      	b.n	800852a <cmp_lfn+0xd2>
			}
			wc = uc;
 80084e4:	89bb      	ldrh	r3, [r7, #12]
 80084e6:	81fb      	strh	r3, [r7, #14]
 80084e8:	e006      	b.n	80084f8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80084ea:	89bb      	ldrh	r3, [r7, #12]
 80084ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d001      	beq.n	80084f8 <cmp_lfn+0xa0>
 80084f4:	2300      	movs	r3, #0
 80084f6:	e018      	b.n	800852a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3301      	adds	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	2b0c      	cmp	r3, #12
 8008502:	d9c8      	bls.n	8008496 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <cmp_lfn+0xd0>
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <cmp_lfn+0xd0>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <cmp_lfn+0xd0>
 8008524:	2300      	movs	r3, #0
 8008526:	e000      	b.n	800852a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008528:	2301      	movs	r3, #1
}
 800852a:	4618      	mov	r0, r3
 800852c:	371c      	adds	r7, #28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd90      	pop	{r4, r7, pc}
 8008532:	bf00      	nop
 8008534:	0800ac0c 	.word	0x0800ac0c

08008538 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	460b      	mov	r3, r1
 8008548:	71fb      	strb	r3, [r7, #7]
 800854a:	4613      	mov	r3, r2
 800854c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	330d      	adds	r3, #13
 8008552:	79ba      	ldrb	r2, [r7, #6]
 8008554:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	330b      	adds	r3, #11
 800855a:	220f      	movs	r2, #15
 800855c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	330c      	adds	r3, #12
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	331a      	adds	r3, #26
 800856a:	2100      	movs	r1, #0
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe ff44 	bl	80073fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	4613      	mov	r3, r2
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	82fb      	strh	r3, [r7, #22]
 8008586:	2300      	movs	r3, #0
 8008588:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800858a:	8afb      	ldrh	r3, [r7, #22]
 800858c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008590:	4293      	cmp	r3, r2
 8008592:	d007      	beq.n	80085a4 <put_lfn+0x6c>
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	61fa      	str	r2, [r7, #28]
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <put_lfn+0xcc>)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	4413      	add	r3, r2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	8afa      	ldrh	r2, [r7, #22]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe ff1f 	bl	80073fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80085bc:	8afb      	ldrh	r3, [r7, #22]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <put_lfn+0x90>
 80085c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085c6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	3301      	adds	r3, #1
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b0c      	cmp	r3, #12
 80085d2:	d9da      	bls.n	800858a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80085d4:	8afb      	ldrh	r3, [r7, #22]
 80085d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085da:	4293      	cmp	r3, r2
 80085dc:	d006      	beq.n	80085ec <put_lfn+0xb4>
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d103      	bne.n	80085f4 <put_lfn+0xbc>
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	79fa      	ldrb	r2, [r7, #7]
 80085f8:	701a      	strb	r2, [r3, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3720      	adds	r7, #32
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	0800ac0c 	.word	0x0800ac0c

08008608 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08c      	sub	sp, #48	; 0x30
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008616:	220b      	movs	r2, #11
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7fe ff32 	bl	8007484 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2b05      	cmp	r3, #5
 8008624:	d92b      	bls.n	800867e <gen_numname+0x76>
		sr = seq;
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800862a:	e022      	b.n	8008672 <gen_numname+0x6a>
			wc = *lfn++;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	1c9a      	adds	r2, r3, #2
 8008630:	607a      	str	r2, [r7, #4]
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8008636:	2300      	movs	r3, #0
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28
 800863a:	e017      	b.n	800866c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	005a      	lsls	r2, r3, #1
 8008640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	4413      	add	r3, r2
 8008648:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800864a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800864c:	085b      	lsrs	r3, r3, #1
 800864e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <gen_numname+0x5e>
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8008660:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8008664:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	3301      	adds	r3, #1
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d9e4      	bls.n	800863c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1d8      	bne.n	800862c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800867e:	2307      	movs	r3, #7
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	b2db      	uxtb	r3, r3
 800868c:	3330      	adds	r3, #48	; 0x30
 800868e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008696:	2b39      	cmp	r3, #57	; 0x39
 8008698:	d904      	bls.n	80086a4 <gen_numname+0x9c>
 800869a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800869e:	3307      	adds	r3, #7
 80086a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	1e5a      	subs	r2, r3, #1
 80086a8:	62ba      	str	r2, [r7, #40]	; 0x28
 80086aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80086ae:	4413      	add	r3, r2
 80086b0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80086b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	091b      	lsrs	r3, r3, #4
 80086bc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1de      	bne.n	8008682 <gen_numname+0x7a>
	ns[i] = '~';
 80086c4:	f107 0214 	add.w	r2, r7, #20
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	4413      	add	r3, r2
 80086cc:	227e      	movs	r2, #126	; 0x7e
 80086ce:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80086d0:	2300      	movs	r3, #0
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
 80086d4:	e002      	b.n	80086dc <gen_numname+0xd4>
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	3301      	adds	r3, #1
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d205      	bcs.n	80086f0 <gen_numname+0xe8>
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	4413      	add	r3, r2
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d1f2      	bne.n	80086d6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	2b07      	cmp	r3, #7
 80086f4:	d808      	bhi.n	8008708 <gen_numname+0x100>
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80086fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008700:	4413      	add	r3, r2
 8008702:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008706:	e000      	b.n	800870a <gen_numname+0x102>
 8008708:	2120      	movs	r1, #32
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	627a      	str	r2, [r7, #36]	; 0x24
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	460a      	mov	r2, r1
 8008716:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	2b07      	cmp	r3, #7
 800871c:	d9e8      	bls.n	80086f0 <gen_numname+0xe8>
}
 800871e:	bf00      	nop
 8008720:	bf00      	nop
 8008722:	3730      	adds	r7, #48	; 0x30
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008734:	230b      	movs	r3, #11
 8008736:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	b2da      	uxtb	r2, r3
 800873c:	0852      	lsrs	r2, r2, #1
 800873e:	01db      	lsls	r3, r3, #7
 8008740:	4313      	orrs	r3, r2
 8008742:	b2da      	uxtb	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	1c59      	adds	r1, r3, #1
 8008748:	6079      	str	r1, [r7, #4]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	4413      	add	r3, r2
 800874e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1ed      	bne.n	8008738 <sum_sfn+0x10>
	return sum;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008776:	2100      	movs	r1, #0
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f7ff fc87 	bl	800808c <dir_sdi>
 800877e:	4603      	mov	r3, r0
 8008780:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <dir_find+0x24>
 8008788:	7dfb      	ldrb	r3, [r7, #23]
 800878a:	e0a9      	b.n	80088e0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800878c:	23ff      	movs	r3, #255	; 0xff
 800878e:	753b      	strb	r3, [r7, #20]
 8008790:	7d3b      	ldrb	r3, [r7, #20]
 8008792:	757b      	strb	r3, [r7, #21]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f04f 32ff 	mov.w	r2, #4294967295
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6938      	ldr	r0, [r7, #16]
 80087a4:	f7ff f892 	bl	80078cc <move_window>
 80087a8:	4603      	mov	r3, r0
 80087aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f040 8090 	bne.w	80088d4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a1b      	ldr	r3, [r3, #32]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <dir_find+0x60>
 80087c2:	2304      	movs	r3, #4
 80087c4:	75fb      	strb	r3, [r7, #23]
 80087c6:	e08a      	b.n	80088de <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	330b      	adds	r3, #11
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7bfa      	ldrb	r2, [r7, #15]
 80087da:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80087dc:	7dbb      	ldrb	r3, [r7, #22]
 80087de:	2be5      	cmp	r3, #229	; 0xe5
 80087e0:	d007      	beq.n	80087f2 <dir_find+0x8a>
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d009      	beq.n	8008800 <dir_find+0x98>
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b0f      	cmp	r3, #15
 80087f0:	d006      	beq.n	8008800 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80087f2:	23ff      	movs	r3, #255	; 0xff
 80087f4:	757b      	strb	r3, [r7, #21]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f04f 32ff 	mov.w	r2, #4294967295
 80087fc:	631a      	str	r2, [r3, #48]	; 0x30
 80087fe:	e05e      	b.n	80088be <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008800:	7bfb      	ldrb	r3, [r7, #15]
 8008802:	2b0f      	cmp	r3, #15
 8008804:	d136      	bne.n	8008874 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800880c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d154      	bne.n	80088be <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008814:	7dbb      	ldrb	r3, [r7, #22]
 8008816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00d      	beq.n	800883a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	7b5b      	ldrb	r3, [r3, #13]
 8008824:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008826:	7dbb      	ldrb	r3, [r7, #22]
 8008828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882c:	75bb      	strb	r3, [r7, #22]
 800882e:	7dbb      	ldrb	r3, [r7, #22]
 8008830:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	7d7b      	ldrb	r3, [r7, #21]
 800883e:	429a      	cmp	r2, r3
 8008840:	d115      	bne.n	800886e <dir_find+0x106>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	330d      	adds	r3, #13
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	7d3a      	ldrb	r2, [r7, #20]
 800884c:	429a      	cmp	r2, r3
 800884e:	d10e      	bne.n	800886e <dir_find+0x106>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	f7ff fdfc 	bl	8008458 <cmp_lfn>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <dir_find+0x106>
 8008866:	7d7b      	ldrb	r3, [r7, #21]
 8008868:	3b01      	subs	r3, #1
 800886a:	b2db      	uxtb	r3, r3
 800886c:	e000      	b.n	8008870 <dir_find+0x108>
 800886e:	23ff      	movs	r3, #255	; 0xff
 8008870:	757b      	strb	r3, [r7, #21]
 8008872:	e024      	b.n	80088be <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008874:	7d7b      	ldrb	r3, [r7, #21]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <dir_find+0x126>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff ff52 	bl	8008728 <sum_sfn>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	7d3b      	ldrb	r3, [r7, #20]
 800888a:	4293      	cmp	r3, r2
 800888c:	d024      	beq.n	80088d8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <dir_find+0x14a>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a18      	ldr	r0, [r3, #32]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	220b      	movs	r2, #11
 80088a6:	4619      	mov	r1, r3
 80088a8:	f7fe fe26 	bl	80074f8 <mem_cmp>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d014      	beq.n	80088dc <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80088b2:	23ff      	movs	r3, #255	; 0xff
 80088b4:	757b      	strb	r3, [r7, #21]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f04f 32ff 	mov.w	r2, #4294967295
 80088bc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80088be:	2100      	movs	r1, #0
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fc6c 	bl	800819e <dir_next>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f43f af65 	beq.w	800879c <dir_find+0x34>
 80088d2:	e004      	b.n	80088de <dir_find+0x176>
		if (res != FR_OK) break;
 80088d4:	bf00      	nop
 80088d6:	e002      	b.n	80088de <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80088d8:	bf00      	nop
 80088da:	e000      	b.n	80088de <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80088dc:	bf00      	nop

	return res;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08c      	sub	sp, #48	; 0x30
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80088fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <dir_register+0x20>
 8008904:	2306      	movs	r3, #6
 8008906:	e0e0      	b.n	8008aca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008908:	2300      	movs	r3, #0
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
 800890c:	e002      	b.n	8008914 <dir_register+0x2c>
 800890e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008910:	3301      	adds	r3, #1
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	691a      	ldr	r2, [r3, #16]
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	4413      	add	r3, r2
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f4      	bne.n	800890e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800892a:	f107 030c 	add.w	r3, r7, #12
 800892e:	220c      	movs	r2, #12
 8008930:	4618      	mov	r0, r3
 8008932:	f7fe fda7 	bl	8007484 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d032      	beq.n	80089a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2240      	movs	r2, #64	; 0x40
 8008944:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008948:	2301      	movs	r3, #1
 800894a:	62bb      	str	r3, [r7, #40]	; 0x28
 800894c:	e016      	b.n	800897c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	f107 010c 	add.w	r1, r7, #12
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	f7ff fe53 	bl	8008608 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7ff ff00 	bl	8008768 <dir_find>
 8008968:	4603      	mov	r3, r0
 800896a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800896e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008978:	3301      	adds	r3, #1
 800897a:	62bb      	str	r3, [r7, #40]	; 0x28
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	2b63      	cmp	r3, #99	; 0x63
 8008980:	d9e5      	bls.n	800894e <dir_register+0x66>
 8008982:	e000      	b.n	8008986 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008984:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008988:	2b64      	cmp	r3, #100	; 0x64
 800898a:	d101      	bne.n	8008990 <dir_register+0xa8>
 800898c:	2307      	movs	r3, #7
 800898e:	e09c      	b.n	8008aca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008990:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008994:	2b04      	cmp	r3, #4
 8008996:	d002      	beq.n	800899e <dir_register+0xb6>
 8008998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800899c:	e095      	b.n	8008aca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800899e:	7dfa      	ldrb	r2, [r7, #23]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <dir_register+0xd8>
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	330c      	adds	r3, #12
 80089b4:	4a47      	ldr	r2, [pc, #284]	; (8008ad4 <dir_register+0x1ec>)
 80089b6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	3301      	adds	r3, #1
 80089be:	e000      	b.n	80089c2 <dir_register+0xda>
 80089c0:	2301      	movs	r3, #1
 80089c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80089c4:	6a39      	ldr	r1, [r7, #32]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff fcbf 	bl	800834a <dir_alloc>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80089d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d148      	bne.n	8008a6c <dir_register+0x184>
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	3b01      	subs	r3, #1
 80089de:	623b      	str	r3, [r7, #32]
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d042      	beq.n	8008a6c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	015b      	lsls	r3, r3, #5
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fb4a 	bl	800808c <dir_sdi>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80089fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d132      	bne.n	8008a6c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	3324      	adds	r3, #36	; 0x24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fe8c 	bl	8008728 <sum_sfn>
 8008a10:	4603      	mov	r3, r0
 8008a12:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	69f8      	ldr	r0, [r7, #28]
 8008a1c:	f7fe ff56 	bl	80078cc <move_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d11d      	bne.n	8008a6a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	6918      	ldr	r0, [r3, #16]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a19      	ldr	r1, [r3, #32]
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	7efb      	ldrb	r3, [r7, #27]
 8008a3c:	f7ff fd7c 	bl	8008538 <put_lfn>
				fs->wflag = 1;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	2201      	movs	r2, #1
 8008a44:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008a46:	2100      	movs	r1, #0
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff fba8 	bl	800819e <dir_next>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d107      	bne.n	8008a6c <dir_register+0x184>
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	623b      	str	r3, [r7, #32]
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1d5      	bne.n	8008a14 <dir_register+0x12c>
 8008a68:	e000      	b.n	8008a6c <dir_register+0x184>
				if (res != FR_OK) break;
 8008a6a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d128      	bne.n	8008ac6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	69f8      	ldr	r0, [r7, #28]
 8008a7c:	f7fe ff26 	bl	80078cc <move_window>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d11b      	bne.n	8008ac6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	2220      	movs	r2, #32
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fd14 	bl	80074c4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a18      	ldr	r0, [r3, #32]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3324      	adds	r3, #36	; 0x24
 8008aa4:	220b      	movs	r2, #11
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f7fe fcec 	bl	8007484 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	330c      	adds	r3, #12
 8008ab8:	f002 0218 	and.w	r2, r2, #24
 8008abc:	b2d2      	uxtb	r2, r2
 8008abe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3730      	adds	r7, #48	; 0x30
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	4ec4ec4f 	.word	0x4ec4ec4f

08008ad8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	61ba      	str	r2, [r7, #24]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	4413      	add	r3, r2
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b08:	2b1f      	cmp	r3, #31
 8008b0a:	d940      	bls.n	8008b8e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8008b10:	d006      	beq.n	8008b20 <create_name+0x48>
 8008b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b14:	2b5c      	cmp	r3, #92	; 0x5c
 8008b16:	d110      	bne.n	8008b3a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b18:	e002      	b.n	8008b20 <create_name+0x48>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	61bb      	str	r3, [r7, #24]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	4413      	add	r3, r2
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b2f      	cmp	r3, #47	; 0x2f
 8008b2a:	d0f6      	beq.n	8008b1a <create_name+0x42>
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	4413      	add	r3, r2
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b5c      	cmp	r3, #92	; 0x5c
 8008b36:	d0f0      	beq.n	8008b1a <create_name+0x42>
			break;
 8008b38:	e02a      	b.n	8008b90 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2bfe      	cmp	r3, #254	; 0xfe
 8008b3e:	d901      	bls.n	8008b44 <create_name+0x6c>
 8008b40:	2306      	movs	r3, #6
 8008b42:	e177      	b.n	8008e34 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 feaa 	bl	800a8a8 <ff_convert>
 8008b54:	4603      	mov	r3, r0
 8008b56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <create_name+0x8a>
 8008b5e:	2306      	movs	r3, #6
 8008b60:	e168      	b.n	8008e34 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b64:	2b7f      	cmp	r3, #127	; 0x7f
 8008b66:	d809      	bhi.n	8008b7c <create_name+0xa4>
 8008b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	48b3      	ldr	r0, [pc, #716]	; (8008e3c <create_name+0x364>)
 8008b6e:	f7fe fce9 	bl	8007544 <chk_chr>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <create_name+0xa4>
 8008b78:	2306      	movs	r3, #6
 8008b7a:	e15b      	b.n	8008e34 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	617a      	str	r2, [r7, #20]
 8008b82:	005b      	lsls	r3, r3, #1
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4413      	add	r3, r2
 8008b88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b8a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b8c:	e7b4      	b.n	8008af8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b8e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	441a      	add	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b9c:	2b1f      	cmp	r3, #31
 8008b9e:	d801      	bhi.n	8008ba4 <create_name+0xcc>
 8008ba0:	2304      	movs	r3, #4
 8008ba2:	e000      	b.n	8008ba6 <create_name+0xce>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008baa:	e011      	b.n	8008bd0 <create_name+0xf8>
		w = lfn[di - 1];
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008bbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d002      	beq.n	8008bca <create_name+0xf2>
 8008bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc8:	d106      	bne.n	8008bd8 <create_name+0x100>
		di--;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1ea      	bne.n	8008bac <create_name+0xd4>
 8008bd6:	e000      	b.n	8008bda <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008bd8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	005b      	lsls	r3, r3, #1
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	4413      	add	r3, r2
 8008be2:	2200      	movs	r2, #0
 8008be4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <create_name+0x118>
 8008bec:	2306      	movs	r3, #6
 8008bee:	e121      	b.n	8008e34 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3324      	adds	r3, #36	; 0x24
 8008bf4:	220b      	movs	r2, #11
 8008bf6:	2120      	movs	r1, #32
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fc63 	bl	80074c4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]
 8008c02:	e002      	b.n	8008c0a <create_name+0x132>
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	d0f5      	beq.n	8008c04 <create_name+0x12c>
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	4413      	add	r3, r2
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	2b2e      	cmp	r3, #46	; 0x2e
 8008c24:	d0ee      	beq.n	8008c04 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <create_name+0x168>
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c30:	f043 0303 	orr.w	r3, r3, #3
 8008c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008c38:	e002      	b.n	8008c40 <create_name+0x168>
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d009      	beq.n	8008c5a <create_name+0x182>
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	005b      	lsls	r3, r3, #1
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	2b2e      	cmp	r3, #46	; 0x2e
 8008c58:	d1ef      	bne.n	8008c3a <create_name+0x162>

	i = b = 0; ni = 8;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008c60:	2300      	movs	r3, #0
 8008c62:	623b      	str	r3, [r7, #32]
 8008c64:	2308      	movs	r3, #8
 8008c66:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	61ba      	str	r2, [r7, #24]
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8090 	beq.w	8008da0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d006      	beq.n	8008c94 <create_name+0x1bc>
 8008c86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c88:	2b2e      	cmp	r3, #46	; 0x2e
 8008c8a:	d10a      	bne.n	8008ca2 <create_name+0x1ca>
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d006      	beq.n	8008ca2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c98:	f043 0303 	orr.w	r3, r3, #3
 8008c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008ca0:	e07d      	b.n	8008d9e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008ca2:	6a3a      	ldr	r2, [r7, #32]
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d203      	bcs.n	8008cb2 <create_name+0x1da>
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d123      	bne.n	8008cfa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b0b      	cmp	r3, #11
 8008cb6:	d106      	bne.n	8008cc6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cbc:	f043 0303 	orr.w	r3, r3, #3
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008cc4:	e06f      	b.n	8008da6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d005      	beq.n	8008cda <create_name+0x202>
 8008cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd2:	f043 0303 	orr.w	r3, r3, #3
 8008cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d860      	bhi.n	8008da4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	623b      	str	r3, [r7, #32]
 8008cea:	230b      	movs	r3, #11
 8008cec:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008cf8:	e051      	b.n	8008d9e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008cfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8008cfe:	d914      	bls.n	8008d2a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f001 fdcf 	bl	800a8a8 <ff_convert>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008d0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d004      	beq.n	8008d1e <create_name+0x246>
 8008d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d16:	3b80      	subs	r3, #128	; 0x80
 8008d18:	4a49      	ldr	r2, [pc, #292]	; (8008e40 <create_name+0x368>)
 8008d1a:	5cd3      	ldrb	r3, [r2, r3]
 8008d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d22:	f043 0302 	orr.w	r3, r3, #2
 8008d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <create_name+0x268>
 8008d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d32:	4619      	mov	r1, r3
 8008d34:	4843      	ldr	r0, [pc, #268]	; (8008e44 <create_name+0x36c>)
 8008d36:	f7fe fc05 	bl	8007544 <chk_chr>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d008      	beq.n	8008d52 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008d40:	235f      	movs	r3, #95	; 0x5f
 8008d42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d48:	f043 0303 	orr.w	r3, r3, #3
 8008d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d50:	e01b      	b.n	8008d8a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d54:	2b40      	cmp	r3, #64	; 0x40
 8008d56:	d909      	bls.n	8008d6c <create_name+0x294>
 8008d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d5a:	2b5a      	cmp	r3, #90	; 0x5a
 8008d5c:	d806      	bhi.n	8008d6c <create_name+0x294>
					b |= 2;
 8008d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d62:	f043 0302 	orr.w	r3, r3, #2
 8008d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d6a:	e00e      	b.n	8008d8a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d6e:	2b60      	cmp	r3, #96	; 0x60
 8008d70:	d90b      	bls.n	8008d8a <create_name+0x2b2>
 8008d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d74:	2b7a      	cmp	r3, #122	; 0x7a
 8008d76:	d808      	bhi.n	8008d8a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008d78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d7c:	f043 0301 	orr.w	r3, r3, #1
 8008d80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d86:	3b20      	subs	r3, #32
 8008d88:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	623a      	str	r2, [r7, #32]
 8008d90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d92:	b2d1      	uxtb	r1, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	460a      	mov	r2, r1
 8008d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008d9e:	e763      	b.n	8008c68 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8008da4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008dac:	2be5      	cmp	r3, #229	; 0xe5
 8008dae:	d103      	bne.n	8008db8 <create_name+0x2e0>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2205      	movs	r2, #5
 8008db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	2b08      	cmp	r3, #8
 8008dbc:	d104      	bne.n	8008dc8 <create_name+0x2f0>
 8008dbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008dc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dcc:	f003 030c 	and.w	r3, r3, #12
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	d005      	beq.n	8008de0 <create_name+0x308>
 8008dd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d105      	bne.n	8008dec <create_name+0x314>
 8008de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008de4:	f043 0302 	orr.w	r3, r3, #2
 8008de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008dec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d117      	bne.n	8008e28 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008dfc:	f003 0303 	and.w	r3, r3, #3
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d105      	bne.n	8008e10 <create_name+0x338>
 8008e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e08:	f043 0310 	orr.w	r3, r3, #16
 8008e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008e14:	f003 030c 	and.w	r3, r3, #12
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d105      	bne.n	8008e28 <create_name+0x350>
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e20:	f043 0308 	orr.w	r3, r3, #8
 8008e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008e2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8008e32:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3728      	adds	r7, #40	; 0x28
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	0800aaf0 	.word	0x0800aaf0
 8008e40:	0800ab8c 	.word	0x0800ab8c
 8008e44:	0800aafc 	.word	0x0800aafc

08008e48 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e5c:	e002      	b.n	8008e64 <follow_path+0x1c>
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	3301      	adds	r3, #1
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b2f      	cmp	r3, #47	; 0x2f
 8008e6a:	d0f8      	beq.n	8008e5e <follow_path+0x16>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b5c      	cmp	r3, #92	; 0x5c
 8008e72:	d0f4      	beq.n	8008e5e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	2200      	movs	r2, #0
 8008e78:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b1f      	cmp	r3, #31
 8008e80:	d80a      	bhi.n	8008e98 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2280      	movs	r2, #128	; 0x80
 8008e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7ff f8fd 	bl	800808c <dir_sdi>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
 8008e96:	e048      	b.n	8008f2a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e98:	463b      	mov	r3, r7
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff fe1b 	bl	8008ad8 <create_name>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ea6:	7dfb      	ldrb	r3, [r7, #23]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d139      	bne.n	8008f20 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fc5b 	bl	8008768 <dir_find>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ebc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d12c      	bne.n	8008f24 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d127      	bne.n	8008f24 <follow_path+0xdc>
 8008ed4:	2305      	movs	r3, #5
 8008ed6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ed8:	e024      	b.n	8008f24 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008eda:	7afb      	ldrb	r3, [r7, #11]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d121      	bne.n	8008f28 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	799b      	ldrb	r3, [r3, #6]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ef0:	2305      	movs	r3, #5
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e019      	b.n	8008f2a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	8992      	ldrh	r2, [r2, #12]
 8008f04:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f08:	fb02 f200 	mul.w	r2, r2, r0
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	440b      	add	r3, r1
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7ff fa60 	bl	80083d8 <ld_clust>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f1e:	e7bb      	b.n	8008e98 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f20:	bf00      	nop
 8008f22:	e002      	b.n	8008f2a <follow_path+0xe2>
				break;
 8008f24:	bf00      	nop
 8008f26:	e000      	b.n	8008f2a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f28:	bf00      	nop
			}
		}
	}

	return res;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f40:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d031      	beq.n	8008fae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e002      	b.n	8008f58 <get_ldnumber+0x24>
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	3301      	adds	r3, #1
 8008f56:	617b      	str	r3, [r7, #20]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b1f      	cmp	r3, #31
 8008f5e:	d903      	bls.n	8008f68 <get_ldnumber+0x34>
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b3a      	cmp	r3, #58	; 0x3a
 8008f66:	d1f4      	bne.n	8008f52 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b3a      	cmp	r3, #58	; 0x3a
 8008f6e:	d11c      	bne.n	8008faa <get_ldnumber+0x76>
			tp = *path;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	60fa      	str	r2, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	3b30      	subs	r3, #48	; 0x30
 8008f80:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b09      	cmp	r3, #9
 8008f86:	d80e      	bhi.n	8008fa6 <get_ldnumber+0x72>
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d10a      	bne.n	8008fa6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d107      	bne.n	8008fa6 <get_ldnumber+0x72>
					vol = (int)i;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	e002      	b.n	8008fb0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008fae:	693b      	ldr	r3, [r7, #16]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr
	...

08008fbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	70da      	strb	r2, [r3, #3]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe fc78 	bl	80078cc <move_window>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <check_fs+0x2a>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	e038      	b.n	8009058 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	3338      	adds	r3, #56	; 0x38
 8008fea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe f9ca 	bl	8007388 <ld_word>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d001      	beq.n	8009004 <check_fs+0x48>
 8009000:	2303      	movs	r3, #3
 8009002:	e029      	b.n	8009058 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800900a:	2be9      	cmp	r3, #233	; 0xe9
 800900c:	d009      	beq.n	8009022 <check_fs+0x66>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009014:	2beb      	cmp	r3, #235	; 0xeb
 8009016:	d11e      	bne.n	8009056 <check_fs+0x9a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800901e:	2b90      	cmp	r3, #144	; 0x90
 8009020:	d119      	bne.n	8009056 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3338      	adds	r3, #56	; 0x38
 8009026:	3336      	adds	r3, #54	; 0x36
 8009028:	4618      	mov	r0, r3
 800902a:	f7fe f9c4 	bl	80073b6 <ld_dword>
 800902e:	4603      	mov	r3, r0
 8009030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009034:	4a0a      	ldr	r2, [pc, #40]	; (8009060 <check_fs+0xa4>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d101      	bne.n	800903e <check_fs+0x82>
 800903a:	2300      	movs	r3, #0
 800903c:	e00c      	b.n	8009058 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	3338      	adds	r3, #56	; 0x38
 8009042:	3352      	adds	r3, #82	; 0x52
 8009044:	4618      	mov	r0, r3
 8009046:	f7fe f9b6 	bl	80073b6 <ld_dword>
 800904a:	4603      	mov	r3, r0
 800904c:	4a05      	ldr	r2, [pc, #20]	; (8009064 <check_fs+0xa8>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d101      	bne.n	8009056 <check_fs+0x9a>
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009056:	2302      	movs	r3, #2
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	00544146 	.word	0x00544146
 8009064:	33544146 	.word	0x33544146

08009068 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b096      	sub	sp, #88	; 0x58
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	4613      	mov	r3, r2
 8009074:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ff59 	bl	8008f34 <get_ldnumber>
 8009082:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	2b00      	cmp	r3, #0
 8009088:	da01      	bge.n	800908e <find_volume+0x26>
 800908a:	230b      	movs	r3, #11
 800908c:	e268      	b.n	8009560 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800908e:	4ab0      	ldr	r2, [pc, #704]	; (8009350 <find_volume+0x2e8>)
 8009090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <find_volume+0x3a>
 800909e:	230c      	movs	r3, #12
 80090a0:	e25e      	b.n	8009560 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01a      	beq.n	80090ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	785b      	ldrb	r3, [r3, #1]
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe f8c5 	bl	800724c <disk_status>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80090c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10c      	bne.n	80090ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d007      	beq.n	80090ea <find_volume+0x82>
 80090da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80090e6:	230a      	movs	r3, #10
 80090e8:	e23a      	b.n	8009560 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80090ea:	2300      	movs	r3, #0
 80090ec:	e238      	b.n	8009560 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80090ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe f8bd 	bl	8007280 <disk_initialize>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800910c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009118:	2303      	movs	r3, #3
 800911a:	e221      	b.n	8009560 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d007      	beq.n	8009132 <find_volume+0xca>
 8009122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800912e:	230a      	movs	r3, #10
 8009130:	e216      	b.n	8009560 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	7858      	ldrb	r0, [r3, #1]
 8009136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009138:	330c      	adds	r3, #12
 800913a:	461a      	mov	r2, r3
 800913c:	2102      	movs	r1, #2
 800913e:	f7fe f905 	bl	800734c <disk_ioctl>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <find_volume+0xe4>
 8009148:	2301      	movs	r3, #1
 800914a:	e209      	b.n	8009560 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800914c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914e:	899b      	ldrh	r3, [r3, #12]
 8009150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009154:	d80d      	bhi.n	8009172 <find_volume+0x10a>
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800915e:	d308      	bcc.n	8009172 <find_volume+0x10a>
 8009160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009162:	899b      	ldrh	r3, [r3, #12]
 8009164:	461a      	mov	r2, r3
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	899b      	ldrh	r3, [r3, #12]
 800916a:	3b01      	subs	r3, #1
 800916c:	4013      	ands	r3, r2
 800916e:	2b00      	cmp	r3, #0
 8009170:	d001      	beq.n	8009176 <find_volume+0x10e>
 8009172:	2301      	movs	r3, #1
 8009174:	e1f4      	b.n	8009560 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800917a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800917c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800917e:	f7ff ff1d 	bl	8008fbc <check_fs>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009188:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800918c:	2b02      	cmp	r3, #2
 800918e:	d14b      	bne.n	8009228 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009190:	2300      	movs	r3, #0
 8009192:	643b      	str	r3, [r7, #64]	; 0x40
 8009194:	e01f      	b.n	80091d6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800919c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80091a4:	4413      	add	r3, r2
 80091a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80091a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091aa:	3304      	adds	r3, #4
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <find_volume+0x158>
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	3308      	adds	r3, #8
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f8fd 	bl	80073b6 <ld_dword>
 80091bc:	4602      	mov	r2, r0
 80091be:	e000      	b.n	80091c2 <find_volume+0x15a>
 80091c0:	2200      	movs	r2, #0
 80091c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80091ca:	440b      	add	r3, r1
 80091cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d2:	3301      	adds	r3, #1
 80091d4:	643b      	str	r3, [r7, #64]	; 0x40
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d9dc      	bls.n	8009196 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80091dc:	2300      	movs	r3, #0
 80091de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80091e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <find_volume+0x184>
 80091e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e8:	3b01      	subs	r3, #1
 80091ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80091ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80091f4:	4413      	add	r3, r2
 80091f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80091fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <find_volume+0x1a6>
 8009202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009206:	f7ff fed9 	bl	8008fbc <check_fs>
 800920a:	4603      	mov	r3, r0
 800920c:	e000      	b.n	8009210 <find_volume+0x1a8>
 800920e:	2303      	movs	r3, #3
 8009210:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009218:	2b01      	cmp	r3, #1
 800921a:	d905      	bls.n	8009228 <find_volume+0x1c0>
 800921c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800921e:	3301      	adds	r3, #1
 8009220:	643b      	str	r3, [r7, #64]	; 0x40
 8009222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009224:	2b03      	cmp	r3, #3
 8009226:	d9e1      	bls.n	80091ec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800922c:	2b04      	cmp	r3, #4
 800922e:	d101      	bne.n	8009234 <find_volume+0x1cc>
 8009230:	2301      	movs	r3, #1
 8009232:	e195      	b.n	8009560 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009234:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009238:	2b01      	cmp	r3, #1
 800923a:	d901      	bls.n	8009240 <find_volume+0x1d8>
 800923c:	230d      	movs	r3, #13
 800923e:	e18f      	b.n	8009560 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	3338      	adds	r3, #56	; 0x38
 8009244:	330b      	adds	r3, #11
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe f89e 	bl	8007388 <ld_word>
 800924c:	4603      	mov	r3, r0
 800924e:	461a      	mov	r2, r3
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	899b      	ldrh	r3, [r3, #12]
 8009254:	429a      	cmp	r2, r3
 8009256:	d001      	beq.n	800925c <find_volume+0x1f4>
 8009258:	230d      	movs	r3, #13
 800925a:	e181      	b.n	8009560 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	3338      	adds	r3, #56	; 0x38
 8009260:	3316      	adds	r3, #22
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe f890 	bl	8007388 <ld_word>
 8009268:	4603      	mov	r3, r0
 800926a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800926c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <find_volume+0x218>
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	3338      	adds	r3, #56	; 0x38
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe f89c 	bl	80073b6 <ld_dword>
 800927e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009284:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	789b      	ldrb	r3, [r3, #2]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d005      	beq.n	80092a4 <find_volume+0x23c>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	789b      	ldrb	r3, [r3, #2]
 800929c:	2b02      	cmp	r3, #2
 800929e:	d001      	beq.n	80092a4 <find_volume+0x23c>
 80092a0:	230d      	movs	r3, #13
 80092a2:	e15d      	b.n	8009560 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	789b      	ldrb	r3, [r3, #2]
 80092a8:	461a      	mov	r2, r3
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
 80092b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	895b      	ldrh	r3, [r3, #10]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d008      	beq.n	80092d8 <find_volume+0x270>
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	895b      	ldrh	r3, [r3, #10]
 80092ca:	461a      	mov	r2, r3
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	895b      	ldrh	r3, [r3, #10]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	4013      	ands	r3, r2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <find_volume+0x274>
 80092d8:	230d      	movs	r3, #13
 80092da:	e141      	b.n	8009560 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	3338      	adds	r3, #56	; 0x38
 80092e0:	3311      	adds	r3, #17
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe f850 	bl	8007388 <ld_word>
 80092e8:	4603      	mov	r3, r0
 80092ea:	461a      	mov	r2, r3
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	891b      	ldrh	r3, [r3, #8]
 80092f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f6:	8992      	ldrh	r2, [r2, #12]
 80092f8:	0952      	lsrs	r2, r2, #5
 80092fa:	b292      	uxth	r2, r2
 80092fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009300:	fb02 f201 	mul.w	r2, r2, r1
 8009304:	1a9b      	subs	r3, r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <find_volume+0x2a8>
 800930c:	230d      	movs	r3, #13
 800930e:	e127      	b.n	8009560 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	3338      	adds	r3, #56	; 0x38
 8009314:	3313      	adds	r3, #19
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe f836 	bl	8007388 <ld_word>
 800931c:	4603      	mov	r3, r0
 800931e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <find_volume+0x2cc>
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	3338      	adds	r3, #56	; 0x38
 800932a:	3320      	adds	r3, #32
 800932c:	4618      	mov	r0, r3
 800932e:	f7fe f842 	bl	80073b6 <ld_dword>
 8009332:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009336:	3338      	adds	r3, #56	; 0x38
 8009338:	330e      	adds	r3, #14
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe f824 	bl	8007388 <ld_word>
 8009340:	4603      	mov	r3, r0
 8009342:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009344:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <find_volume+0x2ec>
 800934a:	230d      	movs	r3, #13
 800934c:	e108      	b.n	8009560 <find_volume+0x4f8>
 800934e:	bf00      	nop
 8009350:	20000110 	.word	0x20000110

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009358:	4413      	add	r3, r2
 800935a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800935c:	8911      	ldrh	r1, [r2, #8]
 800935e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009360:	8992      	ldrh	r2, [r2, #12]
 8009362:	0952      	lsrs	r2, r2, #5
 8009364:	b292      	uxth	r2, r2
 8009366:	fbb1 f2f2 	udiv	r2, r1, r2
 800936a:	b292      	uxth	r2, r2
 800936c:	4413      	add	r3, r2
 800936e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	429a      	cmp	r2, r3
 8009376:	d201      	bcs.n	800937c <find_volume+0x314>
 8009378:	230d      	movs	r3, #13
 800937a:	e0f1      	b.n	8009560 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800937c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009384:	8952      	ldrh	r2, [r2, #10]
 8009386:	fbb3 f3f2 	udiv	r3, r3, r2
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <find_volume+0x32e>
 8009392:	230d      	movs	r3, #13
 8009394:	e0e4      	b.n	8009560 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8009396:	2303      	movs	r3, #3
 8009398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d802      	bhi.n	80093ac <find_volume+0x344>
 80093a6:	2302      	movs	r3, #2
 80093a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d802      	bhi.n	80093bc <find_volume+0x354>
 80093b6:	2301      	movs	r3, #1
 80093b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1c9a      	adds	r2, r3, #2
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093c8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80093ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80093cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ce:	441a      	add	r2, r3
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80093d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	441a      	add	r2, r3
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80093de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d11e      	bne.n	8009424 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	3338      	adds	r3, #56	; 0x38
 80093ea:	332a      	adds	r3, #42	; 0x2a
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fd ffcb 	bl	8007388 <ld_word>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d001      	beq.n	80093fc <find_volume+0x394>
 80093f8:	230d      	movs	r3, #13
 80093fa:	e0b1      	b.n	8009560 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	891b      	ldrh	r3, [r3, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <find_volume+0x3a0>
 8009404:	230d      	movs	r3, #13
 8009406:	e0ab      	b.n	8009560 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	3338      	adds	r3, #56	; 0x38
 800940c:	332c      	adds	r3, #44	; 0x2c
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd ffd1 	bl	80073b6 <ld_dword>
 8009414:	4602      	mov	r2, r0
 8009416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009418:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	647b      	str	r3, [r7, #68]	; 0x44
 8009422:	e01f      	b.n	8009464 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	891b      	ldrh	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <find_volume+0x3c8>
 800942c:	230d      	movs	r3, #13
 800942e:	e097      	b.n	8009560 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009436:	441a      	add	r2, r3
 8009438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800943c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009440:	2b02      	cmp	r3, #2
 8009442:	d103      	bne.n	800944c <find_volume+0x3e4>
 8009444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	e00a      	b.n	8009462 <find_volume+0x3fa>
 800944c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	4613      	mov	r3, r2
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	4413      	add	r3, r2
 8009456:	085a      	lsrs	r2, r3, #1
 8009458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800945a:	69db      	ldr	r3, [r3, #28]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009462:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	899b      	ldrh	r3, [r3, #12]
 800946c:	4619      	mov	r1, r3
 800946e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009470:	440b      	add	r3, r1
 8009472:	3b01      	subs	r3, #1
 8009474:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009476:	8989      	ldrh	r1, [r1, #12]
 8009478:	fbb3 f3f1 	udiv	r3, r3, r1
 800947c:	429a      	cmp	r2, r3
 800947e:	d201      	bcs.n	8009484 <find_volume+0x41c>
 8009480:	230d      	movs	r3, #13
 8009482:	e06d      	b.n	8009560 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	f04f 32ff 	mov.w	r2, #4294967295
 800948a:	619a      	str	r2, [r3, #24]
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	699a      	ldr	r2, [r3, #24]
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	2280      	movs	r2, #128	; 0x80
 8009498:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800949a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d149      	bne.n	8009536 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	3338      	adds	r3, #56	; 0x38
 80094a6:	3330      	adds	r3, #48	; 0x30
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd ff6d 	bl	8007388 <ld_word>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d140      	bne.n	8009536 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80094b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b6:	3301      	adds	r3, #1
 80094b8:	4619      	mov	r1, r3
 80094ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094bc:	f7fe fa06 	bl	80078cc <move_window>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d137      	bne.n	8009536 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	2200      	movs	r2, #0
 80094ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	3338      	adds	r3, #56	; 0x38
 80094d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd ff57 	bl	8007388 <ld_word>
 80094da:	4603      	mov	r3, r0
 80094dc:	461a      	mov	r2, r3
 80094de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d127      	bne.n	8009536 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80094e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e8:	3338      	adds	r3, #56	; 0x38
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd ff63 	bl	80073b6 <ld_dword>
 80094f0:	4603      	mov	r3, r0
 80094f2:	4a1d      	ldr	r2, [pc, #116]	; (8009568 <find_volume+0x500>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d11e      	bne.n	8009536 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fa:	3338      	adds	r3, #56	; 0x38
 80094fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009500:	4618      	mov	r0, r3
 8009502:	f7fd ff58 	bl	80073b6 <ld_dword>
 8009506:	4603      	mov	r3, r0
 8009508:	4a18      	ldr	r2, [pc, #96]	; (800956c <find_volume+0x504>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d113      	bne.n	8009536 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800950e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009510:	3338      	adds	r3, #56	; 0x38
 8009512:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009516:	4618      	mov	r0, r3
 8009518:	f7fd ff4d 	bl	80073b6 <ld_dword>
 800951c:	4602      	mov	r2, r0
 800951e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009520:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	3338      	adds	r3, #56	; 0x38
 8009526:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800952a:	4618      	mov	r0, r3
 800952c:	f7fd ff43 	bl	80073b6 <ld_dword>
 8009530:	4602      	mov	r2, r0
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009538:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800953c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800953e:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <find_volume+0x508>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	3301      	adds	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <find_volume+0x508>)
 8009548:	801a      	strh	r2, [r3, #0]
 800954a:	4b09      	ldr	r3, [pc, #36]	; (8009570 <find_volume+0x508>)
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	4a07      	ldr	r2, [pc, #28]	; (8009574 <find_volume+0x50c>)
 8009556:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009558:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800955a:	f7fe f94f 	bl	80077fc <clear_lock>
#endif
	return FR_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3758      	adds	r7, #88	; 0x58
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	41615252 	.word	0x41615252
 800956c:	61417272 	.word	0x61417272
 8009570:	20000114 	.word	0x20000114
 8009574:	20000138 	.word	0x20000138

08009578 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
 8009580:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009582:	2309      	movs	r3, #9
 8009584:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d01c      	beq.n	80095c6 <validate+0x4e>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d018      	beq.n	80095c6 <validate+0x4e>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d013      	beq.n	80095c6 <validate+0x4e>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	889a      	ldrh	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	88db      	ldrh	r3, [r3, #6]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d10c      	bne.n	80095c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	785b      	ldrb	r3, [r3, #1]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fd fe4a 	bl	800724c <disk_status>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d101      	bne.n	80095c6 <validate+0x4e>
			res = FR_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d102      	bne.n	80095d2 <validate+0x5a>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	e000      	b.n	80095d4 <validate+0x5c>
 80095d2:	2300      	movs	r3, #0
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	6013      	str	r3, [r2, #0]
	return res;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095f6:	f107 0310 	add.w	r3, r7, #16
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fc9a 	bl	8008f34 <get_ldnumber>
 8009600:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	da01      	bge.n	800960c <f_mount+0x28>
 8009608:	230b      	movs	r3, #11
 800960a:	e02b      	b.n	8009664 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800960c:	4a17      	ldr	r2, [pc, #92]	; (800966c <f_mount+0x88>)
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009614:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800961c:	69b8      	ldr	r0, [r7, #24]
 800961e:	f7fe f8ed 	bl	80077fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	490d      	ldr	r1, [pc, #52]	; (800966c <f_mount+0x88>)
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <f_mount+0x66>
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d001      	beq.n	800964e <f_mount+0x6a>
 800964a:	2300      	movs	r3, #0
 800964c:	e00a      	b.n	8009664 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800964e:	f107 010c 	add.w	r1, r7, #12
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	2200      	movs	r2, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff fd05 	bl	8009068 <find_volume>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	3720      	adds	r7, #32
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20000110 	.word	0x20000110

08009670 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b09a      	sub	sp, #104	; 0x68
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <f_open+0x18>
 8009684:	2309      	movs	r3, #9
 8009686:	e1bb      	b.n	8009a00 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800968e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009690:	79fa      	ldrb	r2, [r7, #7]
 8009692:	f107 0114 	add.w	r1, r7, #20
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fce4 	bl	8009068 <find_volume>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80096a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f040 819f 	bne.w	80099ee <f_open+0x37e>
		dj.obj.fs = fs;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	f107 0318 	add.w	r3, r7, #24
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff fbc3 	bl	8008e48 <follow_path>
 80096c2:	4603      	mov	r3, r0
 80096c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80096c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d11a      	bne.n	8009706 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80096d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80096d4:	b25b      	sxtb	r3, r3
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	da03      	bge.n	80096e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80096da:	2306      	movs	r3, #6
 80096dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096e0:	e011      	b.n	8009706 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	f023 0301 	bic.w	r3, r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	bf14      	ite	ne
 80096ec:	2301      	movne	r3, #1
 80096ee:	2300      	moveq	r3, #0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	461a      	mov	r2, r3
 80096f4:	f107 0318 	add.w	r3, r7, #24
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fd ff3c 	bl	8007578 <chk_lock>
 8009700:	4603      	mov	r3, r0
 8009702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	f003 031c 	and.w	r3, r3, #28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d07f      	beq.n	8009810 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009714:	2b00      	cmp	r3, #0
 8009716:	d017      	beq.n	8009748 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800971c:	2b04      	cmp	r3, #4
 800971e:	d10e      	bne.n	800973e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009720:	f7fd ff84 	bl	800762c <enq_lock>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <f_open+0xc8>
 800972a:	f107 0318 	add.w	r3, r7, #24
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff f8da 	bl	80088e8 <dir_register>
 8009734:	4603      	mov	r3, r0
 8009736:	e000      	b.n	800973a <f_open+0xca>
 8009738:	2312      	movs	r3, #18
 800973a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	f043 0308 	orr.w	r3, r3, #8
 8009744:	71fb      	strb	r3, [r7, #7]
 8009746:	e010      	b.n	800976a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009748:	7fbb      	ldrb	r3, [r7, #30]
 800974a:	f003 0311 	and.w	r3, r3, #17
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <f_open+0xea>
					res = FR_DENIED;
 8009752:	2307      	movs	r3, #7
 8009754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009758:	e007      	b.n	800976a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800975a:	79fb      	ldrb	r3, [r7, #7]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <f_open+0xfa>
 8009764:	2308      	movs	r3, #8
 8009766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800976a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800976e:	2b00      	cmp	r3, #0
 8009770:	d168      	bne.n	8009844 <f_open+0x1d4>
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	f003 0308 	and.w	r3, r3, #8
 8009778:	2b00      	cmp	r3, #0
 800977a:	d063      	beq.n	8009844 <f_open+0x1d4>
				dw = GET_FATTIME();
 800977c:	f7fd fd0a 	bl	8007194 <get_fattime>
 8009780:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	330e      	adds	r3, #14
 8009786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009788:	4618      	mov	r0, r3
 800978a:	f7fd fe50 	bl	800742e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	3316      	adds	r3, #22
 8009792:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd fe4a 	bl	800742e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	330b      	adds	r3, #11
 800979e:	2220      	movs	r2, #32
 80097a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097a6:	4611      	mov	r1, r2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fe15 	bl	80083d8 <ld_clust>
 80097ae:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097b4:	2200      	movs	r2, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fe2d 	bl	8008416 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	331c      	adds	r3, #28
 80097c0:	2100      	movs	r1, #0
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fd fe33 	bl	800742e <st_dword>
					fs->wflag = 1;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	2201      	movs	r2, #1
 80097cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80097ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d037      	beq.n	8009844 <f_open+0x1d4>
						dw = fs->winsect;
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80097da:	f107 0318 	add.w	r3, r7, #24
 80097de:	2200      	movs	r2, #0
 80097e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fb1e 	bl	8007e24 <remove_chain>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80097ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d126      	bne.n	8009844 <f_open+0x1d4>
							res = move_window(fs, dw);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe f866 	bl	80078cc <move_window>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800980a:	3a01      	subs	r2, #1
 800980c:	615a      	str	r2, [r3, #20]
 800980e:	e019      	b.n	8009844 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009810:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009814:	2b00      	cmp	r3, #0
 8009816:	d115      	bne.n	8009844 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009818:	7fbb      	ldrb	r3, [r7, #30]
 800981a:	f003 0310 	and.w	r3, r3, #16
 800981e:	2b00      	cmp	r3, #0
 8009820:	d003      	beq.n	800982a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009822:	2304      	movs	r3, #4
 8009824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009828:	e00c      	b.n	8009844 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	2b00      	cmp	r3, #0
 8009832:	d007      	beq.n	8009844 <f_open+0x1d4>
 8009834:	7fbb      	ldrb	r3, [r7, #30]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <f_open+0x1d4>
						res = FR_DENIED;
 800983e:	2307      	movs	r3, #7
 8009840:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009844:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009848:	2b00      	cmp	r3, #0
 800984a:	d128      	bne.n	800989e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	f003 0308 	and.w	r3, r3, #8
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	461a      	mov	r2, r3
 800987e:	f107 0318 	add.w	r3, r7, #24
 8009882:	4611      	mov	r1, r2
 8009884:	4618      	mov	r0, r3
 8009886:	f7fd fef1 	bl	800766c <inc_lock>
 800988a:	4602      	mov	r2, r0
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <f_open+0x22e>
 8009898:	2302      	movs	r3, #2
 800989a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800989e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 80a3 	bne.w	80099ee <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ac:	4611      	mov	r1, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fe fd92 	bl	80083d8 <ld_clust>
 80098b4:	4602      	mov	r2, r0
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	331c      	adds	r3, #28
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd fd79 	bl	80073b6 <ld_dword>
 80098c4:	4602      	mov	r2, r0
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	88da      	ldrh	r2, [r3, #6]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	79fa      	ldrb	r2, [r7, #7]
 80098e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2200      	movs	r2, #0
 80098ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3330      	adds	r3, #48	; 0x30
 80098fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80098fe:	2100      	movs	r1, #0
 8009900:	4618      	mov	r0, r3
 8009902:	f7fd fddf 	bl	80074c4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	f003 0320 	and.w	r3, r3, #32
 800990c:	2b00      	cmp	r3, #0
 800990e:	d06e      	beq.n	80099ee <f_open+0x37e>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d06a      	beq.n	80099ee <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	895b      	ldrh	r3, [r3, #10]
 8009924:	461a      	mov	r2, r3
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	fb03 f302 	mul.w	r3, r3, r2
 800992e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800993c:	e016      	b.n	800996c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe f87e 	bl	8007a44 <get_fat>
 8009948:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800994a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800994c:	2b01      	cmp	r3, #1
 800994e:	d802      	bhi.n	8009956 <f_open+0x2e6>
 8009950:	2302      	movs	r3, #2
 8009952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995c:	d102      	bne.n	8009964 <f_open+0x2f4>
 800995e:	2301      	movs	r3, #1
 8009960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009968:	1ad3      	subs	r3, r2, r3
 800996a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800996c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009970:	2b00      	cmp	r3, #0
 8009972:	d103      	bne.n	800997c <f_open+0x30c>
 8009974:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009978:	429a      	cmp	r2, r3
 800997a:	d8e0      	bhi.n	800993e <f_open+0x2ce>
				}
				fp->clust = clst;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009980:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009982:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009986:	2b00      	cmp	r3, #0
 8009988:	d131      	bne.n	80099ee <f_open+0x37e>
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	899b      	ldrh	r3, [r3, #12]
 800998e:	461a      	mov	r2, r3
 8009990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009992:	fbb3 f1f2 	udiv	r1, r3, r2
 8009996:	fb02 f201 	mul.w	r2, r2, r1
 800999a:	1a9b      	subs	r3, r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d026      	beq.n	80099ee <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe f82f 	bl	8007a08 <clust2sect>
 80099aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80099ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d103      	bne.n	80099ba <f_open+0x34a>
						res = FR_INT_ERR;
 80099b2:	2302      	movs	r3, #2
 80099b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80099b8:	e019      	b.n	80099ee <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	899b      	ldrh	r3, [r3, #12]
 80099be:	461a      	mov	r2, r3
 80099c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80099c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c8:	441a      	add	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	7858      	ldrb	r0, [r3, #1]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6a1a      	ldr	r2, [r3, #32]
 80099dc:	2301      	movs	r3, #1
 80099de:	f7fd fc75 	bl	80072cc <disk_read>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <f_open+0x37e>
 80099e8:	2301      	movs	r3, #1
 80099ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80099ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <f_open+0x38c>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80099fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3768      	adds	r7, #104	; 0x68
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08c      	sub	sp, #48	; 0x30
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f107 0210 	add.w	r2, r7, #16
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fda5 	bl	8009578 <validate>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d107      	bne.n	8009a4c <f_write+0x44>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	7d5b      	ldrb	r3, [r3, #21]
 8009a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <f_write+0x4a>
 8009a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a50:	e16a      	b.n	8009d28 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	7d1b      	ldrb	r3, [r3, #20]
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <f_write+0x5a>
 8009a5e:	2307      	movs	r3, #7
 8009a60:	e162      	b.n	8009d28 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	441a      	add	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	f080 814c 	bcs.w	8009d0c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	43db      	mvns	r3, r3
 8009a7a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a7c:	e146      	b.n	8009d0c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	693a      	ldr	r2, [r7, #16]
 8009a84:	8992      	ldrh	r2, [r2, #12]
 8009a86:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a8a:	fb02 f201 	mul.w	r2, r2, r1
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 80f1 	bne.w	8009c78 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	8992      	ldrh	r2, [r2, #12]
 8009a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	8952      	ldrh	r2, [r2, #10]
 8009aa6:	3a01      	subs	r2, #1
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d143      	bne.n	8009b3a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10c      	bne.n	8009ad4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d11a      	bne.n	8009afc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7fe fa0f 	bl	8007eee <create_chain>
 8009ad0:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ad2:	e013      	b.n	8009afc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f7fe fa9b 	bl	800801e <clmt_clust>
 8009ae8:	62b8      	str	r0, [r7, #40]	; 0x28
 8009aea:	e007      	b.n	8009afc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fe f9fa 	bl	8007eee <create_chain>
 8009afa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 8109 	beq.w	8009d16 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d104      	bne.n	8009b14 <f_write+0x10c>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	755a      	strb	r2, [r3, #21]
 8009b10:	2302      	movs	r3, #2
 8009b12:	e109      	b.n	8009d28 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b1a:	d104      	bne.n	8009b26 <f_write+0x11e>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	755a      	strb	r2, [r3, #21]
 8009b22:	2301      	movs	r3, #1
 8009b24:	e100      	b.n	8009d28 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b2a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d102      	bne.n	8009b3a <f_write+0x132>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b38:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	7d1b      	ldrb	r3, [r3, #20]
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da18      	bge.n	8009b76 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	7858      	ldrb	r0, [r3, #1]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6a1a      	ldr	r2, [r3, #32]
 8009b52:	2301      	movs	r3, #1
 8009b54:	f7fd fbda 	bl	800730c <disk_write>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d004      	beq.n	8009b68 <f_write+0x160>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	755a      	strb	r2, [r3, #21]
 8009b64:	2301      	movs	r3, #1
 8009b66:	e0df      	b.n	8009d28 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	7d1b      	ldrb	r3, [r3, #20]
 8009b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fd ff42 	bl	8007a08 <clust2sect>
 8009b84:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <f_write+0x18e>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	755a      	strb	r2, [r3, #21]
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0c8      	b.n	8009d28 <f_write+0x320>
			sect += csect;
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	899b      	ldrh	r3, [r3, #12]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009baa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d043      	beq.n	8009c3a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	8952      	ldrh	r2, [r2, #10]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d905      	bls.n	8009bcc <f_write+0x1c4>
					cc = fs->csize - csect;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	7858      	ldrb	r0, [r3, #1]
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	69f9      	ldr	r1, [r7, #28]
 8009bd6:	f7fd fb99 	bl	800730c <disk_write>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <f_write+0x1e2>
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	755a      	strb	r2, [r3, #21]
 8009be6:	2301      	movs	r3, #1
 8009be8:	e09e      	b.n	8009d28 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	6a3a      	ldr	r2, [r7, #32]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d918      	bls.n	8009c2a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6a1a      	ldr	r2, [r3, #32]
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	8992      	ldrh	r2, [r2, #12]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
 8009c0e:	69fa      	ldr	r2, [r7, #28]
 8009c10:	18d1      	adds	r1, r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	899b      	ldrh	r3, [r3, #12]
 8009c16:	461a      	mov	r2, r3
 8009c18:	f7fd fc34 	bl	8007484 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
 8009c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	899b      	ldrh	r3, [r3, #12]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	fb02 f303 	mul.w	r3, r2, r3
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009c38:	e04b      	b.n	8009cd2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d016      	beq.n	8009c72 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	699a      	ldr	r2, [r3, #24]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d210      	bcs.n	8009c72 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	7858      	ldrb	r0, [r3, #1]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	f7fd fb35 	bl	80072cc <disk_read>
 8009c62:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	755a      	strb	r2, [r3, #21]
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e05a      	b.n	8009d28 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	899b      	ldrh	r3, [r3, #12]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	8992      	ldrh	r2, [r2, #12]
 8009c86:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c8a:	fb02 f201 	mul.w	r2, r2, r1
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	1ac3      	subs	r3, r0, r3
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d901      	bls.n	8009ca0 <f_write+0x298>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	8992      	ldrh	r2, [r2, #12]
 8009cae:	fbb3 f0f2 	udiv	r0, r3, r2
 8009cb2:	fb02 f200 	mul.w	r2, r2, r0
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	440b      	add	r3, r1
 8009cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbc:	69f9      	ldr	r1, [r7, #28]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7fd fbe0 	bl	8007484 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	7d1b      	ldrb	r3, [r3, #20]
 8009cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009cd2:	69fa      	ldr	r2, [r7, #28]
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	4413      	add	r3, r2
 8009cd8:	61fb      	str	r3, [r7, #28]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	699a      	ldr	r2, [r3, #24]
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	441a      	add	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	619a      	str	r2, [r3, #24]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	699b      	ldr	r3, [r3, #24]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	bf38      	it	cc
 8009cf2:	461a      	movcc	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	60da      	str	r2, [r3, #12]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	441a      	add	r2, r3
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f47f aeb5 	bne.w	8009a7e <f_write+0x76>
 8009d14:	e000      	b.n	8009d18 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d16:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	7d1b      	ldrb	r3, [r3, #20]
 8009d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3730      	adds	r7, #48	; 0x30
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f107 0208 	add.w	r2, r7, #8
 8009d3e:	4611      	mov	r1, r2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fc19 	bl	8009578 <validate>
 8009d46:	4603      	mov	r3, r0
 8009d48:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d4a:	7dfb      	ldrb	r3, [r7, #23]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d168      	bne.n	8009e22 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7d1b      	ldrb	r3, [r3, #20]
 8009d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d062      	beq.n	8009e22 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7d1b      	ldrb	r3, [r3, #20]
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da15      	bge.n	8009d92 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	7858      	ldrb	r0, [r3, #1]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a1a      	ldr	r2, [r3, #32]
 8009d74:	2301      	movs	r3, #1
 8009d76:	f7fd fac9 	bl	800730c <disk_write>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <f_sync+0x54>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e04f      	b.n	8009e24 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	7d1b      	ldrb	r3, [r3, #20]
 8009d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d92:	f7fd f9ff 	bl	8007194 <get_fattime>
 8009d96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7fd fd93 	bl	80078cc <move_window>
 8009da6:	4603      	mov	r3, r0
 8009da8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d138      	bne.n	8009e22 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	330b      	adds	r3, #11
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	330b      	adds	r3, #11
 8009dc0:	f042 0220 	orr.w	r2, r2, #32
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6818      	ldr	r0, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f7fe fb1f 	bl	8008416 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f103 021c 	add.w	r2, r3, #28
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	f7fd fb22 	bl	800742e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3316      	adds	r3, #22
 8009dee:	6939      	ldr	r1, [r7, #16]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fd fb1c 	bl	800742e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3312      	adds	r3, #18
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fd fafc 	bl	80073fa <st_word>
					fs->wflag = 1;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2201      	movs	r2, #1
 8009e06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fd fd8c 	bl	8007928 <sync_fs>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7d1b      	ldrb	r3, [r3, #20]
 8009e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff ff7b 	bl	8009d30 <f_sync>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d118      	bne.n	8009e76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f107 0208 	add.w	r2, r7, #8
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7ff fb93 	bl	8009578 <validate>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10c      	bne.n	8009e76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fd fc91 	bl	8007788 <dec_lock>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d102      	bne.n	8009e76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b090      	sub	sp, #64	; 0x40
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f107 0208 	add.w	r2, r7, #8
 8009e90:	4611      	mov	r1, r2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff fb70 	bl	8009578 <validate>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009e9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <f_lseek+0x2e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	7d5b      	ldrb	r3, [r3, #21]
 8009eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009eae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <f_lseek+0x3c>
 8009eb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eba:	e201      	b.n	800a2c0 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 80d9 	beq.w	800a078 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ecc:	d15a      	bne.n	8009f84 <f_lseek+0x104>
			tbl = fp->cltbl;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	1d1a      	adds	r2, r3, #4
 8009ed8:	627a      	str	r2, [r7, #36]	; 0x24
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	2302      	movs	r3, #2
 8009ee0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d03a      	beq.n	8009f64 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef0:	613b      	str	r3, [r7, #16]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	3302      	adds	r3, #2
 8009efa:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f02:	3301      	adds	r3, #1
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fd fd9a 	bl	8007a44 <get_fat>
 8009f10:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d804      	bhi.n	8009f22 <f_lseek+0xa2>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	755a      	strb	r2, [r3, #21]
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e1ce      	b.n	800a2c0 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f28:	d104      	bne.n	8009f34 <f_lseek+0xb4>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	755a      	strb	r2, [r3, #21]
 8009f30:	2301      	movs	r3, #1
 8009f32:	e1c5      	b.n	800a2c0 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d0de      	beq.n	8009efc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d809      	bhi.n	8009f5a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	1d1a      	adds	r2, r3, #4
 8009f4a:	627a      	str	r2, [r7, #36]	; 0x24
 8009f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	1d1a      	adds	r2, r3, #4
 8009f54:	627a      	str	r2, [r7, #36]	; 0x24
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d3c4      	bcc.n	8009eee <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d803      	bhi.n	8009f7c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e19f      	b.n	800a2bc <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f7c:	2311      	movs	r3, #17
 8009f7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009f82:	e19b      	b.n	800a2bc <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	683a      	ldr	r2, [r7, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d902      	bls.n	8009f94 <f_lseek+0x114>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 818d 	beq.w	800a2bc <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	4619      	mov	r1, r3
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7fe f838 	bl	800801e <clmt_clust>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fd fd23 	bl	8007a08 <clust2sect>
 8009fc2:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009fc4:	69bb      	ldr	r3, [r7, #24]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d104      	bne.n	8009fd4 <f_lseek+0x154>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	755a      	strb	r2, [r3, #21]
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e175      	b.n	800a2c0 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	8992      	ldrh	r2, [r2, #12]
 8009fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	8952      	ldrh	r2, [r2, #10]
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	4413      	add	r3, r2
 8009fec:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	699b      	ldr	r3, [r3, #24]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	8992      	ldrh	r2, [r2, #12]
 8009ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ffa:	fb02 f201 	mul.w	r2, r2, r1
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	2b00      	cmp	r3, #0
 800a002:	f000 815b 	beq.w	800a2bc <f_lseek+0x43c>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	f000 8155 	beq.w	800a2bc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	7d1b      	ldrb	r3, [r3, #20]
 800a016:	b25b      	sxtb	r3, r3
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da18      	bge.n	800a04e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	7858      	ldrb	r0, [r3, #1]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a1a      	ldr	r2, [r3, #32]
 800a02a:	2301      	movs	r3, #1
 800a02c:	f7fd f96e 	bl	800730c <disk_write>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <f_lseek+0x1c0>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	755a      	strb	r2, [r3, #21]
 800a03c:	2301      	movs	r3, #1
 800a03e:	e13f      	b.n	800a2c0 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	7858      	ldrb	r0, [r3, #1]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a058:	2301      	movs	r3, #1
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	f7fd f936 	bl	80072cc <disk_read>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <f_lseek+0x1f0>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	755a      	strb	r2, [r3, #21]
 800a06c:	2301      	movs	r3, #1
 800a06e:	e127      	b.n	800a2c0 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	621a      	str	r2, [r3, #32]
 800a076:	e121      	b.n	800a2bc <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d908      	bls.n	800a094 <f_lseek+0x214>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7d1b      	ldrb	r3, [r3, #20]
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	637b      	str	r3, [r7, #52]	; 0x34
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0a2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80b5 	beq.w	800a216 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	895b      	ldrh	r3, [r3, #10]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	899b      	ldrh	r3, [r3, #12]
 800a0b6:	fb03 f302 	mul.w	r3, r3, r2
 800a0ba:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01b      	beq.n	800a0fa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	1e5a      	subs	r2, r3, #1
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	1e59      	subs	r1, r3, #1
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d30f      	bcc.n	800a0fa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	425b      	negs	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f8:	e022      	b.n	800a140 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a102:	2b00      	cmp	r3, #0
 800a104:	d119      	bne.n	800a13a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd feef 	bl	8007eee <create_chain>
 800a110:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	2b01      	cmp	r3, #1
 800a116:	d104      	bne.n	800a122 <f_lseek+0x2a2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	755a      	strb	r2, [r3, #21]
 800a11e:	2302      	movs	r3, #2
 800a120:	e0ce      	b.n	800a2c0 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a128:	d104      	bne.n	800a134 <f_lseek+0x2b4>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	755a      	strb	r2, [r3, #21]
 800a130:	2301      	movs	r3, #1
 800a132:	e0c5      	b.n	800a2c0 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a138:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a13e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	2b00      	cmp	r3, #0
 800a144:	d067      	beq.n	800a216 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a146:	e03a      	b.n	800a1be <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	1ad3      	subs	r3, r2, r3
 800a14e:	603b      	str	r3, [r7, #0]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699a      	ldr	r2, [r3, #24]
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	441a      	add	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7d1b      	ldrb	r3, [r3, #20]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00b      	beq.n	800a180 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd febe 	bl	8007eee <create_chain>
 800a172:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	2b00      	cmp	r3, #0
 800a178:	d108      	bne.n	800a18c <f_lseek+0x30c>
							ofs = 0; break;
 800a17a:	2300      	movs	r3, #0
 800a17c:	603b      	str	r3, [r7, #0]
 800a17e:	e022      	b.n	800a1c6 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a184:	4618      	mov	r0, r3
 800a186:	f7fd fc5d 	bl	8007a44 <get_fat>
 800a18a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a192:	d104      	bne.n	800a19e <f_lseek+0x31e>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	755a      	strb	r2, [r3, #21]
 800a19a:	2301      	movs	r3, #1
 800a19c:	e090      	b.n	800a2c0 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d904      	bls.n	800a1ae <f_lseek+0x32e>
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	69db      	ldr	r3, [r3, #28]
 800a1a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d304      	bcc.n	800a1b8 <f_lseek+0x338>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	755a      	strb	r2, [r3, #21]
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e083      	b.n	800a2c0 <f_lseek+0x440>
					fp->clust = clst;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1bc:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d8c0      	bhi.n	800a148 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699a      	ldr	r2, [r3, #24]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	441a      	add	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	899b      	ldrh	r3, [r3, #12]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1de:	fb02 f201 	mul.w	r2, r2, r1
 800a1e2:	1a9b      	subs	r3, r3, r2
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d016      	beq.n	800a216 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7fd fc0b 	bl	8007a08 <clust2sect>
 800a1f2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d104      	bne.n	800a204 <f_lseek+0x384>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	755a      	strb	r2, [r3, #21]
 800a200:	2302      	movs	r3, #2
 800a202:	e05d      	b.n	800a2c0 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	899b      	ldrh	r3, [r3, #12]
 800a208:	461a      	mov	r2, r3
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a212:	4413      	add	r3, r2
 800a214:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699a      	ldr	r2, [r3, #24]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d90a      	bls.n	800a238 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	7d1b      	ldrb	r3, [r3, #20]
 800a22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a232:	b2da      	uxtb	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	8992      	ldrh	r2, [r2, #12]
 800a240:	fbb3 f1f2 	udiv	r1, r3, r2
 800a244:	fb02 f201 	mul.w	r2, r2, r1
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d036      	beq.n	800a2bc <f_lseek+0x43c>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a254:	429a      	cmp	r2, r3
 800a256:	d031      	beq.n	800a2bc <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	7d1b      	ldrb	r3, [r3, #20]
 800a25c:	b25b      	sxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	da18      	bge.n	800a294 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	7858      	ldrb	r0, [r3, #1]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1a      	ldr	r2, [r3, #32]
 800a270:	2301      	movs	r3, #1
 800a272:	f7fd f84b 	bl	800730c <disk_write>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d004      	beq.n	800a286 <f_lseek+0x406>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	755a      	strb	r2, [r3, #21]
 800a282:	2301      	movs	r3, #1
 800a284:	e01c      	b.n	800a2c0 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7d1b      	ldrb	r3, [r3, #20]
 800a28a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a28e:	b2da      	uxtb	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	7858      	ldrb	r0, [r3, #1]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a29e:	2301      	movs	r3, #1
 800a2a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2a2:	f7fd f813 	bl	80072cc <disk_read>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d004      	beq.n	800a2b6 <f_lseek+0x436>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	755a      	strb	r2, [r3, #21]
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e004      	b.n	800a2c0 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a2bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3740      	adds	r7, #64	; 0x40
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	2b0a      	cmp	r3, #10
 800a2d8:	d103      	bne.n	800a2e2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a2da:	210d      	movs	r1, #13
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff fff3 	bl	800a2c8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	db25      	blt.n	800a33a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1c5a      	adds	r2, r3, #1
 800a2f2:	60fa      	str	r2, [r7, #12]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b3c      	cmp	r3, #60	; 0x3c
 800a300:	dd12      	ble.n	800a328 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f103 010c 	add.w	r1, r3, #12
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	f7ff fb79 	bl	8009a08 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d101      	bne.n	800a322 <putc_bfd+0x5a>
 800a31e:	2300      	movs	r3, #0
 800a320:	e001      	b.n	800a326 <putc_bfd+0x5e>
 800a322:	f04f 33ff 	mov.w	r3, #4294967295
 800a326:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	e000      	b.n	800a33c <putc_bfd+0x74>
	if (i < 0) return;
 800a33a:	bf00      	nop
}
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	db16      	blt.n	800a380 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f103 010c 	add.w	r1, r3, #12
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	461a      	mov	r2, r3
 800a362:	f107 030c 	add.w	r3, r7, #12
 800a366:	f7ff fb4f 	bl	8009a08 <f_write>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d107      	bne.n	800a380 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4293      	cmp	r3, r2
 800a378:	d102      	bne.n	800a380 <putc_flush+0x3e>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	e001      	b.n	800a384 <putc_flush+0x42>
	return EOF;
 800a380:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	605a      	str	r2, [r3, #4]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	609a      	str	r2, [r3, #8]
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bc80      	pop	{r7}
 800a3b2:	4770      	bx	lr

0800a3b4 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a3b4:	b40e      	push	{r1, r2, r3}
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b0a7      	sub	sp, #156	; 0x9c
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a3be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff ffe1 	bl	800a38c <putc_init>

	va_start(arp, fmt);
 800a3ca:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a3ce:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800a3d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a3d4:	1c5a      	adds	r2, r3, #1
 800a3d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800a3e0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 81f4 	beq.w	800a7d2 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800a3ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a3ee:	2b25      	cmp	r3, #37	; 0x25
 800a3f0:	d008      	beq.n	800a404 <f_printf+0x50>
			putc_bfd(&pb, c);
 800a3f2:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a3f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff ff63 	bl	800a2c8 <putc_bfd>
			continue;
 800a402:	e1e5      	b.n	800a7d0 <f_printf+0x41c>
		}
		w = f = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a40a:	2300      	movs	r3, #0
 800a40c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800a410:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800a420:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a424:	2b30      	cmp	r3, #48	; 0x30
 800a426:	d10b      	bne.n	800a440 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a42e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800a43e:	e024      	b.n	800a48a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a440:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a444:	2b2d      	cmp	r3, #45	; 0x2d
 800a446:	d120      	bne.n	800a48a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800a448:	2302      	movs	r3, #2
 800a44a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a44e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800a45e:	e014      	b.n	800a48a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800a460:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a464:	4613      	mov	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4413      	add	r3, r2
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	461a      	mov	r2, r3
 800a46e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a472:	4413      	add	r3, r2
 800a474:	3b30      	subs	r3, #48	; 0x30
 800a476:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800a47a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800a48a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a48e:	2b2f      	cmp	r3, #47	; 0x2f
 800a490:	d903      	bls.n	800a49a <f_printf+0xe6>
 800a492:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a496:	2b39      	cmp	r3, #57	; 0x39
 800a498:	d9e2      	bls.n	800a460 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a49a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a49e:	2b6c      	cmp	r3, #108	; 0x6c
 800a4a0:	d003      	beq.n	800a4aa <f_printf+0xf6>
 800a4a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a4a6:	2b4c      	cmp	r3, #76	; 0x4c
 800a4a8:	d10d      	bne.n	800a4c6 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800a4aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a4ae:	f043 0304 	orr.w	r3, r3, #4
 800a4b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a4b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800a4c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8183 	beq.w	800a7d6 <f_printf+0x422>
		d = c;
 800a4d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a4d4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800a4d8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a4dc:	2b60      	cmp	r3, #96	; 0x60
 800a4de:	d908      	bls.n	800a4f2 <f_printf+0x13e>
 800a4e0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a4e4:	2b7a      	cmp	r3, #122	; 0x7a
 800a4e6:	d804      	bhi.n	800a4f2 <f_printf+0x13e>
 800a4e8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a4ec:	3b20      	subs	r3, #32
 800a4ee:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800a4f2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a4f6:	3b42      	subs	r3, #66	; 0x42
 800a4f8:	2b16      	cmp	r3, #22
 800a4fa:	f200 8098 	bhi.w	800a62e <f_printf+0x27a>
 800a4fe:	a201      	add	r2, pc, #4	; (adr r2, 800a504 <f_printf+0x150>)
 800a500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a504:	0800a60f 	.word	0x0800a60f
 800a508:	0800a5f7 	.word	0x0800a5f7
 800a50c:	0800a61f 	.word	0x0800a61f
 800a510:	0800a62f 	.word	0x0800a62f
 800a514:	0800a62f 	.word	0x0800a62f
 800a518:	0800a62f 	.word	0x0800a62f
 800a51c:	0800a62f 	.word	0x0800a62f
 800a520:	0800a62f 	.word	0x0800a62f
 800a524:	0800a62f 	.word	0x0800a62f
 800a528:	0800a62f 	.word	0x0800a62f
 800a52c:	0800a62f 	.word	0x0800a62f
 800a530:	0800a62f 	.word	0x0800a62f
 800a534:	0800a62f 	.word	0x0800a62f
 800a538:	0800a617 	.word	0x0800a617
 800a53c:	0800a62f 	.word	0x0800a62f
 800a540:	0800a62f 	.word	0x0800a62f
 800a544:	0800a62f 	.word	0x0800a62f
 800a548:	0800a561 	.word	0x0800a561
 800a54c:	0800a62f 	.word	0x0800a62f
 800a550:	0800a61f 	.word	0x0800a61f
 800a554:	0800a62f 	.word	0x0800a62f
 800a558:	0800a62f 	.word	0x0800a62f
 800a55c:	0800a627 	.word	0x0800a627
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	67ba      	str	r2, [r7, #120]	; 0x78
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a570:	e004      	b.n	800a57c <f_printf+0x1c8>
 800a572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a576:	3301      	adds	r3, #1
 800a578:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a57c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a57e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a582:	4413      	add	r3, r2
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f3      	bne.n	800a572 <f_printf+0x1be>
			if (!(f & 2)) {
 800a58a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d11a      	bne.n	800a5cc <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a596:	e005      	b.n	800a5a4 <f_printf+0x1f0>
 800a598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a59c:	2120      	movs	r1, #32
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7ff fe92 	bl	800a2c8 <putc_bfd>
 800a5a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d8f0      	bhi.n	800a598 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a5b6:	e009      	b.n	800a5cc <f_printf+0x218>
 800a5b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a5be:	781a      	ldrb	r2, [r3, #0]
 800a5c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff fe7e 	bl	800a2c8 <putc_bfd>
 800a5cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1f1      	bne.n	800a5b8 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a5d4:	e005      	b.n	800a5e2 <f_printf+0x22e>
 800a5d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5da:	2120      	movs	r1, #32
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fe73 	bl	800a2c8 <putc_bfd>
 800a5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d8f0      	bhi.n	800a5d6 <f_printf+0x222>
			continue;
 800a5f4:	e0ec      	b.n	800a7d0 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a5f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5f8:	1d1a      	adds	r2, r3, #4
 800a5fa:	67ba      	str	r2, [r7, #120]	; 0x78
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fe5e 	bl	800a2c8 <putc_bfd>
 800a60c:	e0e0      	b.n	800a7d0 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800a60e:	2302      	movs	r3, #2
 800a610:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a614:	e014      	b.n	800a640 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800a616:	2308      	movs	r3, #8
 800a618:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a61c:	e010      	b.n	800a640 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a61e:	230a      	movs	r3, #10
 800a620:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a624:	e00c      	b.n	800a640 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800a626:	2310      	movs	r3, #16
 800a628:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800a62c:	e008      	b.n	800a640 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800a62e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800a632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fe45 	bl	800a2c8 <putc_bfd>
 800a63e:	e0c7      	b.n	800a7d0 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a640:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a644:	f003 0304 	and.w	r3, r3, #4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d004      	beq.n	800a656 <f_printf+0x2a2>
 800a64c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a64e:	1d1a      	adds	r2, r3, #4
 800a650:	67ba      	str	r2, [r7, #120]	; 0x78
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	e00c      	b.n	800a670 <f_printf+0x2bc>
 800a656:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a65a:	2b44      	cmp	r3, #68	; 0x44
 800a65c:	d104      	bne.n	800a668 <f_printf+0x2b4>
 800a65e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a660:	1d1a      	adds	r2, r3, #4
 800a662:	67ba      	str	r2, [r7, #120]	; 0x78
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	e003      	b.n	800a670 <f_printf+0x2bc>
 800a668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800a674:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a678:	2b44      	cmp	r3, #68	; 0x44
 800a67a:	d10e      	bne.n	800a69a <f_printf+0x2e6>
 800a67c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a680:	2b00      	cmp	r3, #0
 800a682:	da0a      	bge.n	800a69a <f_printf+0x2e6>
			v = 0 - v;
 800a684:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a688:	425b      	negs	r3, r3
 800a68a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800a68e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a692:	f043 0308 	orr.w	r3, r3, #8
 800a696:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800a6a0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800a6a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ac:	fb02 f201 	mul.w	r2, r2, r1
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800a6b6:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800a6ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a6c6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6ca:	2b09      	cmp	r3, #9
 800a6cc:	d90b      	bls.n	800a6e6 <f_printf+0x332>
 800a6ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800a6d2:	2b78      	cmp	r3, #120	; 0x78
 800a6d4:	d101      	bne.n	800a6da <f_printf+0x326>
 800a6d6:	2227      	movs	r2, #39	; 0x27
 800a6d8:	e000      	b.n	800a6dc <f_printf+0x328>
 800a6da:	2207      	movs	r2, #7
 800a6dc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800a6e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6ea:	1c5a      	adds	r2, r3, #1
 800a6ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a6f0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a6f4:	3230      	adds	r2, #48	; 0x30
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800a6fc:	440b      	add	r3, r1
 800a6fe:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800a702:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a706:	2b00      	cmp	r3, #0
 800a708:	d003      	beq.n	800a712 <f_printf+0x35e>
 800a70a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a70e:	2b1f      	cmp	r3, #31
 800a710:	d9c6      	bls.n	800a6a0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800a712:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <f_printf+0x380>
 800a71e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a728:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800a72c:	4413      	add	r3, r2
 800a72e:	222d      	movs	r2, #45	; 0x2d
 800a730:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800a734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a738:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a73c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <f_printf+0x398>
 800a748:	2330      	movs	r3, #48	; 0x30
 800a74a:	e000      	b.n	800a74e <f_printf+0x39a>
 800a74c:	2320      	movs	r3, #32
 800a74e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a752:	e007      	b.n	800a764 <f_printf+0x3b0>
 800a754:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fdb2 	bl	800a2c8 <putc_bfd>
 800a764:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a768:	f003 0302 	and.w	r3, r3, #2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d108      	bne.n	800a782 <f_printf+0x3ce>
 800a770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a77a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a77e:	429a      	cmp	r2, r3
 800a780:	d8e8      	bhi.n	800a754 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800a782:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a786:	3b01      	subs	r3, #1
 800a788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a78c:	f107 020c 	add.w	r2, r7, #12
 800a790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a794:	4413      	add	r3, r2
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7ff fd92 	bl	800a2c8 <putc_bfd>
		} while (i);
 800a7a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1ea      	bne.n	800a782 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800a7ac:	e007      	b.n	800a7be <f_printf+0x40a>
 800a7ae:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800a7b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7b6:	4611      	mov	r1, r2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fd85 	bl	800a2c8 <putc_bfd>
 800a7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a7c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d8ee      	bhi.n	800a7ae <f_printf+0x3fa>
		c = *fmt++;
 800a7d0:	e5fe      	b.n	800a3d0 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800a7d2:	bf00      	nop
 800a7d4:	e000      	b.n	800a7d8 <f_printf+0x424>
		if (!c) break;
 800a7d6:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800a7d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7ff fdb0 	bl	800a342 <putc_flush>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	379c      	adds	r7, #156	; 0x9c
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7ee:	b003      	add	sp, #12
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop

0800a7f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b087      	sub	sp, #28
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	4613      	mov	r3, r2
 800a800:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a80a:	4b1e      	ldr	r3, [pc, #120]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a80c:	7a5b      	ldrb	r3, [r3, #9]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b00      	cmp	r3, #0
 800a812:	d131      	bne.n	800a878 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a814:	4b1b      	ldr	r3, [pc, #108]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a816:	7a5b      	ldrb	r3, [r3, #9]
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	4b19      	ldr	r3, [pc, #100]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a81e:	2100      	movs	r1, #0
 800a820:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a822:	4b18      	ldr	r3, [pc, #96]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a824:	7a5b      	ldrb	r3, [r3, #9]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	4a16      	ldr	r2, [pc, #88]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a832:	4b14      	ldr	r3, [pc, #80]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a834:	7a5b      	ldrb	r3, [r3, #9]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	461a      	mov	r2, r3
 800a83a:	4b12      	ldr	r3, [pc, #72]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a83c:	4413      	add	r3, r2
 800a83e:	79fa      	ldrb	r2, [r7, #7]
 800a840:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a842:	4b10      	ldr	r3, [pc, #64]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a844:	7a5b      	ldrb	r3, [r3, #9]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	1c5a      	adds	r2, r3, #1
 800a84a:	b2d1      	uxtb	r1, r2
 800a84c:	4a0d      	ldr	r2, [pc, #52]	; (800a884 <FATFS_LinkDriverEx+0x90>)
 800a84e:	7251      	strb	r1, [r2, #9]
 800a850:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a852:	7dbb      	ldrb	r3, [r7, #22]
 800a854:	3330      	adds	r3, #48	; 0x30
 800a856:	b2da      	uxtb	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	3301      	adds	r3, #1
 800a860:	223a      	movs	r2, #58	; 0x3a
 800a862:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	3302      	adds	r3, #2
 800a868:	222f      	movs	r2, #47	; 0x2f
 800a86a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	3303      	adds	r3, #3
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a878:	7dfb      	ldrb	r3, [r7, #23]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr
 800a884:	20000338 	.word	0x20000338

0800a888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a892:	2200      	movs	r2, #0
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ffac 	bl	800a7f4 <FATFS_LinkDriverEx>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	6039      	str	r1, [r7, #0]
 800a8b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b8:	d802      	bhi.n	800a8c0 <ff_convert+0x18>
		c = chr;
 800a8ba:	88fb      	ldrh	r3, [r7, #6]
 800a8bc:	81fb      	strh	r3, [r7, #14]
 800a8be:	e025      	b.n	800a90c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00b      	beq.n	800a8de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2bff      	cmp	r3, #255	; 0xff
 800a8ca:	d805      	bhi.n	800a8d8 <ff_convert+0x30>
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	3b80      	subs	r3, #128	; 0x80
 800a8d0:	4a11      	ldr	r2, [pc, #68]	; (800a918 <ff_convert+0x70>)
 800a8d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8d6:	e000      	b.n	800a8da <ff_convert+0x32>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	81fb      	strh	r3, [r7, #14]
 800a8dc:	e016      	b.n	800a90c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a8de:	2300      	movs	r3, #0
 800a8e0:	81fb      	strh	r3, [r7, #14]
 800a8e2:	e009      	b.n	800a8f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a8e4:	89fb      	ldrh	r3, [r7, #14]
 800a8e6:	4a0c      	ldr	r2, [pc, #48]	; (800a918 <ff_convert+0x70>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	88fa      	ldrh	r2, [r7, #6]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d006      	beq.n	800a900 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a8f2:	89fb      	ldrh	r3, [r7, #14]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	81fb      	strh	r3, [r7, #14]
 800a8f8:	89fb      	ldrh	r3, [r7, #14]
 800a8fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a8fc:	d9f2      	bls.n	800a8e4 <ff_convert+0x3c>
 800a8fe:	e000      	b.n	800a902 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a900:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a902:	89fb      	ldrh	r3, [r7, #14]
 800a904:	3380      	adds	r3, #128	; 0x80
 800a906:	b29b      	uxth	r3, r3
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a90c:	89fb      	ldrh	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3714      	adds	r7, #20
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr
 800a918:	0800ac1c 	.word	0x0800ac1c

0800a91c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a926:	88fb      	ldrh	r3, [r7, #6]
 800a928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a92c:	d201      	bcs.n	800a932 <ff_wtoupper+0x16>
 800a92e:	4b3d      	ldr	r3, [pc, #244]	; (800aa24 <ff_wtoupper+0x108>)
 800a930:	e000      	b.n	800a934 <ff_wtoupper+0x18>
 800a932:	4b3d      	ldr	r3, [pc, #244]	; (800aa28 <ff_wtoupper+0x10c>)
 800a934:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	1c9a      	adds	r2, r3, #2
 800a93a:	617a      	str	r2, [r7, #20]
 800a93c:	881b      	ldrh	r3, [r3, #0]
 800a93e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a940:	8a7b      	ldrh	r3, [r7, #18]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d068      	beq.n	800aa18 <ff_wtoupper+0xfc>
 800a946:	88fa      	ldrh	r2, [r7, #6]
 800a948:	8a7b      	ldrh	r3, [r7, #18]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d364      	bcc.n	800aa18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	1c9a      	adds	r2, r3, #2
 800a952:	617a      	str	r2, [r7, #20]
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	823b      	strh	r3, [r7, #16]
 800a958:	8a3b      	ldrh	r3, [r7, #16]
 800a95a:	0a1b      	lsrs	r3, r3, #8
 800a95c:	81fb      	strh	r3, [r7, #14]
 800a95e:	8a3b      	ldrh	r3, [r7, #16]
 800a960:	b2db      	uxtb	r3, r3
 800a962:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a964:	88fa      	ldrh	r2, [r7, #6]
 800a966:	8a79      	ldrh	r1, [r7, #18]
 800a968:	8a3b      	ldrh	r3, [r7, #16]
 800a96a:	440b      	add	r3, r1
 800a96c:	429a      	cmp	r2, r3
 800a96e:	da49      	bge.n	800aa04 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	2b08      	cmp	r3, #8
 800a974:	d84f      	bhi.n	800aa16 <ff_wtoupper+0xfa>
 800a976:	a201      	add	r2, pc, #4	; (adr r2, 800a97c <ff_wtoupper+0x60>)
 800a978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97c:	0800a9a1 	.word	0x0800a9a1
 800a980:	0800a9b3 	.word	0x0800a9b3
 800a984:	0800a9c9 	.word	0x0800a9c9
 800a988:	0800a9d1 	.word	0x0800a9d1
 800a98c:	0800a9d9 	.word	0x0800a9d9
 800a990:	0800a9e1 	.word	0x0800a9e1
 800a994:	0800a9e9 	.word	0x0800a9e9
 800a998:	0800a9f1 	.word	0x0800a9f1
 800a99c:	0800a9f9 	.word	0x0800a9f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a9a0:	88fa      	ldrh	r2, [r7, #6]
 800a9a2:	8a7b      	ldrh	r3, [r7, #18]
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	005b      	lsls	r3, r3, #1
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	80fb      	strh	r3, [r7, #6]
 800a9b0:	e027      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a9b2:	88fa      	ldrh	r2, [r7, #6]
 800a9b4:	8a7b      	ldrh	r3, [r7, #18]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	f003 0301 	and.w	r3, r3, #1
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	88fa      	ldrh	r2, [r7, #6]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	80fb      	strh	r3, [r7, #6]
 800a9c6:	e01c      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	3b10      	subs	r3, #16
 800a9cc:	80fb      	strh	r3, [r7, #6]
 800a9ce:	e018      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a9d0:	88fb      	ldrh	r3, [r7, #6]
 800a9d2:	3b20      	subs	r3, #32
 800a9d4:	80fb      	strh	r3, [r7, #6]
 800a9d6:	e014      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a9d8:	88fb      	ldrh	r3, [r7, #6]
 800a9da:	3b30      	subs	r3, #48	; 0x30
 800a9dc:	80fb      	strh	r3, [r7, #6]
 800a9de:	e010      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a9e0:	88fb      	ldrh	r3, [r7, #6]
 800a9e2:	3b1a      	subs	r3, #26
 800a9e4:	80fb      	strh	r3, [r7, #6]
 800a9e6:	e00c      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a9e8:	88fb      	ldrh	r3, [r7, #6]
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	80fb      	strh	r3, [r7, #6]
 800a9ee:	e008      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	3b50      	subs	r3, #80	; 0x50
 800a9f4:	80fb      	strh	r3, [r7, #6]
 800a9f6:	e004      	b.n	800aa02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a9f8:	88fb      	ldrh	r3, [r7, #6]
 800a9fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800a9fe:	80fb      	strh	r3, [r7, #6]
 800aa00:	bf00      	nop
			}
			break;
 800aa02:	e008      	b.n	800aa16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aa04:	89fb      	ldrh	r3, [r7, #14]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d195      	bne.n	800a936 <ff_wtoupper+0x1a>
 800aa0a:	8a3b      	ldrh	r3, [r7, #16]
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4413      	add	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800aa14:	e78f      	b.n	800a936 <ff_wtoupper+0x1a>
			break;
 800aa16:	bf00      	nop
	}

	return chr;
 800aa18:	88fb      	ldrh	r3, [r7, #6]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bc80      	pop	{r7}
 800aa22:	4770      	bx	lr
 800aa24:	0800ad1c 	.word	0x0800ad1c
 800aa28:	0800af10 	.word	0x0800af10

0800aa2c <__errno>:
 800aa2c:	4b01      	ldr	r3, [pc, #4]	; (800aa34 <__errno+0x8>)
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	2000008c 	.word	0x2000008c

0800aa38 <exit>:
 800aa38:	b508      	push	{r3, lr}
 800aa3a:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <exit+0x20>)
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	b113      	cbz	r3, 800aa46 <exit+0xe>
 800aa40:	2100      	movs	r1, #0
 800aa42:	f3af 8000 	nop.w
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <exit+0x24>)
 800aa48:	6818      	ldr	r0, [r3, #0]
 800aa4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aa4c:	b103      	cbz	r3, 800aa50 <exit+0x18>
 800aa4e:	4798      	blx	r3
 800aa50:	4620      	mov	r0, r4
 800aa52:	f7f7 f933 	bl	8001cbc <_exit>
 800aa56:	bf00      	nop
 800aa58:	00000000 	.word	0x00000000
 800aa5c:	0800afcc 	.word	0x0800afcc

0800aa60 <__libc_init_array>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	2600      	movs	r6, #0
 800aa64:	4d0c      	ldr	r5, [pc, #48]	; (800aa98 <__libc_init_array+0x38>)
 800aa66:	4c0d      	ldr	r4, [pc, #52]	; (800aa9c <__libc_init_array+0x3c>)
 800aa68:	1b64      	subs	r4, r4, r5
 800aa6a:	10a4      	asrs	r4, r4, #2
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	d109      	bne.n	800aa84 <__libc_init_array+0x24>
 800aa70:	f000 f822 	bl	800aab8 <_init>
 800aa74:	2600      	movs	r6, #0
 800aa76:	4d0a      	ldr	r5, [pc, #40]	; (800aaa0 <__libc_init_array+0x40>)
 800aa78:	4c0a      	ldr	r4, [pc, #40]	; (800aaa4 <__libc_init_array+0x44>)
 800aa7a:	1b64      	subs	r4, r4, r5
 800aa7c:	10a4      	asrs	r4, r4, #2
 800aa7e:	42a6      	cmp	r6, r4
 800aa80:	d105      	bne.n	800aa8e <__libc_init_array+0x2e>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa88:	4798      	blx	r3
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7ee      	b.n	800aa6c <__libc_init_array+0xc>
 800aa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa92:	4798      	blx	r3
 800aa94:	3601      	adds	r6, #1
 800aa96:	e7f2      	b.n	800aa7e <__libc_init_array+0x1e>
 800aa98:	0800afd8 	.word	0x0800afd8
 800aa9c:	0800afd8 	.word	0x0800afd8
 800aaa0:	0800afd8 	.word	0x0800afd8
 800aaa4:	0800afdc 	.word	0x0800afdc

0800aaa8 <memset>:
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4402      	add	r2, r0
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d100      	bne.n	800aab2 <memset+0xa>
 800aab0:	4770      	bx	lr
 800aab2:	f803 1b01 	strb.w	r1, [r3], #1
 800aab6:	e7f9      	b.n	800aaac <memset+0x4>

0800aab8 <_init>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr

0800aac4 <_fini>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr
