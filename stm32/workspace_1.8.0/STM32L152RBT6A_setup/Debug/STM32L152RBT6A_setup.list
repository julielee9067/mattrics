
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006090  08006090  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006098  08006098  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000b8  08006158  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08006158  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef81  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  0002f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  000320e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ff3  00000000  00000000  00032db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecbd  00000000  00000000  00035dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b58  00000000  00000000  00044a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c75c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  000c7614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08005f84 	.word	0x08005f84

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08005f84 	.word	0x08005f84

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_frsub>:
 80002e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__addsf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_fsub>:
 80002ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f0 <__addsf3>:
 80002f0:	0042      	lsls	r2, r0, #1
 80002f2:	bf1f      	itttt	ne
 80002f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f8:	ea92 0f03 	teqne	r2, r3
 80002fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000300:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000304:	d06a      	beq.n	80003dc <__addsf3+0xec>
 8000306:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030e:	bfc1      	itttt	gt
 8000310:	18d2      	addgt	r2, r2, r3
 8000312:	4041      	eorgt	r1, r0
 8000314:	4048      	eorgt	r0, r1
 8000316:	4041      	eorgt	r1, r0
 8000318:	bfb8      	it	lt
 800031a:	425b      	neglt	r3, r3
 800031c:	2b19      	cmp	r3, #25
 800031e:	bf88      	it	hi
 8000320:	4770      	bxhi	lr
 8000322:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4240      	negne	r0, r0
 8000332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000336:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800033a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4249      	negne	r1, r1
 8000342:	ea92 0f03 	teq	r2, r3
 8000346:	d03f      	beq.n	80003c8 <__addsf3+0xd8>
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
 800034c:	fa41 fc03 	asr.w	ip, r1, r3
 8000350:	eb10 000c 	adds.w	r0, r0, ip
 8000354:	f1c3 0320 	rsb	r3, r3, #32
 8000358:	fa01 f103 	lsl.w	r1, r1, r3
 800035c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000360:	d502      	bpl.n	8000368 <__addsf3+0x78>
 8000362:	4249      	negs	r1, r1
 8000364:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800036c:	d313      	bcc.n	8000396 <__addsf3+0xa6>
 800036e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000372:	d306      	bcc.n	8000382 <__addsf3+0x92>
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	ea4f 0131 	mov.w	r1, r1, rrx
 800037a:	f102 0201 	add.w	r2, r2, #1
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	d251      	bcs.n	8000426 <__addsf3+0x136>
 8000382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000386:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038a:	bf08      	it	eq
 800038c:	f020 0001 	biceq.w	r0, r0, #1
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	4770      	bx	lr
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	eb40 0000 	adc.w	r0, r0, r0
 800039c:	3a01      	subs	r2, #1
 800039e:	bf28      	it	cs
 80003a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a4:	d2ed      	bcs.n	8000382 <__addsf3+0x92>
 80003a6:	fab0 fc80 	clz	ip, r0
 80003aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ae:	ebb2 020c 	subs.w	r2, r2, ip
 80003b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b6:	bfaa      	itet	ge
 80003b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003bc:	4252      	neglt	r2, r2
 80003be:	4318      	orrge	r0, r3
 80003c0:	bfbc      	itt	lt
 80003c2:	40d0      	lsrlt	r0, r2
 80003c4:	4318      	orrlt	r0, r3
 80003c6:	4770      	bx	lr
 80003c8:	f092 0f00 	teq	r2, #0
 80003cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d0:	bf06      	itte	eq
 80003d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d6:	3201      	addeq	r2, #1
 80003d8:	3b01      	subne	r3, #1
 80003da:	e7b5      	b.n	8000348 <__addsf3+0x58>
 80003dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e4:	bf18      	it	ne
 80003e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ea:	d021      	beq.n	8000430 <__addsf3+0x140>
 80003ec:	ea92 0f03 	teq	r2, r3
 80003f0:	d004      	beq.n	80003fc <__addsf3+0x10c>
 80003f2:	f092 0f00 	teq	r2, #0
 80003f6:	bf08      	it	eq
 80003f8:	4608      	moveq	r0, r1
 80003fa:	4770      	bx	lr
 80003fc:	ea90 0f01 	teq	r0, r1
 8000400:	bf1c      	itt	ne
 8000402:	2000      	movne	r0, #0
 8000404:	4770      	bxne	lr
 8000406:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800040a:	d104      	bne.n	8000416 <__addsf3+0x126>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	bf28      	it	cs
 8000410:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000414:	4770      	bx	lr
 8000416:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800041a:	bf3c      	itt	cc
 800041c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000420:	4770      	bxcc	lr
 8000422:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000426:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800042a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042e:	4770      	bx	lr
 8000430:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000434:	bf16      	itet	ne
 8000436:	4608      	movne	r0, r1
 8000438:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800043c:	4601      	movne	r1, r0
 800043e:	0242      	lsls	r2, r0, #9
 8000440:	bf06      	itte	eq
 8000442:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000446:	ea90 0f01 	teqeq	r0, r1
 800044a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044e:	4770      	bx	lr

08000450 <__aeabi_ui2f>:
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e004      	b.n	8000460 <__aeabi_i2f+0x8>
 8000456:	bf00      	nop

08000458 <__aeabi_i2f>:
 8000458:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800045c:	bf48      	it	mi
 800045e:	4240      	negmi	r0, r0
 8000460:	ea5f 0c00 	movs.w	ip, r0
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800046c:	4601      	mov	r1, r0
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	e01c      	b.n	80004ae <__aeabi_l2f+0x2a>

08000474 <__aeabi_ul2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e00a      	b.n	8000498 <__aeabi_l2f+0x14>
 8000482:	bf00      	nop

08000484 <__aeabi_l2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000490:	d502      	bpl.n	8000498 <__aeabi_l2f+0x14>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	ea5f 0c01 	movs.w	ip, r1
 800049c:	bf02      	ittt	eq
 800049e:	4684      	moveq	ip, r0
 80004a0:	4601      	moveq	r1, r0
 80004a2:	2000      	moveq	r0, #0
 80004a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a8:	bf08      	it	eq
 80004aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004b2:	fabc f28c 	clz	r2, ip
 80004b6:	3a08      	subs	r2, #8
 80004b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004bc:	db10      	blt.n	80004e0 <__aeabi_l2f+0x5c>
 80004be:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	fa20 f202 	lsr.w	r2, r0, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	f020 0001 	biceq.w	r0, r0, #1
 80004de:	4770      	bx	lr
 80004e0:	f102 0220 	add.w	r2, r2, #32
 80004e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e8:	f1c2 0220 	rsb	r2, r2, #32
 80004ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f0:	fa21 f202 	lsr.w	r2, r1, r2
 80004f4:	eb43 0002 	adc.w	r0, r3, r2
 80004f8:	bf08      	it	eq
 80004fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fe:	4770      	bx	lr

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b96e 	b.w	80007f4 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	468e      	mov	lr, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8083 	bne.w	8000648 <__udivmoddi4+0x118>
 8000542:	428a      	cmp	r2, r1
 8000544:	4617      	mov	r7, r2
 8000546:	d947      	bls.n	80005d8 <__udivmoddi4+0xa8>
 8000548:	fab2 f382 	clz	r3, r2
 800054c:	b14b      	cbz	r3, 8000562 <__udivmoddi4+0x32>
 800054e:	f1c3 0120 	rsb	r1, r3, #32
 8000552:	fa05 fe03 	lsl.w	lr, r5, r3
 8000556:	fa20 f101 	lsr.w	r1, r0, r1
 800055a:	409f      	lsls	r7, r3
 800055c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000560:	409c      	lsls	r4, r3
 8000562:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000566:	fbbe fcf8 	udiv	ip, lr, r8
 800056a:	fa1f f987 	uxth.w	r9, r7
 800056e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000572:	fb0c f009 	mul.w	r0, ip, r9
 8000576:	0c21      	lsrs	r1, r4, #16
 8000578:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800057c:	4290      	cmp	r0, r2
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x66>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000586:	f080 8118 	bcs.w	80007ba <__udivmoddi4+0x28a>
 800058a:	4290      	cmp	r0, r2
 800058c:	f240 8115 	bls.w	80007ba <__udivmoddi4+0x28a>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	443a      	add	r2, r7
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f8 	udiv	r0, r2, r8
 800059c:	fb08 2210 	mls	r2, r8, r0, r2
 80005a0:	fb00 f109 	mul.w	r1, r0, r9
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	d909      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	f080 8103 	bcs.w	80007be <__udivmoddi4+0x28e>
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	f240 8100 	bls.w	80007be <__udivmoddi4+0x28e>
 80005be:	3802      	subs	r0, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	1a64      	subs	r4, r4, r1
 80005c4:	2100      	movs	r1, #0
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	b11e      	cbz	r6, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	2200      	movs	r2, #0
 80005ce:	40dc      	lsrs	r4, r3
 80005d0:	e9c6 4200 	strd	r4, r2, [r6]
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xac>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f382 	clz	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d14f      	bne.n	8000684 <__udivmoddi4+0x154>
 80005e4:	1a8d      	subs	r5, r1, r2
 80005e6:	2101      	movs	r1, #1
 80005e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005ec:	fa1f f882 	uxth.w	r8, r2
 80005f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80005f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80005f8:	fb08 f00c 	mul.w	r0, r8, ip
 80005fc:	0c22      	lsrs	r2, r4, #16
 80005fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000602:	42a8      	cmp	r0, r5
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0xe6>
 8000606:	197d      	adds	r5, r7, r5
 8000608:	f10c 32ff 	add.w	r2, ip, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0xe4>
 800060e:	42a8      	cmp	r0, r5
 8000610:	f200 80e9 	bhi.w	80007e6 <__udivmoddi4+0x2b6>
 8000614:	4694      	mov	ip, r2
 8000616:	1a2d      	subs	r5, r5, r0
 8000618:	fbb5 f0fe 	udiv	r0, r5, lr
 800061c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000620:	fb08 f800 	mul.w	r8, r8, r0
 8000624:	b2a4      	uxth	r4, r4
 8000626:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800062a:	45a0      	cmp	r8, r4
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x10e>
 800062e:	193c      	adds	r4, r7, r4
 8000630:	f100 32ff 	add.w	r2, r0, #4294967295
 8000634:	d202      	bcs.n	800063c <__udivmoddi4+0x10c>
 8000636:	45a0      	cmp	r8, r4
 8000638:	f200 80d9 	bhi.w	80007ee <__udivmoddi4+0x2be>
 800063c:	4610      	mov	r0, r2
 800063e:	eba4 0408 	sub.w	r4, r4, r8
 8000642:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000646:	e7c0      	b.n	80005ca <__udivmoddi4+0x9a>
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x12e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	f000 80b1 	beq.w	80007b4 <__udivmoddi4+0x284>
 8000652:	2100      	movs	r1, #0
 8000654:	e9c6 0500 	strd	r0, r5, [r6]
 8000658:	4608      	mov	r0, r1
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	fab3 f183 	clz	r1, r3
 8000662:	2900      	cmp	r1, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0x1ce>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d302      	bcc.n	8000670 <__udivmoddi4+0x140>
 800066a:	4282      	cmp	r2, r0
 800066c:	f200 80b9 	bhi.w	80007e2 <__udivmoddi4+0x2b2>
 8000670:	1a84      	subs	r4, r0, r2
 8000672:	eb65 0303 	sbc.w	r3, r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	469e      	mov	lr, r3
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0aa      	beq.n	80005d4 <__udivmoddi4+0xa4>
 800067e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000682:	e7a7      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000684:	409f      	lsls	r7, r3
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	40d1      	lsrs	r1, r2
 800068c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000690:	fbb1 f0fe 	udiv	r0, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1110 	mls	r1, lr, r0, r1
 800069c:	fa24 f202 	lsr.w	r2, r4, r2
 80006a0:	409d      	lsls	r5, r3
 80006a2:	fb00 fc08 	mul.w	ip, r0, r8
 80006a6:	432a      	orrs	r2, r5
 80006a8:	0c15      	lsrs	r5, r2, #16
 80006aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	fa04 f403 	lsl.w	r4, r4, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x19a>
 80006b6:	197d      	adds	r5, r7, r5
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	f080 808f 	bcs.w	80007de <__udivmoddi4+0x2ae>
 80006c0:	45ac      	cmp	ip, r5
 80006c2:	f240 808c 	bls.w	80007de <__udivmoddi4+0x2ae>
 80006c6:	3802      	subs	r0, #2
 80006c8:	443d      	add	r5, r7
 80006ca:	eba5 050c 	sub.w	r5, r5, ip
 80006ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80006d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80006d6:	fb01 f908 	mul.w	r9, r1, r8
 80006da:	b295      	uxth	r5, r2
 80006dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006e0:	45a9      	cmp	r9, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x1c4>
 80006e4:	197d      	adds	r5, r7, r5
 80006e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80006ea:	d274      	bcs.n	80007d6 <__udivmoddi4+0x2a6>
 80006ec:	45a9      	cmp	r9, r5
 80006ee:	d972      	bls.n	80007d6 <__udivmoddi4+0x2a6>
 80006f0:	3902      	subs	r1, #2
 80006f2:	443d      	add	r5, r7
 80006f4:	eba5 0509 	sub.w	r5, r5, r9
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e778      	b.n	80005f0 <__udivmoddi4+0xc0>
 80006fe:	f1c1 0720 	rsb	r7, r1, #32
 8000702:	408b      	lsls	r3, r1
 8000704:	fa22 fc07 	lsr.w	ip, r2, r7
 8000708:	ea4c 0c03 	orr.w	ip, ip, r3
 800070c:	fa25 f407 	lsr.w	r4, r5, r7
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fbb4 f9fe 	udiv	r9, r4, lr
 8000718:	fa1f f88c 	uxth.w	r8, ip
 800071c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000720:	fa20 f307 	lsr.w	r3, r0, r7
 8000724:	fb09 fa08 	mul.w	sl, r9, r8
 8000728:	408d      	lsls	r5, r1
 800072a:	431d      	orrs	r5, r3
 800072c:	0c2b      	lsrs	r3, r5, #16
 800072e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000732:	45a2      	cmp	sl, r4
 8000734:	fa02 f201 	lsl.w	r2, r2, r1
 8000738:	fa00 f301 	lsl.w	r3, r0, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0x222>
 800073e:	eb1c 0404 	adds.w	r4, ip, r4
 8000742:	f109 30ff 	add.w	r0, r9, #4294967295
 8000746:	d248      	bcs.n	80007da <__udivmoddi4+0x2aa>
 8000748:	45a2      	cmp	sl, r4
 800074a:	d946      	bls.n	80007da <__udivmoddi4+0x2aa>
 800074c:	f1a9 0902 	sub.w	r9, r9, #2
 8000750:	4464      	add	r4, ip
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	fbb4 f0fe 	udiv	r0, r4, lr
 800075a:	fb0e 4410 	mls	r4, lr, r0, r4
 800075e:	fb00 fa08 	mul.w	sl, r0, r8
 8000762:	b2ad      	uxth	r5, r5
 8000764:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000768:	45a2      	cmp	sl, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x24e>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 35ff 	add.w	r5, r0, #4294967295
 8000774:	d22d      	bcs.n	80007d2 <__udivmoddi4+0x2a2>
 8000776:	45a2      	cmp	sl, r4
 8000778:	d92b      	bls.n	80007d2 <__udivmoddi4+0x2a2>
 800077a:	3802      	subs	r0, #2
 800077c:	4464      	add	r4, ip
 800077e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000782:	fba0 8902 	umull	r8, r9, r0, r2
 8000786:	eba4 040a 	sub.w	r4, r4, sl
 800078a:	454c      	cmp	r4, r9
 800078c:	46c6      	mov	lr, r8
 800078e:	464d      	mov	r5, r9
 8000790:	d319      	bcc.n	80007c6 <__udivmoddi4+0x296>
 8000792:	d016      	beq.n	80007c2 <__udivmoddi4+0x292>
 8000794:	b15e      	cbz	r6, 80007ae <__udivmoddi4+0x27e>
 8000796:	ebb3 020e 	subs.w	r2, r3, lr
 800079a:	eb64 0405 	sbc.w	r4, r4, r5
 800079e:	fa04 f707 	lsl.w	r7, r4, r7
 80007a2:	fa22 f301 	lsr.w	r3, r2, r1
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	e9c6 7400 	strd	r7, r4, [r6]
 80007ae:	2100      	movs	r1, #0
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	4631      	mov	r1, r6
 80007b6:	4630      	mov	r0, r6
 80007b8:	e70c      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007ba:	468c      	mov	ip, r1
 80007bc:	e6eb      	b.n	8000596 <__udivmoddi4+0x66>
 80007be:	4610      	mov	r0, r2
 80007c0:	e6ff      	b.n	80005c2 <__udivmoddi4+0x92>
 80007c2:	4543      	cmp	r3, r8
 80007c4:	d2e6      	bcs.n	8000794 <__udivmoddi4+0x264>
 80007c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80007ca:	eb69 050c 	sbc.w	r5, r9, ip
 80007ce:	3801      	subs	r0, #1
 80007d0:	e7e0      	b.n	8000794 <__udivmoddi4+0x264>
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7d3      	b.n	800077e <__udivmoddi4+0x24e>
 80007d6:	4611      	mov	r1, r2
 80007d8:	e78c      	b.n	80006f4 <__udivmoddi4+0x1c4>
 80007da:	4681      	mov	r9, r0
 80007dc:	e7b9      	b.n	8000752 <__udivmoddi4+0x222>
 80007de:	4608      	mov	r0, r1
 80007e0:	e773      	b.n	80006ca <__udivmoddi4+0x19a>
 80007e2:	4608      	mov	r0, r1
 80007e4:	e749      	b.n	800067a <__udivmoddi4+0x14a>
 80007e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80007ea:	443d      	add	r5, r7
 80007ec:	e713      	b.n	8000616 <__udivmoddi4+0xe6>
 80007ee:	3802      	subs	r0, #2
 80007f0:	443c      	add	r4, r7
 80007f2:	e724      	b.n	800063e <__udivmoddi4+0x10e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d013      	beq.n	8000838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000820:	e000      	b.n	8000824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f9      	beq.n	8000822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800082e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e01f      	b.n	8000896 <selectMux+0x52>
		if (pin & (i << 1)) {
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005a      	lsls	r2, r3, #1
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <selectMux+0x64>)
 8000874:	f001 fd08 	bl	8002288 <HAL_GPIO_WritePin>
 8000878:	e00a      	b.n	8000890 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <selectMux+0x64>)
 800088c:	f001 fcfc 	bl	8002288 <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	2b02      	cmp	r3, #2
 800089a:	dddc      	ble.n	8000856 <selectMux+0x12>
		}
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020000 	.word	0x40020000

080008ac <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f001 fce2 	bl	8002288 <HAL_GPIO_WritePin>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <readPressure>:
	{
		Error_Handler();
	}
}

int readPressure() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
//  ADC_Select_CH0();
  HAL_ADC_Start(&hadc);
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <readPressure+0x2c>)
 80008d4:	f000 ff18 	bl	8001708 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80008d8:	f04f 31ff 	mov.w	r1, #4294967295
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <readPressure+0x2c>)
 80008de:	f000 ff73 	bl	80017c8 <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <readPressure+0x2c>)
 80008e4:	f001 f800 	bl	80018e8 <HAL_ADC_GetValue>
 80008e8:	4603      	mov	r3, r0
 80008ea:	607b      	str	r3, [r7, #4]
  return data;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200001d0 	.word	0x200001d0

080008fc <read3V3>:

float read3V3() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
//  ADC_Select_CH1();
	HAL_ADC_Start(&hadc);
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <read3V3+0x40>)
 8000904:	f000 ff00 	bl	8001708 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <read3V3+0x40>)
 800090e:	f000 ff5b 	bl	80017c8 <HAL_ADC_PollForConversion>
	float data = HAL_ADC_GetValue(&hadc) * ADC_VOLTAGE_CONVERSION;
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <read3V3+0x40>)
 8000914:	f000 ffe8 	bl	80018e8 <HAL_ADC_GetValue>
 8000918:	4603      	mov	r3, r0
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd98 	bl	8000450 <__aeabi_ui2f>
 8000920:	4603      	mov	r3, r0
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <read3V3+0x44>)
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fc28 	bl	800017c <__aeabi_fmul>
 800092c:	4603      	mov	r3, r0
 800092e:	607b      	str	r3, [r7, #4]
	return data;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001d0 	.word	0x200001d0
 8000940:	3a533334 	.word	0x3a533334

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094a:	f000 fd28 	bl	800139e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094e:	f000 f877 	bl	8000a40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <main+0xd8>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f9a4 	bl	8000ca4 <MX_GPIO_Init>
  MX_ADC_Init();
 800095c:	f000 f8bc 	bl	8000ad8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000960:	f000 f912 	bl	8000b88 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000964:	f000 f93e 	bl	8000be4 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000968:	f000 f972 	bl	8000c50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2101      	movs	r1, #1
 8000970:	482b      	ldr	r0, [pc, #172]	; (8000a20 <main+0xdc>)
 8000972:	f001 fc89 	bl	8002288 <HAL_GPIO_WritePin>
  printf("Initialization complete \r\n");
 8000976:	482b      	ldr	r0, [pc, #172]	; (8000a24 <main+0xe0>)
 8000978:	f004 feb0 	bl	80056dc <puts>
  ITM_Port32(31) = 2;
 800097c:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <main+0xd8>)
 800097e:	2202      	movs	r2, #2
 8000980:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read3V3();
 8000982:	f7ff ffbb 	bl	80008fc <read3V3>
//		  exit(EXIT_SUCCESS);
//	}

	// TODO: setup timer to read from SD card and send to database

	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e042      	b.n	8000a12 <main+0xce>
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <main+0xe4>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000994:	4925      	ldr	r1, [pc, #148]	; (8000a2c <main+0xe8>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800099c:	4619      	mov	r1, r3
 800099e:	4610      	mov	r0, r2
 80009a0:	f7ff ff84 	bl	80008ac <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	e02d      	b.n	8000a06 <main+0xc2>
			selectMux(pwr_sel, pwrMuxSelect, 4);
 80009aa:	2204      	movs	r2, #4
 80009ac:	4920      	ldr	r1, [pc, #128]	; (8000a30 <main+0xec>)
 80009ae:	6938      	ldr	r0, [r7, #16]
 80009b0:	f7ff ff48 	bl	8000844 <selectMux>
			// TODO: Timer for 3v3 checking
//			if (belowVoltageThresh()) { // ADC channel for 3v3 sense
//				voltage_thresh_count++;
//			}

			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e01f      	b.n	80009fa <main+0xb6>
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 80009ba:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <main+0xf0>)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c2:	491d      	ldr	r1, [pc, #116]	; (8000a38 <main+0xf4>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff ff6d 	bl	80008ac <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	e00a      	b.n	80009ee <main+0xaa>
					selectMux(sense_sel, senseMuxSelect, 8);
 80009d8:	2208      	movs	r2, #8
 80009da:	4918      	ldr	r1, [pc, #96]	; (8000a3c <main+0xf8>)
 80009dc:	68b8      	ldr	r0, [r7, #8]
 80009de:	f7ff ff31 	bl	8000844 <selectMux>

					// Read voltage sense
					int raw_pressure_voltage = readPressure(); // ADC channel for voltage
 80009e2:	f7ff ff73 	bl	80008cc <readPressure>
 80009e6:	6078      	str	r0, [r7, #4]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	ddf1      	ble.n	80009d8 <main+0x94>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	dddc      	ble.n	80009ba <main+0x76>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	3301      	adds	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	ddce      	ble.n	80009aa <main+0x66>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	617b      	str	r3, [r7, #20]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	ddb9      	ble.n	800098c <main+0x48>
	read3V3();
 8000a18:	e7b3      	b.n	8000982 <main+0x3e>
 8000a1a:	bf00      	nop
 8000a1c:	e000007c 	.word	0xe000007c
 8000a20:	40020800 	.word	0x40020800
 8000a24:	08005fbc 	.word	0x08005fbc
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	08005fd8 	.word	0x08005fd8
 8000a30:	2000001c 	.word	0x2000001c
 8000a34:	20000028 	.word	0x20000028
 8000a38:	08005fe8 	.word	0x08005fe8
 8000a3c:	20000010 	.word	0x20000010

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b092      	sub	sp, #72	; 0x48
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fdce 	bl	80055f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <SystemClock_Config+0x94>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <SystemClock_Config+0x94>)
 8000a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a70:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a72:	2312      	movs	r3, #18
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a86:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fa15 	bl	8003ec4 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000aa0:	f000 f9dc 	bl	8000e5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fd31 	bl	8004524 <HAL_RCC_ClockConfig>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 f9c8 	bl	8000e5c <Error_Handler>
  }
}
 8000acc:	bf00      	nop
 8000ace:	3748      	adds	r7, #72	; 0x48
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000aea:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <MX_ADC_Init+0xac>)
 8000aec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000b0c:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000b12:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b36:	2210      	movs	r2, #16
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b4a:	f000 fc97 	bl	800147c <HAL_ADC_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000b54:	f000 f982 	bl	8000e5c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_ADC_Init+0xa8>)
 8000b6a:	f000 fec9 	bl	8001900 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000b74:	f000 f972 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200001d0 	.word	0x200001d0
 8000b84:	40012400 	.word	0x40012400

08000b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_I2C1_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_I2C1_Init+0x58>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000baa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_I2C1_Init+0x50>)
 8000bc6:	f001 fb77 	bl	80022b8 <HAL_I2C_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bd0:	f000 f944 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000017c 	.word	0x2000017c
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	000186a0 	.word	0x000186a0

08000be4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <MX_SPI2_Init+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c30:	220a      	movs	r2, #10
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_SPI2_Init+0x64>)
 8000c36:	f003 fee1 	bl	80049fc <HAL_SPI_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c40:	f000 f90c 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000e0 	.word	0x200000e0
 8000c4c:	40003800 	.word	0x40003800

08000c50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_USART3_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART3_UART_Init+0x4c>)
 8000c88:	f004 f837 	bl	8004cfa <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f8e3 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000138 	.word	0x20000138
 8000ca0:	40004800 	.word	0x40004800

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b55      	ldr	r3, [pc, #340]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a54      	ldr	r2, [pc, #336]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a4e      	ldr	r2, [pc, #312]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	4a48      	ldr	r2, [pc, #288]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	61d3      	str	r3, [r2, #28]
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a42      	ldr	r2, [pc, #264]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b40      	ldr	r3, [pc, #256]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <MX_GPIO_Init+0x16c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000d32:	2200      	movs	r2, #0
 8000d34:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8000d38:	4836      	ldr	r0, [pc, #216]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d3a:	f001 faa5 	bl	8002288 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8000d44:	4834      	ldr	r0, [pc, #208]	; (8000e18 <MX_GPIO_Init+0x174>)
 8000d46:	f001 fa9f 	bl	8002288 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f641 4165 	movw	r1, #7269	; 0x1c65
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <MX_GPIO_Init+0x178>)
 8000d52:	f001 fa99 	bl	8002288 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2104      	movs	r1, #4
 8000d5a:	4831      	ldr	r0, [pc, #196]	; (8000e20 <MX_GPIO_Init+0x17c>)
 8000d5c:	f001 fa94 	bl	8002288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000d60:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8000d64:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4826      	ldr	r0, [pc, #152]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000d7a:	f001 f905 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000d7e:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8000d82:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4820      	ldr	r0, [pc, #128]	; (8000e18 <MX_GPIO_Init+0x174>)
 8000d98:	f001 f8f6 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000d9c:	f641 4365 	movw	r3, #7269	; 0x1c65
 8000da0:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 0314 	add.w	r3, r7, #20
 8000db2:	4619      	mov	r1, r3
 8000db4:	4819      	ldr	r0, [pc, #100]	; (8000e1c <MX_GPIO_Init+0x178>)
 8000db6:	f001 f8e7 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8000dba:	2340      	movs	r3, #64	; 0x40
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4811      	ldr	r0, [pc, #68]	; (8000e14 <MX_GPIO_Init+0x170>)
 8000dce:	f001 f8db 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8000dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_GPIO_Init+0x174>)
 8000de8:	f001 f8ce 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000dec:	2304      	movs	r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_GPIO_Init+0x17c>)
 8000e04:	f001 f8c0 	bl	8001f88 <HAL_GPIO_Init>

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400
 8000e20:	40020c00 	.word	0x40020c00

08000e24 <_write>:

/* USER CODE BEGIN 4 */
// Use GCC for printf
// Avoid wasting a UART terminal just for writing
int _write(int file, char *ptr, int len) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	e009      	b.n	8000e4a <_write+0x26>
		ITM_SendChar(*ptr++);
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1c5a      	adds	r2, r3, #1
 8000e3a:	60ba      	str	r2, [r7, #8]
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fcda 	bl	80007f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dbf1      	blt.n	8000e36 <_write+0x12>
	}
	return len;
 8000e52:	687b      	ldr	r3, [r7, #4]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e78:	6253      	str	r3, [r2, #36]	; 0x24
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6213      	str	r3, [r2, #32]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x68>)
 8000e94:	6a1b      	ldr	r3, [r3, #32]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x68>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <HAL_MspInit+0x68>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x68>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2005      	movs	r0, #5
 8000ebc:	f000 ffa3 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ec0:	2005      	movs	r0, #5
 8000ec2:	f000 ffbc 	bl	8001e3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023800 	.word	0x40023800

08000ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <HAL_ADC_MspInit+0xd4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d153      	bne.n	8000f9e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a2c      	ldr	r2, [pc, #176]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000efc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f0a:	61bb      	str	r3, [r7, #24]
 8000f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a26      	ldr	r2, [pc, #152]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a1a      	ldr	r2, [pc, #104]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <HAL_ADC_MspInit+0xd8>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f56:	2304      	movs	r3, #4
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <HAL_ADC_MspInit+0xdc>)
 8000f6a:	f001 f80d 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f6e:	2308      	movs	r3, #8
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <HAL_ADC_MspInit+0xe0>)
 8000f82:	f001 f801 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <HAL_ADC_MspInit+0xe4>)
 8000f9a:	f000 fff5 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3730      	adds	r7, #48	; 0x30
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40012400 	.word	0x40012400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020800 	.word	0x40020800
 8000fb4:	40020000 	.word	0x40020000
 8000fb8:	40020400 	.word	0x40020400

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_I2C_MspInit+0x9c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d138      	bne.n	8001050 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_I2C_MspInit+0xa0>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <HAL_I2C_MspInit+0xa0>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	61d3      	str	r3, [r2, #28]
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_I2C_MspInit+0xa0>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000ff6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ffc:	2312      	movs	r3, #18
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001008:	2304      	movs	r3, #4
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <HAL_I2C_MspInit+0xa4>)
 8001014:	f000 ffb8 	bl	8001f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_I2C_MspInit+0xa0>)
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_I2C_MspInit+0xa0>)
 800101e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001022:	6253      	str	r3, [r2, #36]	; 0x24
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_I2C_MspInit+0xa0>)
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	201f      	movs	r0, #31
 8001036:	f000 fee6 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800103a:	201f      	movs	r0, #31
 800103c:	f000 feff 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2020      	movs	r0, #32
 8001046:	f000 fede 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800104a:	2020      	movs	r0, #32
 800104c:	f000 fef7 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40005400 	.word	0x40005400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_SPI_MspInit+0x8c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d130      	bne.n	80010e8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6253      	str	r3, [r2, #36]	; 0x24
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_SPI_MspInit+0x90>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010c8:	2305      	movs	r3, #5
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <HAL_SPI_MspInit+0x94>)
 80010d4:	f000 ff58 	bl	8001f88 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2024      	movs	r0, #36	; 0x24
 80010de:	f000 fe92 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010e2:	2024      	movs	r0, #36	; 0x24
 80010e4:	f000 feab 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40003800 	.word	0x40003800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_UART_MspInit+0x8c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d130      	bne.n	8001180 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_UART_MspInit+0x90>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_UART_MspInit+0x90>)
 8001124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001128:	6253      	str	r3, [r2, #36]	; 0x24
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x90>)
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x90>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0x90>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x90>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 800114e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115c:	2303      	movs	r3, #3
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001160:	2307      	movs	r3, #7
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4619      	mov	r1, r3
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0x94>)
 800116c:	f000 ff0c 	bl	8001f88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2027      	movs	r0, #39	; 0x27
 8001176:	f000 fe46 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800117a:	2027      	movs	r0, #39	; 0x27
 800117c:	f000 fe5f 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004800 	.word	0x40004800
 800118c:	40023800 	.word	0x40023800
 8001190:	40020800 	.word	0x40020800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f933 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <I2C1_EV_IRQHandler+0x10>)
 80011f6:	f001 f9a3 	bl	8002540 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000017c 	.word	0x2000017c

08001204 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <I2C1_ER_IRQHandler+0x10>)
 800120a:	f001 fb0a 	bl	8002822 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000017c 	.word	0x2000017c

08001218 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <SPI2_IRQHandler+0x10>)
 800121e:	f003 fc69 	bl	8004af4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000e0 	.word	0x200000e0

0800122c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001230:	4802      	ldr	r0, [pc, #8]	; (800123c <USART3_IRQHandler+0x10>)
 8001232:	f003 fdaf 	bl	8004d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000138 	.word	0x20000138

08001240 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
	}

return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:
	}
	return len;
}

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012a0:	605a      	str	r2, [r3, #4]
	return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
	return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f004 f946 	bl	800559c <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20004000 	.word	0x20004000
 800133c:	00000400 	.word	0x00000400
 8001340:	200000d4 	.word	0x200000d4
 8001344:	20000238 	.word	0x20000238

08001348 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137a:	f7ff ffe5 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137e:	f004 f913 	bl	80055a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001382:	f7ff fadf 	bl	8000944 <main>
  bx lr
 8001386:	4770      	bx	lr
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001390:	080060a0 	.word	0x080060a0
  ldr r2, =_sbss
 8001394:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001398:	20000238 	.word	0x20000238

0800139c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC1_IRQHandler>

0800139e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f000 fd21 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ae:	200f      	movs	r0, #15
 80013b0:	f000 f80e 	bl	80013d0 <HAL_InitTick>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	71fb      	strb	r3, [r7, #7]
 80013be:	e001      	b.n	80013c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c0:	f7ff fd52 	bl	8000e68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c4:	79fb      	ldrb	r3, [r7, #7]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013dc:	4b16      	ldr	r3, [pc, #88]	; (8001438 <HAL_InitTick+0x68>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d022      	beq.n	800142a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_InitTick+0x6c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x68>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fd2e 	bl	8001e5a <HAL_SYSTICK_Config>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10f      	bne.n	8001424 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	d809      	bhi.n	800141e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140a:	2200      	movs	r2, #0
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	f000 fcf8 	bl	8001e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_InitTick+0x70>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e007      	b.n	800142e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e004      	b.n	800142e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e001      	b.n	800142e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000050 	.word	0x20000050
 800143c:	20000048 	.word	0x20000048
 8001440:	2000004c 	.word	0x2000004c

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <HAL_IncTick+0x1c>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000224 	.word	0x20000224
 8001464:	20000050 	.word	0x20000050

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000224 	.word	0x20000224

0800147c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e127      	b.n	80016ec <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d115      	bne.n	80014d6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b8:	4b8e      	ldr	r3, [pc, #568]	; (80016f4 <HAL_ADC_Init+0x278>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	4a8d      	ldr	r2, [pc, #564]	; (80016f4 <HAL_ADC_Init+0x278>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6213      	str	r3, [r2, #32]
 80014c4:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <HAL_ADC_Init+0x278>)
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fcff 	bl	8000ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80ff 	bne.w	80016e2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ec:	f023 0302 	bic.w	r3, r3, #2
 80014f0:	f043 0202 	orr.w	r2, r3, #2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80014f8:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_ADC_Init+0x27c>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	497c      	ldr	r1, [pc, #496]	; (80016f8 <HAL_ADC_Init+0x27c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001512:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800151a:	4619      	mov	r1, r3
 800151c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001520:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001536:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800153c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	fa93 f3a3 	rbit	r3, r3
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800155e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001562:	4313      	orrs	r3, r2
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	2b10      	cmp	r3, #16
 800156c:	d007      	beq.n	800157e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001576:	4313      	orrs	r3, r2
 8001578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800157a:	4313      	orrs	r3, r2
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b40      	cmp	r3, #64	; 0x40
 800158a:	d04f      	beq.n	800162c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001592:	4313      	orrs	r3, r2
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800159e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6912      	ldr	r2, [r2, #16]
 80015a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80015a8:	d003      	beq.n	80015b2 <HAL_ADC_Init+0x136>
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6912      	ldr	r2, [r2, #16]
 80015ae:	2a01      	cmp	r2, #1
 80015b0:	d102      	bne.n	80015b8 <HAL_ADC_Init+0x13c>
 80015b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b6:	e000      	b.n	80015ba <HAL_ADC_Init+0x13e>
 80015b8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80015ba:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80015bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015be:	4313      	orrs	r3, r2
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d125      	bne.n	8001618 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d114      	bne.n	8001600 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	3b01      	subs	r3, #1
 80015dc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80015e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	fa92 f2a2 	rbit	r2, r2
 80015e8:	617a      	str	r2, [r7, #20]
  return result;
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	fab2 f282 	clz	r2, r2
 80015f0:	b2d2      	uxtb	r2, r2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015fa:	4313      	orrs	r3, r2
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
 80015fe:	e00b      	b.n	8001618 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	f043 0220 	orr.w	r2, r3, #32
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <HAL_ADC_Init+0x280>)
 8001620:	4013      	ands	r3, r2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001628:	430b      	orrs	r3, r1
 800162a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_ADC_Init+0x284>)
 8001634:	4013      	ands	r3, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800163c:	430b      	orrs	r3, r1
 800163e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001648:	d003      	beq.n	8001652 <HAL_ADC_Init+0x1d6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d119      	bne.n	8001686 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	3b01      	subs	r3, #1
 8001662:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001666:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	fa92 f2a2 	rbit	r2, r2
 800166e:	60fa      	str	r2, [r7, #12]
  return result;
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	fab2 f282 	clz	r2, r2
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	fa03 f202 	lsl.w	r2, r3, r2
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	e007      	b.n	8001696 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_ADC_Init+0x288>)
 800169e:	4013      	ands	r3, r2
 80016a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d10b      	bne.n	80016be <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80016bc:	e014      	b.n	80016e8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f023 0312 	bic.w	r3, r3, #18
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016e0:	e002      	b.n	80016e8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3738      	adds	r7, #56	; 0x38
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40012700 	.word	0x40012700
 80016fc:	fcfc16ff 	.word	0xfcfc16ff
 8001700:	c0fff18d 	.word	0xc0fff18d
 8001704:	bf80fffe 	.word	0xbf80fffe

08001708 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_Start+0x1a>
 800171e:	2302      	movs	r3, #2
 8001720:	e04e      	b.n	80017c0 <HAL_ADC_Start+0xb8>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fa38 	bl	8001ba0 <ADC_Enable>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d141      	bne.n	80017be <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001760:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001764:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001778:	d106      	bne.n	8001788 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	f023 0206 	bic.w	r2, r3, #6
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	651a      	str	r2, [r3, #80]	; 0x50
 8001786:	e002      	b.n	800178e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800179e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017bc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e4:	d113      	bne.n	800180e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017f4:	d10b      	bne.n	800180e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f043 0220 	orr.w	r2, r3, #32
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e068      	b.n	80018e0 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800180e:	f7ff fe2b 	bl	8001468 <HAL_GetTick>
 8001812:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001814:	e021      	b.n	800185a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d01d      	beq.n	800185a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d007      	beq.n	8001834 <HAL_ADC_PollForConversion+0x6c>
 8001824:	f7ff fe20 	bl	8001468 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d212      	bcs.n	800185a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10b      	bne.n	800185a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f043 0204 	orr.w	r2, r3, #4
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e042      	b.n	80018e0 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0d6      	beq.n	8001816 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0212 	mvn.w	r2, #18
 8001878:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d124      	bne.n	80018de <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11f      	bne.n	80018de <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d111      	bne.n	80018de <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x20>
 800191c:	2302      	movs	r3, #2
 800191e:	e134      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x28a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b06      	cmp	r3, #6
 800192e:	d81c      	bhi.n	800196a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3b05      	subs	r3, #5
 8001942:	221f      	movs	r2, #31
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	4019      	ands	r1, r3
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b05      	subs	r3, #5
 800195c:	fa00 f203 	lsl.w	r2, r0, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
 8001968:	e07e      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d81c      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b23      	subs	r3, #35	; 0x23
 8001984:	221f      	movs	r2, #31
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	4019      	ands	r1, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	3b23      	subs	r3, #35	; 0x23
 800199e:	fa00 f203 	lsl.w	r2, r0, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80019aa:	e05d      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d81c      	bhi.n	80019ee <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	3b41      	subs	r3, #65	; 0x41
 80019c6:	221f      	movs	r2, #31
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4019      	ands	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	3b41      	subs	r3, #65	; 0x41
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
 80019ec:	e03c      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b18      	cmp	r3, #24
 80019f4:	d81c      	bhi.n	8001a30 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b5f      	subs	r3, #95	; 0x5f
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	4019      	ands	r1, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b5f      	subs	r3, #95	; 0x5f
 8001a22:	fa00 f203 	lsl.w	r2, r0, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a2e:	e01b      	b.n	8001a68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	3b7d      	subs	r3, #125	; 0x7d
 8001a42:	221f      	movs	r2, #31
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4019      	ands	r1, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b7d      	subs	r3, #125	; 0x7d
 8001a5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b09      	cmp	r3, #9
 8001a6e:	d81a      	bhi.n	8001aa6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6959      	ldr	r1, [r3, #20]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	2207      	movs	r2, #7
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4019      	ands	r1, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6898      	ldr	r0, [r3, #8]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	615a      	str	r2, [r3, #20]
 8001aa4:	e042      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b13      	cmp	r3, #19
 8001aac:	d81c      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6919      	ldr	r1, [r3, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	3b1e      	subs	r3, #30
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	4019      	ands	r1, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6898      	ldr	r0, [r3, #8]
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b1e      	subs	r3, #30
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	611a      	str	r2, [r3, #16]
 8001ae6:	e021      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b1a      	cmp	r3, #26
 8001aee:	d81c      	bhi.n	8001b2a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68d9      	ldr	r1, [r3, #12]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	3b3c      	subs	r3, #60	; 0x3c
 8001b02:	2207      	movs	r2, #7
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4019      	ands	r1, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6898      	ldr	r0, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	3b3c      	subs	r3, #60	; 0x3c
 8001b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
 8001b28:	e000      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001b2a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d003      	beq.n	8001b3c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b38:	2b11      	cmp	r3, #17
 8001b3a:	d121      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_ADC_ConfigChannel+0x294>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d11b      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_ADC_ConfigChannel+0x294>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_ADC_ConfigChannel+0x294>)
 8001b4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b52:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d111      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_ADC_ConfigChannel+0x298>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <HAL_ADC_ConfigChannel+0x29c>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9a      	lsrs	r2, r3, #18
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40012700 	.word	0x40012700
 8001b98:	20000048 	.word	0x20000048
 8001b9c:	431bde83 	.word	0x431bde83

08001ba0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d043      	beq.n	8001c46 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0201 	orr.w	r2, r2, #1
 8001bcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <ADC_Enable+0xb0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <ADC_Enable+0xb4>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	0c9a      	lsrs	r2, r3, #18
 8001bda:	4613      	mov	r3, r2
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	4413      	add	r3, r2
 8001be0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001be2:	e002      	b.n	8001bea <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f9      	bne.n	8001be4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001bf0:	f7ff fc3a 	bl	8001468 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bf6:	e01f      	b.n	8001c38 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001bf8:	f7ff fc36 	bl	8001468 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d918      	bls.n	8001c38 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c10:	2b40      	cmp	r3, #64	; 0x40
 8001c12:	d011      	beq.n	8001c38 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	f043 0210 	orr.w	r2, r3, #16
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c42:	2b40      	cmp	r3, #64	; 0x40
 8001c44:	d1d8      	bne.n	8001bf8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000048 	.word	0x20000048
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <__NVIC_SetPriorityGrouping>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <__NVIC_EnableIRQ+0x34>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	; (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	4313      	orrs	r3, r2
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <SysTick_Config>:
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	; (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff90 	bl	8001cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff2d 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff42 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff90 	bl	8001d48 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5f 	bl	8001cf4 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff35 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e022      	b.n	8001ee2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 020e 	bic.w	r2, r2, #14
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f003 021c 	and.w	r2, r3, #28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d005      	beq.n	8001f10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2204      	movs	r2, #4
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e029      	b.n	8001f64 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 020e 	bic.w	r2, r2, #14
 8001f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 021c 	and.w	r2, r3, #28
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f42:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	4798      	blx	r3
    }
  }
  return status;
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7c:	b2db      	uxtb	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f9e:	e154      	b.n	800224a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8146 	beq.w	8002244 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d005      	beq.n	8001fd0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d130      	bne.n	8002032 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	2203      	movs	r2, #3
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002006:	2201      	movs	r2, #1
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 0201 	and.w	r2, r3, #1
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b03      	cmp	r3, #3
 800203c:	d017      	beq.n	800206e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	2203      	movs	r2, #3
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4313      	orrs	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d123      	bne.n	80020c2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002086:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	08da      	lsrs	r2, r3, #3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3208      	adds	r2, #8
 80020bc:	6939      	ldr	r1, [r7, #16]
 80020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2203      	movs	r2, #3
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4013      	ands	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0203 	and.w	r2, r3, #3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80a0 	beq.w	8002244 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	4b58      	ldr	r3, [pc, #352]	; (8002268 <HAL_GPIO_Init+0x2e0>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_GPIO_Init+0x2e0>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	4b55      	ldr	r3, [pc, #340]	; (8002268 <HAL_GPIO_Init+0x2e0>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800211c:	4a53      	ldr	r2, [pc, #332]	; (800226c <HAL_GPIO_Init+0x2e4>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a4b      	ldr	r2, [pc, #300]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d019      	beq.n	800217c <HAL_GPIO_Init+0x1f4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a4a      	ldr	r2, [pc, #296]	; (8002274 <HAL_GPIO_Init+0x2ec>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x1f0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a49      	ldr	r2, [pc, #292]	; (8002278 <HAL_GPIO_Init+0x2f0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1ec>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a48      	ldr	r2, [pc, #288]	; (800227c <HAL_GPIO_Init+0x2f4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1e8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_GPIO_Init+0x2f8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1e4>
 8002168:	2304      	movs	r3, #4
 800216a:	e008      	b.n	800217e <HAL_GPIO_Init+0x1f6>
 800216c:	2305      	movs	r3, #5
 800216e:	e006      	b.n	800217e <HAL_GPIO_Init+0x1f6>
 8002170:	2303      	movs	r3, #3
 8002172:	e004      	b.n	800217e <HAL_GPIO_Init+0x1f6>
 8002174:	2302      	movs	r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x1f6>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_GPIO_Init+0x1f6>
 800217c:	2300      	movs	r3, #0
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	0092      	lsls	r2, r2, #2
 8002186:	4093      	lsls	r3, r2
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <HAL_GPIO_Init+0x2e4>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c6:	4b2f      	ldr	r3, [pc, #188]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800223e:	4a11      	ldr	r2, [pc, #68]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	3301      	adds	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	f47f aea3 	bne.w	8001fa0 <HAL_GPIO_Init+0x18>
  }
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40010000 	.word	0x40010000
 8002270:	40020000 	.word	0x40020000
 8002274:	40020400 	.word	0x40020400
 8002278:	40020800 	.word	0x40020800
 800227c:	40020c00 	.word	0x40020c00
 8002280:	40021000 	.word	0x40021000
 8002284:	40010400 	.word	0x40010400

08002288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	807b      	strh	r3, [r7, #2]
 8002294:	4613      	mov	r3, r2
 8002296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002298:	787b      	ldrb	r3, [r7, #1]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229e:	887a      	ldrh	r2, [r7, #2]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80022a4:	e003      	b.n	80022ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e12b      	b.n	8002522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fe6c 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800230a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800231a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800231c:	f002 fae6 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a81      	ldr	r2, [pc, #516]	; (800252c <HAL_I2C_Init+0x274>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d807      	bhi.n	800233c <HAL_I2C_Init+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a80      	ldr	r2, [pc, #512]	; (8002530 <HAL_I2C_Init+0x278>)
 8002330:	4293      	cmp	r3, r2
 8002332:	bf94      	ite	ls
 8002334:	2301      	movls	r3, #1
 8002336:	2300      	movhi	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e006      	b.n	800234a <HAL_I2C_Init+0x92>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a7d      	ldr	r2, [pc, #500]	; (8002534 <HAL_I2C_Init+0x27c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	bf94      	ite	ls
 8002344:	2301      	movls	r3, #1
 8002346:	2300      	movhi	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0e7      	b.n	8002522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4a78      	ldr	r2, [pc, #480]	; (8002538 <HAL_I2C_Init+0x280>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_I2C_Init+0x274>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d802      	bhi.n	800238c <HAL_I2C_Init+0xd4>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	3301      	adds	r3, #1
 800238a:	e009      	b.n	80023a0 <HAL_I2C_Init+0xe8>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	4a69      	ldr	r2, [pc, #420]	; (800253c <HAL_I2C_Init+0x284>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	099b      	lsrs	r3, r3, #6
 800239e:	3301      	adds	r3, #1
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	495c      	ldr	r1, [pc, #368]	; (800252c <HAL_I2C_Init+0x274>)
 80023bc:	428b      	cmp	r3, r1
 80023be:	d819      	bhi.n	80023f4 <HAL_I2C_Init+0x13c>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e59      	subs	r1, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ce:	1c59      	adds	r1, r3, #1
 80023d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023d4:	400b      	ands	r3, r1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_I2C_Init+0x138>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1e59      	subs	r1, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80023e8:	3301      	adds	r3, #1
 80023ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ee:	e051      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e04f      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <HAL_I2C_Init+0x168>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	440b      	add	r3, r1
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e012      	b.n	8002446 <HAL_I2C_Init+0x18e>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	0099      	lsls	r1, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	fbb0 f3f3 	udiv	r3, r0, r3
 8002436:	3301      	adds	r3, #1
 8002438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_I2C_Init+0x196>
 800244a:	2301      	movs	r3, #1
 800244c:	e022      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <HAL_I2C_Init+0x1bc>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e58      	subs	r0, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	440b      	add	r3, r1
 8002464:	fbb0 f3f3 	udiv	r3, r0, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002472:	e00f      	b.n	8002494 <HAL_I2C_Init+0x1dc>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1e58      	subs	r0, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6859      	ldr	r1, [r3, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	0099      	lsls	r1, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	fbb0 f3f3 	udiv	r3, r0, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	6809      	ldr	r1, [r1, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69da      	ldr	r2, [r3, #28]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6911      	ldr	r1, [r2, #16]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68d2      	ldr	r2, [r2, #12]
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	000186a0 	.word	0x000186a0
 8002530:	001e847f 	.word	0x001e847f
 8002534:	003d08ff 	.word	0x003d08ff
 8002538:	431bde83 	.word	0x431bde83
 800253c:	10624dd3 	.word	0x10624dd3

08002540 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002560:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002568:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b10      	cmp	r3, #16
 800256e:	d003      	beq.n	8002578 <HAL_I2C_EV_IRQHandler+0x38>
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b40      	cmp	r3, #64	; 0x40
 8002574:	f040 80c1 	bne.w	80026fa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10d      	bne.n	80025ae <HAL_I2C_EV_IRQHandler+0x6e>
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002598:	d003      	beq.n	80025a2 <HAL_I2C_EV_IRQHandler+0x62>
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80025a0:	d101      	bne.n	80025a6 <HAL_I2C_EV_IRQHandler+0x66>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_I2C_EV_IRQHandler+0x68>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	f000 8132 	beq.w	8002812 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00c      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x92>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	0a5b      	lsrs	r3, r3, #9
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f001 fc63 	bl	8003e90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fd6f 	bl	80030ae <I2C_Master_SB>
 80025d0:	e092      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08db      	lsrs	r3, r3, #3
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <HAL_I2C_EV_IRQHandler+0xb2>
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	0a5b      	lsrs	r3, r3, #9
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fde4 	bl	80031b8 <I2C_Master_ADD10>
 80025f0:	e082      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_I2C_EV_IRQHandler+0xd2>
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	0a5b      	lsrs	r3, r3, #9
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fdfd 	bl	800320a <I2C_Master_ADDR>
 8002610:	e072      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03b      	beq.n	8002696 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262c:	f000 80f3 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	09db      	lsrs	r3, r3, #7
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00f      	beq.n	800265c <HAL_I2C_EV_IRQHandler+0x11c>
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	0a9b      	lsrs	r3, r3, #10
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d009      	beq.n	800265c <HAL_I2C_EV_IRQHandler+0x11c>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f9e9 	bl	8002a2c <I2C_MasterTransmit_TXE>
 800265a:	e04d      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80d6 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	0a5b      	lsrs	r3, r3, #9
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80cf 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002678:	7bbb      	ldrb	r3, [r7, #14]
 800267a:	2b21      	cmp	r3, #33	; 0x21
 800267c:	d103      	bne.n	8002686 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa70 	bl	8002b64 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002684:	e0c7      	b.n	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	f040 80c4 	bne.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fade 	bl	8002c50 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002694:	e0bf      	b.n	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a4:	f000 80b7 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	099b      	lsrs	r3, r3, #6
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00f      	beq.n	80026d4 <HAL_I2C_EV_IRQHandler+0x194>
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	0a9b      	lsrs	r3, r3, #10
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_I2C_EV_IRQHandler+0x194>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d103      	bne.n	80026d4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fb53 	bl	8002d78 <I2C_MasterReceive_RXNE>
 80026d2:	e011      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 809a 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	0a5b      	lsrs	r3, r3, #9
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8093 	beq.w	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fbf2 	bl	8002eda <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f6:	e08e      	b.n	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
 80026f8:	e08d      	b.n	8002816 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	e007      	b.n	800271c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x20e>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	0a5b      	lsrs	r3, r3, #9
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 ffab 	bl	80036a2 <I2C_Slave_ADDR>
 800274c:	e066      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x22e>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0a5b      	lsrs	r3, r3, #9
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 ffe6 	bl	8003738 <I2C_Slave_STOPF>
 800276c:	e056      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800276e:	7bbb      	ldrb	r3, [r7, #14]
 8002770:	2b21      	cmp	r3, #33	; 0x21
 8002772:	d002      	beq.n	800277a <HAL_I2C_EV_IRQHandler+0x23a>
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	2b29      	cmp	r3, #41	; 0x29
 8002778:	d125      	bne.n	80027c6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	09db      	lsrs	r3, r3, #7
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00f      	beq.n	80027a6 <HAL_I2C_EV_IRQHandler+0x266>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	0a9b      	lsrs	r3, r3, #10
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_I2C_EV_IRQHandler+0x266>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fec3 	bl	800352a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027a4:	e039      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d033      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0x2da>
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	0a5b      	lsrs	r3, r3, #9
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d02d      	beq.n	800281a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fef0 	bl	80035a4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c4:	e029      	b.n	800281a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00f      	beq.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	0a9b      	lsrs	r3, r3, #10
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2b2>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d103      	bne.n	80027f2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fefa 	bl	80035e4 <I2C_SlaveReceive_RXNE>
 80027f0:	e014      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0a5b      	lsrs	r3, r3, #9
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 ff28 	bl	8003660 <I2C_SlaveReceive_BTF>
 8002810:	e004      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800281a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b08a      	sub	sp, #40	; 0x28
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002844:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <HAL_I2C_ER_IRQHandler+0x4e>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800286e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <HAL_I2C_ER_IRQHandler+0x78>
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002898:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	0a9b      	lsrs	r3, r3, #10
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03f      	beq.n	8002926 <HAL_I2C_ER_IRQHandler+0x104>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d039      	beq.n	8002926 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80028b2:	7efb      	ldrb	r3, [r7, #27]
 80028b4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80028cc:	7ebb      	ldrb	r3, [r7, #26]
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d112      	bne.n	80028f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10f      	bne.n	80028f8 <HAL_I2C_ER_IRQHandler+0xd6>
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	2b21      	cmp	r3, #33	; 0x21
 80028dc:	d008      	beq.n	80028f0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b29      	cmp	r3, #41	; 0x29
 80028e2:	d005      	beq.n	80028f0 <HAL_I2C_ER_IRQHandler+0xce>
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	2b28      	cmp	r3, #40	; 0x28
 80028e8:	d106      	bne.n	80028f8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2b21      	cmp	r3, #33	; 0x21
 80028ee:	d103      	bne.n	80028f8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 f851 	bl	8003998 <I2C_Slave_AF>
 80028f6:	e016      	b.n	8002926 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002900:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800290a:	7efb      	ldrb	r3, [r7, #27]
 800290c:	2b10      	cmp	r3, #16
 800290e:	d002      	beq.n	8002916 <HAL_I2C_ER_IRQHandler+0xf4>
 8002910:	7efb      	ldrb	r3, [r7, #27]
 8002912:	2b40      	cmp	r3, #64	; 0x40
 8002914:	d107      	bne.n	8002926 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002924:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	0adb      	lsrs	r3, r3, #11
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00e      	beq.n	8002950 <HAL_I2C_ER_IRQHandler+0x12e>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800294e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f001 f888 	bl	8003a78 <I2C_ITError>
  }
}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
 80029c4:	4613      	mov	r3, r2
 80029c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d150      	bne.n	8002af4 <I2C_MasterTransmit_TXE+0xc8>
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b21      	cmp	r3, #33	; 0x21
 8002a56:	d14d      	bne.n	8002af4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d01d      	beq.n	8002a9a <I2C_MasterTransmit_TXE+0x6e>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d01a      	beq.n	8002a9a <I2C_MasterTransmit_TXE+0x6e>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a6a:	d016      	beq.n	8002a9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2211      	movs	r2, #17
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff6c 	bl	8002970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a98:	e060      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aa8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d107      	bne.n	8002ae4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff81 	bl	80029e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ae2:	e03b      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff3f 	bl	8002970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002af2:	e033      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	2b21      	cmp	r3, #33	; 0x21
 8002af8:	d005      	beq.n	8002b06 <I2C_MasterTransmit_TXE+0xda>
 8002afa:	7bbb      	ldrb	r3, [r7, #14]
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d12d      	bne.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b22      	cmp	r3, #34	; 0x22
 8002b04:	d12a      	bne.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d108      	bne.n	8002b22 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002b20:	e01c      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d103      	bne.n	8002b36 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f88e 	bl	8002c50 <I2C_MemoryTransmit_TXE_BTF>
}
 8002b34:	e012      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	781a      	ldrb	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b5a:	e7ff      	b.n	8002b5c <I2C_MasterTransmit_TXE+0x130>
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b21      	cmp	r3, #33	; 0x21
 8002b7c:	d164      	bne.n	8002c48 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d012      	beq.n	8002bae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002bac:	e04c      	b.n	8002c48 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d01d      	beq.n	8002bf0 <I2C_MasterTransmit_BTF+0x8c>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d01a      	beq.n	8002bf0 <I2C_MasterTransmit_BTF+0x8c>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc0:	d016      	beq.n	8002bf0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2211      	movs	r2, #17
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fec1 	bl	8002970 <HAL_I2C_MasterTxCpltCallback>
}
 8002bee:	e02b      	b.n	8002c48 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bfe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d107      	bne.n	8002c3a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fed6 	bl	80029e4 <HAL_I2C_MemTxCpltCallback>
}
 8002c38:	e006      	b.n	8002c48 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fe94 	bl	8002970 <HAL_I2C_MasterTxCpltCallback>
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11d      	bne.n	8002ca4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10b      	bne.n	8002c88 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c80:	1c9a      	adds	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002c86:	e073      	b.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	121b      	asrs	r3, r3, #8
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ca2:	e065      	b.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10b      	bne.n	8002cc4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cc2:	e055      	b.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d151      	bne.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b22      	cmp	r3, #34	; 0x22
 8002cd0:	d10d      	bne.n	8002cee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cec:	e040      	b.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b21      	cmp	r3, #33	; 0x21
 8002cfc:	d112      	bne.n	8002d24 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002d22:	e025      	b.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d120      	bne.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b21      	cmp	r3, #33	; 0x21
 8002d32:	d11d      	bne.n	8002d70 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d42:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fe3a 	bl	80029e4 <HAL_I2C_MemTxCpltCallback>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b22      	cmp	r3, #34	; 0x22
 8002d8a:	f040 80a2 	bne.w	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d921      	bls.n	8002de0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	f040 8082 	bne.w	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ddc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002dde:	e078      	b.n	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d074      	beq.n	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d002      	beq.n	8002df4 <I2C_MasterReceive_RXNE+0x7c>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d16e      	bne.n	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f819 	bl	8003e2c <I2C_WaitOnSTOPRequestThroughIT>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d142      	bne.n	8002e86 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e1e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d10a      	bne.n	8002e70 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff fdc4 	bl	80029f6 <HAL_I2C_MemRxCpltCallback>
}
 8002e6e:	e030      	b.n	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2212      	movs	r2, #18
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fd7f 	bl	8002982 <HAL_I2C_MasterRxCpltCallback>
}
 8002e84:	e025      	b.n	8002ed2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e94:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fd9b 	bl	8002a08 <HAL_I2C_ErrorCallback>
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d11b      	bne.n	8002f2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002f28:	e0bd      	b.n	80030a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d129      	bne.n	8002f88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d00a      	beq.n	8002f60 <I2C_MasterReceive_BTF+0x86>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d007      	beq.n	8002f60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f86:	e08e      	b.n	80030a6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d176      	bne.n	8003080 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d002      	beq.n	8002f9e <I2C_MasterReceive_BTF+0xc4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d108      	bne.n	8002fb0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e019      	b.n	8002fe4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d002      	beq.n	8002fbc <I2C_MasterReceive_BTF+0xe2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d108      	bne.n	8002fce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e00a      	b.n	8002fe4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d007      	beq.n	8002fe4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800303e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b40      	cmp	r3, #64	; 0x40
 8003052:	d10a      	bne.n	800306a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7ff fcc7 	bl	80029f6 <HAL_I2C_MemRxCpltCallback>
}
 8003068:	e01d      	b.n	80030a6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2212      	movs	r2, #18
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fc82 	bl	8002982 <HAL_I2C_MasterRxCpltCallback>
}
 800307e:	e012      	b.n	80030a6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d117      	bne.n	80030f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80030dc:	e067      	b.n	80031ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	611a      	str	r2, [r3, #16]
}
 80030f0:	e05d      	b.n	80031ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fa:	d133      	bne.n	8003164 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b21      	cmp	r3, #33	; 0x21
 8003106:	d109      	bne.n	800311c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	e008      	b.n	800312e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <I2C_Master_SB+0x92>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d108      	bne.n	8003152 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d032      	beq.n	80031ae <I2C_Master_SB+0x100>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d02d      	beq.n	80031ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003160:	605a      	str	r2, [r3, #4]
}
 8003162:	e024      	b.n	80031ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10e      	bne.n	800318a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	b29b      	uxth	r3, r3
 8003172:	11db      	asrs	r3, r3, #7
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0306 	and.w	r3, r3, #6
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f063 030f 	orn	r3, r3, #15
 8003180:	b2da      	uxtb	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	611a      	str	r2, [r3, #16]
}
 8003188:	e011      	b.n	80031ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10d      	bne.n	80031ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	b29b      	uxth	r3, r3
 8003198:	11db      	asrs	r3, r3, #7
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f003 0306 	and.w	r3, r3, #6
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f063 030e 	orn	r3, r3, #14
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	611a      	str	r2, [r3, #16]
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <I2C_Master_ADD10+0x26>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d108      	bne.n	80031f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <I2C_Master_ADD10+0x48>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031fe:	605a      	str	r2, [r3, #4]
  }
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800320a:	b480      	push	{r7}
 800320c:	b091      	sub	sp, #68	; 0x44
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b22      	cmp	r3, #34	; 0x22
 8003232:	f040 8169 	bne.w	8003508 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <I2C_Master_ADDR+0x54>
 800323e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003242:	2b40      	cmp	r3, #64	; 0x40
 8003244:	d10b      	bne.n	800325e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	633b      	str	r3, [r7, #48]	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	e160      	b.n	8003520 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d11d      	bne.n	80032a2 <I2C_Master_ADDR+0x98>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800326e:	d118      	bne.n	80032a2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003270:	2300      	movs	r3, #0
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003294:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	651a      	str	r2, [r3, #80]	; 0x50
 80032a0:	e13e      	b.n	8003520 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d113      	bne.n	80032d4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ac:	2300      	movs	r3, #0
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e115      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 808a 	bne.w	80033f4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80032e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e6:	d137      	bne.n	8003358 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003306:	d113      	bne.n	8003330 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003316:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	e0e7      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	623b      	str	r3, [r7, #32]
 8003344:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	e0d3      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335a:	2b08      	cmp	r3, #8
 800335c:	d02e      	beq.n	80033bc <I2C_Master_ADDR+0x1b2>
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003360:	2b20      	cmp	r3, #32
 8003362:	d02b      	beq.n	80033bc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	2b12      	cmp	r3, #18
 8003368:	d102      	bne.n	8003370 <I2C_Master_ADDR+0x166>
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b01      	cmp	r3, #1
 800336e:	d125      	bne.n	80033bc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	2b04      	cmp	r3, #4
 8003374:	d00e      	beq.n	8003394 <I2C_Master_ADDR+0x18a>
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2b02      	cmp	r3, #2
 800337a:	d00b      	beq.n	8003394 <I2C_Master_ADDR+0x18a>
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	2b10      	cmp	r3, #16
 8003380:	d008      	beq.n	8003394 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e007      	b.n	80033a4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033a2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2300      	movs	r3, #0
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	e0a1      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ca:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e085      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d14d      	bne.n	800349a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80033fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003400:	2b04      	cmp	r3, #4
 8003402:	d016      	beq.n	8003432 <I2C_Master_ADDR+0x228>
 8003404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003406:	2b02      	cmp	r3, #2
 8003408:	d013      	beq.n	8003432 <I2C_Master_ADDR+0x228>
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	2b10      	cmp	r3, #16
 800340e:	d010      	beq.n	8003432 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e007      	b.n	8003442 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003440:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800344c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003450:	d117      	bne.n	8003482 <I2C_Master_ADDR+0x278>
 8003452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003458:	d00b      	beq.n	8003472 <I2C_Master_ADDR+0x268>
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	2b01      	cmp	r3, #1
 800345e:	d008      	beq.n	8003472 <I2C_Master_ADDR+0x268>
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	2b08      	cmp	r3, #8
 8003464:	d005      	beq.n	8003472 <I2C_Master_ADDR+0x268>
 8003466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003468:	2b10      	cmp	r3, #16
 800346a:	d002      	beq.n	8003472 <I2C_Master_ADDR+0x268>
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	2b20      	cmp	r3, #32
 8003470:	d107      	bne.n	8003482 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003480:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	e032      	b.n	8003500 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034b8:	d117      	bne.n	80034ea <I2C_Master_ADDR+0x2e0>
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c0:	d00b      	beq.n	80034da <I2C_Master_ADDR+0x2d0>
 80034c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d008      	beq.n	80034da <I2C_Master_ADDR+0x2d0>
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d005      	beq.n	80034da <I2C_Master_ADDR+0x2d0>
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d002      	beq.n	80034da <I2C_Master_ADDR+0x2d0>
 80034d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d107      	bne.n	80034ea <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003506:	e00b      	b.n	8003520 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
}
 800351e:	e7ff      	b.n	8003520 <I2C_Master_ADDR+0x316>
 8003520:	bf00      	nop
 8003522:	3744      	adds	r7, #68	; 0x44
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02b      	beq.n	800359c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d114      	bne.n	800359c <I2C_SlaveTransmit_TXE+0x72>
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b29      	cmp	r3, #41	; 0x29
 8003576:	d111      	bne.n	800359c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2221      	movs	r2, #33	; 0x21
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2228      	movs	r2, #40	; 0x28
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff f9fc 	bl	8002994 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d011      	beq.n	80035da <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	781a      	ldrb	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr

080035e4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d02c      	beq.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d114      	bne.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b2a      	cmp	r3, #42	; 0x2a
 8003632:	d111      	bne.n	8003658 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2222      	movs	r2, #34	; 0x22
 8003648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2228      	movs	r2, #40	; 0x28
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff f9a7 	bl	80029a6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036bc:	2b28      	cmp	r3, #40	; 0x28
 80036be:	d127      	bne.n	8003710 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	09db      	lsrs	r3, r3, #7
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d103      	bne.n	80036f4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	81bb      	strh	r3, [r7, #12]
 80036f2:	e002      	b.n	80036fa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003702:	89ba      	ldrh	r2, [r7, #12]
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	4619      	mov	r1, r3
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff f955 	bl	80029b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800370e:	e00e      	b.n	800372e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003710:	2300      	movs	r3, #0
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800372e:	bf00      	nop
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003746:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003756:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d172      	bne.n	800387c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	2b22      	cmp	r3, #34	; 0x22
 800379a:	d002      	beq.n	80037a2 <I2C_Slave_STOPF+0x6a>
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b2a      	cmp	r3, #42	; 0x2a
 80037a0:	d135      	bne.n	800380e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fbc7 	bl	8001f6e <HAL_DMA_GetState>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d049      	beq.n	800387a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a69      	ldr	r2, [pc, #420]	; (8003990 <I2C_Slave_STOPF+0x258>)
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fb7a 	bl	8001eec <HAL_DMA_Abort_IT>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03d      	beq.n	800387a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800380c:	e035      	b.n	800387a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003840:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fb91 	bl	8001f6e <HAL_DMA_GetState>
 800384c:	4603      	mov	r3, r0
 800384e:	2b01      	cmp	r3, #1
 8003850:	d014      	beq.n	800387c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003856:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <I2C_Slave_STOPF+0x258>)
 8003858:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fb44 	bl	8001eec <HAL_DMA_Abort_IT>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d008      	beq.n	800387c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003874:	4610      	mov	r0, r2
 8003876:	4798      	blx	r3
 8003878:	e000      	b.n	800387c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800387a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03e      	beq.n	8003904 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b04      	cmp	r3, #4
 8003892:	d112      	bne.n	80038ba <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d112      	bne.n	80038ee <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0204 	orr.w	r2, r3, #4
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8b3 	bl	8003a78 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003912:	e039      	b.n	8003988 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	2b2a      	cmp	r3, #42	; 0x2a
 8003918:	d109      	bne.n	800392e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2228      	movs	r2, #40	; 0x28
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff f83c 	bl	80029a6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b28      	cmp	r3, #40	; 0x28
 8003938:	d111      	bne.n	800395e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <I2C_Slave_STOPF+0x25c>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff f83b 	bl	80029d2 <HAL_I2C_ListenCpltCallback>
}
 800395c:	e014      	b.n	8003988 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	2b22      	cmp	r3, #34	; 0x22
 8003964:	d002      	beq.n	800396c <I2C_Slave_STOPF+0x234>
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b22      	cmp	r3, #34	; 0x22
 800396a:	d10d      	bne.n	8003988 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f80f 	bl	80029a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	08003cdd 	.word	0x08003cdd
 8003994:	ffff0000 	.word	0xffff0000

08003998 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d002      	beq.n	80039ba <I2C_Slave_AF+0x22>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d129      	bne.n	8003a0e <I2C_Slave_AF+0x76>
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b28      	cmp	r3, #40	; 0x28
 80039be:	d126      	bne.n	8003a0e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <I2C_Slave_AF+0xdc>)
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039d4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039de:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ee:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe ffe3 	bl	80029d2 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003a0c:	e02e      	b.n	8003a6c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
 8003a10:	2b21      	cmp	r3, #33	; 0x21
 8003a12:	d126      	bne.n	8003a62 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <I2C_Slave_AF+0xdc>)
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2221      	movs	r2, #33	; 0x21
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a3e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a48:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe ff9a 	bl	8002994 <HAL_I2C_SlaveTxCpltCallback>
}
 8003a60:	e004      	b.n	8003a6c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6a:	615a      	str	r2, [r3, #20]
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	ffff0000 	.word	0xffff0000

08003a78 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d002      	beq.n	8003a9c <I2C_ITError+0x24>
 8003a96:	7bbb      	ldrb	r3, [r7, #14]
 8003a98:	2b40      	cmp	r3, #64	; 0x40
 8003a9a:	d10a      	bne.n	8003ab2 <I2C_ITError+0x3a>
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	d107      	bne.n	8003ab2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab8:	2b28      	cmp	r3, #40	; 0x28
 8003aba:	d107      	bne.n	8003acc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2228      	movs	r2, #40	; 0x28
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003aca:	e015      	b.n	8003af8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ada:	d00a      	beq.n	8003af2 <I2C_ITError+0x7a>
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b60      	cmp	r3, #96	; 0x60
 8003ae0:	d007      	beq.n	8003af2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b06:	d162      	bne.n	8003bce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d020      	beq.n	8003b68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	4a6a      	ldr	r2, [pc, #424]	; (8003cd4 <I2C_ITError+0x25c>)
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe f9da 	bl	8001eec <HAL_DMA_Abort_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8089 	beq.w	8003c52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0201 	bic.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b62:	4610      	mov	r0, r2
 8003b64:	4798      	blx	r3
 8003b66:	e074      	b.n	8003c52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <I2C_ITError+0x25c>)
 8003b6e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe f9b9 	bl	8001eec <HAL_DMA_Abort_IT>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d068      	beq.n	8003c52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d10b      	bne.n	8003ba6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0201 	bic.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4798      	blx	r3
 8003bcc:	e041      	b.n	8003c52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b60      	cmp	r3, #96	; 0x60
 8003bd8:	d125      	bne.n	8003c26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d10b      	bne.n	8003c0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fefb 	bl	8002a1a <HAL_I2C_AbortCpltCallback>
 8003c24:	e015      	b.n	8003c52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d10b      	bne.n	8003c4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7fe fedb 	bl	8002a08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d113      	bne.n	8003ccc <I2C_ITError+0x254>
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b28      	cmp	r3, #40	; 0x28
 8003ca8:	d110      	bne.n	8003ccc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a0a      	ldr	r2, [pc, #40]	; (8003cd8 <I2C_ITError+0x260>)
 8003cae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe fe83 	bl	80029d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cf6:	4b4b      	ldr	r3, [pc, #300]	; (8003e24 <I2C_DMAAbort+0x148>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	08db      	lsrs	r3, r3, #3
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <I2C_DMAAbort+0x14c>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0a1a      	lsrs	r2, r3, #8
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	00da      	lsls	r2, r3, #3
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003d22:	e00a      	b.n	8003d3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d0ea      	beq.n	8003d10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	2200      	movs	r2, #0
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d10e      	bne.n	8003dca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dc2:	6978      	ldr	r0, [r7, #20]
 8003dc4:	f7fe fe29 	bl	8002a1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dc8:	e027      	b.n	8003e1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dd0:	2b28      	cmp	r3, #40	; 0x28
 8003dd2:	d117      	bne.n	8003e04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2200      	movs	r2, #0
 8003df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2228      	movs	r2, #40	; 0x28
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003e02:	e007      	b.n	8003e14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e14:	6978      	ldr	r0, [r7, #20]
 8003e16:	f7fe fdf7 	bl	8002a08 <HAL_I2C_ErrorCallback>
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000048 	.word	0x20000048
 8003e28:	14f8b589 	.word	0x14f8b589

08003e2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	08db      	lsrs	r3, r3, #3
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	0a1a      	lsrs	r2, r3, #8
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e008      	b.n	8003e7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e78:	d0e9      	beq.n	8003e4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000048 	.word	0x20000048
 8003e8c:	14f8b589 	.word	0x14f8b589

08003e90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ea0:	d103      	bne.n	8003eaa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ea8:	e007      	b.n	8003eba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003eb2:	d102      	bne.n	8003eba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e31d      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ed6:	4b94      	ldr	r3, [pc, #592]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee0:	4b91      	ldr	r3, [pc, #580]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d07b      	beq.n	8003fee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d006      	beq.n	8003f0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b0c      	cmp	r3, #12
 8003f00:	d10f      	bne.n	8003f22 <HAL_RCC_OscConfig+0x5e>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d10b      	bne.n	8003f22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0a:	4b87      	ldr	r3, [pc, #540]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d06a      	beq.n	8003fec <HAL_RCC_OscConfig+0x128>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d166      	bne.n	8003fec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e2f7      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d106      	bne.n	8003f38 <HAL_RCC_OscConfig+0x74>
 8003f2a:	4b7f      	ldr	r3, [pc, #508]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7e      	ldr	r2, [pc, #504]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e02d      	b.n	8003f94 <HAL_RCC_OscConfig+0xd0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCC_OscConfig+0x96>
 8003f40:	4b79      	ldr	r3, [pc, #484]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a78      	ldr	r2, [pc, #480]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4b76      	ldr	r3, [pc, #472]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e01c      	b.n	8003f94 <HAL_RCC_OscConfig+0xd0>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0xb8>
 8003f62:	4b71      	ldr	r3, [pc, #452]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a70      	ldr	r2, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b6e      	ldr	r3, [pc, #440]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6d      	ldr	r2, [pc, #436]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e00b      	b.n	8003f94 <HAL_RCC_OscConfig+0xd0>
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a69      	ldr	r2, [pc, #420]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b67      	ldr	r3, [pc, #412]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a66      	ldr	r2, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d013      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fa64 	bl	8001468 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa4:	f7fd fa60 	bl	8001468 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	; 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e2ad      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xe0>
 8003fc2:	e014      	b.n	8003fee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fa50 	bl	8001468 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7fd fa4c 	bl	8001468 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e299      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003fde:	4b52      	ldr	r3, [pc, #328]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x108>
 8003fea:	e000      	b.n	8003fee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d05a      	beq.n	80040b0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b0c      	cmp	r3, #12
 8004004:	d119      	bne.n	800403a <HAL_RCC_OscConfig+0x176>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d116      	bne.n	800403a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800400c:	4b46      	ldr	r3, [pc, #280]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCC_OscConfig+0x160>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d001      	beq.n	8004024 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e276      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	021b      	lsls	r3, r3, #8
 8004032:	493d      	ldr	r1, [pc, #244]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004038:	e03a      	b.n	80040b0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d020      	beq.n	8004084 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_OscConfig+0x268>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7fd fa0e 	bl	8001468 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004050:	f7fd fa0a 	bl	8001468 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e257      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	492a      	ldr	r1, [pc, #168]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
 8004082:	e015      	b.n	80040b0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004084:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x268>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fd f9ed 	bl	8001468 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd f9e9 	bl	8001468 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e236      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f0      	bne.n	8004092 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80b8 	beq.w	800422e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d170      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_OscConfig+0x218>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e21a      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d921      	bls.n	8004130 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fc23 	bl	800493c <RCC_SetFlashLatencyFromMSIRange>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e208      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 800410e:	4313      	orrs	r3, r2
 8004110:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	4901      	ldr	r1, [pc, #4]	; (8004128 <HAL_RCC_OscConfig+0x264>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e020      	b.n	800416a <HAL_RCC_OscConfig+0x2a6>
 8004128:	40023800 	.word	0x40023800
 800412c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004130:	4ba4      	ldr	r3, [pc, #656]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	49a1      	ldr	r1, [pc, #644]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004142:	4ba0      	ldr	r3, [pc, #640]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	499c      	ldr	r1, [pc, #624]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbee 	bl	800493c <RCC_SetFlashLatencyFromMSIRange>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e1d3      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	3301      	adds	r3, #1
 8004172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800417a:	4a92      	ldr	r2, [pc, #584]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800417c:	6892      	ldr	r2, [r2, #8]
 800417e:	0912      	lsrs	r2, r2, #4
 8004180:	f002 020f 	and.w	r2, r2, #15
 8004184:	4990      	ldr	r1, [pc, #576]	; (80043c8 <HAL_RCC_OscConfig+0x504>)
 8004186:	5c8a      	ldrb	r2, [r1, r2]
 8004188:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800418a:	4a90      	ldr	r2, [pc, #576]	; (80043cc <HAL_RCC_OscConfig+0x508>)
 800418c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800418e:	4b90      	ldr	r3, [pc, #576]	; (80043d0 <HAL_RCC_OscConfig+0x50c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd f91c 	bl	80013d0 <HAL_InitTick>
 8004198:	4603      	mov	r3, r0
 800419a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d045      	beq.n	800422e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	e1b5      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d029      	beq.n	8004202 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041ae:	4b89      	ldr	r3, [pc, #548]	; (80043d4 <HAL_RCC_OscConfig+0x510>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fd f958 	bl	8001468 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041bc:	f7fd f954 	bl	8001468 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1a1      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041ce:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4977      	ldr	r1, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	061b      	lsls	r3, r3, #24
 80041fa:	4972      	ldr	r1, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	e015      	b.n	800422e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004202:	4b74      	ldr	r3, [pc, #464]	; (80043d4 <HAL_RCC_OscConfig+0x510>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd f92e 	bl	8001468 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004210:	f7fd f92a 	bl	8001468 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e177      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004222:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d030      	beq.n	800429c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004242:	4b65      	ldr	r3, [pc, #404]	; (80043d8 <HAL_RCC_OscConfig+0x514>)
 8004244:	2201      	movs	r2, #1
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fd f90e 	bl	8001468 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004250:	f7fd f90a 	bl	8001468 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e157      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0x38c>
 800426e:	e015      	b.n	800429c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004270:	4b59      	ldr	r3, [pc, #356]	; (80043d8 <HAL_RCC_OscConfig+0x514>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004276:	f7fd f8f7 	bl	8001468 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd f8f3 	bl	8001468 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e140      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004290:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80b5 	beq.w	8004414 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ae:	4b45      	ldr	r3, [pc, #276]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	4b42      	ldr	r3, [pc, #264]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6253      	str	r3, [r2, #36]	; 0x24
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d2:	2301      	movs	r3, #1
 80042d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_OscConfig+0x518>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d118      	bne.n	8004314 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCC_OscConfig+0x518>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a3d      	ldr	r2, [pc, #244]	; (80043dc <HAL_RCC_OscConfig+0x518>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ee:	f7fd f8bb 	bl	8001468 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f6:	f7fd f8b7 	bl	8001468 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b64      	cmp	r3, #100	; 0x64
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e104      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004308:	4b34      	ldr	r3, [pc, #208]	; (80043dc <HAL_RCC_OscConfig+0x518>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d106      	bne.n	800432a <HAL_RCC_OscConfig+0x466>
 800431c:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004326:	6353      	str	r3, [r2, #52]	; 0x34
 8004328:	e02d      	b.n	8004386 <HAL_RCC_OscConfig+0x4c2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x488>
 8004332:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	4a23      	ldr	r2, [pc, #140]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	6353      	str	r3, [r2, #52]	; 0x34
 800433e:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004348:	6353      	str	r3, [r2, #52]	; 0x34
 800434a:	e01c      	b.n	8004386 <HAL_RCC_OscConfig+0x4c2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b05      	cmp	r3, #5
 8004352:	d10c      	bne.n	800436e <HAL_RCC_OscConfig+0x4aa>
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	4a1a      	ldr	r2, [pc, #104]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800435a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800435e:	6353      	str	r3, [r2, #52]	; 0x34
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436a:	6353      	str	r3, [r2, #52]	; 0x34
 800436c:	e00b      	b.n	8004386 <HAL_RCC_OscConfig+0x4c2>
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004378:	6353      	str	r3, [r2, #52]	; 0x34
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 800437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437e:	4a11      	ldr	r2, [pc, #68]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 8004380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004384:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d015      	beq.n	80043ba <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800438e:	f7fd f86b 	bl	8001468 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd f867 	bl	8001468 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0b2      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <HAL_RCC_OscConfig+0x500>)
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ee      	beq.n	8004396 <HAL_RCC_OscConfig+0x4d2>
 80043b8:	e023      	b.n	8004402 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fd f855 	bl	8001468 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043c0:	e019      	b.n	80043f6 <HAL_RCC_OscConfig+0x532>
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08006014 	.word	0x08006014
 80043cc:	20000048 	.word	0x20000048
 80043d0:	2000004c 	.word	0x2000004c
 80043d4:	42470020 	.word	0x42470020
 80043d8:	42470680 	.word	0x42470680
 80043dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fd f842 	bl	8001468 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e08d      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043f6:	4b49      	ldr	r3, [pc, #292]	; (800451c <HAL_RCC_OscConfig+0x658>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004402:	7ffb      	ldrb	r3, [r7, #31]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b44      	ldr	r3, [pc, #272]	; (800451c <HAL_RCC_OscConfig+0x658>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	4a43      	ldr	r2, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x658>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d079      	beq.n	8004510 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d056      	beq.n	80044d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b02      	cmp	r3, #2
 8004428:	d13b      	bne.n	80044a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442a:	4b3d      	ldr	r3, [pc, #244]	; (8004520 <HAL_RCC_OscConfig+0x65c>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd f81a 	bl	8001468 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004438:	f7fd f816 	bl	8001468 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e063      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_OscConfig+0x658>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1f0      	bne.n	8004438 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_OscConfig+0x658>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4319      	orrs	r1, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446c:	430b      	orrs	r3, r1
 800446e:	492b      	ldr	r1, [pc, #172]	; (800451c <HAL_RCC_OscConfig+0x658>)
 8004470:	4313      	orrs	r3, r2
 8004472:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCC_OscConfig+0x65c>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447a:	f7fc fff5 	bl	8001468 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004482:	f7fc fff1 	bl	8001468 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e03e      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004494:	4b21      	ldr	r3, [pc, #132]	; (800451c <HAL_RCC_OscConfig+0x658>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x5be>
 80044a0:	e036      	b.n	8004510 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCC_OscConfig+0x65c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a8:	f7fc ffde 	bl	8001468 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b0:	f7fc ffda 	bl	8001468 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e027      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044c2:	4b16      	ldr	r3, [pc, #88]	; (800451c <HAL_RCC_OscConfig+0x658>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0x5ec>
 80044ce:	e01f      	b.n	8004510 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e01a      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_OscConfig+0x658>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d10d      	bne.n	800450c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d106      	bne.n	800450c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	42470060 	.word	0x42470060

08004524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e11a      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004538:	4b8f      	ldr	r3, [pc, #572]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d919      	bls.n	800457a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_ClockConfig+0x34>
 800454c:	4b8a      	ldr	r3, [pc, #552]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a89      	ldr	r2, [pc, #548]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 8004552:	f043 0304 	orr.w	r3, r3, #4
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b87      	ldr	r3, [pc, #540]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 0201 	bic.w	r2, r3, #1
 8004560:	4985      	ldr	r1, [pc, #532]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004568:	4b83      	ldr	r3, [pc, #524]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0f9      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004586:	4b7d      	ldr	r3, [pc, #500]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	497a      	ldr	r1, [pc, #488]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 808e 	beq.w	80046c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ae:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d121      	bne.n	80045fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0d7      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c6:	4b6d      	ldr	r3, [pc, #436]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d115      	bne.n	80045fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0cb      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d107      	bne.n	80045ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045de:	4b67      	ldr	r3, [pc, #412]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e0bf      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0b7      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	495c      	ldr	r1, [pc, #368]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fc ff2a 	bl	8001468 <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d112      	bne.n	8004644 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7fc ff22 	bl	8001468 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e09b      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b08      	cmp	r3, #8
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_ClockConfig+0xfc>
 8004642:	e03e      	b.n	80046c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d112      	bne.n	8004672 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464c:	e00a      	b.n	8004664 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fc ff0b 	bl	8001468 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f241 3288 	movw	r2, #5000	; 0x1388
 800465c:	4293      	cmp	r3, r2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e084      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004664:	4b45      	ldr	r3, [pc, #276]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d1ee      	bne.n	800464e <HAL_RCC_ClockConfig+0x12a>
 8004670:	e027      	b.n	80046c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d11d      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800467a:	e00a      	b.n	8004692 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467c:	f7fc fef4 	bl	8001468 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e06d      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b04      	cmp	r3, #4
 800469c:	d1ee      	bne.n	800467c <HAL_RCC_ClockConfig+0x158>
 800469e:	e010      	b.n	80046c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fc fee2 	bl	8001468 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e05b      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ee      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c2:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d219      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_ClockConfig+0x1be>
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046dc:	f043 0304 	orr.w	r3, r3, #4
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0201 	bic.w	r2, r3, #1
 80046ea:	4923      	ldr	r1, [pc, #140]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RCC_ClockConfig+0x254>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e034      	b.n	800476e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4917      	ldr	r1, [pc, #92]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	490f      	ldr	r1, [pc, #60]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004742:	f000 f823 	bl	800478c <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_ClockConfig+0x258>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490b      	ldr	r1, [pc, #44]	; (8004780 <HAL_RCC_ClockConfig+0x25c>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	fa22 f303 	lsr.w	r3, r2, r3
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x260>)
 800475c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x264>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fe34 	bl	80013d0 <HAL_InitTick>
 8004768:	4603      	mov	r3, r0
 800476a:	72fb      	strb	r3, [r7, #11]

  return status;
 800476c:	7afb      	ldrb	r3, [r7, #11]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08006014 	.word	0x08006014
 8004784:	20000048 	.word	0x20000048
 8004788:	2000004c 	.word	0x2000004c

0800478c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	b5b0      	push	{r4, r5, r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004792:	4b4d      	ldr	r3, [pc, #308]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x30>
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d87c      	bhi.n	80048a0 <HAL_RCC_GetSysClockFreq+0x114>
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d002      	beq.n	80047b0 <HAL_RCC_GetSysClockFreq+0x24>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x2a>
 80047ae:	e077      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b46      	ldr	r3, [pc, #280]	; (80048cc <HAL_RCC_GetSysClockFreq+0x140>)
 80047b2:	613b      	str	r3, [r7, #16]
      break;
 80047b4:	e082      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b6:	4b46      	ldr	r3, [pc, #280]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80047b8:	613b      	str	r3, [r7, #16]
      break;
 80047ba:	e07f      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	0c9b      	lsrs	r3, r3, #18
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	4a43      	ldr	r2, [pc, #268]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	0d9b      	lsrs	r3, r3, #22
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	3301      	adds	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b3c      	ldr	r3, [pc, #240]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01a      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	4939      	ldr	r1, [pc, #228]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80047ec:	fb01 f003 	mul.w	r0, r1, r3
 80047f0:	2100      	movs	r1, #0
 80047f2:	fb01 f102 	mul.w	r1, r1, r2
 80047f6:	1844      	adds	r4, r0, r1
 80047f8:	4935      	ldr	r1, [pc, #212]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80047fa:	fba2 0101 	umull	r0, r1, r2, r1
 80047fe:	1863      	adds	r3, r4, r1
 8004800:	4619      	mov	r1, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	f7fb fe79 	bl	8000500 <__aeabi_uldivmod>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4613      	mov	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e040      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	461c      	mov	r4, r3
 800481c:	f04f 0500 	mov.w	r5, #0
 8004820:	4620      	mov	r0, r4
 8004822:	4629      	mov	r1, r5
 8004824:	f04f 0200 	mov.w	r2, #0
 8004828:	f04f 0300 	mov.w	r3, #0
 800482c:	014b      	lsls	r3, r1, #5
 800482e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004832:	0142      	lsls	r2, r0, #5
 8004834:	4610      	mov	r0, r2
 8004836:	4619      	mov	r1, r3
 8004838:	1b00      	subs	r0, r0, r4
 800483a:	eb61 0105 	sbc.w	r1, r1, r5
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	018b      	lsls	r3, r1, #6
 8004848:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800484c:	0182      	lsls	r2, r0, #6
 800484e:	1a12      	subs	r2, r2, r0
 8004850:	eb63 0301 	sbc.w	r3, r3, r1
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	00d9      	lsls	r1, r3, #3
 800485e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004862:	00d0      	lsls	r0, r2, #3
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	1912      	adds	r2, r2, r4
 800486a:	eb45 0303 	adc.w	r3, r5, r3
 800486e:	f04f 0000 	mov.w	r0, #0
 8004872:	f04f 0100 	mov.w	r1, #0
 8004876:	0299      	lsls	r1, r3, #10
 8004878:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800487c:	0290      	lsls	r0, r2, #10
 800487e:	4602      	mov	r2, r0
 8004880:	460b      	mov	r3, r1
 8004882:	4610      	mov	r0, r2
 8004884:	4619      	mov	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	461a      	mov	r2, r3
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	f7fb fe37 	bl	8000500 <__aeabi_uldivmod>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	4613      	mov	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	613b      	str	r3, [r7, #16]
      break;
 800489e:	e00d      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0b5b      	lsrs	r3, r3, #13
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	3301      	adds	r3, #1
 80048b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	613b      	str	r3, [r7, #16]
      break;
 80048ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048bc:	693b      	ldr	r3, [r7, #16]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bdb0      	pop	{r4, r5, r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	016e3600 	.word	0x016e3600
 80048d4:	08006008 	.word	0x08006008

080048d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	20000048 	.word	0x20000048

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048f0:	f7ff fff2 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4903      	ldr	r1, [pc, #12]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004908:	4618      	mov	r0, r3
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08006024 	.word	0x08006024

08004914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004918:	f7ff ffde 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0adb      	lsrs	r3, r3, #11
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08006024 	.word	0x08006024

0800493c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004948:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12c      	bne.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004954:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e016      	b.n	800499a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800496c:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004976:	6253      	str	r3, [r2, #36]	; 0x24
 8004978:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004984:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800498c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004998:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049a0:	d105      	bne.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a8:	d101      	bne.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80049aa:	2301      	movs	r3, #1
 80049ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d105      	bne.n	80049c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	4b0d      	ldr	r3, [pc, #52]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f023 0201 	bic.w	r2, r3, #1
 80049c8:	490b      	ldr	r1, [pc, #44]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d001      	beq.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	40007000 	.word	0x40007000
 80049f8:	40023c00 	.word	0x40023c00

080049fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e06e      	b.n	8004aec <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1e:	d009      	beq.n	8004a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	e005      	b.n	8004a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fc fb08 	bl	8001064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab8:	ea42 0103 	orr.w	r1, r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	0c1a      	lsrs	r2, r3, #16
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f002 0204 	and.w	r2, r2, #4
 8004ada:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10f      	bne.n	8004b38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d004      	beq.n	8004b38 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
    return;
 8004b36:	e0be      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x66>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	09db      	lsrs	r3, r3, #7
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
    return;
 8004b58:	e0ad      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_IRQHandler+0x80>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	099b      	lsrs	r3, r3, #6
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 80a1 	beq.w	8004cb6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 809a 	beq.w	8004cb6 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d023      	beq.n	8004bd6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b03      	cmp	r3, #3
 8004b98:	d011      	beq.n	8004bbe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 0204 	orr.w	r2, r3, #4
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	e00b      	b.n	8004bd6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	693b      	ldr	r3, [r7, #16]
        return;
 8004bd4:	e06f      	b.n	8004cb6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d014      	beq.n	8004c0c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04f      	beq.n	8004cb4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c22:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <HAL_SPI_IRQHandler+0x14c>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d034      	beq.n	8004caa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0203 	bic.w	r2, r2, #3
 8004c4e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d011      	beq.n	8004c7c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_SPI_IRQHandler+0x1c8>)
 8004c5e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fd f941 	bl	8001eec <HAL_DMA_Abort_IT>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d016      	beq.n	8004cb2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <HAL_SPI_IRQHandler+0x1c8>)
 8004c8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fd f92b 	bl	8001eec <HAL_DMA_Abort_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00a      	beq.n	8004cb2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004ca8:	e003      	b.n	8004cb2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f808 	bl	8004cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004cb0:	e000      	b.n	8004cb4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004cb2:	bf00      	nop
    return;
 8004cb4:	bf00      	nop
  }
}
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08004cd3 	.word	0x08004cd3

08004cc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr

08004cd2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f7ff ffe7 	bl	8004cc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e03f      	b.n	8004d8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc f9eb 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	; 0x24
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb48 	bl	80053d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3708      	adds	r7, #8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x52>
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa4f 	bl	8005282 <UART_Receive_IT>
      return;
 8004de4:	e17b      	b.n	80050de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80b1 	beq.w	8004f50 <HAL_UART_IRQHandler+0x1bc>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_UART_IRQHandler+0x70>
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80a6 	beq.w	8004f50 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_UART_IRQHandler+0x90>
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0201 	orr.w	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_UART_IRQHandler+0xb0>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f043 0202 	orr.w	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_UART_IRQHandler+0xd0>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f043 0204 	orr.w	r2, r3, #4
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00f      	beq.n	8004e8e <HAL_UART_IRQHandler+0xfa>
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <HAL_UART_IRQHandler+0xee>
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f043 0208 	orr.w	r2, r3, #8
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 811e 	beq.w	80050d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x11e>
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f9e8 	bl	8005282 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <HAL_UART_IRQHandler+0x146>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d031      	beq.n	8004f3e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f92a 	bl	8005134 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d123      	bne.n	8004f36 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d013      	beq.n	8004f2e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	4a76      	ldr	r2, [pc, #472]	; (80050e4 <HAL_UART_IRQHandler+0x350>)
 8004f0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc ffea 	bl	8001eec <HAL_DMA_Abort_IT>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d016      	beq.n	8004f4c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e00e      	b.n	8004f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8ec 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	e00a      	b.n	8004f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f8e8 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	e006      	b.n	8004f4c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f8e4 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f4a:	e0c3      	b.n	80050d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	bf00      	nop
    return;
 8004f4e:	e0c1      	b.n	80050d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	f040 80a1 	bne.w	800509c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 809b 	beq.w	800509c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8095 	beq.w	800509c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d14e      	bne.n	8005034 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004fa0:	8a3b      	ldrh	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 8098 	beq.w	80050d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fac:	8a3a      	ldrh	r2, [r7, #16]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f080 8092 	bcs.w	80050d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8a3a      	ldrh	r2, [r7, #16]
 8004fb8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d02b      	beq.n	800501c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fd2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0201 	bic.w	r2, r2, #1
 8004fe2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0210 	bic.w	r2, r2, #16
 8005010:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	4618      	mov	r0, r3
 8005018:	f7fc ff2b 	bl	8001e72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005024:	b29b      	uxth	r3, r3
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	b29b      	uxth	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f876 	bl	800511e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005032:	e051      	b.n	80050d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d047      	beq.n	80050dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800504c:	8a7b      	ldrh	r3, [r7, #18]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d044      	beq.n	80050dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005060:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0210 	bic.w	r2, r2, #16
 800508e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005090:	8a7b      	ldrh	r3, [r7, #18]
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f842 	bl	800511e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800509a:	e01f      	b.n	80050dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <HAL_UART_IRQHandler+0x324>
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f87f 	bl	80051b4 <UART_Transmit_IT>
    return;
 80050b6:	e012      	b.n	80050de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <HAL_UART_IRQHandler+0x34a>
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f8c0 	bl	8005252 <UART_EndTransmit_IT>
    return;
 80050d2:	e004      	b.n	80050de <HAL_UART_IRQHandler+0x34a>
    return;
 80050d4:	bf00      	nop
 80050d6:	e002      	b.n	80050de <HAL_UART_IRQHandler+0x34a>
      return;
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <HAL_UART_IRQHandler+0x34a>
      return;
 80050dc:	bf00      	nop
  }
}
 80050de:	3728      	adds	r7, #40	; 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	0800518d 	.word	0x0800518d

080050e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bc80      	pop	{r7}
 80050f8:	4770      	bx	lr

080050fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr

0800511e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800514a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0201 	bic.w	r2, r2, #1
 800515a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0210 	bic.w	r2, r2, #16
 8005172:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff ffb0 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ac:	bf00      	nop
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d13e      	bne.n	8005246 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d0:	d114      	bne.n	80051fc <UART_Transmit_IT+0x48>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d110      	bne.n	80051fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]
 80051fa:	e008      	b.n	800520e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	1c59      	adds	r1, r3, #1
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	6211      	str	r1, [r2, #32]
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29b      	uxth	r3, r3
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4619      	mov	r1, r3
 800521c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005230:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005240:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005268:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7ff ff38 	bl	80050e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b22      	cmp	r3, #34	; 0x22
 8005294:	f040 8099 	bne.w	80053ca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a0:	d117      	bne.n	80052d2 <UART_Receive_IT+0x50>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d113      	bne.n	80052d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ca:	1c9a      	adds	r2, r3, #2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	; 0x28
 80052d0:	e026      	b.n	8005320 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e4:	d007      	beq.n	80052f6 <UART_Receive_IT+0x74>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <UART_Receive_IT+0x82>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e008      	b.n	8005316 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005310:	b2da      	uxtb	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29b      	uxth	r3, r3
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4619      	mov	r1, r3
 800532e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005330:	2b00      	cmp	r3, #0
 8005332:	d148      	bne.n	80053c6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0220 	bic.w	r2, r2, #32
 8005342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0201 	bic.w	r2, r2, #1
 8005362:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	2b01      	cmp	r3, #1
 8005372:	d123      	bne.n	80053bc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0210 	bic.w	r2, r2, #16
 8005388:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	d10a      	bne.n	80053ae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff feb2 	bl	800511e <HAL_UARTEx_RxEventCallback>
 80053ba:	e002      	b.n	80053c2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fe9c 	bl	80050fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e002      	b.n	80053cc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	431a      	orrs	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	4313      	orrs	r3, r2
 8005408:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005414:	f023 030c 	bic.w	r3, r3, #12
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	430b      	orrs	r3, r1
 8005420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a55      	ldr	r2, [pc, #340]	; (8005594 <UART_SetConfig+0x1c0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d103      	bne.n	800544a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005442:	f7ff fa67 	bl	8004914 <HAL_RCC_GetPCLK2Freq>
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	e002      	b.n	8005450 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800544a:	f7ff fa4f 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800544e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005458:	d14c      	bne.n	80054f4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009a      	lsls	r2, r3, #2
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	005b      	lsls	r3, r3, #1
 800546c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005470:	4a49      	ldr	r2, [pc, #292]	; (8005598 <UART_SetConfig+0x1c4>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	0119      	lsls	r1, r3, #4
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	009a      	lsls	r2, r3, #2
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005490:	4b41      	ldr	r3, [pc, #260]	; (8005598 <UART_SetConfig+0x1c4>)
 8005492:	fba3 0302 	umull	r0, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2064      	movs	r0, #100	; 0x64
 800549a:	fb00 f303 	mul.w	r3, r0, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	3332      	adds	r3, #50	; 0x32
 80054a4:	4a3c      	ldr	r2, [pc, #240]	; (8005598 <UART_SetConfig+0x1c4>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054b2:	4419      	add	r1, r3
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009a      	lsls	r2, r3, #2
 80054be:	441a      	add	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ca:	4b33      	ldr	r3, [pc, #204]	; (8005598 <UART_SetConfig+0x1c4>)
 80054cc:	fba3 0302 	umull	r0, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2064      	movs	r0, #100	; 0x64
 80054d4:	fb00 f303 	mul.w	r3, r0, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <UART_SetConfig+0x1c4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 0207 	and.w	r2, r3, #7
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	440a      	add	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f2:	e04a      	b.n	800558a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009a      	lsls	r2, r3, #2
 80054fe:	441a      	add	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	4a23      	ldr	r2, [pc, #140]	; (8005598 <UART_SetConfig+0x1c4>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	095b      	lsrs	r3, r3, #5
 8005512:	0119      	lsls	r1, r3, #4
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009a      	lsls	r2, r3, #2
 800551e:	441a      	add	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	fbb2 f2f3 	udiv	r2, r2, r3
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <UART_SetConfig+0x1c4>)
 800552c:	fba3 0302 	umull	r0, r3, r3, r2
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	2064      	movs	r0, #100	; 0x64
 8005534:	fb00 f303 	mul.w	r3, r0, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	3332      	adds	r3, #50	; 0x32
 800553e:	4a16      	ldr	r2, [pc, #88]	; (8005598 <UART_SetConfig+0x1c4>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800554a:	4419      	add	r1, r3
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009a      	lsls	r2, r3, #2
 8005556:	441a      	add	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <UART_SetConfig+0x1c4>)
 8005564:	fba3 0302 	umull	r0, r3, r3, r2
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	2064      	movs	r0, #100	; 0x64
 800556c:	fb00 f303 	mul.w	r3, r0, r3
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	3332      	adds	r3, #50	; 0x32
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <UART_SetConfig+0x1c4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	f003 020f 	and.w	r2, r3, #15
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	440a      	add	r2, r1
 8005588:	609a      	str	r2, [r3, #8]
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40013800 	.word	0x40013800
 8005598:	51eb851f 	.word	0x51eb851f

0800559c <__errno>:
 800559c:	4b01      	ldr	r3, [pc, #4]	; (80055a4 <__errno+0x8>)
 800559e:	6818      	ldr	r0, [r3, #0]
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000054 	.word	0x20000054

080055a8 <__libc_init_array>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	2600      	movs	r6, #0
 80055ac:	4d0c      	ldr	r5, [pc, #48]	; (80055e0 <__libc_init_array+0x38>)
 80055ae:	4c0d      	ldr	r4, [pc, #52]	; (80055e4 <__libc_init_array+0x3c>)
 80055b0:	1b64      	subs	r4, r4, r5
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	42a6      	cmp	r6, r4
 80055b6:	d109      	bne.n	80055cc <__libc_init_array+0x24>
 80055b8:	f000 fce4 	bl	8005f84 <_init>
 80055bc:	2600      	movs	r6, #0
 80055be:	4d0a      	ldr	r5, [pc, #40]	; (80055e8 <__libc_init_array+0x40>)
 80055c0:	4c0a      	ldr	r4, [pc, #40]	; (80055ec <__libc_init_array+0x44>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	42a6      	cmp	r6, r4
 80055c8:	d105      	bne.n	80055d6 <__libc_init_array+0x2e>
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d0:	4798      	blx	r3
 80055d2:	3601      	adds	r6, #1
 80055d4:	e7ee      	b.n	80055b4 <__libc_init_array+0xc>
 80055d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055da:	4798      	blx	r3
 80055dc:	3601      	adds	r6, #1
 80055de:	e7f2      	b.n	80055c6 <__libc_init_array+0x1e>
 80055e0:	08006098 	.word	0x08006098
 80055e4:	08006098 	.word	0x08006098
 80055e8:	08006098 	.word	0x08006098
 80055ec:	0800609c 	.word	0x0800609c

080055f0 <memset>:
 80055f0:	4603      	mov	r3, r0
 80055f2:	4402      	add	r2, r0
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d100      	bne.n	80055fa <memset+0xa>
 80055f8:	4770      	bx	lr
 80055fa:	f803 1b01 	strb.w	r1, [r3], #1
 80055fe:	e7f9      	b.n	80055f4 <memset+0x4>

08005600 <_puts_r>:
 8005600:	b570      	push	{r4, r5, r6, lr}
 8005602:	460e      	mov	r6, r1
 8005604:	4605      	mov	r5, r0
 8005606:	b118      	cbz	r0, 8005610 <_puts_r+0x10>
 8005608:	6983      	ldr	r3, [r0, #24]
 800560a:	b90b      	cbnz	r3, 8005610 <_puts_r+0x10>
 800560c:	f000 fa48 	bl	8005aa0 <__sinit>
 8005610:	69ab      	ldr	r3, [r5, #24]
 8005612:	68ac      	ldr	r4, [r5, #8]
 8005614:	b913      	cbnz	r3, 800561c <_puts_r+0x1c>
 8005616:	4628      	mov	r0, r5
 8005618:	f000 fa42 	bl	8005aa0 <__sinit>
 800561c:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <_puts_r+0xd0>)
 800561e:	429c      	cmp	r4, r3
 8005620:	d120      	bne.n	8005664 <_puts_r+0x64>
 8005622:	686c      	ldr	r4, [r5, #4]
 8005624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005626:	07db      	lsls	r3, r3, #31
 8005628:	d405      	bmi.n	8005636 <_puts_r+0x36>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	0598      	lsls	r0, r3, #22
 800562e:	d402      	bmi.n	8005636 <_puts_r+0x36>
 8005630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005632:	f000 fad3 	bl	8005bdc <__retarget_lock_acquire_recursive>
 8005636:	89a3      	ldrh	r3, [r4, #12]
 8005638:	0719      	lsls	r1, r3, #28
 800563a:	d51d      	bpl.n	8005678 <_puts_r+0x78>
 800563c:	6923      	ldr	r3, [r4, #16]
 800563e:	b1db      	cbz	r3, 8005678 <_puts_r+0x78>
 8005640:	3e01      	subs	r6, #1
 8005642:	68a3      	ldr	r3, [r4, #8]
 8005644:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005648:	3b01      	subs	r3, #1
 800564a:	60a3      	str	r3, [r4, #8]
 800564c:	bb39      	cbnz	r1, 800569e <_puts_r+0x9e>
 800564e:	2b00      	cmp	r3, #0
 8005650:	da38      	bge.n	80056c4 <_puts_r+0xc4>
 8005652:	4622      	mov	r2, r4
 8005654:	210a      	movs	r1, #10
 8005656:	4628      	mov	r0, r5
 8005658:	f000 f848 	bl	80056ec <__swbuf_r>
 800565c:	3001      	adds	r0, #1
 800565e:	d011      	beq.n	8005684 <_puts_r+0x84>
 8005660:	250a      	movs	r5, #10
 8005662:	e011      	b.n	8005688 <_puts_r+0x88>
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <_puts_r+0xd4>)
 8005666:	429c      	cmp	r4, r3
 8005668:	d101      	bne.n	800566e <_puts_r+0x6e>
 800566a:	68ac      	ldr	r4, [r5, #8]
 800566c:	e7da      	b.n	8005624 <_puts_r+0x24>
 800566e:	4b1a      	ldr	r3, [pc, #104]	; (80056d8 <_puts_r+0xd8>)
 8005670:	429c      	cmp	r4, r3
 8005672:	bf08      	it	eq
 8005674:	68ec      	ldreq	r4, [r5, #12]
 8005676:	e7d5      	b.n	8005624 <_puts_r+0x24>
 8005678:	4621      	mov	r1, r4
 800567a:	4628      	mov	r0, r5
 800567c:	f000 f888 	bl	8005790 <__swsetup_r>
 8005680:	2800      	cmp	r0, #0
 8005682:	d0dd      	beq.n	8005640 <_puts_r+0x40>
 8005684:	f04f 35ff 	mov.w	r5, #4294967295
 8005688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800568a:	07da      	lsls	r2, r3, #31
 800568c:	d405      	bmi.n	800569a <_puts_r+0x9a>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	059b      	lsls	r3, r3, #22
 8005692:	d402      	bmi.n	800569a <_puts_r+0x9a>
 8005694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005696:	f000 faa2 	bl	8005bde <__retarget_lock_release_recursive>
 800569a:	4628      	mov	r0, r5
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da04      	bge.n	80056ac <_puts_r+0xac>
 80056a2:	69a2      	ldr	r2, [r4, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	dc06      	bgt.n	80056b6 <_puts_r+0xb6>
 80056a8:	290a      	cmp	r1, #10
 80056aa:	d004      	beq.n	80056b6 <_puts_r+0xb6>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	6022      	str	r2, [r4, #0]
 80056b2:	7019      	strb	r1, [r3, #0]
 80056b4:	e7c5      	b.n	8005642 <_puts_r+0x42>
 80056b6:	4622      	mov	r2, r4
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 f817 	bl	80056ec <__swbuf_r>
 80056be:	3001      	adds	r0, #1
 80056c0:	d1bf      	bne.n	8005642 <_puts_r+0x42>
 80056c2:	e7df      	b.n	8005684 <_puts_r+0x84>
 80056c4:	250a      	movs	r5, #10
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	6022      	str	r2, [r4, #0]
 80056cc:	701d      	strb	r5, [r3, #0]
 80056ce:	e7db      	b.n	8005688 <_puts_r+0x88>
 80056d0:	08006050 	.word	0x08006050
 80056d4:	08006070 	.word	0x08006070
 80056d8:	08006030 	.word	0x08006030

080056dc <puts>:
 80056dc:	4b02      	ldr	r3, [pc, #8]	; (80056e8 <puts+0xc>)
 80056de:	4601      	mov	r1, r0
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	f7ff bf8d 	b.w	8005600 <_puts_r>
 80056e6:	bf00      	nop
 80056e8:	20000054 	.word	0x20000054

080056ec <__swbuf_r>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	460e      	mov	r6, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	4605      	mov	r5, r0
 80056f4:	b118      	cbz	r0, 80056fe <__swbuf_r+0x12>
 80056f6:	6983      	ldr	r3, [r0, #24]
 80056f8:	b90b      	cbnz	r3, 80056fe <__swbuf_r+0x12>
 80056fa:	f000 f9d1 	bl	8005aa0 <__sinit>
 80056fe:	4b21      	ldr	r3, [pc, #132]	; (8005784 <__swbuf_r+0x98>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d12b      	bne.n	800575c <__swbuf_r+0x70>
 8005704:	686c      	ldr	r4, [r5, #4]
 8005706:	69a3      	ldr	r3, [r4, #24]
 8005708:	60a3      	str	r3, [r4, #8]
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	071a      	lsls	r2, r3, #28
 800570e:	d52f      	bpl.n	8005770 <__swbuf_r+0x84>
 8005710:	6923      	ldr	r3, [r4, #16]
 8005712:	b36b      	cbz	r3, 8005770 <__swbuf_r+0x84>
 8005714:	6923      	ldr	r3, [r4, #16]
 8005716:	6820      	ldr	r0, [r4, #0]
 8005718:	b2f6      	uxtb	r6, r6
 800571a:	1ac0      	subs	r0, r0, r3
 800571c:	6963      	ldr	r3, [r4, #20]
 800571e:	4637      	mov	r7, r6
 8005720:	4283      	cmp	r3, r0
 8005722:	dc04      	bgt.n	800572e <__swbuf_r+0x42>
 8005724:	4621      	mov	r1, r4
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f926 	bl	8005978 <_fflush_r>
 800572c:	bb30      	cbnz	r0, 800577c <__swbuf_r+0x90>
 800572e:	68a3      	ldr	r3, [r4, #8]
 8005730:	3001      	adds	r0, #1
 8005732:	3b01      	subs	r3, #1
 8005734:	60a3      	str	r3, [r4, #8]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	6022      	str	r2, [r4, #0]
 800573c:	701e      	strb	r6, [r3, #0]
 800573e:	6963      	ldr	r3, [r4, #20]
 8005740:	4283      	cmp	r3, r0
 8005742:	d004      	beq.n	800574e <__swbuf_r+0x62>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	07db      	lsls	r3, r3, #31
 8005748:	d506      	bpl.n	8005758 <__swbuf_r+0x6c>
 800574a:	2e0a      	cmp	r6, #10
 800574c:	d104      	bne.n	8005758 <__swbuf_r+0x6c>
 800574e:	4621      	mov	r1, r4
 8005750:	4628      	mov	r0, r5
 8005752:	f000 f911 	bl	8005978 <_fflush_r>
 8005756:	b988      	cbnz	r0, 800577c <__swbuf_r+0x90>
 8005758:	4638      	mov	r0, r7
 800575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575c:	4b0a      	ldr	r3, [pc, #40]	; (8005788 <__swbuf_r+0x9c>)
 800575e:	429c      	cmp	r4, r3
 8005760:	d101      	bne.n	8005766 <__swbuf_r+0x7a>
 8005762:	68ac      	ldr	r4, [r5, #8]
 8005764:	e7cf      	b.n	8005706 <__swbuf_r+0x1a>
 8005766:	4b09      	ldr	r3, [pc, #36]	; (800578c <__swbuf_r+0xa0>)
 8005768:	429c      	cmp	r4, r3
 800576a:	bf08      	it	eq
 800576c:	68ec      	ldreq	r4, [r5, #12]
 800576e:	e7ca      	b.n	8005706 <__swbuf_r+0x1a>
 8005770:	4621      	mov	r1, r4
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f80c 	bl	8005790 <__swsetup_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0cb      	beq.n	8005714 <__swbuf_r+0x28>
 800577c:	f04f 37ff 	mov.w	r7, #4294967295
 8005780:	e7ea      	b.n	8005758 <__swbuf_r+0x6c>
 8005782:	bf00      	nop
 8005784:	08006050 	.word	0x08006050
 8005788:	08006070 	.word	0x08006070
 800578c:	08006030 	.word	0x08006030

08005790 <__swsetup_r>:
 8005790:	4b32      	ldr	r3, [pc, #200]	; (800585c <__swsetup_r+0xcc>)
 8005792:	b570      	push	{r4, r5, r6, lr}
 8005794:	681d      	ldr	r5, [r3, #0]
 8005796:	4606      	mov	r6, r0
 8005798:	460c      	mov	r4, r1
 800579a:	b125      	cbz	r5, 80057a6 <__swsetup_r+0x16>
 800579c:	69ab      	ldr	r3, [r5, #24]
 800579e:	b913      	cbnz	r3, 80057a6 <__swsetup_r+0x16>
 80057a0:	4628      	mov	r0, r5
 80057a2:	f000 f97d 	bl	8005aa0 <__sinit>
 80057a6:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <__swsetup_r+0xd0>)
 80057a8:	429c      	cmp	r4, r3
 80057aa:	d10f      	bne.n	80057cc <__swsetup_r+0x3c>
 80057ac:	686c      	ldr	r4, [r5, #4]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b4:	0719      	lsls	r1, r3, #28
 80057b6:	d42c      	bmi.n	8005812 <__swsetup_r+0x82>
 80057b8:	06dd      	lsls	r5, r3, #27
 80057ba:	d411      	bmi.n	80057e0 <__swsetup_r+0x50>
 80057bc:	2309      	movs	r3, #9
 80057be:	6033      	str	r3, [r6, #0]
 80057c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	e03e      	b.n	800584a <__swsetup_r+0xba>
 80057cc:	4b25      	ldr	r3, [pc, #148]	; (8005864 <__swsetup_r+0xd4>)
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d101      	bne.n	80057d6 <__swsetup_r+0x46>
 80057d2:	68ac      	ldr	r4, [r5, #8]
 80057d4:	e7eb      	b.n	80057ae <__swsetup_r+0x1e>
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <__swsetup_r+0xd8>)
 80057d8:	429c      	cmp	r4, r3
 80057da:	bf08      	it	eq
 80057dc:	68ec      	ldreq	r4, [r5, #12]
 80057de:	e7e6      	b.n	80057ae <__swsetup_r+0x1e>
 80057e0:	0758      	lsls	r0, r3, #29
 80057e2:	d512      	bpl.n	800580a <__swsetup_r+0x7a>
 80057e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057e6:	b141      	cbz	r1, 80057fa <__swsetup_r+0x6a>
 80057e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057ec:	4299      	cmp	r1, r3
 80057ee:	d002      	beq.n	80057f6 <__swsetup_r+0x66>
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 fa59 	bl	8005ca8 <_free_r>
 80057f6:	2300      	movs	r3, #0
 80057f8:	6363      	str	r3, [r4, #52]	; 0x34
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005800:	81a3      	strh	r3, [r4, #12]
 8005802:	2300      	movs	r3, #0
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	89a3      	ldrh	r3, [r4, #12]
 800580c:	f043 0308 	orr.w	r3, r3, #8
 8005810:	81a3      	strh	r3, [r4, #12]
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	b94b      	cbnz	r3, 800582a <__swsetup_r+0x9a>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800581c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005820:	d003      	beq.n	800582a <__swsetup_r+0x9a>
 8005822:	4621      	mov	r1, r4
 8005824:	4630      	mov	r0, r6
 8005826:	f000 f9ff 	bl	8005c28 <__smakebuf_r>
 800582a:	89a0      	ldrh	r0, [r4, #12]
 800582c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005830:	f010 0301 	ands.w	r3, r0, #1
 8005834:	d00a      	beq.n	800584c <__swsetup_r+0xbc>
 8005836:	2300      	movs	r3, #0
 8005838:	60a3      	str	r3, [r4, #8]
 800583a:	6963      	ldr	r3, [r4, #20]
 800583c:	425b      	negs	r3, r3
 800583e:	61a3      	str	r3, [r4, #24]
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	b943      	cbnz	r3, 8005856 <__swsetup_r+0xc6>
 8005844:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005848:	d1ba      	bne.n	80057c0 <__swsetup_r+0x30>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	0781      	lsls	r1, r0, #30
 800584e:	bf58      	it	pl
 8005850:	6963      	ldrpl	r3, [r4, #20]
 8005852:	60a3      	str	r3, [r4, #8]
 8005854:	e7f4      	b.n	8005840 <__swsetup_r+0xb0>
 8005856:	2000      	movs	r0, #0
 8005858:	e7f7      	b.n	800584a <__swsetup_r+0xba>
 800585a:	bf00      	nop
 800585c:	20000054 	.word	0x20000054
 8005860:	08006050 	.word	0x08006050
 8005864:	08006070 	.word	0x08006070
 8005868:	08006030 	.word	0x08006030

0800586c <__sflush_r>:
 800586c:	898a      	ldrh	r2, [r1, #12]
 800586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	0710      	lsls	r0, r2, #28
 8005876:	460c      	mov	r4, r1
 8005878:	d458      	bmi.n	800592c <__sflush_r+0xc0>
 800587a:	684b      	ldr	r3, [r1, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	dc05      	bgt.n	800588c <__sflush_r+0x20>
 8005880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	dc02      	bgt.n	800588c <__sflush_r+0x20>
 8005886:	2000      	movs	r0, #0
 8005888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800588c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800588e:	2e00      	cmp	r6, #0
 8005890:	d0f9      	beq.n	8005886 <__sflush_r+0x1a>
 8005892:	2300      	movs	r3, #0
 8005894:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005898:	682f      	ldr	r7, [r5, #0]
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	d032      	beq.n	8005904 <__sflush_r+0x98>
 800589e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	075a      	lsls	r2, r3, #29
 80058a4:	d505      	bpl.n	80058b2 <__sflush_r+0x46>
 80058a6:	6863      	ldr	r3, [r4, #4]
 80058a8:	1ac0      	subs	r0, r0, r3
 80058aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058ac:	b10b      	cbz	r3, 80058b2 <__sflush_r+0x46>
 80058ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058b0:	1ac0      	subs	r0, r0, r3
 80058b2:	2300      	movs	r3, #0
 80058b4:	4602      	mov	r2, r0
 80058b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b8:	4628      	mov	r0, r5
 80058ba:	6a21      	ldr	r1, [r4, #32]
 80058bc:	47b0      	blx	r6
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	d106      	bne.n	80058d2 <__sflush_r+0x66>
 80058c4:	6829      	ldr	r1, [r5, #0]
 80058c6:	291d      	cmp	r1, #29
 80058c8:	d82c      	bhi.n	8005924 <__sflush_r+0xb8>
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <__sflush_r+0x108>)
 80058cc:	40ca      	lsrs	r2, r1
 80058ce:	07d6      	lsls	r6, r2, #31
 80058d0:	d528      	bpl.n	8005924 <__sflush_r+0xb8>
 80058d2:	2200      	movs	r2, #0
 80058d4:	6062      	str	r2, [r4, #4]
 80058d6:	6922      	ldr	r2, [r4, #16]
 80058d8:	04d9      	lsls	r1, r3, #19
 80058da:	6022      	str	r2, [r4, #0]
 80058dc:	d504      	bpl.n	80058e8 <__sflush_r+0x7c>
 80058de:	1c42      	adds	r2, r0, #1
 80058e0:	d101      	bne.n	80058e6 <__sflush_r+0x7a>
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	b903      	cbnz	r3, 80058e8 <__sflush_r+0x7c>
 80058e6:	6560      	str	r0, [r4, #84]	; 0x54
 80058e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ea:	602f      	str	r7, [r5, #0]
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d0ca      	beq.n	8005886 <__sflush_r+0x1a>
 80058f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058f4:	4299      	cmp	r1, r3
 80058f6:	d002      	beq.n	80058fe <__sflush_r+0x92>
 80058f8:	4628      	mov	r0, r5
 80058fa:	f000 f9d5 	bl	8005ca8 <_free_r>
 80058fe:	2000      	movs	r0, #0
 8005900:	6360      	str	r0, [r4, #52]	; 0x34
 8005902:	e7c1      	b.n	8005888 <__sflush_r+0x1c>
 8005904:	6a21      	ldr	r1, [r4, #32]
 8005906:	2301      	movs	r3, #1
 8005908:	4628      	mov	r0, r5
 800590a:	47b0      	blx	r6
 800590c:	1c41      	adds	r1, r0, #1
 800590e:	d1c7      	bne.n	80058a0 <__sflush_r+0x34>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d0c4      	beq.n	80058a0 <__sflush_r+0x34>
 8005916:	2b1d      	cmp	r3, #29
 8005918:	d001      	beq.n	800591e <__sflush_r+0xb2>
 800591a:	2b16      	cmp	r3, #22
 800591c:	d101      	bne.n	8005922 <__sflush_r+0xb6>
 800591e:	602f      	str	r7, [r5, #0]
 8005920:	e7b1      	b.n	8005886 <__sflush_r+0x1a>
 8005922:	89a3      	ldrh	r3, [r4, #12]
 8005924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005928:	81a3      	strh	r3, [r4, #12]
 800592a:	e7ad      	b.n	8005888 <__sflush_r+0x1c>
 800592c:	690f      	ldr	r7, [r1, #16]
 800592e:	2f00      	cmp	r7, #0
 8005930:	d0a9      	beq.n	8005886 <__sflush_r+0x1a>
 8005932:	0793      	lsls	r3, r2, #30
 8005934:	bf18      	it	ne
 8005936:	2300      	movne	r3, #0
 8005938:	680e      	ldr	r6, [r1, #0]
 800593a:	bf08      	it	eq
 800593c:	694b      	ldreq	r3, [r1, #20]
 800593e:	eba6 0807 	sub.w	r8, r6, r7
 8005942:	600f      	str	r7, [r1, #0]
 8005944:	608b      	str	r3, [r1, #8]
 8005946:	f1b8 0f00 	cmp.w	r8, #0
 800594a:	dd9c      	ble.n	8005886 <__sflush_r+0x1a>
 800594c:	4643      	mov	r3, r8
 800594e:	463a      	mov	r2, r7
 8005950:	4628      	mov	r0, r5
 8005952:	6a21      	ldr	r1, [r4, #32]
 8005954:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005956:	47b0      	blx	r6
 8005958:	2800      	cmp	r0, #0
 800595a:	dc06      	bgt.n	800596a <__sflush_r+0xfe>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f04f 30ff 	mov.w	r0, #4294967295
 8005962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	e78e      	b.n	8005888 <__sflush_r+0x1c>
 800596a:	4407      	add	r7, r0
 800596c:	eba8 0800 	sub.w	r8, r8, r0
 8005970:	e7e9      	b.n	8005946 <__sflush_r+0xda>
 8005972:	bf00      	nop
 8005974:	20400001 	.word	0x20400001

08005978 <_fflush_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	690b      	ldr	r3, [r1, #16]
 800597c:	4605      	mov	r5, r0
 800597e:	460c      	mov	r4, r1
 8005980:	b913      	cbnz	r3, 8005988 <_fflush_r+0x10>
 8005982:	2500      	movs	r5, #0
 8005984:	4628      	mov	r0, r5
 8005986:	bd38      	pop	{r3, r4, r5, pc}
 8005988:	b118      	cbz	r0, 8005992 <_fflush_r+0x1a>
 800598a:	6983      	ldr	r3, [r0, #24]
 800598c:	b90b      	cbnz	r3, 8005992 <_fflush_r+0x1a>
 800598e:	f000 f887 	bl	8005aa0 <__sinit>
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <_fflush_r+0x6c>)
 8005994:	429c      	cmp	r4, r3
 8005996:	d11b      	bne.n	80059d0 <_fflush_r+0x58>
 8005998:	686c      	ldr	r4, [r5, #4]
 800599a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ef      	beq.n	8005982 <_fflush_r+0xa>
 80059a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059a4:	07d0      	lsls	r0, r2, #31
 80059a6:	d404      	bmi.n	80059b2 <_fflush_r+0x3a>
 80059a8:	0599      	lsls	r1, r3, #22
 80059aa:	d402      	bmi.n	80059b2 <_fflush_r+0x3a>
 80059ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ae:	f000 f915 	bl	8005bdc <__retarget_lock_acquire_recursive>
 80059b2:	4628      	mov	r0, r5
 80059b4:	4621      	mov	r1, r4
 80059b6:	f7ff ff59 	bl	800586c <__sflush_r>
 80059ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059bc:	4605      	mov	r5, r0
 80059be:	07da      	lsls	r2, r3, #31
 80059c0:	d4e0      	bmi.n	8005984 <_fflush_r+0xc>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	059b      	lsls	r3, r3, #22
 80059c6:	d4dd      	bmi.n	8005984 <_fflush_r+0xc>
 80059c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ca:	f000 f908 	bl	8005bde <__retarget_lock_release_recursive>
 80059ce:	e7d9      	b.n	8005984 <_fflush_r+0xc>
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <_fflush_r+0x70>)
 80059d2:	429c      	cmp	r4, r3
 80059d4:	d101      	bne.n	80059da <_fflush_r+0x62>
 80059d6:	68ac      	ldr	r4, [r5, #8]
 80059d8:	e7df      	b.n	800599a <_fflush_r+0x22>
 80059da:	4b04      	ldr	r3, [pc, #16]	; (80059ec <_fflush_r+0x74>)
 80059dc:	429c      	cmp	r4, r3
 80059de:	bf08      	it	eq
 80059e0:	68ec      	ldreq	r4, [r5, #12]
 80059e2:	e7da      	b.n	800599a <_fflush_r+0x22>
 80059e4:	08006050 	.word	0x08006050
 80059e8:	08006070 	.word	0x08006070
 80059ec:	08006030 	.word	0x08006030

080059f0 <std>:
 80059f0:	2300      	movs	r3, #0
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	e9c0 3300 	strd	r3, r3, [r0]
 80059fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059fe:	6083      	str	r3, [r0, #8]
 8005a00:	8181      	strh	r1, [r0, #12]
 8005a02:	6643      	str	r3, [r0, #100]	; 0x64
 8005a04:	81c2      	strh	r2, [r0, #14]
 8005a06:	6183      	str	r3, [r0, #24]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	2208      	movs	r2, #8
 8005a0c:	305c      	adds	r0, #92	; 0x5c
 8005a0e:	f7ff fdef 	bl	80055f0 <memset>
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <std+0x38>)
 8005a14:	6224      	str	r4, [r4, #32]
 8005a16:	6263      	str	r3, [r4, #36]	; 0x24
 8005a18:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <std+0x3c>)
 8005a1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <std+0x40>)
 8005a1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <std+0x44>)
 8005a22:	6323      	str	r3, [r4, #48]	; 0x30
 8005a24:	bd10      	pop	{r4, pc}
 8005a26:	bf00      	nop
 8005a28:	08005e15 	.word	0x08005e15
 8005a2c:	08005e37 	.word	0x08005e37
 8005a30:	08005e6f 	.word	0x08005e6f
 8005a34:	08005e93 	.word	0x08005e93

08005a38 <_cleanup_r>:
 8005a38:	4901      	ldr	r1, [pc, #4]	; (8005a40 <_cleanup_r+0x8>)
 8005a3a:	f000 b8af 	b.w	8005b9c <_fwalk_reent>
 8005a3e:	bf00      	nop
 8005a40:	08005979 	.word	0x08005979

08005a44 <__sfmoreglue>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	2568      	movs	r5, #104	; 0x68
 8005a48:	1e4a      	subs	r2, r1, #1
 8005a4a:	4355      	muls	r5, r2
 8005a4c:	460e      	mov	r6, r1
 8005a4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a52:	f000 f975 	bl	8005d40 <_malloc_r>
 8005a56:	4604      	mov	r4, r0
 8005a58:	b140      	cbz	r0, 8005a6c <__sfmoreglue+0x28>
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	e9c0 1600 	strd	r1, r6, [r0]
 8005a60:	300c      	adds	r0, #12
 8005a62:	60a0      	str	r0, [r4, #8]
 8005a64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a68:	f7ff fdc2 	bl	80055f0 <memset>
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	bd70      	pop	{r4, r5, r6, pc}

08005a70 <__sfp_lock_acquire>:
 8005a70:	4801      	ldr	r0, [pc, #4]	; (8005a78 <__sfp_lock_acquire+0x8>)
 8005a72:	f000 b8b3 	b.w	8005bdc <__retarget_lock_acquire_recursive>
 8005a76:	bf00      	nop
 8005a78:	20000230 	.word	0x20000230

08005a7c <__sfp_lock_release>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__sfp_lock_release+0x8>)
 8005a7e:	f000 b8ae 	b.w	8005bde <__retarget_lock_release_recursive>
 8005a82:	bf00      	nop
 8005a84:	20000230 	.word	0x20000230

08005a88 <__sinit_lock_acquire>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__sinit_lock_acquire+0x8>)
 8005a8a:	f000 b8a7 	b.w	8005bdc <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	2000022b 	.word	0x2000022b

08005a94 <__sinit_lock_release>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__sinit_lock_release+0x8>)
 8005a96:	f000 b8a2 	b.w	8005bde <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	2000022b 	.word	0x2000022b

08005aa0 <__sinit>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	f7ff fff0 	bl	8005a88 <__sinit_lock_acquire>
 8005aa8:	69a3      	ldr	r3, [r4, #24]
 8005aaa:	b11b      	cbz	r3, 8005ab4 <__sinit+0x14>
 8005aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab0:	f7ff bff0 	b.w	8005a94 <__sinit_lock_release>
 8005ab4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ab8:	6523      	str	r3, [r4, #80]	; 0x50
 8005aba:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <__sinit+0x68>)
 8005abc:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <__sinit+0x6c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	bf08      	it	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	4620      	mov	r0, r4
 8005aca:	bf08      	it	eq
 8005acc:	61a3      	streq	r3, [r4, #24]
 8005ace:	f000 f81f 	bl	8005b10 <__sfp>
 8005ad2:	6060      	str	r0, [r4, #4]
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 f81b 	bl	8005b10 <__sfp>
 8005ada:	60a0      	str	r0, [r4, #8]
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 f817 	bl	8005b10 <__sfp>
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	2104      	movs	r1, #4
 8005ae6:	60e0      	str	r0, [r4, #12]
 8005ae8:	6860      	ldr	r0, [r4, #4]
 8005aea:	f7ff ff81 	bl	80059f0 <std>
 8005aee:	2201      	movs	r2, #1
 8005af0:	2109      	movs	r1, #9
 8005af2:	68a0      	ldr	r0, [r4, #8]
 8005af4:	f7ff ff7c 	bl	80059f0 <std>
 8005af8:	2202      	movs	r2, #2
 8005afa:	2112      	movs	r1, #18
 8005afc:	68e0      	ldr	r0, [r4, #12]
 8005afe:	f7ff ff77 	bl	80059f0 <std>
 8005b02:	2301      	movs	r3, #1
 8005b04:	61a3      	str	r3, [r4, #24]
 8005b06:	e7d1      	b.n	8005aac <__sinit+0xc>
 8005b08:	0800602c 	.word	0x0800602c
 8005b0c:	08005a39 	.word	0x08005a39

08005b10 <__sfp>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	4607      	mov	r7, r0
 8005b14:	f7ff ffac 	bl	8005a70 <__sfp_lock_acquire>
 8005b18:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <__sfp+0x84>)
 8005b1a:	681e      	ldr	r6, [r3, #0]
 8005b1c:	69b3      	ldr	r3, [r6, #24]
 8005b1e:	b913      	cbnz	r3, 8005b26 <__sfp+0x16>
 8005b20:	4630      	mov	r0, r6
 8005b22:	f7ff ffbd 	bl	8005aa0 <__sinit>
 8005b26:	3648      	adds	r6, #72	; 0x48
 8005b28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	d503      	bpl.n	8005b38 <__sfp+0x28>
 8005b30:	6833      	ldr	r3, [r6, #0]
 8005b32:	b30b      	cbz	r3, 8005b78 <__sfp+0x68>
 8005b34:	6836      	ldr	r6, [r6, #0]
 8005b36:	e7f7      	b.n	8005b28 <__sfp+0x18>
 8005b38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b3c:	b9d5      	cbnz	r5, 8005b74 <__sfp+0x64>
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <__sfp+0x88>)
 8005b40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b44:	60e3      	str	r3, [r4, #12]
 8005b46:	6665      	str	r5, [r4, #100]	; 0x64
 8005b48:	f000 f847 	bl	8005bda <__retarget_lock_init_recursive>
 8005b4c:	f7ff ff96 	bl	8005a7c <__sfp_lock_release>
 8005b50:	2208      	movs	r2, #8
 8005b52:	4629      	mov	r1, r5
 8005b54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b5c:	6025      	str	r5, [r4, #0]
 8005b5e:	61a5      	str	r5, [r4, #24]
 8005b60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b64:	f7ff fd44 	bl	80055f0 <memset>
 8005b68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b70:	4620      	mov	r0, r4
 8005b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b74:	3468      	adds	r4, #104	; 0x68
 8005b76:	e7d9      	b.n	8005b2c <__sfp+0x1c>
 8005b78:	2104      	movs	r1, #4
 8005b7a:	4638      	mov	r0, r7
 8005b7c:	f7ff ff62 	bl	8005a44 <__sfmoreglue>
 8005b80:	4604      	mov	r4, r0
 8005b82:	6030      	str	r0, [r6, #0]
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d1d5      	bne.n	8005b34 <__sfp+0x24>
 8005b88:	f7ff ff78 	bl	8005a7c <__sfp_lock_release>
 8005b8c:	230c      	movs	r3, #12
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	e7ee      	b.n	8005b70 <__sfp+0x60>
 8005b92:	bf00      	nop
 8005b94:	0800602c 	.word	0x0800602c
 8005b98:	ffff0001 	.word	0xffff0001

08005b9c <_fwalk_reent>:
 8005b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	2700      	movs	r7, #0
 8005ba6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005baa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bae:	f1b9 0901 	subs.w	r9, r9, #1
 8005bb2:	d505      	bpl.n	8005bc0 <_fwalk_reent+0x24>
 8005bb4:	6824      	ldr	r4, [r4, #0]
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	d1f7      	bne.n	8005baa <_fwalk_reent+0xe>
 8005bba:	4638      	mov	r0, r7
 8005bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bc0:	89ab      	ldrh	r3, [r5, #12]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d907      	bls.n	8005bd6 <_fwalk_reent+0x3a>
 8005bc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	d003      	beq.n	8005bd6 <_fwalk_reent+0x3a>
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	47c0      	blx	r8
 8005bd4:	4307      	orrs	r7, r0
 8005bd6:	3568      	adds	r5, #104	; 0x68
 8005bd8:	e7e9      	b.n	8005bae <_fwalk_reent+0x12>

08005bda <__retarget_lock_init_recursive>:
 8005bda:	4770      	bx	lr

08005bdc <__retarget_lock_acquire_recursive>:
 8005bdc:	4770      	bx	lr

08005bde <__retarget_lock_release_recursive>:
 8005bde:	4770      	bx	lr

08005be0 <__swhatbuf_r>:
 8005be0:	b570      	push	{r4, r5, r6, lr}
 8005be2:	460e      	mov	r6, r1
 8005be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be8:	4614      	mov	r4, r2
 8005bea:	2900      	cmp	r1, #0
 8005bec:	461d      	mov	r5, r3
 8005bee:	b096      	sub	sp, #88	; 0x58
 8005bf0:	da07      	bge.n	8005c02 <__swhatbuf_r+0x22>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	602b      	str	r3, [r5, #0]
 8005bf6:	89b3      	ldrh	r3, [r6, #12]
 8005bf8:	061a      	lsls	r2, r3, #24
 8005bfa:	d410      	bmi.n	8005c1e <__swhatbuf_r+0x3e>
 8005bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c00:	e00e      	b.n	8005c20 <__swhatbuf_r+0x40>
 8005c02:	466a      	mov	r2, sp
 8005c04:	f000 f96c 	bl	8005ee0 <_fstat_r>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	dbf2      	blt.n	8005bf2 <__swhatbuf_r+0x12>
 8005c0c:	9a01      	ldr	r2, [sp, #4]
 8005c0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c16:	425a      	negs	r2, r3
 8005c18:	415a      	adcs	r2, r3
 8005c1a:	602a      	str	r2, [r5, #0]
 8005c1c:	e7ee      	b.n	8005bfc <__swhatbuf_r+0x1c>
 8005c1e:	2340      	movs	r3, #64	; 0x40
 8005c20:	2000      	movs	r0, #0
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	b016      	add	sp, #88	; 0x58
 8005c26:	bd70      	pop	{r4, r5, r6, pc}

08005c28 <__smakebuf_r>:
 8005c28:	898b      	ldrh	r3, [r1, #12]
 8005c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c2c:	079d      	lsls	r5, r3, #30
 8005c2e:	4606      	mov	r6, r0
 8005c30:	460c      	mov	r4, r1
 8005c32:	d507      	bpl.n	8005c44 <__smakebuf_r+0x1c>
 8005c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	6123      	str	r3, [r4, #16]
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	6163      	str	r3, [r4, #20]
 8005c40:	b002      	add	sp, #8
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	466a      	mov	r2, sp
 8005c46:	ab01      	add	r3, sp, #4
 8005c48:	f7ff ffca 	bl	8005be0 <__swhatbuf_r>
 8005c4c:	9900      	ldr	r1, [sp, #0]
 8005c4e:	4605      	mov	r5, r0
 8005c50:	4630      	mov	r0, r6
 8005c52:	f000 f875 	bl	8005d40 <_malloc_r>
 8005c56:	b948      	cbnz	r0, 8005c6c <__smakebuf_r+0x44>
 8005c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5c:	059a      	lsls	r2, r3, #22
 8005c5e:	d4ef      	bmi.n	8005c40 <__smakebuf_r+0x18>
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	f043 0302 	orr.w	r3, r3, #2
 8005c68:	81a3      	strh	r3, [r4, #12]
 8005c6a:	e7e3      	b.n	8005c34 <__smakebuf_r+0xc>
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <__smakebuf_r+0x7c>)
 8005c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	6020      	str	r0, [r4, #0]
 8005c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	9b00      	ldr	r3, [sp, #0]
 8005c7c:	6120      	str	r0, [r4, #16]
 8005c7e:	6163      	str	r3, [r4, #20]
 8005c80:	9b01      	ldr	r3, [sp, #4]
 8005c82:	b15b      	cbz	r3, 8005c9c <__smakebuf_r+0x74>
 8005c84:	4630      	mov	r0, r6
 8005c86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c8a:	f000 f93b 	bl	8005f04 <_isatty_r>
 8005c8e:	b128      	cbz	r0, 8005c9c <__smakebuf_r+0x74>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	89a0      	ldrh	r0, [r4, #12]
 8005c9e:	4305      	orrs	r5, r0
 8005ca0:	81a5      	strh	r5, [r4, #12]
 8005ca2:	e7cd      	b.n	8005c40 <__smakebuf_r+0x18>
 8005ca4:	08005a39 	.word	0x08005a39

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d043      	beq.n	8005d38 <_free_r+0x90>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 f944 	bl	8005f48 <__malloc_lock>
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <_free_r+0x94>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	b933      	cbnz	r3, 8005cd6 <_free_r+0x2e>
 8005cc8:	6063      	str	r3, [r4, #4]
 8005cca:	6014      	str	r4, [r2, #0]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd2:	f000 b93f 	b.w	8005f54 <__malloc_unlock>
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	d90a      	bls.n	8005cf0 <_free_r+0x48>
 8005cda:	6821      	ldr	r1, [r4, #0]
 8005cdc:	1862      	adds	r2, r4, r1
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	bf01      	itttt	eq
 8005ce2:	681a      	ldreq	r2, [r3, #0]
 8005ce4:	685b      	ldreq	r3, [r3, #4]
 8005ce6:	1852      	addeq	r2, r2, r1
 8005ce8:	6022      	streq	r2, [r4, #0]
 8005cea:	6063      	str	r3, [r4, #4]
 8005cec:	6004      	str	r4, [r0, #0]
 8005cee:	e7ed      	b.n	8005ccc <_free_r+0x24>
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b10b      	cbz	r3, 8005cfa <_free_r+0x52>
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	d9fa      	bls.n	8005cf0 <_free_r+0x48>
 8005cfa:	6811      	ldr	r1, [r2, #0]
 8005cfc:	1850      	adds	r0, r2, r1
 8005cfe:	42a0      	cmp	r0, r4
 8005d00:	d10b      	bne.n	8005d1a <_free_r+0x72>
 8005d02:	6820      	ldr	r0, [r4, #0]
 8005d04:	4401      	add	r1, r0
 8005d06:	1850      	adds	r0, r2, r1
 8005d08:	4283      	cmp	r3, r0
 8005d0a:	6011      	str	r1, [r2, #0]
 8005d0c:	d1de      	bne.n	8005ccc <_free_r+0x24>
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4401      	add	r1, r0
 8005d14:	6011      	str	r1, [r2, #0]
 8005d16:	6053      	str	r3, [r2, #4]
 8005d18:	e7d8      	b.n	8005ccc <_free_r+0x24>
 8005d1a:	d902      	bls.n	8005d22 <_free_r+0x7a>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	e7d4      	b.n	8005ccc <_free_r+0x24>
 8005d22:	6820      	ldr	r0, [r4, #0]
 8005d24:	1821      	adds	r1, r4, r0
 8005d26:	428b      	cmp	r3, r1
 8005d28:	bf01      	itttt	eq
 8005d2a:	6819      	ldreq	r1, [r3, #0]
 8005d2c:	685b      	ldreq	r3, [r3, #4]
 8005d2e:	1809      	addeq	r1, r1, r0
 8005d30:	6021      	streq	r1, [r4, #0]
 8005d32:	6063      	str	r3, [r4, #4]
 8005d34:	6054      	str	r4, [r2, #4]
 8005d36:	e7c9      	b.n	8005ccc <_free_r+0x24>
 8005d38:	bd38      	pop	{r3, r4, r5, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200000d8 	.word	0x200000d8

08005d40 <_malloc_r>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	1ccd      	adds	r5, r1, #3
 8005d44:	f025 0503 	bic.w	r5, r5, #3
 8005d48:	3508      	adds	r5, #8
 8005d4a:	2d0c      	cmp	r5, #12
 8005d4c:	bf38      	it	cc
 8005d4e:	250c      	movcc	r5, #12
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	4606      	mov	r6, r0
 8005d54:	db01      	blt.n	8005d5a <_malloc_r+0x1a>
 8005d56:	42a9      	cmp	r1, r5
 8005d58:	d903      	bls.n	8005d62 <_malloc_r+0x22>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	2000      	movs	r0, #0
 8005d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d62:	f000 f8f1 	bl	8005f48 <__malloc_lock>
 8005d66:	4921      	ldr	r1, [pc, #132]	; (8005dec <_malloc_r+0xac>)
 8005d68:	680a      	ldr	r2, [r1, #0]
 8005d6a:	4614      	mov	r4, r2
 8005d6c:	b99c      	cbnz	r4, 8005d96 <_malloc_r+0x56>
 8005d6e:	4f20      	ldr	r7, [pc, #128]	; (8005df0 <_malloc_r+0xb0>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	b923      	cbnz	r3, 8005d7e <_malloc_r+0x3e>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4630      	mov	r0, r6
 8005d78:	f000 f83c 	bl	8005df4 <_sbrk_r>
 8005d7c:	6038      	str	r0, [r7, #0]
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 f837 	bl	8005df4 <_sbrk_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d123      	bne.n	8005dd2 <_malloc_r+0x92>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	f000 f8e0 	bl	8005f54 <__malloc_unlock>
 8005d94:	e7e3      	b.n	8005d5e <_malloc_r+0x1e>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	1b5b      	subs	r3, r3, r5
 8005d9a:	d417      	bmi.n	8005dcc <_malloc_r+0x8c>
 8005d9c:	2b0b      	cmp	r3, #11
 8005d9e:	d903      	bls.n	8005da8 <_malloc_r+0x68>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	441c      	add	r4, r3
 8005da4:	6025      	str	r5, [r4, #0]
 8005da6:	e004      	b.n	8005db2 <_malloc_r+0x72>
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	42a2      	cmp	r2, r4
 8005dac:	bf0c      	ite	eq
 8005dae:	600b      	streq	r3, [r1, #0]
 8005db0:	6053      	strne	r3, [r2, #4]
 8005db2:	4630      	mov	r0, r6
 8005db4:	f000 f8ce 	bl	8005f54 <__malloc_unlock>
 8005db8:	f104 000b 	add.w	r0, r4, #11
 8005dbc:	1d23      	adds	r3, r4, #4
 8005dbe:	f020 0007 	bic.w	r0, r0, #7
 8005dc2:	1ac2      	subs	r2, r0, r3
 8005dc4:	d0cc      	beq.n	8005d60 <_malloc_r+0x20>
 8005dc6:	1a1b      	subs	r3, r3, r0
 8005dc8:	50a3      	str	r3, [r4, r2]
 8005dca:	e7c9      	b.n	8005d60 <_malloc_r+0x20>
 8005dcc:	4622      	mov	r2, r4
 8005dce:	6864      	ldr	r4, [r4, #4]
 8005dd0:	e7cc      	b.n	8005d6c <_malloc_r+0x2c>
 8005dd2:	1cc4      	adds	r4, r0, #3
 8005dd4:	f024 0403 	bic.w	r4, r4, #3
 8005dd8:	42a0      	cmp	r0, r4
 8005dda:	d0e3      	beq.n	8005da4 <_malloc_r+0x64>
 8005ddc:	1a21      	subs	r1, r4, r0
 8005dde:	4630      	mov	r0, r6
 8005de0:	f000 f808 	bl	8005df4 <_sbrk_r>
 8005de4:	3001      	adds	r0, #1
 8005de6:	d1dd      	bne.n	8005da4 <_malloc_r+0x64>
 8005de8:	e7cf      	b.n	8005d8a <_malloc_r+0x4a>
 8005dea:	bf00      	nop
 8005dec:	200000d8 	.word	0x200000d8
 8005df0:	200000dc 	.word	0x200000dc

08005df4 <_sbrk_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	2300      	movs	r3, #0
 8005df8:	4d05      	ldr	r5, [pc, #20]	; (8005e10 <_sbrk_r+0x1c>)
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	f7fb fa6c 	bl	80012dc <_sbrk>
 8005e04:	1c43      	adds	r3, r0, #1
 8005e06:	d102      	bne.n	8005e0e <_sbrk_r+0x1a>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	b103      	cbz	r3, 8005e0e <_sbrk_r+0x1a>
 8005e0c:	6023      	str	r3, [r4, #0]
 8005e0e:	bd38      	pop	{r3, r4, r5, pc}
 8005e10:	20000234 	.word	0x20000234

08005e14 <__sread>:
 8005e14:	b510      	push	{r4, lr}
 8005e16:	460c      	mov	r4, r1
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	f000 f8a0 	bl	8005f60 <_read_r>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	bfab      	itete	ge
 8005e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e26:	89a3      	ldrhlt	r3, [r4, #12]
 8005e28:	181b      	addge	r3, r3, r0
 8005e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e2e:	bfac      	ite	ge
 8005e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e32:	81a3      	strhlt	r3, [r4, #12]
 8005e34:	bd10      	pop	{r4, pc}

08005e36 <__swrite>:
 8005e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	461f      	mov	r7, r3
 8005e3c:	898b      	ldrh	r3, [r1, #12]
 8005e3e:	4605      	mov	r5, r0
 8005e40:	05db      	lsls	r3, r3, #23
 8005e42:	460c      	mov	r4, r1
 8005e44:	4616      	mov	r6, r2
 8005e46:	d505      	bpl.n	8005e54 <__swrite+0x1e>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e50:	f000 f868 	bl	8005f24 <_lseek_r>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	4632      	mov	r2, r6
 8005e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	4628      	mov	r0, r5
 8005e60:	463b      	mov	r3, r7
 8005e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6a:	f000 b817 	b.w	8005e9c <_write_r>

08005e6e <__sseek>:
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	460c      	mov	r4, r1
 8005e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e76:	f000 f855 	bl	8005f24 <_lseek_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	bf15      	itete	ne
 8005e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e8a:	81a3      	strheq	r3, [r4, #12]
 8005e8c:	bf18      	it	ne
 8005e8e:	81a3      	strhne	r3, [r4, #12]
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <__sclose>:
 8005e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e96:	f000 b813 	b.w	8005ec0 <_close_r>
	...

08005e9c <_write_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4d05      	ldr	r5, [pc, #20]	; (8005ebc <_write_r+0x20>)
 8005ea8:	602a      	str	r2, [r5, #0]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f7fa ffba 	bl	8000e24 <_write>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_write_r+0x1e>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_write_r+0x1e>
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20000234 	.word	0x20000234

08005ec0 <_close_r>:
 8005ec0:	b538      	push	{r3, r4, r5, lr}
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4d05      	ldr	r5, [pc, #20]	; (8005edc <_close_r+0x1c>)
 8005ec6:	4604      	mov	r4, r0
 8005ec8:	4608      	mov	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fb f9d5 	bl	800127a <_close>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_close_r+0x1a>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_close_r+0x1a>
 8005ed8:	6023      	str	r3, [r4, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	20000234 	.word	0x20000234

08005ee0 <_fstat_r>:
 8005ee0:	b538      	push	{r3, r4, r5, lr}
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	4d06      	ldr	r5, [pc, #24]	; (8005f00 <_fstat_r+0x20>)
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	602b      	str	r3, [r5, #0]
 8005eee:	f7fb f9cf 	bl	8001290 <_fstat>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d102      	bne.n	8005efc <_fstat_r+0x1c>
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	b103      	cbz	r3, 8005efc <_fstat_r+0x1c>
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	20000234 	.word	0x20000234

08005f04 <_isatty_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	2300      	movs	r3, #0
 8005f08:	4d05      	ldr	r5, [pc, #20]	; (8005f20 <_isatty_r+0x1c>)
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb f9cd 	bl	80012ae <_isatty>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_isatty_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_isatty_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	20000234 	.word	0x20000234

08005f24 <_lseek_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4d05      	ldr	r5, [pc, #20]	; (8005f44 <_lseek_r+0x20>)
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fb f9c5 	bl	80012c2 <_lseek>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_lseek_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_lseek_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000234 	.word	0x20000234

08005f48 <__malloc_lock>:
 8005f48:	4801      	ldr	r0, [pc, #4]	; (8005f50 <__malloc_lock+0x8>)
 8005f4a:	f7ff be47 	b.w	8005bdc <__retarget_lock_acquire_recursive>
 8005f4e:	bf00      	nop
 8005f50:	2000022c 	.word	0x2000022c

08005f54 <__malloc_unlock>:
 8005f54:	4801      	ldr	r0, [pc, #4]	; (8005f5c <__malloc_unlock+0x8>)
 8005f56:	f7ff be42 	b.w	8005bde <__retarget_lock_release_recursive>
 8005f5a:	bf00      	nop
 8005f5c:	2000022c 	.word	0x2000022c

08005f60 <_read_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4604      	mov	r4, r0
 8005f64:	4608      	mov	r0, r1
 8005f66:	4611      	mov	r1, r2
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4d05      	ldr	r5, [pc, #20]	; (8005f80 <_read_r+0x20>)
 8005f6c:	602a      	str	r2, [r5, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f7fb f966 	bl	8001240 <_read>
 8005f74:	1c43      	adds	r3, r0, #1
 8005f76:	d102      	bne.n	8005f7e <_read_r+0x1e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	b103      	cbz	r3, 8005f7e <_read_r+0x1e>
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	bd38      	pop	{r3, r4, r5, pc}
 8005f80:	20000234 	.word	0x20000234

08005f84 <_init>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	bf00      	nop
 8005f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8a:	bc08      	pop	{r3}
 8005f8c:	469e      	mov	lr, r3
 8005f8e:	4770      	bx	lr

08005f90 <_fini>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr
