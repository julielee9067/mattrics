
printfTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002604  08002604  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800260c  0800260c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000070  08002684  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002684  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050eb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000125f  00000000  00000000  00025184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  000263e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00026850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001401e  00000000  00000000  00026c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ecf  00000000  00000000  0003ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000771db  00000000  00000000  0003fb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b6ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017d4  00000000  00000000  000b6d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08002528 	.word	0x08002528

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08002528 	.word	0x08002528

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800047c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000480:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d013      	beq.n	80004b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800048c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000490:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000494:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000498:	2b00      	cmp	r3, #0
 800049a:	d00b      	beq.n	80004b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800049c:	e000      	b.n	80004a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800049e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f9      	beq.n	800049e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char* ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	int data_index;
	for(data_index = 0; data_index < len; data_index++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e009      	b.n	80004e6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	60ba      	str	r2, [r7, #8]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f7ff ffca 	bl	8000474 <ITM_SendChar>
	for(data_index = 0; data_index < len; data_index++)
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	3301      	adds	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	697a      	ldr	r2, [r7, #20]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	dbf1      	blt.n	80004d2 <_write+0x12>
	}
	return len;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 f9a3 	bl	8000846 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f81e 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f868 	bl	80005d8 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  counter++;
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <main+0x40>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b2da      	uxtb	r2, r3
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <main+0x40>)
 8000512:	701a      	strb	r2, [r3, #0]
	  if(counter > 100)
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <main+0x40>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b64      	cmp	r3, #100	; 0x64
 800051a:	d902      	bls.n	8000522 <main+0x2a>
	  {
		  counter = 0;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <main+0x40>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
	  }
	  printf("Counter: %d \n", counter);
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0x40>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4619      	mov	r1, r3
 8000528:	4804      	ldr	r0, [pc, #16]	; (800053c <main+0x44>)
 800052a:	f001 f89d 	bl	8001668 <iprintf>
	  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 f9f7 	bl	8000924 <HAL_Delay>
	  counter++;
 8000536:	e7e7      	b.n	8000508 <main+0x10>
 8000538:	2000008c 	.word	0x2000008c
 800053c:	08002540 	.word	0x08002540

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 f882 	bl	8001658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	463b      	mov	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <SystemClock_Config+0x94>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800056a:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <SystemClock_Config+0x94>)
 800056c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000570:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000572:	2301      	movs	r3, #1
 8000574:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000584:	2300      	movs	r3, #0
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f000 facc 	bl	8000b30 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800059e:	f000 f849 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 fde8 	bl	8001190 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005c6:	f000 f835 	bl	8000634 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3748      	adds	r7, #72	; 0x48
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_GPIO_Init+0x58>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_GPIO_Init+0x58>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_GPIO_Init+0x58>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_GPIO_Init+0x58>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <MX_GPIO_Init+0x58>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_GPIO_Init+0x58>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_GPIO_Init+0x58>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <MX_GPIO_Init+0x58>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	61d3      	str	r3, [r2, #28]
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_GPIO_Init+0x58>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40023800 	.word	0x40023800

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <HAL_MspInit+0x58>)
 8000648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <HAL_MspInit+0x58>)
 800064c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000650:	6253      	str	r3, [r2, #36]	; 0x24
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <HAL_MspInit+0x58>)
 8000654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <HAL_MspInit+0x58>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <HAL_MspInit+0x58>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6213      	str	r3, [r2, #32]
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_MspInit+0x58>)
 800066c:	6a1b      	ldr	r3, [r3, #32]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HAL_MspInit+0x58>)
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	4a07      	ldr	r2, [pc, #28]	; (8000698 <HAL_MspInit+0x58>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6253      	str	r3, [r2, #36]	; 0x24
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_MspInit+0x58>)
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40023800 	.word	0x40023800

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e2:	f000 f903 	bl	80008ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e00a      	b.n	8000712 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006fc:	f3af 8000 	nop.w
 8000700:	4601      	mov	r1, r0
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	60ba      	str	r2, [r7, #8]
 8000708:	b2ca      	uxtb	r2, r1
 800070a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	3301      	adds	r3, #1
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbf0      	blt.n	80006fc <_read+0x12>
	}

return len;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	return -1;
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074a:	605a      	str	r2, [r3, #4]
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <_isatty>:

int _isatty(int file)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	return 1;
 8000760:	2301      	movs	r3, #1
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	return 0;
 8000778:	2300      	movs	r3, #0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <_sbrk+0x5c>)
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <_sbrk+0x60>)
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <_sbrk+0x64>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <_sbrk+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	693a      	ldr	r2, [r7, #16]
 80007b0:	429a      	cmp	r2, r3
 80007b2:	d207      	bcs.n	80007c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b4:	f000 ff26 	bl	8001604 <__errno>
 80007b8:	4603      	mov	r3, r0
 80007ba:	220c      	movs	r2, #12
 80007bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	e009      	b.n	80007d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <_sbrk+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ca:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <_sbrk+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20008000 	.word	0x20008000
 80007e4:	00000400 	.word	0x00000400
 80007e8:	20000090 	.word	0x20000090
 80007ec:	200000b0 	.word	0x200000b0

080007f0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	; (8000834 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	; (8000840 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000822:	f7ff ffe5 	bl	80007f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000826:	f000 fef3 	bl	8001610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fe65 	bl	80004f8 <main>
  bx lr
 800082e:	4770      	bx	lr
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000838:	08002614 	.word	0x08002614
  ldr r2, =_sbss
 800083c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000840:	200000b0 	.word	0x200000b0

08000844 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_IRQHandler>

08000846 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f939 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f80e 	bl	8000878 <HAL_InitTick>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e001      	b.n	800086c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000868:	f7ff feea 	bl	8000640 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_InitTick+0x68>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d022      	beq.n	80008d2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_InitTick+0x6c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_InitTick+0x68>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000898:	fbb1 f3f3 	udiv	r3, r1, r3
 800089c:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f938 	bl	8000b16 <HAL_SYSTICK_Config>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10f      	bne.n	80008cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d809      	bhi.n	80008c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b2:	2200      	movs	r2, #0
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ba:	f000 f910 	bl	8000ade <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_InitTick+0x70>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	e007      	b.n	80008d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73fb      	strb	r3, [r7, #15]
 80008ca:	e004      	b.n	80008d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	e001      	b.n	80008d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000008 	.word	0x20000008
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000004 	.word	0x20000004

080008ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <HAL_IncTick+0x1c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <HAL_IncTick+0x20>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	4a03      	ldr	r2, [pc, #12]	; (8000908 <HAL_IncTick+0x1c>)
 80008fc:	6013      	str	r3, [r2, #0]
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	2000009c 	.word	0x2000009c
 800090c:	20000008 	.word	0x20000008

08000910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return uwTick;
 8000914:	4b02      	ldr	r3, [pc, #8]	; (8000920 <HAL_GetTick+0x10>)
 8000916:	681b      	ldr	r3, [r3, #0]
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	2000009c 	.word	0x2000009c

08000924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff fff0 	bl	8000910 <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d004      	beq.n	8000948 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_Delay+0x40>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000948:	bf00      	nop
 800094a:	f7ff ffe1 	bl	8000910 <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	429a      	cmp	r2, r3
 8000958:	d8f7      	bhi.n	800094a <HAL_Delay+0x26>
  {
  }
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000008 	.word	0x20000008

08000968 <__NVIC_SetPriorityGrouping>:
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_SetPriority>:
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Config>:
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff90 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff49 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5e 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5f 	bl	80009cc <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e31d      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b42:	4b94      	ldr	r3, [pc, #592]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b4c:	4b91      	ldr	r3, [pc, #580]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b54:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d07b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b08      	cmp	r3, #8
 8000b66:	d006      	beq.n	8000b76 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	2b0c      	cmp	r3, #12
 8000b6c:	d10f      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b74:	d10b      	bne.n	8000b8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b76:	4b87      	ldr	r3, [pc, #540]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d06a      	beq.n	8000c58 <HAL_RCC_OscConfig+0x128>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d166      	bne.n	8000c58 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e2f7      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d106      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x74>
 8000b96:	4b7f      	ldr	r3, [pc, #508]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a7e      	ldr	r2, [pc, #504]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e02d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d10c      	bne.n	8000bc6 <HAL_RCC_OscConfig+0x96>
 8000bac:	4b79      	ldr	r3, [pc, #484]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a78      	ldr	r2, [pc, #480]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b76      	ldr	r3, [pc, #472]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a75      	ldr	r2, [pc, #468]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e01c      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b05      	cmp	r3, #5
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xb8>
 8000bce:	4b71      	ldr	r3, [pc, #452]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a70      	ldr	r2, [pc, #448]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6e      	ldr	r3, [pc, #440]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6d      	ldr	r2, [pc, #436]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd0>
 8000be8:	4b6a      	ldr	r3, [pc, #424]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a69      	ldr	r2, [pc, #420]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b67      	ldr	r3, [pc, #412]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a66      	ldr	r2, [pc, #408]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fe82 	bl	8000910 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fe7e 	bl	8000910 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e2ad      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c22:	4b5c      	ldr	r3, [pc, #368]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe0>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fe6e 	bl	8000910 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fe6a 	bl	8000910 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e299      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x108>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d05a      	beq.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	d005      	beq.n	8000c78 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2b0c      	cmp	r3, #12
 8000c70:	d119      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x176>
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d116      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	4b46      	ldr	r3, [pc, #280]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <HAL_RCC_OscConfig+0x160>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d001      	beq.n	8000c90 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e276      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c90:	4b40      	ldr	r3, [pc, #256]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691b      	ldr	r3, [r3, #16]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	493d      	ldr	r1, [pc, #244]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ca4:	e03a      	b.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d020      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cae:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <HAL_RCC_OscConfig+0x268>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fe2c 	bl	8000910 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fe28 	bl	8000910 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e257      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	492a      	ldr	r1, [pc, #168]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]
 8000cee:	e015      	b.n	8000d1c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <HAL_RCC_OscConfig+0x268>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fe0b 	bl	8000910 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fe07 	bl	8000910 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e236      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f0      	bne.n	8000cfe <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80b8 	beq.w	8000e9a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d170      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d005      	beq.n	8000d48 <HAL_RCC_OscConfig+0x218>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e21a      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1a      	ldr	r2, [r3, #32]
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d921      	bls.n	8000d9c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fbf1 	bl	8001544 <RCC_SetFlashLatencyFromMSIRange>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e208      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	4906      	ldr	r1, [pc, #24]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	061b      	lsls	r3, r3, #24
 8000d8c:	4901      	ldr	r1, [pc, #4]	; (8000d94 <HAL_RCC_OscConfig+0x264>)
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]
 8000d92:	e020      	b.n	8000dd6 <HAL_RCC_OscConfig+0x2a6>
 8000d94:	40023800 	.word	0x40023800
 8000d98:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d9c:	4ba4      	ldr	r3, [pc, #656]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	49a1      	ldr	r1, [pc, #644]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dae:	4ba0      	ldr	r3, [pc, #640]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	061b      	lsls	r3, r3, #24
 8000dbc:	499c      	ldr	r1, [pc, #624]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fbbc 	bl	8001544 <RCC_SetFlashLatencyFromMSIRange>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e1d3      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	0b5b      	lsrs	r3, r3, #13
 8000ddc:	3301      	adds	r3, #1
 8000dde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000de6:	4a92      	ldr	r2, [pc, #584]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000de8:	6892      	ldr	r2, [r2, #8]
 8000dea:	0912      	lsrs	r2, r2, #4
 8000dec:	f002 020f 	and.w	r2, r2, #15
 8000df0:	4990      	ldr	r1, [pc, #576]	; (8001034 <HAL_RCC_OscConfig+0x504>)
 8000df2:	5c8a      	ldrb	r2, [r1, r2]
 8000df4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000df6:	4a90      	ldr	r2, [pc, #576]	; (8001038 <HAL_RCC_OscConfig+0x508>)
 8000df8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dfa:	4b90      	ldr	r3, [pc, #576]	; (800103c <HAL_RCC_OscConfig+0x50c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fd3a 	bl	8000878 <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d045      	beq.n	8000e9a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	e1b5      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d029      	beq.n	8000e6e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e1a:	4b89      	ldr	r3, [pc, #548]	; (8001040 <HAL_RCC_OscConfig+0x510>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fd76 	bl	8000910 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e28:	f7ff fd72 	bl	8000910 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1a1      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e3a:	4b7d      	ldr	r3, [pc, #500]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e46:	4b7a      	ldr	r3, [pc, #488]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4977      	ldr	r1, [pc, #476]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e58:	4b75      	ldr	r3, [pc, #468]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69db      	ldr	r3, [r3, #28]
 8000e64:	061b      	lsls	r3, r3, #24
 8000e66:	4972      	ldr	r1, [pc, #456]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	604b      	str	r3, [r1, #4]
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e6e:	4b74      	ldr	r3, [pc, #464]	; (8001040 <HAL_RCC_OscConfig+0x510>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd4c 	bl	8000910 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fd48 	bl	8000910 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e177      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e8e:	4b68      	ldr	r3, [pc, #416]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d030      	beq.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d016      	beq.n	8000edc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eae:	4b65      	ldr	r3, [pc, #404]	; (8001044 <HAL_RCC_OscConfig+0x514>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fd2c 	bl	8000910 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fd28 	bl	8000910 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e157      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ece:	4b58      	ldr	r3, [pc, #352]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x38c>
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000edc:	4b59      	ldr	r3, [pc, #356]	; (8001044 <HAL_RCC_OscConfig+0x514>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee2:	f7ff fd15 	bl	8000910 <HAL_GetTick>
 8000ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eea:	f7ff fd11 	bl	8000910 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e140      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000efc:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	f003 0302 	and.w	r3, r3, #2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f0      	bne.n	8000eea <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b5 	beq.w	8001080 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10d      	bne.n	8000f42 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b42      	ldr	r3, [pc, #264]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2a:	4a41      	ldr	r2, [pc, #260]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	6253      	str	r3, [r2, #36]	; 0x24
 8000f32:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d118      	bne.n	8000f80 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f4e:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a3d      	ldr	r2, [pc, #244]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fcd9 	bl	8000910 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f62:	f7ff fcd5 	bl	8000910 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	; 0x64
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e104      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	4b34      	ldr	r3, [pc, #208]	; (8001048 <HAL_RCC_OscConfig+0x518>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d106      	bne.n	8000f96 <HAL_RCC_OscConfig+0x466>
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8c:	4a28      	ldr	r2, [pc, #160]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
 8000f94:	e02d      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x488>
 8000f9e:	4b24      	ldr	r3, [pc, #144]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa8:	6353      	str	r3, [r2, #52]	; 0x34
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fae:	4a20      	ldr	r2, [pc, #128]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb6:	e01c      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d10c      	bne.n	8000fda <HAL_RCC_OscConfig+0x4aa>
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc4:	4a1a      	ldr	r2, [pc, #104]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6353      	str	r3, [r2, #52]	; 0x34
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6353      	str	r3, [r2, #52]	; 0x34
 8000fd8:	e00b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4c2>
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	4a14      	ldr	r2, [pc, #80]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe4:	6353      	str	r3, [r2, #52]	; 0x34
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 8000fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ff0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fc89 	bl	8000910 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001000:	e00a      	b.n	8001018 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001002:	f7ff fc85 	bl	8000910 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e0b2      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_RCC_OscConfig+0x500>)
 800101a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800101c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ee      	beq.n	8001002 <HAL_RCC_OscConfig+0x4d2>
 8001024:	e023      	b.n	800106e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fc73 	bl	8000910 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800102c:	e019      	b.n	8001062 <HAL_RCC_OscConfig+0x532>
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	0800255c 	.word	0x0800255c
 8001038:	20000000 	.word	0x20000000
 800103c:	20000004 	.word	0x20000004
 8001040:	42470020 	.word	0x42470020
 8001044:	42470680 	.word	0x42470680
 8001048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff fc60 	bl	8000910 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f241 3288 	movw	r2, #5000	; 0x1388
 800105a:	4293      	cmp	r3, r2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e08d      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1ee      	bne.n	800104c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d105      	bne.n	8001080 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	4a43      	ldr	r2, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 800107a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800107e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2b00      	cmp	r3, #0
 8001086:	d079      	beq.n	800117c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d056      	beq.n	800113c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	2b02      	cmp	r3, #2
 8001094:	d13b      	bne.n	800110e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fc38 	bl	8000910 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a4:	f7ff fc34 	bl	8000910 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e063      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	4319      	orrs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	430b      	orrs	r3, r1
 80010da:	492b      	ldr	r1, [pc, #172]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010e0:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fc13 	bl	8000910 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fc0f 	bl	8000910 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e03e      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0f0      	beq.n	80010ee <HAL_RCC_OscConfig+0x5be>
 800110c:	e036      	b.n	800117c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_RCC_OscConfig+0x65c>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fbfc 	bl	8000910 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fbf8 	bl	8000910 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e027      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x5ec>
 800113a:	e01f      	b.n	800117c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e01a      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_RCC_OscConfig+0x658>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	429a      	cmp	r2, r3
 800115a:	d10d      	bne.n	8001178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001166:	429a      	cmp	r2, r3
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	42470060 	.word	0x42470060

08001190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e11a      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a4:	4b8f      	ldr	r3, [pc, #572]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d919      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x34>
 80011b8:	4b8a      	ldr	r3, [pc, #552]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b87      	ldr	r3, [pc, #540]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 0201 	bic.w	r2, r3, #1
 80011cc:	4985      	ldr	r1, [pc, #532]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d4:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e0f9      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f2:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	497a      	ldr	r1, [pc, #488]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 808e 	beq.w	800132e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d107      	bne.n	800122a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800121a:	4b73      	ldr	r3, [pc, #460]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d7      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d115      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0cb      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0bf      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0b7      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800126a:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f023 0203 	bic.w	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	495c      	ldr	r1, [pc, #368]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800127c:	f7ff fb48 	bl	8000910 <HAL_GetTick>
 8001280:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800128a:	e00a      	b.n	80012a2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800128c:	f7ff fb40 	bl	8000910 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	f241 3288 	movw	r2, #5000	; 0x1388
 800129a:	4293      	cmp	r3, r2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e09b      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d1ee      	bne.n	800128c <HAL_RCC_ClockConfig+0xfc>
 80012ae:	e03e      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d112      	bne.n	80012de <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ba:	f7ff fb29 	bl	8000910 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e084      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d0:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d1ee      	bne.n	80012ba <HAL_RCC_ClockConfig+0x12a>
 80012dc:	e027      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11d      	bne.n	8001322 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e8:	f7ff fb12 	bl	8000910 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e06d      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b04      	cmp	r3, #4
 8001308:	d1ee      	bne.n	80012e8 <HAL_RCC_ClockConfig+0x158>
 800130a:	e010      	b.n	800132e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff fb00 	bl	8000910 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e05b      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d219      	bcs.n	8001370 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d105      	bne.n	800134e <HAL_RCC_ClockConfig+0x1be>
 8001342:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 0201 	bic.w	r2, r3, #1
 8001356:	4923      	ldr	r1, [pc, #140]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <HAL_RCC_ClockConfig+0x254>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e034      	b.n	80013da <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d008      	beq.n	800138e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800137c:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4917      	ldr	r1, [pc, #92]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	490f      	ldr	r1, [pc, #60]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ae:	f000 f823 	bl	80013f8 <HAL_RCC_GetSysClockFreq>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_RCC_ClockConfig+0x258>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 030f 	and.w	r3, r3, #15
 80013be:	490b      	ldr	r1, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x25c>)
 80013c0:	5ccb      	ldrb	r3, [r1, r3]
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x260>)
 80013c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_ClockConfig+0x264>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fa52 	bl	8000878 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80013d8:	7afb      	ldrb	r3, [r7, #11]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00
 80013e8:	40023800 	.word	0x40023800
 80013ec:	0800255c 	.word	0x0800255c
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000004 	.word	0x20000004

080013f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d00c      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x30>
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d87c      	bhi.n	800150c <HAL_RCC_GetSysClockFreq+0x114>
 8001412:	2b04      	cmp	r3, #4
 8001414:	d002      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x24>
 8001416:	2b08      	cmp	r3, #8
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x2a>
 800141a:	e077      	b.n	800150c <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b46      	ldr	r3, [pc, #280]	; (8001538 <HAL_RCC_GetSysClockFreq+0x140>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	e082      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_GetSysClockFreq+0x144>)
 8001424:	613b      	str	r3, [r7, #16]
      break;
 8001426:	e07f      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	0c9b      	lsrs	r3, r3, #18
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	4a43      	ldr	r2, [pc, #268]	; (8001540 <HAL_RCC_GetSysClockFreq+0x148>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	0d9b      	lsrs	r3, r3, #22
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001442:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01a      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	461a      	mov	r2, r3
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	4939      	ldr	r1, [pc, #228]	; (800153c <HAL_RCC_GetSysClockFreq+0x144>)
 8001458:	fb01 f003 	mul.w	r0, r1, r3
 800145c:	2100      	movs	r1, #0
 800145e:	fb01 f102 	mul.w	r1, r1, r2
 8001462:	1844      	adds	r4, r0, r1
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_RCC_GetSysClockFreq+0x144>)
 8001466:	fba2 0101 	umull	r0, r1, r2, r1
 800146a:	1863      	adds	r3, r4, r1
 800146c:	4619      	mov	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	461a      	mov	r2, r3
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	f7fe fe81 	bl	800017c <__aeabi_uldivmod>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4613      	mov	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e040      	b.n	8001506 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	461c      	mov	r4, r3
 8001488:	f04f 0500 	mov.w	r5, #0
 800148c:	4620      	mov	r0, r4
 800148e:	4629      	mov	r1, r5
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	014b      	lsls	r3, r1, #5
 800149a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800149e:	0142      	lsls	r2, r0, #5
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	1b00      	subs	r0, r0, r4
 80014a6:	eb61 0105 	sbc.w	r1, r1, r5
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	018b      	lsls	r3, r1, #6
 80014b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014b8:	0182      	lsls	r2, r0, #6
 80014ba:	1a12      	subs	r2, r2, r0
 80014bc:	eb63 0301 	sbc.w	r3, r3, r1
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	f04f 0100 	mov.w	r1, #0
 80014c8:	00d9      	lsls	r1, r3, #3
 80014ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014ce:	00d0      	lsls	r0, r2, #3
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	1912      	adds	r2, r2, r4
 80014d6:	eb45 0303 	adc.w	r3, r5, r3
 80014da:	f04f 0000 	mov.w	r0, #0
 80014de:	f04f 0100 	mov.w	r1, #0
 80014e2:	0299      	lsls	r1, r3, #10
 80014e4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80014e8:	0290      	lsls	r0, r2, #10
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	461a      	mov	r2, r3
 80014f6:	f04f 0300 	mov.w	r3, #0
 80014fa:	f7fe fe3f 	bl	800017c <__aeabi_uldivmod>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4613      	mov	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	613b      	str	r3, [r7, #16]
      break;
 800150a:	e00d      	b.n	8001528 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RCC_GetSysClockFreq+0x13c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	0b5b      	lsrs	r3, r3, #13
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	613b      	str	r3, [r7, #16]
      break;
 8001526:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001528:	693b      	ldr	r3, [r7, #16]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	00f42400 	.word	0x00f42400
 800153c:	01312d00 	.word	0x01312d00
 8001540:	08002550 	.word	0x08002550

08001544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d12c      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e016      	b.n	80015a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6253      	str	r3, [r2, #36]	; 0x24
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001594:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800159c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80015a8:	d105      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80015b0:	d101      	bne.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80015b2:	2301      	movs	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 0201 	bic.w	r2, r3, #1
 80015d0:	490b      	ldr	r1, [pc, #44]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d001      	beq.n	80015ea <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e000      	b.n	80015ec <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000
 8001600:	40023c00 	.word	0x40023c00

08001604 <__errno>:
 8001604:	4b01      	ldr	r3, [pc, #4]	; (800160c <__errno+0x8>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	2000000c 	.word	0x2000000c

08001610 <__libc_init_array>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	2600      	movs	r6, #0
 8001614:	4d0c      	ldr	r5, [pc, #48]	; (8001648 <__libc_init_array+0x38>)
 8001616:	4c0d      	ldr	r4, [pc, #52]	; (800164c <__libc_init_array+0x3c>)
 8001618:	1b64      	subs	r4, r4, r5
 800161a:	10a4      	asrs	r4, r4, #2
 800161c:	42a6      	cmp	r6, r4
 800161e:	d109      	bne.n	8001634 <__libc_init_array+0x24>
 8001620:	f000 ff82 	bl	8002528 <_init>
 8001624:	2600      	movs	r6, #0
 8001626:	4d0a      	ldr	r5, [pc, #40]	; (8001650 <__libc_init_array+0x40>)
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <__libc_init_array+0x44>)
 800162a:	1b64      	subs	r4, r4, r5
 800162c:	10a4      	asrs	r4, r4, #2
 800162e:	42a6      	cmp	r6, r4
 8001630:	d105      	bne.n	800163e <__libc_init_array+0x2e>
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	f855 3b04 	ldr.w	r3, [r5], #4
 8001638:	4798      	blx	r3
 800163a:	3601      	adds	r6, #1
 800163c:	e7ee      	b.n	800161c <__libc_init_array+0xc>
 800163e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001642:	4798      	blx	r3
 8001644:	3601      	adds	r6, #1
 8001646:	e7f2      	b.n	800162e <__libc_init_array+0x1e>
 8001648:	0800260c 	.word	0x0800260c
 800164c:	0800260c 	.word	0x0800260c
 8001650:	0800260c 	.word	0x0800260c
 8001654:	08002610 	.word	0x08002610

08001658 <memset>:
 8001658:	4603      	mov	r3, r0
 800165a:	4402      	add	r2, r0
 800165c:	4293      	cmp	r3, r2
 800165e:	d100      	bne.n	8001662 <memset+0xa>
 8001660:	4770      	bx	lr
 8001662:	f803 1b01 	strb.w	r1, [r3], #1
 8001666:	e7f9      	b.n	800165c <memset+0x4>

08001668 <iprintf>:
 8001668:	b40f      	push	{r0, r1, r2, r3}
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <iprintf+0x2c>)
 800166c:	b513      	push	{r0, r1, r4, lr}
 800166e:	681c      	ldr	r4, [r3, #0]
 8001670:	b124      	cbz	r4, 800167c <iprintf+0x14>
 8001672:	69a3      	ldr	r3, [r4, #24]
 8001674:	b913      	cbnz	r3, 800167c <iprintf+0x14>
 8001676:	4620      	mov	r0, r4
 8001678:	f000 f866 	bl	8001748 <__sinit>
 800167c:	ab05      	add	r3, sp, #20
 800167e:	4620      	mov	r0, r4
 8001680:	9a04      	ldr	r2, [sp, #16]
 8001682:	68a1      	ldr	r1, [r4, #8]
 8001684:	9301      	str	r3, [sp, #4]
 8001686:	f000 f981 	bl	800198c <_vfiprintf_r>
 800168a:	b002      	add	sp, #8
 800168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001690:	b004      	add	sp, #16
 8001692:	4770      	bx	lr
 8001694:	2000000c 	.word	0x2000000c

08001698 <std>:
 8001698:	2300      	movs	r3, #0
 800169a:	b510      	push	{r4, lr}
 800169c:	4604      	mov	r4, r0
 800169e:	e9c0 3300 	strd	r3, r3, [r0]
 80016a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016a6:	6083      	str	r3, [r0, #8]
 80016a8:	8181      	strh	r1, [r0, #12]
 80016aa:	6643      	str	r3, [r0, #100]	; 0x64
 80016ac:	81c2      	strh	r2, [r0, #14]
 80016ae:	6183      	str	r3, [r0, #24]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2208      	movs	r2, #8
 80016b4:	305c      	adds	r0, #92	; 0x5c
 80016b6:	f7ff ffcf 	bl	8001658 <memset>
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <std+0x38>)
 80016bc:	6224      	str	r4, [r4, #32]
 80016be:	6263      	str	r3, [r4, #36]	; 0x24
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <std+0x3c>)
 80016c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <std+0x40>)
 80016c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <std+0x44>)
 80016ca:	6323      	str	r3, [r4, #48]	; 0x30
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	bf00      	nop
 80016d0:	08001f39 	.word	0x08001f39
 80016d4:	08001f5b 	.word	0x08001f5b
 80016d8:	08001f93 	.word	0x08001f93
 80016dc:	08001fb7 	.word	0x08001fb7

080016e0 <_cleanup_r>:
 80016e0:	4901      	ldr	r1, [pc, #4]	; (80016e8 <_cleanup_r+0x8>)
 80016e2:	f000 b8af 	b.w	8001844 <_fwalk_reent>
 80016e6:	bf00      	nop
 80016e8:	08002291 	.word	0x08002291

080016ec <__sfmoreglue>:
 80016ec:	b570      	push	{r4, r5, r6, lr}
 80016ee:	2568      	movs	r5, #104	; 0x68
 80016f0:	1e4a      	subs	r2, r1, #1
 80016f2:	4355      	muls	r5, r2
 80016f4:	460e      	mov	r6, r1
 80016f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80016fa:	f000 f8c5 	bl	8001888 <_malloc_r>
 80016fe:	4604      	mov	r4, r0
 8001700:	b140      	cbz	r0, 8001714 <__sfmoreglue+0x28>
 8001702:	2100      	movs	r1, #0
 8001704:	e9c0 1600 	strd	r1, r6, [r0]
 8001708:	300c      	adds	r0, #12
 800170a:	60a0      	str	r0, [r4, #8]
 800170c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001710:	f7ff ffa2 	bl	8001658 <memset>
 8001714:	4620      	mov	r0, r4
 8001716:	bd70      	pop	{r4, r5, r6, pc}

08001718 <__sfp_lock_acquire>:
 8001718:	4801      	ldr	r0, [pc, #4]	; (8001720 <__sfp_lock_acquire+0x8>)
 800171a:	f000 b8b3 	b.w	8001884 <__retarget_lock_acquire_recursive>
 800171e:	bf00      	nop
 8001720:	200000a8 	.word	0x200000a8

08001724 <__sfp_lock_release>:
 8001724:	4801      	ldr	r0, [pc, #4]	; (800172c <__sfp_lock_release+0x8>)
 8001726:	f000 b8ae 	b.w	8001886 <__retarget_lock_release_recursive>
 800172a:	bf00      	nop
 800172c:	200000a8 	.word	0x200000a8

08001730 <__sinit_lock_acquire>:
 8001730:	4801      	ldr	r0, [pc, #4]	; (8001738 <__sinit_lock_acquire+0x8>)
 8001732:	f000 b8a7 	b.w	8001884 <__retarget_lock_acquire_recursive>
 8001736:	bf00      	nop
 8001738:	200000a3 	.word	0x200000a3

0800173c <__sinit_lock_release>:
 800173c:	4801      	ldr	r0, [pc, #4]	; (8001744 <__sinit_lock_release+0x8>)
 800173e:	f000 b8a2 	b.w	8001886 <__retarget_lock_release_recursive>
 8001742:	bf00      	nop
 8001744:	200000a3 	.word	0x200000a3

08001748 <__sinit>:
 8001748:	b510      	push	{r4, lr}
 800174a:	4604      	mov	r4, r0
 800174c:	f7ff fff0 	bl	8001730 <__sinit_lock_acquire>
 8001750:	69a3      	ldr	r3, [r4, #24]
 8001752:	b11b      	cbz	r3, 800175c <__sinit+0x14>
 8001754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001758:	f7ff bff0 	b.w	800173c <__sinit_lock_release>
 800175c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001760:	6523      	str	r3, [r4, #80]	; 0x50
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <__sinit+0x68>)
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <__sinit+0x6c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	62a2      	str	r2, [r4, #40]	; 0x28
 800176a:	42a3      	cmp	r3, r4
 800176c:	bf08      	it	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	4620      	mov	r0, r4
 8001772:	bf08      	it	eq
 8001774:	61a3      	streq	r3, [r4, #24]
 8001776:	f000 f81f 	bl	80017b8 <__sfp>
 800177a:	6060      	str	r0, [r4, #4]
 800177c:	4620      	mov	r0, r4
 800177e:	f000 f81b 	bl	80017b8 <__sfp>
 8001782:	60a0      	str	r0, [r4, #8]
 8001784:	4620      	mov	r0, r4
 8001786:	f000 f817 	bl	80017b8 <__sfp>
 800178a:	2200      	movs	r2, #0
 800178c:	2104      	movs	r1, #4
 800178e:	60e0      	str	r0, [r4, #12]
 8001790:	6860      	ldr	r0, [r4, #4]
 8001792:	f7ff ff81 	bl	8001698 <std>
 8001796:	2201      	movs	r2, #1
 8001798:	2109      	movs	r1, #9
 800179a:	68a0      	ldr	r0, [r4, #8]
 800179c:	f7ff ff7c 	bl	8001698 <std>
 80017a0:	2202      	movs	r2, #2
 80017a2:	2112      	movs	r1, #18
 80017a4:	68e0      	ldr	r0, [r4, #12]
 80017a6:	f7ff ff77 	bl	8001698 <std>
 80017aa:	2301      	movs	r3, #1
 80017ac:	61a3      	str	r3, [r4, #24]
 80017ae:	e7d1      	b.n	8001754 <__sinit+0xc>
 80017b0:	0800256c 	.word	0x0800256c
 80017b4:	080016e1 	.word	0x080016e1

080017b8 <__sfp>:
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	4607      	mov	r7, r0
 80017bc:	f7ff ffac 	bl	8001718 <__sfp_lock_acquire>
 80017c0:	4b1e      	ldr	r3, [pc, #120]	; (800183c <__sfp+0x84>)
 80017c2:	681e      	ldr	r6, [r3, #0]
 80017c4:	69b3      	ldr	r3, [r6, #24]
 80017c6:	b913      	cbnz	r3, 80017ce <__sfp+0x16>
 80017c8:	4630      	mov	r0, r6
 80017ca:	f7ff ffbd 	bl	8001748 <__sinit>
 80017ce:	3648      	adds	r6, #72	; 0x48
 80017d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	d503      	bpl.n	80017e0 <__sfp+0x28>
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	b30b      	cbz	r3, 8001820 <__sfp+0x68>
 80017dc:	6836      	ldr	r6, [r6, #0]
 80017de:	e7f7      	b.n	80017d0 <__sfp+0x18>
 80017e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017e4:	b9d5      	cbnz	r5, 800181c <__sfp+0x64>
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <__sfp+0x88>)
 80017e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80017ec:	60e3      	str	r3, [r4, #12]
 80017ee:	6665      	str	r5, [r4, #100]	; 0x64
 80017f0:	f000 f847 	bl	8001882 <__retarget_lock_init_recursive>
 80017f4:	f7ff ff96 	bl	8001724 <__sfp_lock_release>
 80017f8:	2208      	movs	r2, #8
 80017fa:	4629      	mov	r1, r5
 80017fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001804:	6025      	str	r5, [r4, #0]
 8001806:	61a5      	str	r5, [r4, #24]
 8001808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800180c:	f7ff ff24 	bl	8001658 <memset>
 8001810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001818:	4620      	mov	r0, r4
 800181a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800181c:	3468      	adds	r4, #104	; 0x68
 800181e:	e7d9      	b.n	80017d4 <__sfp+0x1c>
 8001820:	2104      	movs	r1, #4
 8001822:	4638      	mov	r0, r7
 8001824:	f7ff ff62 	bl	80016ec <__sfmoreglue>
 8001828:	4604      	mov	r4, r0
 800182a:	6030      	str	r0, [r6, #0]
 800182c:	2800      	cmp	r0, #0
 800182e:	d1d5      	bne.n	80017dc <__sfp+0x24>
 8001830:	f7ff ff78 	bl	8001724 <__sfp_lock_release>
 8001834:	230c      	movs	r3, #12
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	e7ee      	b.n	8001818 <__sfp+0x60>
 800183a:	bf00      	nop
 800183c:	0800256c 	.word	0x0800256c
 8001840:	ffff0001 	.word	0xffff0001

08001844 <_fwalk_reent>:
 8001844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001848:	4606      	mov	r6, r0
 800184a:	4688      	mov	r8, r1
 800184c:	2700      	movs	r7, #0
 800184e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001856:	f1b9 0901 	subs.w	r9, r9, #1
 800185a:	d505      	bpl.n	8001868 <_fwalk_reent+0x24>
 800185c:	6824      	ldr	r4, [r4, #0]
 800185e:	2c00      	cmp	r4, #0
 8001860:	d1f7      	bne.n	8001852 <_fwalk_reent+0xe>
 8001862:	4638      	mov	r0, r7
 8001864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001868:	89ab      	ldrh	r3, [r5, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d907      	bls.n	800187e <_fwalk_reent+0x3a>
 800186e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001872:	3301      	adds	r3, #1
 8001874:	d003      	beq.n	800187e <_fwalk_reent+0x3a>
 8001876:	4629      	mov	r1, r5
 8001878:	4630      	mov	r0, r6
 800187a:	47c0      	blx	r8
 800187c:	4307      	orrs	r7, r0
 800187e:	3568      	adds	r5, #104	; 0x68
 8001880:	e7e9      	b.n	8001856 <_fwalk_reent+0x12>

08001882 <__retarget_lock_init_recursive>:
 8001882:	4770      	bx	lr

08001884 <__retarget_lock_acquire_recursive>:
 8001884:	4770      	bx	lr

08001886 <__retarget_lock_release_recursive>:
 8001886:	4770      	bx	lr

08001888 <_malloc_r>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	1ccd      	adds	r5, r1, #3
 800188c:	f025 0503 	bic.w	r5, r5, #3
 8001890:	3508      	adds	r5, #8
 8001892:	2d0c      	cmp	r5, #12
 8001894:	bf38      	it	cc
 8001896:	250c      	movcc	r5, #12
 8001898:	2d00      	cmp	r5, #0
 800189a:	4606      	mov	r6, r0
 800189c:	db01      	blt.n	80018a2 <_malloc_r+0x1a>
 800189e:	42a9      	cmp	r1, r5
 80018a0:	d903      	bls.n	80018aa <_malloc_r+0x22>
 80018a2:	230c      	movs	r3, #12
 80018a4:	6033      	str	r3, [r6, #0]
 80018a6:	2000      	movs	r0, #0
 80018a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018aa:	f000 fdb1 	bl	8002410 <__malloc_lock>
 80018ae:	4921      	ldr	r1, [pc, #132]	; (8001934 <_malloc_r+0xac>)
 80018b0:	680a      	ldr	r2, [r1, #0]
 80018b2:	4614      	mov	r4, r2
 80018b4:	b99c      	cbnz	r4, 80018de <_malloc_r+0x56>
 80018b6:	4f20      	ldr	r7, [pc, #128]	; (8001938 <_malloc_r+0xb0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b923      	cbnz	r3, 80018c6 <_malloc_r+0x3e>
 80018bc:	4621      	mov	r1, r4
 80018be:	4630      	mov	r0, r6
 80018c0:	f000 fb2a 	bl	8001f18 <_sbrk_r>
 80018c4:	6038      	str	r0, [r7, #0]
 80018c6:	4629      	mov	r1, r5
 80018c8:	4630      	mov	r0, r6
 80018ca:	f000 fb25 	bl	8001f18 <_sbrk_r>
 80018ce:	1c43      	adds	r3, r0, #1
 80018d0:	d123      	bne.n	800191a <_malloc_r+0x92>
 80018d2:	230c      	movs	r3, #12
 80018d4:	4630      	mov	r0, r6
 80018d6:	6033      	str	r3, [r6, #0]
 80018d8:	f000 fda0 	bl	800241c <__malloc_unlock>
 80018dc:	e7e3      	b.n	80018a6 <_malloc_r+0x1e>
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	1b5b      	subs	r3, r3, r5
 80018e2:	d417      	bmi.n	8001914 <_malloc_r+0x8c>
 80018e4:	2b0b      	cmp	r3, #11
 80018e6:	d903      	bls.n	80018f0 <_malloc_r+0x68>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	441c      	add	r4, r3
 80018ec:	6025      	str	r5, [r4, #0]
 80018ee:	e004      	b.n	80018fa <_malloc_r+0x72>
 80018f0:	6863      	ldr	r3, [r4, #4]
 80018f2:	42a2      	cmp	r2, r4
 80018f4:	bf0c      	ite	eq
 80018f6:	600b      	streq	r3, [r1, #0]
 80018f8:	6053      	strne	r3, [r2, #4]
 80018fa:	4630      	mov	r0, r6
 80018fc:	f000 fd8e 	bl	800241c <__malloc_unlock>
 8001900:	f104 000b 	add.w	r0, r4, #11
 8001904:	1d23      	adds	r3, r4, #4
 8001906:	f020 0007 	bic.w	r0, r0, #7
 800190a:	1ac2      	subs	r2, r0, r3
 800190c:	d0cc      	beq.n	80018a8 <_malloc_r+0x20>
 800190e:	1a1b      	subs	r3, r3, r0
 8001910:	50a3      	str	r3, [r4, r2]
 8001912:	e7c9      	b.n	80018a8 <_malloc_r+0x20>
 8001914:	4622      	mov	r2, r4
 8001916:	6864      	ldr	r4, [r4, #4]
 8001918:	e7cc      	b.n	80018b4 <_malloc_r+0x2c>
 800191a:	1cc4      	adds	r4, r0, #3
 800191c:	f024 0403 	bic.w	r4, r4, #3
 8001920:	42a0      	cmp	r0, r4
 8001922:	d0e3      	beq.n	80018ec <_malloc_r+0x64>
 8001924:	1a21      	subs	r1, r4, r0
 8001926:	4630      	mov	r0, r6
 8001928:	f000 faf6 	bl	8001f18 <_sbrk_r>
 800192c:	3001      	adds	r0, #1
 800192e:	d1dd      	bne.n	80018ec <_malloc_r+0x64>
 8001930:	e7cf      	b.n	80018d2 <_malloc_r+0x4a>
 8001932:	bf00      	nop
 8001934:	20000094 	.word	0x20000094
 8001938:	20000098 	.word	0x20000098

0800193c <__sfputc_r>:
 800193c:	6893      	ldr	r3, [r2, #8]
 800193e:	b410      	push	{r4}
 8001940:	3b01      	subs	r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	6093      	str	r3, [r2, #8]
 8001946:	da07      	bge.n	8001958 <__sfputc_r+0x1c>
 8001948:	6994      	ldr	r4, [r2, #24]
 800194a:	42a3      	cmp	r3, r4
 800194c:	db01      	blt.n	8001952 <__sfputc_r+0x16>
 800194e:	290a      	cmp	r1, #10
 8001950:	d102      	bne.n	8001958 <__sfputc_r+0x1c>
 8001952:	bc10      	pop	{r4}
 8001954:	f000 bb34 	b.w	8001fc0 <__swbuf_r>
 8001958:	6813      	ldr	r3, [r2, #0]
 800195a:	1c58      	adds	r0, r3, #1
 800195c:	6010      	str	r0, [r2, #0]
 800195e:	7019      	strb	r1, [r3, #0]
 8001960:	4608      	mov	r0, r1
 8001962:	bc10      	pop	{r4}
 8001964:	4770      	bx	lr

08001966 <__sfputs_r>:
 8001966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001968:	4606      	mov	r6, r0
 800196a:	460f      	mov	r7, r1
 800196c:	4614      	mov	r4, r2
 800196e:	18d5      	adds	r5, r2, r3
 8001970:	42ac      	cmp	r4, r5
 8001972:	d101      	bne.n	8001978 <__sfputs_r+0x12>
 8001974:	2000      	movs	r0, #0
 8001976:	e007      	b.n	8001988 <__sfputs_r+0x22>
 8001978:	463a      	mov	r2, r7
 800197a:	4630      	mov	r0, r6
 800197c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001980:	f7ff ffdc 	bl	800193c <__sfputc_r>
 8001984:	1c43      	adds	r3, r0, #1
 8001986:	d1f3      	bne.n	8001970 <__sfputs_r+0xa>
 8001988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800198c <_vfiprintf_r>:
 800198c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001990:	460d      	mov	r5, r1
 8001992:	4614      	mov	r4, r2
 8001994:	4698      	mov	r8, r3
 8001996:	4606      	mov	r6, r0
 8001998:	b09d      	sub	sp, #116	; 0x74
 800199a:	b118      	cbz	r0, 80019a4 <_vfiprintf_r+0x18>
 800199c:	6983      	ldr	r3, [r0, #24]
 800199e:	b90b      	cbnz	r3, 80019a4 <_vfiprintf_r+0x18>
 80019a0:	f7ff fed2 	bl	8001748 <__sinit>
 80019a4:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <_vfiprintf_r+0x240>)
 80019a6:	429d      	cmp	r5, r3
 80019a8:	d11b      	bne.n	80019e2 <_vfiprintf_r+0x56>
 80019aa:	6875      	ldr	r5, [r6, #4]
 80019ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019ae:	07d9      	lsls	r1, r3, #31
 80019b0:	d405      	bmi.n	80019be <_vfiprintf_r+0x32>
 80019b2:	89ab      	ldrh	r3, [r5, #12]
 80019b4:	059a      	lsls	r2, r3, #22
 80019b6:	d402      	bmi.n	80019be <_vfiprintf_r+0x32>
 80019b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019ba:	f7ff ff63 	bl	8001884 <__retarget_lock_acquire_recursive>
 80019be:	89ab      	ldrh	r3, [r5, #12]
 80019c0:	071b      	lsls	r3, r3, #28
 80019c2:	d501      	bpl.n	80019c8 <_vfiprintf_r+0x3c>
 80019c4:	692b      	ldr	r3, [r5, #16]
 80019c6:	b9eb      	cbnz	r3, 8001a04 <_vfiprintf_r+0x78>
 80019c8:	4629      	mov	r1, r5
 80019ca:	4630      	mov	r0, r6
 80019cc:	f000 fb5c 	bl	8002088 <__swsetup_r>
 80019d0:	b1c0      	cbz	r0, 8001a04 <_vfiprintf_r+0x78>
 80019d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019d4:	07dc      	lsls	r4, r3, #31
 80019d6:	d50e      	bpl.n	80019f6 <_vfiprintf_r+0x6a>
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	b01d      	add	sp, #116	; 0x74
 80019de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <_vfiprintf_r+0x244>)
 80019e4:	429d      	cmp	r5, r3
 80019e6:	d101      	bne.n	80019ec <_vfiprintf_r+0x60>
 80019e8:	68b5      	ldr	r5, [r6, #8]
 80019ea:	e7df      	b.n	80019ac <_vfiprintf_r+0x20>
 80019ec:	4b79      	ldr	r3, [pc, #484]	; (8001bd4 <_vfiprintf_r+0x248>)
 80019ee:	429d      	cmp	r5, r3
 80019f0:	bf08      	it	eq
 80019f2:	68f5      	ldreq	r5, [r6, #12]
 80019f4:	e7da      	b.n	80019ac <_vfiprintf_r+0x20>
 80019f6:	89ab      	ldrh	r3, [r5, #12]
 80019f8:	0598      	lsls	r0, r3, #22
 80019fa:	d4ed      	bmi.n	80019d8 <_vfiprintf_r+0x4c>
 80019fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019fe:	f7ff ff42 	bl	8001886 <__retarget_lock_release_recursive>
 8001a02:	e7e9      	b.n	80019d8 <_vfiprintf_r+0x4c>
 8001a04:	2300      	movs	r3, #0
 8001a06:	9309      	str	r3, [sp, #36]	; 0x24
 8001a08:	2320      	movs	r3, #32
 8001a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a0e:	2330      	movs	r3, #48	; 0x30
 8001a10:	f04f 0901 	mov.w	r9, #1
 8001a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a18:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8001bd8 <_vfiprintf_r+0x24c>
 8001a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a20:	4623      	mov	r3, r4
 8001a22:	469a      	mov	sl, r3
 8001a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a28:	b10a      	cbz	r2, 8001a2e <_vfiprintf_r+0xa2>
 8001a2a:	2a25      	cmp	r2, #37	; 0x25
 8001a2c:	d1f9      	bne.n	8001a22 <_vfiprintf_r+0x96>
 8001a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8001a32:	d00b      	beq.n	8001a4c <_vfiprintf_r+0xc0>
 8001a34:	465b      	mov	r3, fp
 8001a36:	4622      	mov	r2, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f7ff ff93 	bl	8001966 <__sfputs_r>
 8001a40:	3001      	adds	r0, #1
 8001a42:	f000 80aa 	beq.w	8001b9a <_vfiprintf_r+0x20e>
 8001a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a48:	445a      	add	r2, fp
 8001a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8001a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a2 	beq.w	8001b9a <_vfiprintf_r+0x20e>
 8001a56:	2300      	movs	r3, #0
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a60:	f10a 0a01 	add.w	sl, sl, #1
 8001a64:	9304      	str	r3, [sp, #16]
 8001a66:	9307      	str	r3, [sp, #28]
 8001a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8001a6e:	4654      	mov	r4, sl
 8001a70:	2205      	movs	r2, #5
 8001a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a76:	4858      	ldr	r0, [pc, #352]	; (8001bd8 <_vfiprintf_r+0x24c>)
 8001a78:	f000 fcbc 	bl	80023f4 <memchr>
 8001a7c:	9a04      	ldr	r2, [sp, #16]
 8001a7e:	b9d8      	cbnz	r0, 8001ab8 <_vfiprintf_r+0x12c>
 8001a80:	06d1      	lsls	r1, r2, #27
 8001a82:	bf44      	itt	mi
 8001a84:	2320      	movmi	r3, #32
 8001a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a8a:	0713      	lsls	r3, r2, #28
 8001a8c:	bf44      	itt	mi
 8001a8e:	232b      	movmi	r3, #43	; 0x2b
 8001a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a94:	f89a 3000 	ldrb.w	r3, [sl]
 8001a98:	2b2a      	cmp	r3, #42	; 0x2a
 8001a9a:	d015      	beq.n	8001ac8 <_vfiprintf_r+0x13c>
 8001a9c:	4654      	mov	r4, sl
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f04f 0c0a 	mov.w	ip, #10
 8001aa4:	9a07      	ldr	r2, [sp, #28]
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001aac:	3b30      	subs	r3, #48	; 0x30
 8001aae:	2b09      	cmp	r3, #9
 8001ab0:	d94e      	bls.n	8001b50 <_vfiprintf_r+0x1c4>
 8001ab2:	b1b0      	cbz	r0, 8001ae2 <_vfiprintf_r+0x156>
 8001ab4:	9207      	str	r2, [sp, #28]
 8001ab6:	e014      	b.n	8001ae2 <_vfiprintf_r+0x156>
 8001ab8:	eba0 0308 	sub.w	r3, r0, r8
 8001abc:	fa09 f303 	lsl.w	r3, r9, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	46a2      	mov	sl, r4
 8001ac4:	9304      	str	r3, [sp, #16]
 8001ac6:	e7d2      	b.n	8001a6e <_vfiprintf_r+0xe2>
 8001ac8:	9b03      	ldr	r3, [sp, #12]
 8001aca:	1d19      	adds	r1, r3, #4
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	9103      	str	r1, [sp, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bfbb      	ittet	lt
 8001ad4:	425b      	neglt	r3, r3
 8001ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8001ada:	9307      	strge	r3, [sp, #28]
 8001adc:	9307      	strlt	r3, [sp, #28]
 8001ade:	bfb8      	it	lt
 8001ae0:	9204      	strlt	r2, [sp, #16]
 8001ae2:	7823      	ldrb	r3, [r4, #0]
 8001ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ae6:	d10c      	bne.n	8001b02 <_vfiprintf_r+0x176>
 8001ae8:	7863      	ldrb	r3, [r4, #1]
 8001aea:	2b2a      	cmp	r3, #42	; 0x2a
 8001aec:	d135      	bne.n	8001b5a <_vfiprintf_r+0x1ce>
 8001aee:	9b03      	ldr	r3, [sp, #12]
 8001af0:	3402      	adds	r4, #2
 8001af2:	1d1a      	adds	r2, r3, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	9203      	str	r2, [sp, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bfb8      	it	lt
 8001afc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001b00:	9305      	str	r3, [sp, #20]
 8001b02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001be8 <_vfiprintf_r+0x25c>
 8001b06:	2203      	movs	r2, #3
 8001b08:	4650      	mov	r0, sl
 8001b0a:	7821      	ldrb	r1, [r4, #0]
 8001b0c:	f000 fc72 	bl	80023f4 <memchr>
 8001b10:	b140      	cbz	r0, 8001b24 <_vfiprintf_r+0x198>
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	eba0 000a 	sub.w	r0, r0, sl
 8001b18:	fa03 f000 	lsl.w	r0, r3, r0
 8001b1c:	9b04      	ldr	r3, [sp, #16]
 8001b1e:	3401      	adds	r4, #1
 8001b20:	4303      	orrs	r3, r0
 8001b22:	9304      	str	r3, [sp, #16]
 8001b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b28:	2206      	movs	r2, #6
 8001b2a:	482c      	ldr	r0, [pc, #176]	; (8001bdc <_vfiprintf_r+0x250>)
 8001b2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b30:	f000 fc60 	bl	80023f4 <memchr>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d03f      	beq.n	8001bb8 <_vfiprintf_r+0x22c>
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <_vfiprintf_r+0x254>)
 8001b3a:	bb1b      	cbnz	r3, 8001b84 <_vfiprintf_r+0x1f8>
 8001b3c:	9b03      	ldr	r3, [sp, #12]
 8001b3e:	3307      	adds	r3, #7
 8001b40:	f023 0307 	bic.w	r3, r3, #7
 8001b44:	3308      	adds	r3, #8
 8001b46:	9303      	str	r3, [sp, #12]
 8001b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b4a:	443b      	add	r3, r7
 8001b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001b4e:	e767      	b.n	8001a20 <_vfiprintf_r+0x94>
 8001b50:	460c      	mov	r4, r1
 8001b52:	2001      	movs	r0, #1
 8001b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b58:	e7a5      	b.n	8001aa6 <_vfiprintf_r+0x11a>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f04f 0c0a 	mov.w	ip, #10
 8001b60:	4619      	mov	r1, r3
 8001b62:	3401      	adds	r4, #1
 8001b64:	9305      	str	r3, [sp, #20]
 8001b66:	4620      	mov	r0, r4
 8001b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b6c:	3a30      	subs	r2, #48	; 0x30
 8001b6e:	2a09      	cmp	r2, #9
 8001b70:	d903      	bls.n	8001b7a <_vfiprintf_r+0x1ee>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0c5      	beq.n	8001b02 <_vfiprintf_r+0x176>
 8001b76:	9105      	str	r1, [sp, #20]
 8001b78:	e7c3      	b.n	8001b02 <_vfiprintf_r+0x176>
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b82:	e7f0      	b.n	8001b66 <_vfiprintf_r+0x1da>
 8001b84:	ab03      	add	r3, sp, #12
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	462a      	mov	r2, r5
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_vfiprintf_r+0x258>)
 8001b8e:	a904      	add	r1, sp, #16
 8001b90:	f3af 8000 	nop.w
 8001b94:	4607      	mov	r7, r0
 8001b96:	1c78      	adds	r0, r7, #1
 8001b98:	d1d6      	bne.n	8001b48 <_vfiprintf_r+0x1bc>
 8001b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b9c:	07d9      	lsls	r1, r3, #31
 8001b9e:	d405      	bmi.n	8001bac <_vfiprintf_r+0x220>
 8001ba0:	89ab      	ldrh	r3, [r5, #12]
 8001ba2:	059a      	lsls	r2, r3, #22
 8001ba4:	d402      	bmi.n	8001bac <_vfiprintf_r+0x220>
 8001ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ba8:	f7ff fe6d 	bl	8001886 <__retarget_lock_release_recursive>
 8001bac:	89ab      	ldrh	r3, [r5, #12]
 8001bae:	065b      	lsls	r3, r3, #25
 8001bb0:	f53f af12 	bmi.w	80019d8 <_vfiprintf_r+0x4c>
 8001bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bb6:	e711      	b.n	80019dc <_vfiprintf_r+0x50>
 8001bb8:	ab03      	add	r3, sp, #12
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	462a      	mov	r2, r5
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_vfiprintf_r+0x258>)
 8001bc2:	a904      	add	r1, sp, #16
 8001bc4:	f000 f882 	bl	8001ccc <_printf_i>
 8001bc8:	e7e4      	b.n	8001b94 <_vfiprintf_r+0x208>
 8001bca:	bf00      	nop
 8001bcc:	08002590 	.word	0x08002590
 8001bd0:	080025b0 	.word	0x080025b0
 8001bd4:	08002570 	.word	0x08002570
 8001bd8:	080025d0 	.word	0x080025d0
 8001bdc:	080025da 	.word	0x080025da
 8001be0:	00000000 	.word	0x00000000
 8001be4:	08001967 	.word	0x08001967
 8001be8:	080025d6 	.word	0x080025d6

08001bec <_printf_common>:
 8001bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bf0:	4616      	mov	r6, r2
 8001bf2:	4699      	mov	r9, r3
 8001bf4:	688a      	ldr	r2, [r1, #8]
 8001bf6:	690b      	ldr	r3, [r1, #16]
 8001bf8:	4607      	mov	r7, r0
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	bfb8      	it	lt
 8001bfe:	4613      	movlt	r3, r2
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c06:	460c      	mov	r4, r1
 8001c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c0c:	b10a      	cbz	r2, 8001c12 <_printf_common+0x26>
 8001c0e:	3301      	adds	r3, #1
 8001c10:	6033      	str	r3, [r6, #0]
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	0699      	lsls	r1, r3, #26
 8001c16:	bf42      	ittt	mi
 8001c18:	6833      	ldrmi	r3, [r6, #0]
 8001c1a:	3302      	addmi	r3, #2
 8001c1c:	6033      	strmi	r3, [r6, #0]
 8001c1e:	6825      	ldr	r5, [r4, #0]
 8001c20:	f015 0506 	ands.w	r5, r5, #6
 8001c24:	d106      	bne.n	8001c34 <_printf_common+0x48>
 8001c26:	f104 0a19 	add.w	sl, r4, #25
 8001c2a:	68e3      	ldr	r3, [r4, #12]
 8001c2c:	6832      	ldr	r2, [r6, #0]
 8001c2e:	1a9b      	subs	r3, r3, r2
 8001c30:	42ab      	cmp	r3, r5
 8001c32:	dc28      	bgt.n	8001c86 <_printf_common+0x9a>
 8001c34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c38:	1e13      	subs	r3, r2, #0
 8001c3a:	6822      	ldr	r2, [r4, #0]
 8001c3c:	bf18      	it	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	0692      	lsls	r2, r2, #26
 8001c42:	d42d      	bmi.n	8001ca0 <_printf_common+0xb4>
 8001c44:	4649      	mov	r1, r9
 8001c46:	4638      	mov	r0, r7
 8001c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c4c:	47c0      	blx	r8
 8001c4e:	3001      	adds	r0, #1
 8001c50:	d020      	beq.n	8001c94 <_printf_common+0xa8>
 8001c52:	6823      	ldr	r3, [r4, #0]
 8001c54:	68e5      	ldr	r5, [r4, #12]
 8001c56:	f003 0306 	and.w	r3, r3, #6
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf18      	it	ne
 8001c5e:	2500      	movne	r5, #0
 8001c60:	6832      	ldr	r2, [r6, #0]
 8001c62:	f04f 0600 	mov.w	r6, #0
 8001c66:	68a3      	ldr	r3, [r4, #8]
 8001c68:	bf08      	it	eq
 8001c6a:	1aad      	subeq	r5, r5, r2
 8001c6c:	6922      	ldr	r2, [r4, #16]
 8001c6e:	bf08      	it	eq
 8001c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bfc4      	itt	gt
 8001c78:	1a9b      	subgt	r3, r3, r2
 8001c7a:	18ed      	addgt	r5, r5, r3
 8001c7c:	341a      	adds	r4, #26
 8001c7e:	42b5      	cmp	r5, r6
 8001c80:	d11a      	bne.n	8001cb8 <_printf_common+0xcc>
 8001c82:	2000      	movs	r0, #0
 8001c84:	e008      	b.n	8001c98 <_printf_common+0xac>
 8001c86:	2301      	movs	r3, #1
 8001c88:	4652      	mov	r2, sl
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	4638      	mov	r0, r7
 8001c8e:	47c0      	blx	r8
 8001c90:	3001      	adds	r0, #1
 8001c92:	d103      	bne.n	8001c9c <_printf_common+0xb0>
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9c:	3501      	adds	r5, #1
 8001c9e:	e7c4      	b.n	8001c2a <_printf_common+0x3e>
 8001ca0:	2030      	movs	r0, #48	; 0x30
 8001ca2:	18e1      	adds	r1, r4, r3
 8001ca4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001cae:	4422      	add	r2, r4
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cb6:	e7c5      	b.n	8001c44 <_printf_common+0x58>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	4622      	mov	r2, r4
 8001cbc:	4649      	mov	r1, r9
 8001cbe:	4638      	mov	r0, r7
 8001cc0:	47c0      	blx	r8
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	d0e6      	beq.n	8001c94 <_printf_common+0xa8>
 8001cc6:	3601      	adds	r6, #1
 8001cc8:	e7d9      	b.n	8001c7e <_printf_common+0x92>
	...

08001ccc <_printf_i>:
 8001ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	7e27      	ldrb	r7, [r4, #24]
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	2f78      	cmp	r7, #120	; 0x78
 8001cd8:	4680      	mov	r8, r0
 8001cda:	469a      	mov	sl, r3
 8001cdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001cde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ce2:	d807      	bhi.n	8001cf4 <_printf_i+0x28>
 8001ce4:	2f62      	cmp	r7, #98	; 0x62
 8001ce6:	d80a      	bhi.n	8001cfe <_printf_i+0x32>
 8001ce8:	2f00      	cmp	r7, #0
 8001cea:	f000 80d9 	beq.w	8001ea0 <_printf_i+0x1d4>
 8001cee:	2f58      	cmp	r7, #88	; 0x58
 8001cf0:	f000 80a4 	beq.w	8001e3c <_printf_i+0x170>
 8001cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cfc:	e03a      	b.n	8001d74 <_printf_i+0xa8>
 8001cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d02:	2b15      	cmp	r3, #21
 8001d04:	d8f6      	bhi.n	8001cf4 <_printf_i+0x28>
 8001d06:	a001      	add	r0, pc, #4	; (adr r0, 8001d0c <_printf_i+0x40>)
 8001d08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001d0c:	08001d65 	.word	0x08001d65
 8001d10:	08001d79 	.word	0x08001d79
 8001d14:	08001cf5 	.word	0x08001cf5
 8001d18:	08001cf5 	.word	0x08001cf5
 8001d1c:	08001cf5 	.word	0x08001cf5
 8001d20:	08001cf5 	.word	0x08001cf5
 8001d24:	08001d79 	.word	0x08001d79
 8001d28:	08001cf5 	.word	0x08001cf5
 8001d2c:	08001cf5 	.word	0x08001cf5
 8001d30:	08001cf5 	.word	0x08001cf5
 8001d34:	08001cf5 	.word	0x08001cf5
 8001d38:	08001e87 	.word	0x08001e87
 8001d3c:	08001da9 	.word	0x08001da9
 8001d40:	08001e69 	.word	0x08001e69
 8001d44:	08001cf5 	.word	0x08001cf5
 8001d48:	08001cf5 	.word	0x08001cf5
 8001d4c:	08001ea9 	.word	0x08001ea9
 8001d50:	08001cf5 	.word	0x08001cf5
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001cf5 	.word	0x08001cf5
 8001d5c:	08001cf5 	.word	0x08001cf5
 8001d60:	08001e71 	.word	0x08001e71
 8001d64:	680b      	ldr	r3, [r1, #0]
 8001d66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	600a      	str	r2, [r1, #0]
 8001d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0a4      	b.n	8001ec2 <_printf_i+0x1f6>
 8001d78:	6825      	ldr	r5, [r4, #0]
 8001d7a:	6808      	ldr	r0, [r1, #0]
 8001d7c:	062e      	lsls	r6, r5, #24
 8001d7e:	f100 0304 	add.w	r3, r0, #4
 8001d82:	d50a      	bpl.n	8001d9a <_printf_i+0xce>
 8001d84:	6805      	ldr	r5, [r0, #0]
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	da03      	bge.n	8001d94 <_printf_i+0xc8>
 8001d8c:	232d      	movs	r3, #45	; 0x2d
 8001d8e:	426d      	negs	r5, r5
 8001d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d94:	230a      	movs	r3, #10
 8001d96:	485e      	ldr	r0, [pc, #376]	; (8001f10 <_printf_i+0x244>)
 8001d98:	e019      	b.n	8001dce <_printf_i+0x102>
 8001d9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001d9e:	6805      	ldr	r5, [r0, #0]
 8001da0:	600b      	str	r3, [r1, #0]
 8001da2:	bf18      	it	ne
 8001da4:	b22d      	sxthne	r5, r5
 8001da6:	e7ef      	b.n	8001d88 <_printf_i+0xbc>
 8001da8:	680b      	ldr	r3, [r1, #0]
 8001daa:	6825      	ldr	r5, [r4, #0]
 8001dac:	1d18      	adds	r0, r3, #4
 8001dae:	6008      	str	r0, [r1, #0]
 8001db0:	0628      	lsls	r0, r5, #24
 8001db2:	d501      	bpl.n	8001db8 <_printf_i+0xec>
 8001db4:	681d      	ldr	r5, [r3, #0]
 8001db6:	e002      	b.n	8001dbe <_printf_i+0xf2>
 8001db8:	0669      	lsls	r1, r5, #25
 8001dba:	d5fb      	bpl.n	8001db4 <_printf_i+0xe8>
 8001dbc:	881d      	ldrh	r5, [r3, #0]
 8001dbe:	2f6f      	cmp	r7, #111	; 0x6f
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2308      	moveq	r3, #8
 8001dc4:	230a      	movne	r3, #10
 8001dc6:	4852      	ldr	r0, [pc, #328]	; (8001f10 <_printf_i+0x244>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dce:	6866      	ldr	r6, [r4, #4]
 8001dd0:	2e00      	cmp	r6, #0
 8001dd2:	bfa8      	it	ge
 8001dd4:	6821      	ldrge	r1, [r4, #0]
 8001dd6:	60a6      	str	r6, [r4, #8]
 8001dd8:	bfa4      	itt	ge
 8001dda:	f021 0104 	bicge.w	r1, r1, #4
 8001dde:	6021      	strge	r1, [r4, #0]
 8001de0:	b90d      	cbnz	r5, 8001de6 <_printf_i+0x11a>
 8001de2:	2e00      	cmp	r6, #0
 8001de4:	d04d      	beq.n	8001e82 <_printf_i+0x1b6>
 8001de6:	4616      	mov	r6, r2
 8001de8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001dec:	fb03 5711 	mls	r7, r3, r1, r5
 8001df0:	5dc7      	ldrb	r7, [r0, r7]
 8001df2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001df6:	462f      	mov	r7, r5
 8001df8:	42bb      	cmp	r3, r7
 8001dfa:	460d      	mov	r5, r1
 8001dfc:	d9f4      	bls.n	8001de8 <_printf_i+0x11c>
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d10b      	bne.n	8001e1a <_printf_i+0x14e>
 8001e02:	6823      	ldr	r3, [r4, #0]
 8001e04:	07df      	lsls	r7, r3, #31
 8001e06:	d508      	bpl.n	8001e1a <_printf_i+0x14e>
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	6861      	ldr	r1, [r4, #4]
 8001e0c:	4299      	cmp	r1, r3
 8001e0e:	bfde      	ittt	le
 8001e10:	2330      	movle	r3, #48	; 0x30
 8001e12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e1a:	1b92      	subs	r2, r2, r6
 8001e1c:	6122      	str	r2, [r4, #16]
 8001e1e:	464b      	mov	r3, r9
 8001e20:	4621      	mov	r1, r4
 8001e22:	4640      	mov	r0, r8
 8001e24:	f8cd a000 	str.w	sl, [sp]
 8001e28:	aa03      	add	r2, sp, #12
 8001e2a:	f7ff fedf 	bl	8001bec <_printf_common>
 8001e2e:	3001      	adds	r0, #1
 8001e30:	d14c      	bne.n	8001ecc <_printf_i+0x200>
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295
 8001e36:	b004      	add	sp, #16
 8001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e3c:	4834      	ldr	r0, [pc, #208]	; (8001f10 <_printf_i+0x244>)
 8001e3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e42:	680e      	ldr	r6, [r1, #0]
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f856 5b04 	ldr.w	r5, [r6], #4
 8001e4a:	061f      	lsls	r7, r3, #24
 8001e4c:	600e      	str	r6, [r1, #0]
 8001e4e:	d514      	bpl.n	8001e7a <_printf_i+0x1ae>
 8001e50:	07d9      	lsls	r1, r3, #31
 8001e52:	bf44      	itt	mi
 8001e54:	f043 0320 	orrmi.w	r3, r3, #32
 8001e58:	6023      	strmi	r3, [r4, #0]
 8001e5a:	b91d      	cbnz	r5, 8001e64 <_printf_i+0x198>
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	f023 0320 	bic.w	r3, r3, #32
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	2310      	movs	r3, #16
 8001e66:	e7af      	b.n	8001dc8 <_printf_i+0xfc>
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f043 0320 	orr.w	r3, r3, #32
 8001e6e:	6023      	str	r3, [r4, #0]
 8001e70:	2378      	movs	r3, #120	; 0x78
 8001e72:	4828      	ldr	r0, [pc, #160]	; (8001f14 <_printf_i+0x248>)
 8001e74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001e78:	e7e3      	b.n	8001e42 <_printf_i+0x176>
 8001e7a:	065e      	lsls	r6, r3, #25
 8001e7c:	bf48      	it	mi
 8001e7e:	b2ad      	uxthmi	r5, r5
 8001e80:	e7e6      	b.n	8001e50 <_printf_i+0x184>
 8001e82:	4616      	mov	r6, r2
 8001e84:	e7bb      	b.n	8001dfe <_printf_i+0x132>
 8001e86:	680b      	ldr	r3, [r1, #0]
 8001e88:	6826      	ldr	r6, [r4, #0]
 8001e8a:	1d1d      	adds	r5, r3, #4
 8001e8c:	6960      	ldr	r0, [r4, #20]
 8001e8e:	600d      	str	r5, [r1, #0]
 8001e90:	0635      	lsls	r5, r6, #24
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	d501      	bpl.n	8001e9a <_printf_i+0x1ce>
 8001e96:	6018      	str	r0, [r3, #0]
 8001e98:	e002      	b.n	8001ea0 <_printf_i+0x1d4>
 8001e9a:	0671      	lsls	r1, r6, #25
 8001e9c:	d5fb      	bpl.n	8001e96 <_printf_i+0x1ca>
 8001e9e:	8018      	strh	r0, [r3, #0]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	4616      	mov	r6, r2
 8001ea4:	6123      	str	r3, [r4, #16]
 8001ea6:	e7ba      	b.n	8001e1e <_printf_i+0x152>
 8001ea8:	680b      	ldr	r3, [r1, #0]
 8001eaa:	1d1a      	adds	r2, r3, #4
 8001eac:	600a      	str	r2, [r1, #0]
 8001eae:	681e      	ldr	r6, [r3, #0]
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	6862      	ldr	r2, [r4, #4]
 8001eb6:	f000 fa9d 	bl	80023f4 <memchr>
 8001eba:	b108      	cbz	r0, 8001ec0 <_printf_i+0x1f4>
 8001ebc:	1b80      	subs	r0, r0, r6
 8001ebe:	6060      	str	r0, [r4, #4]
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	6123      	str	r3, [r4, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001eca:	e7a8      	b.n	8001e1e <_printf_i+0x152>
 8001ecc:	4632      	mov	r2, r6
 8001ece:	4649      	mov	r1, r9
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	6923      	ldr	r3, [r4, #16]
 8001ed4:	47d0      	blx	sl
 8001ed6:	3001      	adds	r0, #1
 8001ed8:	d0ab      	beq.n	8001e32 <_printf_i+0x166>
 8001eda:	6823      	ldr	r3, [r4, #0]
 8001edc:	079b      	lsls	r3, r3, #30
 8001ede:	d413      	bmi.n	8001f08 <_printf_i+0x23c>
 8001ee0:	68e0      	ldr	r0, [r4, #12]
 8001ee2:	9b03      	ldr	r3, [sp, #12]
 8001ee4:	4298      	cmp	r0, r3
 8001ee6:	bfb8      	it	lt
 8001ee8:	4618      	movlt	r0, r3
 8001eea:	e7a4      	b.n	8001e36 <_printf_i+0x16a>
 8001eec:	2301      	movs	r3, #1
 8001eee:	4632      	mov	r2, r6
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	47d0      	blx	sl
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d09b      	beq.n	8001e32 <_printf_i+0x166>
 8001efa:	3501      	adds	r5, #1
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	9903      	ldr	r1, [sp, #12]
 8001f00:	1a5b      	subs	r3, r3, r1
 8001f02:	42ab      	cmp	r3, r5
 8001f04:	dcf2      	bgt.n	8001eec <_printf_i+0x220>
 8001f06:	e7eb      	b.n	8001ee0 <_printf_i+0x214>
 8001f08:	2500      	movs	r5, #0
 8001f0a:	f104 0619 	add.w	r6, r4, #25
 8001f0e:	e7f5      	b.n	8001efc <_printf_i+0x230>
 8001f10:	080025e1 	.word	0x080025e1
 8001f14:	080025f2 	.word	0x080025f2

08001f18 <_sbrk_r>:
 8001f18:	b538      	push	{r3, r4, r5, lr}
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	4d05      	ldr	r5, [pc, #20]	; (8001f34 <_sbrk_r+0x1c>)
 8001f1e:	4604      	mov	r4, r0
 8001f20:	4608      	mov	r0, r1
 8001f22:	602b      	str	r3, [r5, #0]
 8001f24:	f7fe fc2e 	bl	8000784 <_sbrk>
 8001f28:	1c43      	adds	r3, r0, #1
 8001f2a:	d102      	bne.n	8001f32 <_sbrk_r+0x1a>
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	b103      	cbz	r3, 8001f32 <_sbrk_r+0x1a>
 8001f30:	6023      	str	r3, [r4, #0]
 8001f32:	bd38      	pop	{r3, r4, r5, pc}
 8001f34:	200000ac 	.word	0x200000ac

08001f38 <__sread>:
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f40:	f000 fabe 	bl	80024c0 <_read_r>
 8001f44:	2800      	cmp	r0, #0
 8001f46:	bfab      	itete	ge
 8001f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8001f4c:	181b      	addge	r3, r3, r0
 8001f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f52:	bfac      	ite	ge
 8001f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f56:	81a3      	strhlt	r3, [r4, #12]
 8001f58:	bd10      	pop	{r4, pc}

08001f5a <__swrite>:
 8001f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f5e:	461f      	mov	r7, r3
 8001f60:	898b      	ldrh	r3, [r1, #12]
 8001f62:	4605      	mov	r5, r0
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	460c      	mov	r4, r1
 8001f68:	4616      	mov	r6, r2
 8001f6a:	d505      	bpl.n	8001f78 <__swrite+0x1e>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f74:	f000 f9c8 	bl	8002308 <_lseek_r>
 8001f78:	89a3      	ldrh	r3, [r4, #12]
 8001f7a:	4632      	mov	r2, r6
 8001f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f80:	81a3      	strh	r3, [r4, #12]
 8001f82:	4628      	mov	r0, r5
 8001f84:	463b      	mov	r3, r7
 8001f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8e:	f000 b869 	b.w	8002064 <_write_r>

08001f92 <__sseek>:
 8001f92:	b510      	push	{r4, lr}
 8001f94:	460c      	mov	r4, r1
 8001f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f9a:	f000 f9b5 	bl	8002308 <_lseek_r>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	bf15      	itete	ne
 8001fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001fae:	81a3      	strheq	r3, [r4, #12]
 8001fb0:	bf18      	it	ne
 8001fb2:	81a3      	strhne	r3, [r4, #12]
 8001fb4:	bd10      	pop	{r4, pc}

08001fb6 <__sclose>:
 8001fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fba:	f000 b8d3 	b.w	8002164 <_close_r>
	...

08001fc0 <__swbuf_r>:
 8001fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc2:	460e      	mov	r6, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	4605      	mov	r5, r0
 8001fc8:	b118      	cbz	r0, 8001fd2 <__swbuf_r+0x12>
 8001fca:	6983      	ldr	r3, [r0, #24]
 8001fcc:	b90b      	cbnz	r3, 8001fd2 <__swbuf_r+0x12>
 8001fce:	f7ff fbbb 	bl	8001748 <__sinit>
 8001fd2:	4b21      	ldr	r3, [pc, #132]	; (8002058 <__swbuf_r+0x98>)
 8001fd4:	429c      	cmp	r4, r3
 8001fd6:	d12b      	bne.n	8002030 <__swbuf_r+0x70>
 8001fd8:	686c      	ldr	r4, [r5, #4]
 8001fda:	69a3      	ldr	r3, [r4, #24]
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	89a3      	ldrh	r3, [r4, #12]
 8001fe0:	071a      	lsls	r2, r3, #28
 8001fe2:	d52f      	bpl.n	8002044 <__swbuf_r+0x84>
 8001fe4:	6923      	ldr	r3, [r4, #16]
 8001fe6:	b36b      	cbz	r3, 8002044 <__swbuf_r+0x84>
 8001fe8:	6923      	ldr	r3, [r4, #16]
 8001fea:	6820      	ldr	r0, [r4, #0]
 8001fec:	b2f6      	uxtb	r6, r6
 8001fee:	1ac0      	subs	r0, r0, r3
 8001ff0:	6963      	ldr	r3, [r4, #20]
 8001ff2:	4637      	mov	r7, r6
 8001ff4:	4283      	cmp	r3, r0
 8001ff6:	dc04      	bgt.n	8002002 <__swbuf_r+0x42>
 8001ff8:	4621      	mov	r1, r4
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f000 f948 	bl	8002290 <_fflush_r>
 8002000:	bb30      	cbnz	r0, 8002050 <__swbuf_r+0x90>
 8002002:	68a3      	ldr	r3, [r4, #8]
 8002004:	3001      	adds	r0, #1
 8002006:	3b01      	subs	r3, #1
 8002008:	60a3      	str	r3, [r4, #8]
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	6022      	str	r2, [r4, #0]
 8002010:	701e      	strb	r6, [r3, #0]
 8002012:	6963      	ldr	r3, [r4, #20]
 8002014:	4283      	cmp	r3, r0
 8002016:	d004      	beq.n	8002022 <__swbuf_r+0x62>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	07db      	lsls	r3, r3, #31
 800201c:	d506      	bpl.n	800202c <__swbuf_r+0x6c>
 800201e:	2e0a      	cmp	r6, #10
 8002020:	d104      	bne.n	800202c <__swbuf_r+0x6c>
 8002022:	4621      	mov	r1, r4
 8002024:	4628      	mov	r0, r5
 8002026:	f000 f933 	bl	8002290 <_fflush_r>
 800202a:	b988      	cbnz	r0, 8002050 <__swbuf_r+0x90>
 800202c:	4638      	mov	r0, r7
 800202e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <__swbuf_r+0x9c>)
 8002032:	429c      	cmp	r4, r3
 8002034:	d101      	bne.n	800203a <__swbuf_r+0x7a>
 8002036:	68ac      	ldr	r4, [r5, #8]
 8002038:	e7cf      	b.n	8001fda <__swbuf_r+0x1a>
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <__swbuf_r+0xa0>)
 800203c:	429c      	cmp	r4, r3
 800203e:	bf08      	it	eq
 8002040:	68ec      	ldreq	r4, [r5, #12]
 8002042:	e7ca      	b.n	8001fda <__swbuf_r+0x1a>
 8002044:	4621      	mov	r1, r4
 8002046:	4628      	mov	r0, r5
 8002048:	f000 f81e 	bl	8002088 <__swsetup_r>
 800204c:	2800      	cmp	r0, #0
 800204e:	d0cb      	beq.n	8001fe8 <__swbuf_r+0x28>
 8002050:	f04f 37ff 	mov.w	r7, #4294967295
 8002054:	e7ea      	b.n	800202c <__swbuf_r+0x6c>
 8002056:	bf00      	nop
 8002058:	08002590 	.word	0x08002590
 800205c:	080025b0 	.word	0x080025b0
 8002060:	08002570 	.word	0x08002570

08002064 <_write_r>:
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	4604      	mov	r4, r0
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	2200      	movs	r2, #0
 800206e:	4d05      	ldr	r5, [pc, #20]	; (8002084 <_write_r+0x20>)
 8002070:	602a      	str	r2, [r5, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	f7fe fa24 	bl	80004c0 <_write>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	d102      	bne.n	8002082 <_write_r+0x1e>
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	b103      	cbz	r3, 8002082 <_write_r+0x1e>
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	200000ac 	.word	0x200000ac

08002088 <__swsetup_r>:
 8002088:	4b32      	ldr	r3, [pc, #200]	; (8002154 <__swsetup_r+0xcc>)
 800208a:	b570      	push	{r4, r5, r6, lr}
 800208c:	681d      	ldr	r5, [r3, #0]
 800208e:	4606      	mov	r6, r0
 8002090:	460c      	mov	r4, r1
 8002092:	b125      	cbz	r5, 800209e <__swsetup_r+0x16>
 8002094:	69ab      	ldr	r3, [r5, #24]
 8002096:	b913      	cbnz	r3, 800209e <__swsetup_r+0x16>
 8002098:	4628      	mov	r0, r5
 800209a:	f7ff fb55 	bl	8001748 <__sinit>
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <__swsetup_r+0xd0>)
 80020a0:	429c      	cmp	r4, r3
 80020a2:	d10f      	bne.n	80020c4 <__swsetup_r+0x3c>
 80020a4:	686c      	ldr	r4, [r5, #4]
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020ac:	0719      	lsls	r1, r3, #28
 80020ae:	d42c      	bmi.n	800210a <__swsetup_r+0x82>
 80020b0:	06dd      	lsls	r5, r3, #27
 80020b2:	d411      	bmi.n	80020d8 <__swsetup_r+0x50>
 80020b4:	2309      	movs	r3, #9
 80020b6:	6033      	str	r3, [r6, #0]
 80020b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295
 80020c0:	81a3      	strh	r3, [r4, #12]
 80020c2:	e03e      	b.n	8002142 <__swsetup_r+0xba>
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <__swsetup_r+0xd4>)
 80020c6:	429c      	cmp	r4, r3
 80020c8:	d101      	bne.n	80020ce <__swsetup_r+0x46>
 80020ca:	68ac      	ldr	r4, [r5, #8]
 80020cc:	e7eb      	b.n	80020a6 <__swsetup_r+0x1e>
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <__swsetup_r+0xd8>)
 80020d0:	429c      	cmp	r4, r3
 80020d2:	bf08      	it	eq
 80020d4:	68ec      	ldreq	r4, [r5, #12]
 80020d6:	e7e6      	b.n	80020a6 <__swsetup_r+0x1e>
 80020d8:	0758      	lsls	r0, r3, #29
 80020da:	d512      	bpl.n	8002102 <__swsetup_r+0x7a>
 80020dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020de:	b141      	cbz	r1, 80020f2 <__swsetup_r+0x6a>
 80020e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d002      	beq.n	80020ee <__swsetup_r+0x66>
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f99d 	bl	8002428 <_free_r>
 80020ee:	2300      	movs	r3, #0
 80020f0:	6363      	str	r3, [r4, #52]	; 0x34
 80020f2:	89a3      	ldrh	r3, [r4, #12]
 80020f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020f8:	81a3      	strh	r3, [r4, #12]
 80020fa:	2300      	movs	r3, #0
 80020fc:	6063      	str	r3, [r4, #4]
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	81a3      	strh	r3, [r4, #12]
 800210a:	6923      	ldr	r3, [r4, #16]
 800210c:	b94b      	cbnz	r3, 8002122 <__swsetup_r+0x9a>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002118:	d003      	beq.n	8002122 <__swsetup_r+0x9a>
 800211a:	4621      	mov	r1, r4
 800211c:	4630      	mov	r0, r6
 800211e:	f000 f929 	bl	8002374 <__smakebuf_r>
 8002122:	89a0      	ldrh	r0, [r4, #12]
 8002124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002128:	f010 0301 	ands.w	r3, r0, #1
 800212c:	d00a      	beq.n	8002144 <__swsetup_r+0xbc>
 800212e:	2300      	movs	r3, #0
 8002130:	60a3      	str	r3, [r4, #8]
 8002132:	6963      	ldr	r3, [r4, #20]
 8002134:	425b      	negs	r3, r3
 8002136:	61a3      	str	r3, [r4, #24]
 8002138:	6923      	ldr	r3, [r4, #16]
 800213a:	b943      	cbnz	r3, 800214e <__swsetup_r+0xc6>
 800213c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002140:	d1ba      	bne.n	80020b8 <__swsetup_r+0x30>
 8002142:	bd70      	pop	{r4, r5, r6, pc}
 8002144:	0781      	lsls	r1, r0, #30
 8002146:	bf58      	it	pl
 8002148:	6963      	ldrpl	r3, [r4, #20]
 800214a:	60a3      	str	r3, [r4, #8]
 800214c:	e7f4      	b.n	8002138 <__swsetup_r+0xb0>
 800214e:	2000      	movs	r0, #0
 8002150:	e7f7      	b.n	8002142 <__swsetup_r+0xba>
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c
 8002158:	08002590 	.word	0x08002590
 800215c:	080025b0 	.word	0x080025b0
 8002160:	08002570 	.word	0x08002570

08002164 <_close_r>:
 8002164:	b538      	push	{r3, r4, r5, lr}
 8002166:	2300      	movs	r3, #0
 8002168:	4d05      	ldr	r5, [pc, #20]	; (8002180 <_close_r+0x1c>)
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	f7fe fad8 	bl	8000724 <_close>
 8002174:	1c43      	adds	r3, r0, #1
 8002176:	d102      	bne.n	800217e <_close_r+0x1a>
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	b103      	cbz	r3, 800217e <_close_r+0x1a>
 800217c:	6023      	str	r3, [r4, #0]
 800217e:	bd38      	pop	{r3, r4, r5, pc}
 8002180:	200000ac 	.word	0x200000ac

08002184 <__sflush_r>:
 8002184:	898a      	ldrh	r2, [r1, #12]
 8002186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218a:	4605      	mov	r5, r0
 800218c:	0710      	lsls	r0, r2, #28
 800218e:	460c      	mov	r4, r1
 8002190:	d458      	bmi.n	8002244 <__sflush_r+0xc0>
 8002192:	684b      	ldr	r3, [r1, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	dc05      	bgt.n	80021a4 <__sflush_r+0x20>
 8002198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800219a:	2b00      	cmp	r3, #0
 800219c:	dc02      	bgt.n	80021a4 <__sflush_r+0x20>
 800219e:	2000      	movs	r0, #0
 80021a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021a6:	2e00      	cmp	r6, #0
 80021a8:	d0f9      	beq.n	800219e <__sflush_r+0x1a>
 80021aa:	2300      	movs	r3, #0
 80021ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021b0:	682f      	ldr	r7, [r5, #0]
 80021b2:	602b      	str	r3, [r5, #0]
 80021b4:	d032      	beq.n	800221c <__sflush_r+0x98>
 80021b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	075a      	lsls	r2, r3, #29
 80021bc:	d505      	bpl.n	80021ca <__sflush_r+0x46>
 80021be:	6863      	ldr	r3, [r4, #4]
 80021c0:	1ac0      	subs	r0, r0, r3
 80021c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021c4:	b10b      	cbz	r3, 80021ca <__sflush_r+0x46>
 80021c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c8:	1ac0      	subs	r0, r0, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	4602      	mov	r2, r0
 80021ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021d0:	4628      	mov	r0, r5
 80021d2:	6a21      	ldr	r1, [r4, #32]
 80021d4:	47b0      	blx	r6
 80021d6:	1c43      	adds	r3, r0, #1
 80021d8:	89a3      	ldrh	r3, [r4, #12]
 80021da:	d106      	bne.n	80021ea <__sflush_r+0x66>
 80021dc:	6829      	ldr	r1, [r5, #0]
 80021de:	291d      	cmp	r1, #29
 80021e0:	d82c      	bhi.n	800223c <__sflush_r+0xb8>
 80021e2:	4a2a      	ldr	r2, [pc, #168]	; (800228c <__sflush_r+0x108>)
 80021e4:	40ca      	lsrs	r2, r1
 80021e6:	07d6      	lsls	r6, r2, #31
 80021e8:	d528      	bpl.n	800223c <__sflush_r+0xb8>
 80021ea:	2200      	movs	r2, #0
 80021ec:	6062      	str	r2, [r4, #4]
 80021ee:	6922      	ldr	r2, [r4, #16]
 80021f0:	04d9      	lsls	r1, r3, #19
 80021f2:	6022      	str	r2, [r4, #0]
 80021f4:	d504      	bpl.n	8002200 <__sflush_r+0x7c>
 80021f6:	1c42      	adds	r2, r0, #1
 80021f8:	d101      	bne.n	80021fe <__sflush_r+0x7a>
 80021fa:	682b      	ldr	r3, [r5, #0]
 80021fc:	b903      	cbnz	r3, 8002200 <__sflush_r+0x7c>
 80021fe:	6560      	str	r0, [r4, #84]	; 0x54
 8002200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002202:	602f      	str	r7, [r5, #0]
 8002204:	2900      	cmp	r1, #0
 8002206:	d0ca      	beq.n	800219e <__sflush_r+0x1a>
 8002208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800220c:	4299      	cmp	r1, r3
 800220e:	d002      	beq.n	8002216 <__sflush_r+0x92>
 8002210:	4628      	mov	r0, r5
 8002212:	f000 f909 	bl	8002428 <_free_r>
 8002216:	2000      	movs	r0, #0
 8002218:	6360      	str	r0, [r4, #52]	; 0x34
 800221a:	e7c1      	b.n	80021a0 <__sflush_r+0x1c>
 800221c:	6a21      	ldr	r1, [r4, #32]
 800221e:	2301      	movs	r3, #1
 8002220:	4628      	mov	r0, r5
 8002222:	47b0      	blx	r6
 8002224:	1c41      	adds	r1, r0, #1
 8002226:	d1c7      	bne.n	80021b8 <__sflush_r+0x34>
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0c4      	beq.n	80021b8 <__sflush_r+0x34>
 800222e:	2b1d      	cmp	r3, #29
 8002230:	d001      	beq.n	8002236 <__sflush_r+0xb2>
 8002232:	2b16      	cmp	r3, #22
 8002234:	d101      	bne.n	800223a <__sflush_r+0xb6>
 8002236:	602f      	str	r7, [r5, #0]
 8002238:	e7b1      	b.n	800219e <__sflush_r+0x1a>
 800223a:	89a3      	ldrh	r3, [r4, #12]
 800223c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002240:	81a3      	strh	r3, [r4, #12]
 8002242:	e7ad      	b.n	80021a0 <__sflush_r+0x1c>
 8002244:	690f      	ldr	r7, [r1, #16]
 8002246:	2f00      	cmp	r7, #0
 8002248:	d0a9      	beq.n	800219e <__sflush_r+0x1a>
 800224a:	0793      	lsls	r3, r2, #30
 800224c:	bf18      	it	ne
 800224e:	2300      	movne	r3, #0
 8002250:	680e      	ldr	r6, [r1, #0]
 8002252:	bf08      	it	eq
 8002254:	694b      	ldreq	r3, [r1, #20]
 8002256:	eba6 0807 	sub.w	r8, r6, r7
 800225a:	600f      	str	r7, [r1, #0]
 800225c:	608b      	str	r3, [r1, #8]
 800225e:	f1b8 0f00 	cmp.w	r8, #0
 8002262:	dd9c      	ble.n	800219e <__sflush_r+0x1a>
 8002264:	4643      	mov	r3, r8
 8002266:	463a      	mov	r2, r7
 8002268:	4628      	mov	r0, r5
 800226a:	6a21      	ldr	r1, [r4, #32]
 800226c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800226e:	47b0      	blx	r6
 8002270:	2800      	cmp	r0, #0
 8002272:	dc06      	bgt.n	8002282 <__sflush_r+0xfe>
 8002274:	89a3      	ldrh	r3, [r4, #12]
 8002276:	f04f 30ff 	mov.w	r0, #4294967295
 800227a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227e:	81a3      	strh	r3, [r4, #12]
 8002280:	e78e      	b.n	80021a0 <__sflush_r+0x1c>
 8002282:	4407      	add	r7, r0
 8002284:	eba8 0800 	sub.w	r8, r8, r0
 8002288:	e7e9      	b.n	800225e <__sflush_r+0xda>
 800228a:	bf00      	nop
 800228c:	20400001 	.word	0x20400001

08002290 <_fflush_r>:
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	690b      	ldr	r3, [r1, #16]
 8002294:	4605      	mov	r5, r0
 8002296:	460c      	mov	r4, r1
 8002298:	b913      	cbnz	r3, 80022a0 <_fflush_r+0x10>
 800229a:	2500      	movs	r5, #0
 800229c:	4628      	mov	r0, r5
 800229e:	bd38      	pop	{r3, r4, r5, pc}
 80022a0:	b118      	cbz	r0, 80022aa <_fflush_r+0x1a>
 80022a2:	6983      	ldr	r3, [r0, #24]
 80022a4:	b90b      	cbnz	r3, 80022aa <_fflush_r+0x1a>
 80022a6:	f7ff fa4f 	bl	8001748 <__sinit>
 80022aa:	4b14      	ldr	r3, [pc, #80]	; (80022fc <_fflush_r+0x6c>)
 80022ac:	429c      	cmp	r4, r3
 80022ae:	d11b      	bne.n	80022e8 <_fflush_r+0x58>
 80022b0:	686c      	ldr	r4, [r5, #4]
 80022b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ef      	beq.n	800229a <_fflush_r+0xa>
 80022ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022bc:	07d0      	lsls	r0, r2, #31
 80022be:	d404      	bmi.n	80022ca <_fflush_r+0x3a>
 80022c0:	0599      	lsls	r1, r3, #22
 80022c2:	d402      	bmi.n	80022ca <_fflush_r+0x3a>
 80022c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022c6:	f7ff fadd 	bl	8001884 <__retarget_lock_acquire_recursive>
 80022ca:	4628      	mov	r0, r5
 80022cc:	4621      	mov	r1, r4
 80022ce:	f7ff ff59 	bl	8002184 <__sflush_r>
 80022d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022d4:	4605      	mov	r5, r0
 80022d6:	07da      	lsls	r2, r3, #31
 80022d8:	d4e0      	bmi.n	800229c <_fflush_r+0xc>
 80022da:	89a3      	ldrh	r3, [r4, #12]
 80022dc:	059b      	lsls	r3, r3, #22
 80022de:	d4dd      	bmi.n	800229c <_fflush_r+0xc>
 80022e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022e2:	f7ff fad0 	bl	8001886 <__retarget_lock_release_recursive>
 80022e6:	e7d9      	b.n	800229c <_fflush_r+0xc>
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <_fflush_r+0x70>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d101      	bne.n	80022f2 <_fflush_r+0x62>
 80022ee:	68ac      	ldr	r4, [r5, #8]
 80022f0:	e7df      	b.n	80022b2 <_fflush_r+0x22>
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <_fflush_r+0x74>)
 80022f4:	429c      	cmp	r4, r3
 80022f6:	bf08      	it	eq
 80022f8:	68ec      	ldreq	r4, [r5, #12]
 80022fa:	e7da      	b.n	80022b2 <_fflush_r+0x22>
 80022fc:	08002590 	.word	0x08002590
 8002300:	080025b0 	.word	0x080025b0
 8002304:	08002570 	.word	0x08002570

08002308 <_lseek_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	2200      	movs	r2, #0
 8002312:	4d05      	ldr	r5, [pc, #20]	; (8002328 <_lseek_r+0x20>)
 8002314:	602a      	str	r2, [r5, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f7fe fa28 	bl	800076c <_lseek>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_lseek_r+0x1e>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_lseek_r+0x1e>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	200000ac 	.word	0x200000ac

0800232c <__swhatbuf_r>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	460e      	mov	r6, r1
 8002330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002334:	4614      	mov	r4, r2
 8002336:	2900      	cmp	r1, #0
 8002338:	461d      	mov	r5, r3
 800233a:	b096      	sub	sp, #88	; 0x58
 800233c:	da07      	bge.n	800234e <__swhatbuf_r+0x22>
 800233e:	2300      	movs	r3, #0
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	89b3      	ldrh	r3, [r6, #12]
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	d410      	bmi.n	800236a <__swhatbuf_r+0x3e>
 8002348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234c:	e00e      	b.n	800236c <__swhatbuf_r+0x40>
 800234e:	466a      	mov	r2, sp
 8002350:	f000 f8c8 	bl	80024e4 <_fstat_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	dbf2      	blt.n	800233e <__swhatbuf_r+0x12>
 8002358:	9a01      	ldr	r2, [sp, #4]
 800235a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800235e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002362:	425a      	negs	r2, r3
 8002364:	415a      	adcs	r2, r3
 8002366:	602a      	str	r2, [r5, #0]
 8002368:	e7ee      	b.n	8002348 <__swhatbuf_r+0x1c>
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	2000      	movs	r0, #0
 800236e:	6023      	str	r3, [r4, #0]
 8002370:	b016      	add	sp, #88	; 0x58
 8002372:	bd70      	pop	{r4, r5, r6, pc}

08002374 <__smakebuf_r>:
 8002374:	898b      	ldrh	r3, [r1, #12]
 8002376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002378:	079d      	lsls	r5, r3, #30
 800237a:	4606      	mov	r6, r0
 800237c:	460c      	mov	r4, r1
 800237e:	d507      	bpl.n	8002390 <__smakebuf_r+0x1c>
 8002380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	6123      	str	r3, [r4, #16]
 8002388:	2301      	movs	r3, #1
 800238a:	6163      	str	r3, [r4, #20]
 800238c:	b002      	add	sp, #8
 800238e:	bd70      	pop	{r4, r5, r6, pc}
 8002390:	466a      	mov	r2, sp
 8002392:	ab01      	add	r3, sp, #4
 8002394:	f7ff ffca 	bl	800232c <__swhatbuf_r>
 8002398:	9900      	ldr	r1, [sp, #0]
 800239a:	4605      	mov	r5, r0
 800239c:	4630      	mov	r0, r6
 800239e:	f7ff fa73 	bl	8001888 <_malloc_r>
 80023a2:	b948      	cbnz	r0, 80023b8 <__smakebuf_r+0x44>
 80023a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a8:	059a      	lsls	r2, r3, #22
 80023aa:	d4ef      	bmi.n	800238c <__smakebuf_r+0x18>
 80023ac:	f023 0303 	bic.w	r3, r3, #3
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	e7e3      	b.n	8002380 <__smakebuf_r+0xc>
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <__smakebuf_r+0x7c>)
 80023ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	6020      	str	r0, [r4, #0]
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	81a3      	strh	r3, [r4, #12]
 80023c6:	9b00      	ldr	r3, [sp, #0]
 80023c8:	6120      	str	r0, [r4, #16]
 80023ca:	6163      	str	r3, [r4, #20]
 80023cc:	9b01      	ldr	r3, [sp, #4]
 80023ce:	b15b      	cbz	r3, 80023e8 <__smakebuf_r+0x74>
 80023d0:	4630      	mov	r0, r6
 80023d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023d6:	f000 f897 	bl	8002508 <_isatty_r>
 80023da:	b128      	cbz	r0, 80023e8 <__smakebuf_r+0x74>
 80023dc:	89a3      	ldrh	r3, [r4, #12]
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	81a3      	strh	r3, [r4, #12]
 80023e8:	89a0      	ldrh	r0, [r4, #12]
 80023ea:	4305      	orrs	r5, r0
 80023ec:	81a5      	strh	r5, [r4, #12]
 80023ee:	e7cd      	b.n	800238c <__smakebuf_r+0x18>
 80023f0:	080016e1 	.word	0x080016e1

080023f4 <memchr>:
 80023f4:	4603      	mov	r3, r0
 80023f6:	b510      	push	{r4, lr}
 80023f8:	b2c9      	uxtb	r1, r1
 80023fa:	4402      	add	r2, r0
 80023fc:	4293      	cmp	r3, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	d101      	bne.n	8002406 <memchr+0x12>
 8002402:	2000      	movs	r0, #0
 8002404:	e003      	b.n	800240e <memchr+0x1a>
 8002406:	7804      	ldrb	r4, [r0, #0]
 8002408:	3301      	adds	r3, #1
 800240a:	428c      	cmp	r4, r1
 800240c:	d1f6      	bne.n	80023fc <memchr+0x8>
 800240e:	bd10      	pop	{r4, pc}

08002410 <__malloc_lock>:
 8002410:	4801      	ldr	r0, [pc, #4]	; (8002418 <__malloc_lock+0x8>)
 8002412:	f7ff ba37 	b.w	8001884 <__retarget_lock_acquire_recursive>
 8002416:	bf00      	nop
 8002418:	200000a4 	.word	0x200000a4

0800241c <__malloc_unlock>:
 800241c:	4801      	ldr	r0, [pc, #4]	; (8002424 <__malloc_unlock+0x8>)
 800241e:	f7ff ba32 	b.w	8001886 <__retarget_lock_release_recursive>
 8002422:	bf00      	nop
 8002424:	200000a4 	.word	0x200000a4

08002428 <_free_r>:
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4605      	mov	r5, r0
 800242c:	2900      	cmp	r1, #0
 800242e:	d043      	beq.n	80024b8 <_free_r+0x90>
 8002430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002434:	1f0c      	subs	r4, r1, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	bfb8      	it	lt
 800243a:	18e4      	addlt	r4, r4, r3
 800243c:	f7ff ffe8 	bl	8002410 <__malloc_lock>
 8002440:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <_free_r+0x94>)
 8002442:	6813      	ldr	r3, [r2, #0]
 8002444:	4610      	mov	r0, r2
 8002446:	b933      	cbnz	r3, 8002456 <_free_r+0x2e>
 8002448:	6063      	str	r3, [r4, #4]
 800244a:	6014      	str	r4, [r2, #0]
 800244c:	4628      	mov	r0, r5
 800244e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002452:	f7ff bfe3 	b.w	800241c <__malloc_unlock>
 8002456:	42a3      	cmp	r3, r4
 8002458:	d90a      	bls.n	8002470 <_free_r+0x48>
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	1862      	adds	r2, r4, r1
 800245e:	4293      	cmp	r3, r2
 8002460:	bf01      	itttt	eq
 8002462:	681a      	ldreq	r2, [r3, #0]
 8002464:	685b      	ldreq	r3, [r3, #4]
 8002466:	1852      	addeq	r2, r2, r1
 8002468:	6022      	streq	r2, [r4, #0]
 800246a:	6063      	str	r3, [r4, #4]
 800246c:	6004      	str	r4, [r0, #0]
 800246e:	e7ed      	b.n	800244c <_free_r+0x24>
 8002470:	461a      	mov	r2, r3
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	b10b      	cbz	r3, 800247a <_free_r+0x52>
 8002476:	42a3      	cmp	r3, r4
 8002478:	d9fa      	bls.n	8002470 <_free_r+0x48>
 800247a:	6811      	ldr	r1, [r2, #0]
 800247c:	1850      	adds	r0, r2, r1
 800247e:	42a0      	cmp	r0, r4
 8002480:	d10b      	bne.n	800249a <_free_r+0x72>
 8002482:	6820      	ldr	r0, [r4, #0]
 8002484:	4401      	add	r1, r0
 8002486:	1850      	adds	r0, r2, r1
 8002488:	4283      	cmp	r3, r0
 800248a:	6011      	str	r1, [r2, #0]
 800248c:	d1de      	bne.n	800244c <_free_r+0x24>
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4401      	add	r1, r0
 8002494:	6011      	str	r1, [r2, #0]
 8002496:	6053      	str	r3, [r2, #4]
 8002498:	e7d8      	b.n	800244c <_free_r+0x24>
 800249a:	d902      	bls.n	80024a2 <_free_r+0x7a>
 800249c:	230c      	movs	r3, #12
 800249e:	602b      	str	r3, [r5, #0]
 80024a0:	e7d4      	b.n	800244c <_free_r+0x24>
 80024a2:	6820      	ldr	r0, [r4, #0]
 80024a4:	1821      	adds	r1, r4, r0
 80024a6:	428b      	cmp	r3, r1
 80024a8:	bf01      	itttt	eq
 80024aa:	6819      	ldreq	r1, [r3, #0]
 80024ac:	685b      	ldreq	r3, [r3, #4]
 80024ae:	1809      	addeq	r1, r1, r0
 80024b0:	6021      	streq	r1, [r4, #0]
 80024b2:	6063      	str	r3, [r4, #4]
 80024b4:	6054      	str	r4, [r2, #4]
 80024b6:	e7c9      	b.n	800244c <_free_r+0x24>
 80024b8:	bd38      	pop	{r3, r4, r5, pc}
 80024ba:	bf00      	nop
 80024bc:	20000094 	.word	0x20000094

080024c0 <_read_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4604      	mov	r4, r0
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	4d05      	ldr	r5, [pc, #20]	; (80024e0 <_read_r+0x20>)
 80024cc:	602a      	str	r2, [r5, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f7fe f90b 	bl	80006ea <_read>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_read_r+0x1e>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_read_r+0x1e>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	200000ac 	.word	0x200000ac

080024e4 <_fstat_r>:
 80024e4:	b538      	push	{r3, r4, r5, lr}
 80024e6:	2300      	movs	r3, #0
 80024e8:	4d06      	ldr	r5, [pc, #24]	; (8002504 <_fstat_r+0x20>)
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	602b      	str	r3, [r5, #0]
 80024f2:	f7fe f922 	bl	800073a <_fstat>
 80024f6:	1c43      	adds	r3, r0, #1
 80024f8:	d102      	bne.n	8002500 <_fstat_r+0x1c>
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	b103      	cbz	r3, 8002500 <_fstat_r+0x1c>
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	bd38      	pop	{r3, r4, r5, pc}
 8002502:	bf00      	nop
 8002504:	200000ac 	.word	0x200000ac

08002508 <_isatty_r>:
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	2300      	movs	r3, #0
 800250c:	4d05      	ldr	r5, [pc, #20]	; (8002524 <_isatty_r+0x1c>)
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	602b      	str	r3, [r5, #0]
 8002514:	f7fe f920 	bl	8000758 <_isatty>
 8002518:	1c43      	adds	r3, r0, #1
 800251a:	d102      	bne.n	8002522 <_isatty_r+0x1a>
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	b103      	cbz	r3, 8002522 <_isatty_r+0x1a>
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	bd38      	pop	{r3, r4, r5, pc}
 8002524:	200000ac 	.word	0x200000ac

08002528 <_init>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr

08002534 <_fini>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr
