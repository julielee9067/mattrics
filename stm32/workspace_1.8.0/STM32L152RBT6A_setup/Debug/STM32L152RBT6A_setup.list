
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b40  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca0  08004ca0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca8  08004ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca8  08004ca8  00014ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  08004cbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004cbc  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d370  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e59  00000000  00000000  0002d3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f31  00000000  00000000  00030a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de44  00000000  00000000  000329a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081379  00000000  00000000  000407e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c1b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003484  00000000  00000000  000c1bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08004c64 	.word	0x08004c64

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08004c64 	.word	0x08004c64

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f000 fc21 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f810 	bl	80004a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <main+0x28>)
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f93d 	bl	8000704 <MX_GPIO_Init>
  MX_ADC_Init();
 800048a:	f000 f855 	bl	8000538 <MX_ADC_Init>
  MX_I2C1_Init();
 800048e:	f000 f8ab 	bl	80005e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000492:	f000 f8d7 	bl	8000644 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000496:	f000 f90b 	bl	80006b0 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  while (1)
  // Assume pressing sets to 0
//  while (HAL_GPIO_ReadPin(BTN_TEST_GPIO_Port, BTN_TEST_Pin))
  while (1)
 800049a:	e7fe      	b.n	800049a <main+0x26>
 800049c:	e000007c 	.word	0xe000007c

080004a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b092      	sub	sp, #72	; 0x48
 80004a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f004 fbd0 	bl	8004c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b4:	463b      	mov	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	605a      	str	r2, [r3, #4]
 80004bc:	609a      	str	r2, [r3, #8]
 80004be:	60da      	str	r2, [r3, #12]
 80004c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <SystemClock_Config+0x94>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ca:	4a1a      	ldr	r2, [pc, #104]	; (8000534 <SystemClock_Config+0x94>)
 80004cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80004d2:	2312      	movs	r3, #18
 80004d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004d6:	2301      	movs	r3, #1
 80004d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	2310      	movs	r3, #16
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004e6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80004ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	f107 0314 	add.w	r3, r7, #20
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f81d 	bl	8003534 <HAL_RCC_OscConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000500:	f000 f9c0 	bl	8000884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
 8000506:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	2100      	movs	r1, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f003 fb39 	bl	8003b94 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000528:	f000 f9ac 	bl	8000884 <Error_Handler>
  }
}
 800052c:	bf00      	nop
 800052e:	3748      	adds	r7, #72	; 0x48
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40007000 	.word	0x40007000

08000538 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_ADC_Init+0xa8>)
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <MX_ADC_Init+0xac>)
 800054c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800054e:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055a:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <MX_ADC_Init+0xa8>)
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000568:	2200      	movs	r2, #0
 800056a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <MX_ADC_Init+0xa8>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <MX_ADC_Init+0xa8>)
 800057a:	2200      	movs	r2, #0
 800057c:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000580:	2200      	movs	r2, #0
 8000582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000588:	2201      	movs	r2, #1
 800058a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <MX_ADC_Init+0xa8>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_ADC_Init+0xa8>)
 8000596:	2210      	movs	r2, #16
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <MX_ADC_Init+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005a0:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <MX_ADC_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005a8:	480d      	ldr	r0, [pc, #52]	; (80005e0 <MX_ADC_Init+0xa8>)
 80005aa:	f000 fbf7 	bl	8000d9c <HAL_ADC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80005b4:	f000 f966 	bl	8000884 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005b8:	2309      	movs	r3, #9
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005bc:	2301      	movs	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <MX_ADC_Init+0xa8>)
 80005ca:	f000 fd2d 	bl	8001028 <HAL_ADC_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80005d4:	f000 f956 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000118 	.word	0x20000118
 80005e4:	40012400 	.word	0x40012400

080005e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <MX_I2C1_Init+0x50>)
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <MX_I2C1_Init+0x54>)
 80005f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f2:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_I2C1_Init+0x50>)
 80005f4:	4a12      	ldr	r2, [pc, #72]	; (8000640 <MX_I2C1_Init+0x58>)
 80005f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_I2C1_Init+0x50>)
 8000606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_I2C1_Init+0x50>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_I2C1_Init+0x50>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_I2C1_Init+0x50>)
 8000626:	f001 f97f 	bl	8001928 <HAL_I2C_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000630:	f000 f928 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000c4 	.word	0x200000c4
 800063c:	40005400 	.word	0x40005400
 8000640:	000186a0 	.word	0x000186a0

08000644 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_SPI2_Init+0x64>)
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <MX_SPI2_Init+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000654:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_SPI2_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_SPI2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000674:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_SPI2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_SPI2_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000690:	220a      	movs	r2, #10
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_SPI2_Init+0x64>)
 8000696:	f003 fce9 	bl	800406c <HAL_SPI_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006a0:	f000 f8f0 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40003800 	.word	0x40003800

080006b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART3_UART_Init+0x4c>)
 80006e8:	f003 fe3f 	bl	800436a <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f8c7 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000080 	.word	0x20000080
 8000700:	40004800 	.word	0x40004800

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	4b55      	ldr	r3, [pc, #340]	; (8000870 <MX_GPIO_Init+0x16c>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a54      	ldr	r2, [pc, #336]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b52      	ldr	r3, [pc, #328]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000732:	4b4f      	ldr	r3, [pc, #316]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a4e      	ldr	r2, [pc, #312]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b4c      	ldr	r3, [pc, #304]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 0320 	and.w	r3, r3, #32
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b49      	ldr	r3, [pc, #292]	; (8000870 <MX_GPIO_Init+0x16c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a48      	ldr	r2, [pc, #288]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b46      	ldr	r3, [pc, #280]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b43      	ldr	r3, [pc, #268]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a42      	ldr	r2, [pc, #264]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_GPIO_Init+0x16c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a3c      	ldr	r2, [pc, #240]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <MX_GPIO_Init+0x16c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000792:	2200      	movs	r2, #0
 8000794:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8000798:	4836      	ldr	r0, [pc, #216]	; (8000874 <MX_GPIO_Init+0x170>)
 800079a:	f001 f8ad 	bl	80018f8 <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 800079e:	2200      	movs	r2, #0
 80007a0:	f241 01f7 	movw	r1, #4343	; 0x10f7
 80007a4:	4834      	ldr	r0, [pc, #208]	; (8000878 <MX_GPIO_Init+0x174>)
 80007a6:	f001 f8a7 	bl	80018f8 <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80007aa:	2200      	movs	r2, #0
 80007ac:	f641 416d 	movw	r1, #7277	; 0x1c6d
 80007b0:	4832      	ldr	r0, [pc, #200]	; (800087c <MX_GPIO_Init+0x178>)
 80007b2:	f001 f8a1 	bl	80018f8 <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2104      	movs	r1, #4
 80007ba:	4831      	ldr	r0, [pc, #196]	; (8000880 <MX_GPIO_Init+0x17c>)
 80007bc:	f001 f89c 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 80007c0:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 80007c4:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4826      	ldr	r0, [pc, #152]	; (8000874 <MX_GPIO_Init+0x170>)
 80007da:	f000 ff0d 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 80007de:	f241 03f7 	movw	r3, #4343	; 0x10f7
 80007e2:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <MX_GPIO_Init+0x174>)
 80007f8:	f000 fefe 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin MCU_PB3_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 80007fc:	f641 436d 	movw	r3, #7277	; 0x1c6d
 8000800:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|MCU_PB3_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4819      	ldr	r0, [pc, #100]	; (800087c <MX_GPIO_Init+0x178>)
 8000816:	f000 feef 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4811      	ldr	r0, [pc, #68]	; (8000874 <MX_GPIO_Init+0x170>)
 800082e:	f000 fee3 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8000832:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <MX_GPIO_Init+0x174>)
 8000848:	f000 fed6 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 800084c:	2304      	movs	r3, #4
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_GPIO_Init+0x17c>)
 8000864:	f000 fec8 	bl	80015f8 <HAL_GPIO_Init>

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020800 	.word	0x40020800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020400 	.word	0x40020400
 8000880:	40020c00 	.word	0x40020c00

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <HAL_MspInit+0x68>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <HAL_MspInit+0x68>)
 800089c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a0:	6253      	str	r3, [r2, #36]	; 0x24
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <HAL_MspInit+0x68>)
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_MspInit+0x68>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <HAL_MspInit+0x68>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6213      	str	r3, [r2, #32]
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x68>)
 80008bc:	6a1b      	ldr	r3, [r3, #32]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x68>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_MspInit+0x68>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6253      	str	r3, [r2, #36]	; 0x24
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x68>)
 80008d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	2005      	movs	r0, #5
 80008e4:	f000 fdc7 	bl	8001476 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008e8:	2005      	movs	r0, #5
 80008ea:	f000 fde0 	bl	80014ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <HAL_ADC_MspInit+0xd4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d153      	bne.n	80009c6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000920:	6a1b      	ldr	r3, [r3, #32]
 8000922:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000928:	6213      	str	r3, [r2, #32]
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_ADC_MspInit+0xd8>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 800097e:	2304      	movs	r3, #4
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <HAL_ADC_MspInit+0xdc>)
 8000992:	f000 fe31 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VOLTAGE_SENSE_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VOLTAGE_SENSE_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <HAL_ADC_MspInit+0xe0>)
 80009aa:	f000 fe25 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <HAL_ADC_MspInit+0xe4>)
 80009c2:	f000 fe19 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009c6:	bf00      	nop
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40012400 	.word	0x40012400
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <HAL_I2C_MspInit+0x9c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d138      	bne.n	8000a78 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 8000a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a30:	2304      	movs	r3, #4
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <HAL_I2C_MspInit+0xa4>)
 8000a3c:	f000 fddc 	bl	80015f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a44:	4a0f      	ldr	r2, [pc, #60]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4a:	6253      	str	r3, [r2, #36]	; 0x24
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_I2C_MspInit+0xa0>)
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	201f      	movs	r0, #31
 8000a5e:	f000 fd0a 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a62:	201f      	movs	r0, #31
 8000a64:	f000 fd23 	bl	80014ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2020      	movs	r0, #32
 8000a6e:	f000 fd02 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a72:	2020      	movs	r0, #32
 8000a74:	f000 fd1b 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400

08000a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_SPI_MspInit+0x8c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d130      	bne.n	8000b10 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aae:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6253      	str	r3, [r2, #36]	; 0x24
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	61d3      	str	r3, [r2, #28]
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_SPI_MspInit+0x90>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ade:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af0:	2305      	movs	r3, #5
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	; (8000b20 <HAL_SPI_MspInit+0x94>)
 8000afc:	f000 fd7c 	bl	80015f8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2024      	movs	r0, #36	; 0x24
 8000b06:	f000 fcb6 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000b0a:	2024      	movs	r0, #36	; 0x24
 8000b0c:	f000 fccf 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40003800 	.word	0x40003800
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400

08000b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <HAL_UART_MspInit+0x8c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d130      	bne.n	8000ba8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b46:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b50:	6253      	str	r3, [r2, #36]	; 0x24
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_UART_MspInit+0x90>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 8000b76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_UART_MspInit+0x94>)
 8000b94:	f000 fd30 	bl	80015f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2027      	movs	r0, #39	; 0x27
 8000b9e:	f000 fc6a 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ba2:	2027      	movs	r0, #39	; 0x27
 8000ba4:	f000 fc83 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40004800 	.word	0x40004800
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c02:	f000 f8af 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
	...

08000c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <I2C1_EV_IRQHandler+0x10>)
 8000c1e:	f000 ffc7 	bl	8001bb0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000c4 	.word	0x200000c4

08000c2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <I2C1_ER_IRQHandler+0x10>)
 8000c32:	f001 f92e 	bl	8001e92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000c4 	.word	0x200000c4

08000c40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <SPI2_IRQHandler+0x10>)
 8000c46:	f003 fa8d 	bl	8004164 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000028 	.word	0x20000028

08000c54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <USART3_IRQHandler+0x10>)
 8000c5a:	f003 fbd3 	bl	8004404 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000080 	.word	0x20000080

08000c68 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c9a:	f7ff ffe5 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f003 ffb5 	bl	8004c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fbe7 	bl	8000474 <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cb0:	08004cb0 	.word	0x08004cb0
  ldr r2, =_sbss
 8000cb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cb8:	20000170 	.word	0x20000170

08000cbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_IRQHandler>

08000cbe <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fbc9 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fdd6 	bl	8000890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_InitTick+0x68>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d022      	beq.n	8000d4a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_InitTick+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d10:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 fbd6 	bl	80014ca <HAL_SYSTICK_Config>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d10f      	bne.n	8000d44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b0f      	cmp	r3, #15
 8000d28:	d809      	bhi.n	8000d3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	f000 fba0 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x70>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	e007      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e004      	b.n	8000d4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e001      	b.n	8000d4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2000016c 	.word	0x2000016c
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	2000016c 	.word	0x2000016c

08000d9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08e      	sub	sp, #56	; 0x38
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e127      	b.n	800100c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d115      	bne.n	8000df6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd8:	4b8e      	ldr	r3, [pc, #568]	; (8001014 <HAL_ADC_Init+0x278>)
 8000dda:	6a1b      	ldr	r3, [r3, #32]
 8000ddc:	4a8d      	ldr	r2, [pc, #564]	; (8001014 <HAL_ADC_Init+0x278>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6213      	str	r3, [r2, #32]
 8000de4:	4b8b      	ldr	r3, [pc, #556]	; (8001014 <HAL_ADC_Init+0x278>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fd83 	bl	80008fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 80ff 	bne.w	8001002 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e0c:	f023 0302 	bic.w	r3, r3, #2
 8000e10:	f043 0202 	orr.w	r2, r3, #2
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000e18:	4b7f      	ldr	r3, [pc, #508]	; (8001018 <HAL_ADC_Init+0x27c>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	497c      	ldr	r1, [pc, #496]	; (8001018 <HAL_ADC_Init+0x27c>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e32:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e40:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fab3 f383 	clz	r3, r3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000e56:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6c:	fa93 f3a3 	rbit	r3, r3
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000e7e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e82:	4313      	orrs	r3, r2
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2b10      	cmp	r3, #16
 8000e8c:	d007      	beq.n	8000e9e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e96:	4313      	orrs	r3, r2
 8000e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea8:	2b40      	cmp	r3, #64	; 0x40
 8000eaa:	d04f      	beq.n	8000f4c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000ebe:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6912      	ldr	r2, [r2, #16]
 8000ec4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000ec8:	d003      	beq.n	8000ed2 <HAL_ADC_Init+0x136>
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6912      	ldr	r2, [r2, #16]
 8000ece:	2a01      	cmp	r2, #1
 8000ed0:	d102      	bne.n	8000ed8 <HAL_ADC_Init+0x13c>
 8000ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed6:	e000      	b.n	8000eda <HAL_ADC_Init+0x13e>
 8000ed8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000eda:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d125      	bne.n	8000f38 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d114      	bne.n	8000f20 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	fa92 f2a2 	rbit	r2, r2
 8000f08:	617a      	str	r2, [r7, #20]
  return result;
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	fab2 f282 	clz	r2, r2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	4093      	lsls	r3, r2
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f1e:	e00b      	b.n	8000f38 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f043 0220 	orr.w	r2, r3, #32
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f30:	f043 0201 	orr.w	r2, r3, #1
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	4b37      	ldr	r3, [pc, #220]	; (800101c <HAL_ADC_Init+0x280>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_ADC_Init+0x284>)
 8000f54:	4013      	ands	r3, r2
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f68:	d003      	beq.n	8000f72 <HAL_ADC_Init+0x1d6>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d119      	bne.n	8000fa6 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	3b01      	subs	r3, #1
 8000f82:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000f86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	fa92 f2a2 	rbit	r2, r2
 8000f8e:	60fa      	str	r2, [r7, #12]
  return result;
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	fa03 f202 	lsl.w	r2, r3, r2
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa4:	e007      	b.n	8000fb6 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_ADC_Init+0x288>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d10b      	bne.n	8000fde <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	f023 0303 	bic.w	r3, r3, #3
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fdc:	e014      	b.n	8001008 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f023 0312 	bic.w	r3, r3, #18
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001000:	e002      	b.n	8001008 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001008:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800100c:	4618      	mov	r0, r3
 800100e:	3738      	adds	r7, #56	; 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40012700 	.word	0x40012700
 800101c:	fcfc16ff 	.word	0xfcfc16ff
 8001020:	c0fff18d 	.word	0xc0fff18d
 8001024:	bf80fffe 	.word	0xbf80fffe

08001028 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001040:	2b01      	cmp	r3, #1
 8001042:	d101      	bne.n	8001048 <HAL_ADC_ConfigChannel+0x20>
 8001044:	2302      	movs	r3, #2
 8001046:	e134      	b.n	80012b2 <HAL_ADC_ConfigChannel+0x28a>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b06      	cmp	r3, #6
 8001056:	d81c      	bhi.n	8001092 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b05      	subs	r3, #5
 800106a:	221f      	movs	r2, #31
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4019      	ands	r1, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b05      	subs	r3, #5
 8001084:	fa00 f203 	lsl.w	r2, r0, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
 8001090:	e07e      	b.n	8001190 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d81c      	bhi.n	80010d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b23      	subs	r3, #35	; 0x23
 80010ac:	221f      	movs	r2, #31
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	4019      	ands	r1, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b23      	subs	r3, #35	; 0x23
 80010c6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010d2:	e05d      	b.n	8001190 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b12      	cmp	r3, #18
 80010da:	d81c      	bhi.n	8001116 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b41      	subs	r3, #65	; 0x41
 80010ee:	221f      	movs	r2, #31
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4019      	ands	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6818      	ldr	r0, [r3, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b41      	subs	r3, #65	; 0x41
 8001108:	fa00 f203 	lsl.w	r2, r0, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	639a      	str	r2, [r3, #56]	; 0x38
 8001114:	e03c      	b.n	8001190 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b18      	cmp	r3, #24
 800111c:	d81c      	bhi.n	8001158 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	3b5f      	subs	r3, #95	; 0x5f
 8001130:	221f      	movs	r2, #31
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	4019      	ands	r1, r3
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	3b5f      	subs	r3, #95	; 0x5f
 800114a:	fa00 f203 	lsl.w	r2, r0, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	635a      	str	r2, [r3, #52]	; 0x34
 8001156:	e01b      	b.n	8001190 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3b7d      	subs	r3, #125	; 0x7d
 800116a:	221f      	movs	r2, #31
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	3b7d      	subs	r3, #125	; 0x7d
 8001184:	fa00 f203 	lsl.w	r2, r0, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b09      	cmp	r3, #9
 8001196:	d81a      	bhi.n	80011ce <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6959      	ldr	r1, [r3, #20]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	2207      	movs	r2, #7
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4019      	ands	r1, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	6898      	ldr	r0, [r3, #8]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	e042      	b.n	8001254 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b13      	cmp	r3, #19
 80011d4:	d81c      	bhi.n	8001210 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6919      	ldr	r1, [r3, #16]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	4413      	add	r3, r2
 80011e6:	3b1e      	subs	r3, #30
 80011e8:	2207      	movs	r2, #7
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4019      	ands	r1, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6898      	ldr	r0, [r3, #8]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	3b1e      	subs	r3, #30
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	e021      	b.n	8001254 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b1a      	cmp	r3, #26
 8001216:	d81c      	bhi.n	8001252 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68d9      	ldr	r1, [r3, #12]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	3b3c      	subs	r3, #60	; 0x3c
 800122a:	2207      	movs	r2, #7
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	4019      	ands	r1, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	3b3c      	subs	r3, #60	; 0x3c
 8001244:	fa00 f203 	lsl.w	r2, r0, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	e000      	b.n	8001254 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001252:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b10      	cmp	r3, #16
 800125a:	d003      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001260:	2b11      	cmp	r3, #17
 8001262:	d121      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_ADC_ConfigChannel+0x294>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d11b      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_ADC_ConfigChannel+0x294>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_ADC_ConfigChannel+0x294>)
 8001276:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800127a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b10      	cmp	r3, #16
 8001282:	d111      	bne.n	80012a8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_ADC_ConfigChannel+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_ADC_ConfigChannel+0x29c>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9a      	lsrs	r2, r3, #18
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800129a:	e002      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3b01      	subs	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f9      	bne.n	800129c <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40012700 	.word	0x40012700
 80012c0:	20000000 	.word	0x20000000
 80012c4:	431bde83 	.word	0x431bde83

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <__NVIC_EnableIRQ+0x34>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100

08001364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	2b00      	cmp	r3, #0
 8001376:	db0a      	blt.n	800138e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b2da      	uxtb	r2, r3
 800137c:	490c      	ldr	r1, [pc, #48]	; (80013b0 <__NVIC_SetPriority+0x4c>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	0112      	lsls	r2, r2, #4
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	440b      	add	r3, r1
 8001388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800138c:	e00a      	b.n	80013a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4908      	ldr	r1, [pc, #32]	; (80013b4 <__NVIC_SetPriority+0x50>)
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	3b04      	subs	r3, #4
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	440b      	add	r3, r1
 80013a2:	761a      	strb	r2, [r3, #24]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	bf28      	it	cs
 80013d6:	2304      	movcs	r3, #4
 80013d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3304      	adds	r3, #4
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d902      	bls.n	80013e8 <NVIC_EncodePriority+0x30>
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3b03      	subs	r3, #3
 80013e6:	e000      	b.n	80013ea <NVIC_EncodePriority+0x32>
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43da      	mvns	r2, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	401a      	ands	r2, r3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43d9      	mvns	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001410:	4313      	orrs	r3, r2
         );
}
 8001412:	4618      	mov	r0, r3
 8001414:	3724      	adds	r7, #36	; 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff90 	bl	8001364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff2d 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff42 	bl	8001310 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff90 	bl	80013b8 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5f 	bl	8001364 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff35 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d008      	beq.n	800150c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2204      	movs	r2, #4
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e022      	b.n	8001552 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 021c 	and.w	r2, r3, #28
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	2101      	movs	r1, #1
 800153a:	fa01 f202 	lsl.w	r2, r1, r2
 800153e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001550:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001552:	4618      	mov	r0, r3
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800156e:	b2db      	uxtb	r3, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d005      	beq.n	8001580 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e029      	b.n	80015d4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 020e 	bic.w	r2, r2, #14
 800158e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 021c 	and.w	r2, r3, #28
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	2101      	movs	r1, #1
 80015ae:	fa01 f202 	lsl.w	r2, r1, r2
 80015b2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	4798      	blx	r3
    }
  }
  return status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800160e:	e154      	b.n	80018ba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8146 	beq.w	80018b4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	6939      	ldr	r1, [r7, #16]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80a0 	beq.w	80018b4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_GPIO_Init+0x2e0>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800178c:	4a53      	ldr	r2, [pc, #332]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001798:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_GPIO_Init+0x2e8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d019      	beq.n	80017ec <HAL_GPIO_Init+0x1f4>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x2ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d013      	beq.n	80017e8 <HAL_GPIO_Init+0x1f0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <HAL_GPIO_Init+0x2f0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d00d      	beq.n	80017e4 <HAL_GPIO_Init+0x1ec>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2f4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d007      	beq.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2f8>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_GPIO_Init+0x1e4>
 80017d8:	2304      	movs	r3, #4
 80017da:	e008      	b.n	80017ee <HAL_GPIO_Init+0x1f6>
 80017dc:	2305      	movs	r3, #5
 80017de:	e006      	b.n	80017ee <HAL_GPIO_Init+0x1f6>
 80017e0:	2303      	movs	r3, #3
 80017e2:	e004      	b.n	80017ee <HAL_GPIO_Init+0x1f6>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x1f6>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <HAL_GPIO_Init+0x1f6>
 80017ec:	2300      	movs	r3, #0
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017fe:	4937      	ldr	r1, [pc, #220]	; (80018dc <HAL_GPIO_Init+0x2e4>)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001830:	4a30      	ldr	r2, [pc, #192]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001836:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800185a:	4a26      	ldr	r2, [pc, #152]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800188a:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_GPIO_Init+0x2fc>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f47f aea3 	bne.w	8001610 <HAL_GPIO_Init+0x18>
  }
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	371c      	adds	r7, #28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010400 	.word	0x40010400

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e12b      	b.n	8001b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff f848 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2224      	movs	r2, #36	; 0x24
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0201 	bic.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800197a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800198a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800198c:	f002 fae6 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8001990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4a81      	ldr	r2, [pc, #516]	; (8001b9c <HAL_I2C_Init+0x274>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d807      	bhi.n	80019ac <HAL_I2C_Init+0x84>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4a80      	ldr	r2, [pc, #512]	; (8001ba0 <HAL_I2C_Init+0x278>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	bf94      	ite	ls
 80019a4:	2301      	movls	r3, #1
 80019a6:	2300      	movhi	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e006      	b.n	80019ba <HAL_I2C_Init+0x92>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a7d      	ldr	r2, [pc, #500]	; (8001ba4 <HAL_I2C_Init+0x27c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	bf94      	ite	ls
 80019b4:	2301      	movls	r3, #1
 80019b6:	2300      	movhi	r3, #0
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0e7      	b.n	8001b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a78      	ldr	r2, [pc, #480]	; (8001ba8 <HAL_I2C_Init+0x280>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	0c9b      	lsrs	r3, r3, #18
 80019cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	430a      	orrs	r2, r1
 80019e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4a6a      	ldr	r2, [pc, #424]	; (8001b9c <HAL_I2C_Init+0x274>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d802      	bhi.n	80019fc <HAL_I2C_Init+0xd4>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3301      	adds	r3, #1
 80019fa:	e009      	b.n	8001a10 <HAL_I2C_Init+0xe8>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a02:	fb02 f303 	mul.w	r3, r2, r3
 8001a06:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_I2C_Init+0x284>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	099b      	lsrs	r3, r3, #6
 8001a0e:	3301      	adds	r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	430b      	orrs	r3, r1
 8001a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	495c      	ldr	r1, [pc, #368]	; (8001b9c <HAL_I2C_Init+0x274>)
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	d819      	bhi.n	8001a64 <HAL_I2C_Init+0x13c>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	1e59      	subs	r1, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3e:	1c59      	adds	r1, r3, #1
 8001a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a44:	400b      	ands	r3, r1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00a      	beq.n	8001a60 <HAL_I2C_Init+0x138>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1e59      	subs	r1, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5e:	e051      	b.n	8001b04 <HAL_I2C_Init+0x1dc>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e04f      	b.n	8001b04 <HAL_I2C_Init+0x1dc>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d111      	bne.n	8001a90 <HAL_I2C_Init+0x168>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1e58      	subs	r0, r3, #1
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e012      	b.n	8001ab6 <HAL_I2C_Init+0x18e>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6859      	ldr	r1, [r3, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	0099      	lsls	r1, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf0c      	ite	eq
 8001ab0:	2301      	moveq	r3, #1
 8001ab2:	2300      	movne	r3, #0
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_Init+0x196>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e022      	b.n	8001b04 <HAL_I2C_Init+0x1dc>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_I2C_Init+0x1bc>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1e58      	subs	r0, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6859      	ldr	r1, [r3, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	440b      	add	r3, r1
 8001ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae2:	e00f      	b.n	8001b04 <HAL_I2C_Init+0x1dc>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	0099      	lsls	r1, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	6809      	ldr	r1, [r1, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6911      	ldr	r1, [r2, #16]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	000186a0 	.word	0x000186a0
 8001ba0:	001e847f 	.word	0x001e847f
 8001ba4:	003d08ff 	.word	0x003d08ff
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	10624dd3 	.word	0x10624dd3

08001bb0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bd0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d003      	beq.n	8001be8 <HAL_I2C_EV_IRQHandler+0x38>
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	f040 80c1 	bne.w	8001d6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_I2C_EV_IRQHandler+0x6e>
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c08:	d003      	beq.n	8001c12 <HAL_I2C_EV_IRQHandler+0x62>
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c10:	d101      	bne.n	8001c16 <HAL_I2C_EV_IRQHandler+0x66>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_I2C_EV_IRQHandler+0x68>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	f000 8132 	beq.w	8001e82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00c      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0x92>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	0a5b      	lsrs	r3, r3, #9
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f001 fc63 	bl	8003500 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fd6f 	bl	800271e <I2C_Master_SB>
 8001c40:	e092      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_I2C_EV_IRQHandler+0xb2>
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fde4 	bl	8002828 <I2C_Master_ADD10>
 8001c60:	e082      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d009      	beq.n	8001c82 <HAL_I2C_EV_IRQHandler+0xd2>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	0a5b      	lsrs	r3, r3, #9
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fdfd 	bl	800287a <I2C_Master_ADDR>
 8001c80:	e072      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03b      	beq.n	8001d06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9c:	f000 80f3 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	09db      	lsrs	r3, r3, #7
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00f      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x11c>
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <HAL_I2C_EV_IRQHandler+0x11c>
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f9e9 	bl	800209c <I2C_MasterTransmit_TXE>
 8001cca:	e04d      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80d6 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	0a5b      	lsrs	r3, r3, #9
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80cf 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	2b21      	cmp	r3, #33	; 0x21
 8001cec:	d103      	bne.n	8001cf6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa70 	bl	80021d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cf4:	e0c7      	b.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	f040 80c4 	bne.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fade 	bl	80022c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d04:	e0bf      	b.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d14:	f000 80b7 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	099b      	lsrs	r3, r3, #6
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00f      	beq.n	8001d44 <HAL_I2C_EV_IRQHandler+0x194>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	0a9b      	lsrs	r3, r3, #10
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d009      	beq.n	8001d44 <HAL_I2C_EV_IRQHandler+0x194>
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d103      	bne.n	8001d44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 fb53 	bl	80023e8 <I2C_MasterReceive_RXNE>
 8001d42:	e011      	b.n	8001d68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 809a 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	0a5b      	lsrs	r3, r3, #9
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8093 	beq.w	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fbf2 	bl	800254a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d66:	e08e      	b.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d68:	e08d      	b.n	8001e86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e007      	b.n	8001d8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x20e>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	0a5b      	lsrs	r3, r3, #9
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00c      	beq.n	8001dbe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 ffab 	bl	8002d12 <I2C_Slave_ADDR>
 8001dbc:	e066      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_I2C_EV_IRQHandler+0x22e>
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	0a5b      	lsrs	r3, r3, #9
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 ffe6 	bl	8002da8 <I2C_Slave_STOPF>
 8001ddc:	e056      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	2b21      	cmp	r3, #33	; 0x21
 8001de2:	d002      	beq.n	8001dea <HAL_I2C_EV_IRQHandler+0x23a>
 8001de4:	7bbb      	ldrb	r3, [r7, #14]
 8001de6:	2b29      	cmp	r3, #41	; 0x29
 8001de8:	d125      	bne.n	8001e36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	09db      	lsrs	r3, r3, #7
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00f      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x266>
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	0a9b      	lsrs	r3, r3, #10
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_I2C_EV_IRQHandler+0x266>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fec3 	bl	8002b9a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e14:	e039      	b.n	8001e8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d033      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x2da>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	0a5b      	lsrs	r3, r3, #9
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02d      	beq.n	8001e8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fef0 	bl	8002c14 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e34:	e029      	b.n	8001e8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00f      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	0a9b      	lsrs	r3, r3, #10
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d009      	beq.n	8001e62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d103      	bne.n	8001e62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fefa 	bl	8002c54 <I2C_SlaveReceive_RXNE>
 8001e60:	e014      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00e      	beq.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	0a5b      	lsrs	r3, r3, #9
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 ff28 	bl	8002cd0 <I2C_SlaveReceive_BTF>
 8001e80:	e004      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001eb4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_I2C_ER_IRQHandler+0x4e>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	0a1b      	lsrs	r3, r3, #8
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d008      	beq.n	8001ee0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ede:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	0a5b      	lsrs	r3, r3, #9
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00e      	beq.n	8001f0a <HAL_I2C_ER_IRQHandler+0x78>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f043 0302 	orr.w	r3, r3, #2
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	0a9b      	lsrs	r3, r3, #10
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03f      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x104>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d039      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f22:	7efb      	ldrb	r3, [r7, #27]
 8001f24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001f3c:	7ebb      	ldrb	r3, [r7, #26]
 8001f3e:	2b20      	cmp	r3, #32
 8001f40:	d112      	bne.n	8001f68 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10f      	bne.n	8001f68 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f48:	7cfb      	ldrb	r3, [r7, #19]
 8001f4a:	2b21      	cmp	r3, #33	; 0x21
 8001f4c:	d008      	beq.n	8001f60 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	2b29      	cmp	r3, #41	; 0x29
 8001f52:	d005      	beq.n	8001f60 <HAL_I2C_ER_IRQHandler+0xce>
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	2b28      	cmp	r3, #40	; 0x28
 8001f58:	d106      	bne.n	8001f68 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b21      	cmp	r3, #33	; 0x21
 8001f5e:	d103      	bne.n	8001f68 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f001 f851 	bl	8003008 <I2C_Slave_AF>
 8001f66:	e016      	b.n	8001f96 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f7a:	7efb      	ldrb	r3, [r7, #27]
 8001f7c:	2b10      	cmp	r3, #16
 8001f7e:	d002      	beq.n	8001f86 <HAL_I2C_ER_IRQHandler+0xf4>
 8001f80:	7efb      	ldrb	r3, [r7, #27]
 8001f82:	2b40      	cmp	r3, #64	; 0x40
 8001f84:	d107      	bne.n	8001f96 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	0adb      	lsrs	r3, r3, #11
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00e      	beq.n	8001fc0 <HAL_I2C_ER_IRQHandler+0x12e>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001fbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 f888 	bl	80030e8 <I2C_ITError>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr

08002004 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	4613      	mov	r3, r2
 8002036:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d150      	bne.n	8002164 <I2C_MasterTransmit_TXE+0xc8>
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2b21      	cmp	r3, #33	; 0x21
 80020c6:	d14d      	bne.n	8002164 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d01d      	beq.n	800210a <I2C_MasterTransmit_TXE+0x6e>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d01a      	beq.n	800210a <I2C_MasterTransmit_TXE+0x6e>
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020da:	d016      	beq.n	800210a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2211      	movs	r2, #17
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff6c 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002108:	e060      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002118:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002128:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d107      	bne.n	8002154 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff81 	bl	8002054 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002152:	e03b      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff3f 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002162:	e033      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b21      	cmp	r3, #33	; 0x21
 8002168:	d005      	beq.n	8002176 <I2C_MasterTransmit_TXE+0xda>
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	d12d      	bne.n	80021cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	2b22      	cmp	r3, #34	; 0x22
 8002174:	d12a      	bne.n	80021cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d108      	bne.n	8002192 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002190:	e01c      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d103      	bne.n	80021a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f88e 	bl	80022c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80021a4:	e012      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021ca:	e7ff      	b.n	80021cc <I2C_MasterTransmit_TXE+0x130>
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b21      	cmp	r3, #33	; 0x21
 80021ec:	d164      	bne.n	80022b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d012      	beq.n	800221e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800221c:	e04c      	b.n	80022b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d01d      	beq.n	8002260 <I2C_MasterTransmit_BTF+0x8c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b20      	cmp	r3, #32
 8002228:	d01a      	beq.n	8002260 <I2C_MasterTransmit_BTF+0x8c>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002230:	d016      	beq.n	8002260 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002240:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2211      	movs	r2, #17
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fec1 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
}
 800225e:	e02b      	b.n	80022b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800226e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d107      	bne.n	80022aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fed6 	bl	8002054 <HAL_I2C_MemTxCpltCallback>
}
 80022a8:	e006      	b.n	80022b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fe94 	bl	8001fe0 <HAL_I2C_MasterTxCpltCallback>
}
 80022b8:	bf00      	nop
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11d      	bne.n	8002314 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10b      	bne.n	80022f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f0:	1c9a      	adds	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022f6:	e073      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	121b      	asrs	r3, r3, #8
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002312:	e065      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10b      	bne.n	8002334 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002320:	b2da      	uxtb	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002332:	e055      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002338:	2b02      	cmp	r3, #2
 800233a:	d151      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b22      	cmp	r3, #34	; 0x22
 8002340:	d10d      	bne.n	800235e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002350:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800235c:	e040      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b21      	cmp	r3, #33	; 0x21
 800236c:	d112      	bne.n	8002394 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002392:	e025      	b.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d120      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b21      	cmp	r3, #33	; 0x21
 80023a2:	d11d      	bne.n	80023e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80023b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fe3a 	bl	8002054 <HAL_I2C_MemTxCpltCallback>
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b22      	cmp	r3, #34	; 0x22
 80023fa:	f040 80a2 	bne.w	8002542 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d921      	bls.n	8002450 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	2b03      	cmp	r3, #3
 800243a:	f040 8082 	bne.w	8002542 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800244e:	e078      	b.n	8002542 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	2b02      	cmp	r3, #2
 8002456:	d074      	beq.n	8002542 <I2C_MasterReceive_RXNE+0x15a>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d002      	beq.n	8002464 <I2C_MasterReceive_RXNE+0x7c>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d16e      	bne.n	8002542 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 f819 	bl	800349c <I2C_WaitOnSTOPRequestThroughIT>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d142      	bne.n	80024f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800248e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691a      	ldr	r2, [r3, #16]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d10a      	bne.n	80024e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fdc4 	bl	8002066 <HAL_I2C_MemRxCpltCallback>
}
 80024de:	e030      	b.n	8002542 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2212      	movs	r2, #18
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff fd7f 	bl	8001ff2 <HAL_I2C_MasterRxCpltCallback>
}
 80024f4:	e025      	b.n	8002542 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002504:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fd9b 	bl	8002078 <HAL_I2C_ErrorCallback>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b04      	cmp	r3, #4
 8002560:	d11b      	bne.n	800259a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002598:	e0bd      	b.n	8002716 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d129      	bne.n	80025f8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d00a      	beq.n	80025d0 <I2C_MasterReceive_BTF+0x86>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d007      	beq.n	80025d0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025f6:	e08e      	b.n	8002716 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d176      	bne.n	80026f0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d002      	beq.n	800260e <I2C_MasterReceive_BTF+0xc4>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b10      	cmp	r3, #16
 800260c:	d108      	bne.n	8002620 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	e019      	b.n	8002654 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <I2C_MasterReceive_BTF+0xe2>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d108      	bne.n	800263e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e00a      	b.n	8002654 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b10      	cmp	r3, #16
 8002642:	d007      	beq.n	8002654 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d10a      	bne.n	80026da <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fcc7 	bl	8002066 <HAL_I2C_MemRxCpltCallback>
}
 80026d8:	e01d      	b.n	8002716 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2212      	movs	r2, #18
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fc82 	bl	8001ff2 <HAL_I2C_MasterRxCpltCallback>
}
 80026ee:	e012      	b.n	8002716 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d117      	bne.n	8002762 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	b2db      	uxtb	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800274c:	e067      	b.n	800281e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	611a      	str	r2, [r3, #16]
}
 8002760:	e05d      	b.n	800281e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800276a:	d133      	bne.n	80027d4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b21      	cmp	r3, #33	; 0x21
 8002776:	d109      	bne.n	800278c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	b2db      	uxtb	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002788:	611a      	str	r2, [r3, #16]
 800278a:	e008      	b.n	800279e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d004      	beq.n	80027b0 <I2C_Master_SB+0x92>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d108      	bne.n	80027c2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d032      	beq.n	800281e <I2C_Master_SB+0x100>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d02d      	beq.n	800281e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d0:	605a      	str	r2, [r3, #4]
}
 80027d2:	e024      	b.n	800281e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10e      	bne.n	80027fa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	11db      	asrs	r3, r3, #7
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	f003 0306 	and.w	r3, r3, #6
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f063 030f 	orn	r3, r3, #15
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	611a      	str	r2, [r3, #16]
}
 80027f8:	e011      	b.n	800281e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10d      	bne.n	800281e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	b29b      	uxth	r3, r3
 8002808:	11db      	asrs	r3, r3, #7
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 0306 	and.w	r3, r3, #6
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f063 030e 	orn	r3, r3, #14
 8002816:	b2da      	uxtb	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	b2da      	uxtb	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <I2C_Master_ADD10+0x26>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d108      	bne.n	8002860 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <I2C_Master_ADD10+0x48>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286e:	605a      	str	r2, [r3, #4]
  }
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800287a:	b480      	push	{r7}
 800287c:	b091      	sub	sp, #68	; 0x44
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b22      	cmp	r3, #34	; 0x22
 80028a2:	f040 8169 	bne.w	8002b78 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <I2C_Master_ADDR+0x54>
 80028ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d10b      	bne.n	80028ce <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b6:	2300      	movs	r3, #0
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028cc:	e160      	b.n	8002b90 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d11d      	bne.n	8002912 <I2C_Master_ADDR+0x98>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028de:	d118      	bne.n	8002912 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e0:	2300      	movs	r3, #0
 80028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002904:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	651a      	str	r2, [r3, #80]	; 0x50
 8002910:	e13e      	b.n	8002b90 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d113      	bne.n	8002944 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e115      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 808a 	bne.w	8002a64 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002952:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002956:	d137      	bne.n	80029c8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002966:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002976:	d113      	bne.n	80029a0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	e0e7      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e0d3      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d02e      	beq.n	8002a2c <I2C_Master_ADDR+0x1b2>
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d02b      	beq.n	8002a2c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	d102      	bne.n	80029e0 <I2C_Master_ADDR+0x166>
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d125      	bne.n	8002a2c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d00e      	beq.n	8002a04 <I2C_Master_ADDR+0x18a>
 80029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d00b      	beq.n	8002a04 <I2C_Master_ADDR+0x18a>
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d008      	beq.n	8002a04 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a12:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	61fb      	str	r3, [r7, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	e0a1      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e085      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d14d      	bne.n	8002b0a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d016      	beq.n	8002aa2 <I2C_Master_ADDR+0x228>
 8002a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d013      	beq.n	8002aa2 <I2C_Master_ADDR+0x228>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d010      	beq.n	8002aa2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a8e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e007      	b.n	8002ab2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac0:	d117      	bne.n	8002af2 <I2C_Master_ADDR+0x278>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac8:	d00b      	beq.n	8002ae2 <I2C_Master_ADDR+0x268>
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d008      	beq.n	8002ae2 <I2C_Master_ADDR+0x268>
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d005      	beq.n	8002ae2 <I2C_Master_ADDR+0x268>
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d002      	beq.n	8002ae2 <I2C_Master_ADDR+0x268>
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d107      	bne.n	8002af2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002af0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	e032      	b.n	8002b70 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b18:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b28:	d117      	bne.n	8002b5a <I2C_Master_ADDR+0x2e0>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b30:	d00b      	beq.n	8002b4a <I2C_Master_ADDR+0x2d0>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d008      	beq.n	8002b4a <I2C_Master_ADDR+0x2d0>
 8002b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d005      	beq.n	8002b4a <I2C_Master_ADDR+0x2d0>
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d002      	beq.n	8002b4a <I2C_Master_ADDR+0x2d0>
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d107      	bne.n	8002b5a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b58:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b76:	e00b      	b.n	8002b90 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	e7ff      	b.n	8002b90 <I2C_Master_ADDR+0x316>
 8002b90:	bf00      	nop
 8002b92:	3744      	adds	r7, #68	; 0x44
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02b      	beq.n	8002c0c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	1c5a      	adds	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d114      	bne.n	8002c0c <I2C_SlaveTransmit_TXE+0x72>
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b29      	cmp	r3, #41	; 0x29
 8002be6:	d111      	bne.n	8002c0c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2221      	movs	r2, #33	; 0x21
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2228      	movs	r2, #40	; 0x28
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff f9fc 	bl	8002004 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02c      	beq.n	8002cc8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d114      	bne.n	8002cc8 <I2C_SlaveReceive_RXNE+0x74>
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ca2:	d111      	bne.n	8002cc8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2222      	movs	r2, #34	; 0x22
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2228      	movs	r2, #40	; 0x28
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff f9a7 	bl	8002016 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d012      	beq.n	8002d08 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d2c:	2b28      	cmp	r3, #40	; 0x28
 8002d2e:	d127      	bne.n	8002d80 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d3e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	f003 0301 	and.w	r3, r3, #1
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	09db      	lsrs	r3, r3, #7
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	81bb      	strh	r3, [r7, #12]
 8002d62:	e002      	b.n	8002d6a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d72:	89ba      	ldrh	r2, [r7, #12]
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff f955 	bl	8002028 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d7e:	e00e      	b.n	8002d9e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e04:	d172      	bne.n	8002eec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b22      	cmp	r3, #34	; 0x22
 8002e0a:	d002      	beq.n	8002e12 <I2C_Slave_STOPF+0x6a>
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e10:	d135      	bne.n	8002e7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f043 0204 	orr.w	r2, r3, #4
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fbc7 	bl	80015de <HAL_DMA_GetState>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d049      	beq.n	8002eea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4a69      	ldr	r2, [pc, #420]	; (8003000 <I2C_Slave_STOPF+0x258>)
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fb7a 	bl	800155c <HAL_DMA_Abort_IT>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03d      	beq.n	8002eea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e7c:	e035      	b.n	8002eea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0204 	orr.w	r2, r3, #4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fb91 	bl	80015de <HAL_DMA_GetState>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d014      	beq.n	8002eec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	4a4e      	ldr	r2, [pc, #312]	; (8003000 <I2C_Slave_STOPF+0x258>)
 8002ec8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fb44 	bl	800155c <HAL_DMA_Abort_IT>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4798      	blx	r3
 8002ee8:	e000      	b.n	8002eec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03e      	beq.n	8002f74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d112      	bne.n	8002f2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f34:	2b40      	cmp	r3, #64	; 0x40
 8002f36:	d112      	bne.n	8002f5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0204 	orr.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8b3 	bl	80030e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f82:	e039      	b.n	8002ff8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b2a      	cmp	r3, #42	; 0x2a
 8002f88:	d109      	bne.n	8002f9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2228      	movs	r2, #40	; 0x28
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff f83c 	bl	8002016 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b28      	cmp	r3, #40	; 0x28
 8002fa8:	d111      	bne.n	8002fce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <I2C_Slave_STOPF+0x25c>)
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff f83b 	bl	8002042 <HAL_I2C_ListenCpltCallback>
}
 8002fcc:	e014      	b.n	8002ff8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	2b22      	cmp	r3, #34	; 0x22
 8002fd4:	d002      	beq.n	8002fdc <I2C_Slave_STOPF+0x234>
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	2b22      	cmp	r3, #34	; 0x22
 8002fda:	d10d      	bne.n	8002ff8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff f80f 	bl	8002016 <HAL_I2C_SlaveRxCpltCallback>
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	0800334d 	.word	0x0800334d
 8003004:	ffff0000 	.word	0xffff0000

08003008 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b08      	cmp	r3, #8
 8003022:	d002      	beq.n	800302a <I2C_Slave_AF+0x22>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b20      	cmp	r3, #32
 8003028:	d129      	bne.n	800307e <I2C_Slave_AF+0x76>
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b28      	cmp	r3, #40	; 0x28
 800302e:	d126      	bne.n	800307e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a2c      	ldr	r2, [pc, #176]	; (80030e4 <I2C_Slave_AF+0xdc>)
 8003034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003044:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800304e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7fe ffe3 	bl	8002042 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800307c:	e02e      	b.n	80030dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b21      	cmp	r3, #33	; 0x21
 8003082:	d126      	bne.n	80030d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <I2C_Slave_AF+0xdc>)
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2221      	movs	r2, #33	; 0x21
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fe ff9a 	bl	8002004 <HAL_I2C_SlaveTxCpltCallback>
}
 80030d0:	e004      	b.n	80030dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030da:	615a      	str	r2, [r3, #20]
}
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	ffff0000 	.word	0xffff0000

080030e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003100:	7bbb      	ldrb	r3, [r7, #14]
 8003102:	2b10      	cmp	r3, #16
 8003104:	d002      	beq.n	800310c <I2C_ITError+0x24>
 8003106:	7bbb      	ldrb	r3, [r7, #14]
 8003108:	2b40      	cmp	r3, #64	; 0x40
 800310a:	d10a      	bne.n	8003122 <I2C_ITError+0x3a>
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b22      	cmp	r3, #34	; 0x22
 8003110:	d107      	bne.n	8003122 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003120:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003128:	2b28      	cmp	r3, #40	; 0x28
 800312a:	d107      	bne.n	800313c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2228      	movs	r2, #40	; 0x28
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800313a:	e015      	b.n	8003168 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314a:	d00a      	beq.n	8003162 <I2C_ITError+0x7a>
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b60      	cmp	r3, #96	; 0x60
 8003150:	d007      	beq.n	8003162 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003176:	d162      	bne.n	800323e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003186:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d020      	beq.n	80031d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <I2C_ITError+0x25c>)
 800319c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe f9da 	bl	800155c <HAL_DMA_Abort_IT>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8089 	beq.w	80032c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031d2:	4610      	mov	r0, r2
 80031d4:	4798      	blx	r3
 80031d6:	e074      	b.n	80032c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	4a59      	ldr	r2, [pc, #356]	; (8003344 <I2C_ITError+0x25c>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe f9b9 	bl	800155c <HAL_DMA_Abort_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d068      	beq.n	80032c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b40      	cmp	r3, #64	; 0x40
 80031fc:	d10b      	bne.n	8003216 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003238:	4610      	mov	r0, r2
 800323a:	4798      	blx	r3
 800323c:	e041      	b.n	80032c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b60      	cmp	r3, #96	; 0x60
 8003248:	d125      	bne.n	8003296 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d10b      	bne.n	800327e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fefb 	bl	800208a <HAL_I2C_AbortCpltCallback>
 8003294:	e015      	b.n	80032c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d10b      	bne.n	80032bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fe fedb 	bl	8002078 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10e      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d104      	bne.n	80032f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003306:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b04      	cmp	r3, #4
 8003312:	d113      	bne.n	800333c <I2C_ITError+0x254>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b28      	cmp	r3, #40	; 0x28
 8003318:	d110      	bne.n	800333c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <I2C_ITError+0x260>)
 800331e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fe83 	bl	8002042 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	0800334d 	.word	0x0800334d
 8003348:	ffff0000 	.word	0xffff0000

0800334c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003366:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <I2C_DMAAbort+0x148>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	4a4a      	ldr	r2, [pc, #296]	; (8003498 <I2C_DMAAbort+0x14c>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0a1a      	lsrs	r2, r3, #8
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	00da      	lsls	r2, r3, #3
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003392:	e00a      	b.n	80033aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	3b01      	subs	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a8:	d0ea      	beq.n	8003380 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	2200      	movs	r2, #0
 80033b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	2200      	movs	r2, #0
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2200      	movs	r2, #0
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	2200      	movs	r2, #0
 80033ee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2200      	movs	r2, #0
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b60      	cmp	r3, #96	; 0x60
 800341a:	d10e      	bne.n	800343a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7fe fe29 	bl	800208a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003438:	e027      	b.n	800348a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003440:	2b28      	cmp	r3, #40	; 0x28
 8003442:	d117      	bne.n	8003474 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003462:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2200      	movs	r2, #0
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2228      	movs	r2, #40	; 0x28
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003472:	e007      	b.n	8003484 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2220      	movs	r2, #32
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003484:	6978      	ldr	r0, [r7, #20]
 8003486:	f7fe fdf7 	bl	8002078 <HAL_I2C_ErrorCallback>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000000 	.word	0x20000000
 8003498:	14f8b589 	.word	0x14f8b589

0800349c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	08db      	lsrs	r3, r3, #3
 80034ae:	4a13      	ldr	r2, [pc, #76]	; (80034fc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0a1a      	lsrs	r2, r3, #8
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d107      	bne.n	80034da <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0220 	orr.w	r2, r3, #32
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e008      	b.n	80034ec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d0e9      	beq.n	80034be <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000
 80034fc:	14f8b589 	.word	0x14f8b589

08003500 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003510:	d103      	bne.n	800351a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003518:	e007      	b.n	800352a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003522:	d102      	bne.n	800352a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2208      	movs	r2, #8
 8003528:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b088      	sub	sp, #32
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e31d      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003546:	4b94      	ldr	r3, [pc, #592]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003550:	4b91      	ldr	r3, [pc, #580]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07b      	beq.n	800365e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d006      	beq.n	800357a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d10b      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357a:	4b87      	ldr	r3, [pc, #540]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d06a      	beq.n	800365c <HAL_RCC_OscConfig+0x128>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d166      	bne.n	800365c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e2f7      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b7f      	ldr	r3, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e02d      	b.n	8003604 <HAL_RCC_OscConfig+0xd0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10c      	bne.n	80035ca <HAL_RCC_OscConfig+0x96>
 80035b0:	4b79      	ldr	r3, [pc, #484]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a78      	ldr	r2, [pc, #480]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b76      	ldr	r3, [pc, #472]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a75      	ldr	r2, [pc, #468]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e01c      	b.n	8003604 <HAL_RCC_OscConfig+0xd0>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b05      	cmp	r3, #5
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xb8>
 80035d2:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6d      	ldr	r2, [pc, #436]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd0>
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a69      	ldr	r2, [pc, #420]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b67      	ldr	r3, [pc, #412]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a66      	ldr	r2, [pc, #408]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fd fbbc 	bl	8000d88 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fbb8 	bl	8000d88 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e2ad      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003626:	4b5c      	ldr	r3, [pc, #368]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fd fba8 	bl	8000d88 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fba4 	bl	8000d88 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e299      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800364e:	4b52      	ldr	r3, [pc, #328]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d05a      	beq.n	8003720 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d005      	beq.n	800367c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b0c      	cmp	r3, #12
 8003674:	d119      	bne.n	80036aa <HAL_RCC_OscConfig+0x176>
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367c:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x160>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e276      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b40      	ldr	r3, [pc, #256]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	493d      	ldr	r1, [pc, #244]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a8:	e03a      	b.n	8003720 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d020      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCC_OscConfig+0x268>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fb66 	bl	8000d88 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fd fb62 	bl	8000d88 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e257      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d2:	4b31      	ldr	r3, [pc, #196]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036de:	4b2e      	ldr	r3, [pc, #184]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	492a      	ldr	r1, [pc, #168]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
 80036f2:	e015      	b.n	8003720 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_OscConfig+0x268>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fd fb45 	bl	8000d88 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fb41 	bl	8000d88 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e236      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b8 	beq.w	800389e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d170      	bne.n	8003816 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_OscConfig+0x218>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e21a      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003758:	429a      	cmp	r2, r3
 800375a:	d921      	bls.n	80037a0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fc23 	bl	8003fac <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e208      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4906      	ldr	r1, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003782:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	4901      	ldr	r1, [pc, #4]	; (8003798 <HAL_RCC_OscConfig+0x264>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e020      	b.n	80037da <HAL_RCC_OscConfig+0x2a6>
 8003798:	40023800 	.word	0x40023800
 800379c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a0:	4ba4      	ldr	r3, [pc, #656]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	49a1      	ldr	r1, [pc, #644]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037b2:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	499c      	ldr	r1, [pc, #624]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fbee 	bl	8003fac <RCC_SetFlashLatencyFromMSIRange>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1d3      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	3301      	adds	r3, #1
 80037e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037ea:	4a92      	ldr	r2, [pc, #584]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0912      	lsrs	r2, r2, #4
 80037f0:	f002 020f 	and.w	r2, r2, #15
 80037f4:	4990      	ldr	r1, [pc, #576]	; (8003a38 <HAL_RCC_OscConfig+0x504>)
 80037f6:	5c8a      	ldrb	r2, [r1, r2]
 80037f8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037fa:	4a90      	ldr	r2, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x508>)
 80037fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037fe:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_OscConfig+0x50c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fa74 	bl	8000cf0 <HAL_InitTick>
 8003808:	4603      	mov	r3, r0
 800380a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d045      	beq.n	800389e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	e1b5      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d029      	beq.n	8003872 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800381e:	4b89      	ldr	r3, [pc, #548]	; (8003a44 <HAL_RCC_OscConfig+0x510>)
 8003820:	2201      	movs	r2, #1
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fd fab0 	bl	8000d88 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800382c:	f7fd faac 	bl	8000d88 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e1a1      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800384a:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4977      	ldr	r1, [pc, #476]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	4b75      	ldr	r3, [pc, #468]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	061b      	lsls	r3, r3, #24
 800386a:	4972      	ldr	r1, [pc, #456]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x510>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fa86 	bl	8000d88 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003880:	f7fd fa82 	bl	8000d88 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e177      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003892:	4b68      	ldr	r3, [pc, #416]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d030      	beq.n	800390c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b65      	ldr	r3, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x514>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fd fa66 	bl	8000d88 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fd fa62 	bl	8000d88 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e157      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038d2:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x38c>
 80038de:	e015      	b.n	800390c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e0:	4b59      	ldr	r3, [pc, #356]	; (8003a48 <HAL_RCC_OscConfig+0x514>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e6:	f7fd fa4f 	bl	8000d88 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ee:	f7fd fa4b 	bl	8000d88 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e140      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003900:	4b4c      	ldr	r3, [pc, #304]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f0      	bne.n	80038ee <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80b5 	beq.w	8003a84 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800391a:	2300      	movs	r3, #0
 800391c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800391e:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800392a:	4b42      	ldr	r3, [pc, #264]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	4a41      	ldr	r2, [pc, #260]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003934:	6253      	str	r3, [r2, #36]	; 0x24
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003942:	2301      	movs	r3, #1
 8003944:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <HAL_RCC_OscConfig+0x518>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003952:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <HAL_RCC_OscConfig+0x518>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <HAL_RCC_OscConfig+0x518>)
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800395e:	f7fd fa13 	bl	8000d88 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003966:	f7fd fa0f 	bl	8000d88 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b64      	cmp	r3, #100	; 0x64
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e104      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <HAL_RCC_OscConfig+0x518>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x466>
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003996:	6353      	str	r3, [r2, #52]	; 0x34
 8003998:	e02d      	b.n	80039f6 <HAL_RCC_OscConfig+0x4c2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10c      	bne.n	80039bc <HAL_RCC_OscConfig+0x488>
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	4a23      	ldr	r2, [pc, #140]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ac:	6353      	str	r3, [r2, #52]	; 0x34
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039b8:	6353      	str	r3, [r2, #52]	; 0x34
 80039ba:	e01c      	b.n	80039f6 <HAL_RCC_OscConfig+0x4c2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b05      	cmp	r3, #5
 80039c2:	d10c      	bne.n	80039de <HAL_RCC_OscConfig+0x4aa>
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ce:	6353      	str	r3, [r2, #52]	; 0x34
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039da:	6353      	str	r3, [r2, #52]	; 0x34
 80039dc:	e00b      	b.n	80039f6 <HAL_RCC_OscConfig+0x4c2>
 80039de:	4b15      	ldr	r3, [pc, #84]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	4a14      	ldr	r2, [pc, #80]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039e8:	6353      	str	r3, [r2, #52]	; 0x34
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	4a11      	ldr	r2, [pc, #68]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 80039f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039f4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d015      	beq.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fe:	f7fd f9c3 	bl	8000d88 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a06:	f7fd f9bf 	bl	8000d88 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e0b2      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0ee      	beq.n	8003a06 <HAL_RCC_OscConfig+0x4d2>
 8003a28:	e023      	b.n	8003a72 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd f9ad 	bl	8000d88 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a30:	e019      	b.n	8003a66 <HAL_RCC_OscConfig+0x532>
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	08004c88 	.word	0x08004c88
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004
 8003a44:	42470020 	.word	0x42470020
 8003a48:	42470680 	.word	0x42470680
 8003a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a50:	f7fd f99a 	bl	8000d88 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e08d      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a66:	4b49      	ldr	r3, [pc, #292]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ee      	bne.n	8003a50 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a72:	7ffb      	ldrb	r3, [r7, #31]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d105      	bne.n	8003a84 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a78:	4b44      	ldr	r3, [pc, #272]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	4a43      	ldr	r2, [pc, #268]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003a7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d079      	beq.n	8003b80 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d056      	beq.n	8003b40 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d13b      	bne.n	8003b12 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCC_OscConfig+0x65c>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd f972 	bl	8000d88 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd f96e 	bl	8000d88 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e063      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aba:	4b34      	ldr	r3, [pc, #208]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	4319      	orrs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	430b      	orrs	r3, r1
 8003ade:	492b      	ldr	r1, [pc, #172]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b2a      	ldr	r3, [pc, #168]	; (8003b90 <HAL_RCC_OscConfig+0x65c>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7fd f94d 	bl	8000d88 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd f949 	bl	8000d88 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e03e      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x5be>
 8003b10:	e036      	b.n	8003b80 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_RCC_OscConfig+0x65c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fd f936 	bl	8000d88 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fd f932 	bl	8000d88 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e027      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x5ec>
 8003b3e:	e01f      	b.n	8003b80 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e01a      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_RCC_OscConfig+0x658>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d106      	bne.n	8003b7c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	42470060 	.word	0x42470060

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e11a      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b8f      	ldr	r3, [pc, #572]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d919      	bls.n	8003bea <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x34>
 8003bbc:	4b8a      	ldr	r3, [pc, #552]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a89      	ldr	r2, [pc, #548]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003bc2:	f043 0304 	orr.w	r3, r3, #4
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b87      	ldr	r3, [pc, #540]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 0201 	bic.w	r2, r3, #1
 8003bd0:	4985      	ldr	r1, [pc, #532]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd8:	4b83      	ldr	r3, [pc, #524]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f9      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf6:	4b7d      	ldr	r3, [pc, #500]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	497a      	ldr	r1, [pc, #488]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 808e 	beq.w	8003d32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c1e:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d121      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0d7      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c36:	4b6d      	ldr	r3, [pc, #436]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d115      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0cb      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c4e:	4b67      	ldr	r3, [pc, #412]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0bf      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c5e:	4b63      	ldr	r3, [pc, #396]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e0b7      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	4b5f      	ldr	r3, [pc, #380]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f023 0203 	bic.w	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	495c      	ldr	r1, [pc, #368]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c80:	f7fd f882 	bl	8000d88 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d112      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fd f87a 	bl	8000d88 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e09b      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d1ee      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xfc>
 8003cb2:	e03e      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d112      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cbe:	f7fd f863 	bl	8000d88 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e084      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cd4:	4b45      	ldr	r3, [pc, #276]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d1ee      	bne.n	8003cbe <HAL_RCC_ClockConfig+0x12a>
 8003ce0:	e027      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d11d      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fd f84c 	bl	8000d88 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e06d      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d02:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d1ee      	bne.n	8003cec <HAL_RCC_ClockConfig+0x158>
 8003d0e:	e010      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd f83a 	bl	8000d88 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e05b      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1ee      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d219      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x1be>
 8003d46:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	4923      	ldr	r1, [pc, #140]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b21      	ldr	r3, [pc, #132]	; (8003de8 <HAL_RCC_ClockConfig+0x254>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e034      	b.n	8003dde <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4917      	ldr	r1, [pc, #92]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490f      	ldr	r1, [pc, #60]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f823 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <HAL_RCC_ClockConfig+0x258>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490b      	ldr	r1, [pc, #44]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dce:	4b0a      	ldr	r3, [pc, #40]	; (8003df8 <HAL_RCC_ClockConfig+0x264>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fc ff8c 	bl	8000cf0 <HAL_InitTick>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023c00 	.word	0x40023c00
 8003dec:	40023800 	.word	0x40023800
 8003df0:	08004c88 	.word	0x08004c88
 8003df4:	20000000 	.word	0x20000000
 8003df8:	20000004 	.word	0x20000004

08003dfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x30>
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d87c      	bhi.n	8003f10 <HAL_RCC_GetSysClockFreq+0x114>
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x24>
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x2a>
 8003e1e:	e077      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x140>)
 8003e22:	613b      	str	r3, [r7, #16]
      break;
 8003e24:	e082      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e26:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x144>)
 8003e28:	613b      	str	r3, [r7, #16]
      break;
 8003e2a:	e07f      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	0c9b      	lsrs	r3, r3, #18
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x148>)
 8003e36:	5cd3      	ldrb	r3, [r2, r3]
 8003e38:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	0d9b      	lsrs	r3, r3, #22
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e46:	4b3c      	ldr	r3, [pc, #240]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01a      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	461a      	mov	r2, r3
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	4939      	ldr	r1, [pc, #228]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x144>)
 8003e5c:	fb01 f003 	mul.w	r0, r1, r3
 8003e60:	2100      	movs	r1, #0
 8003e62:	fb01 f102 	mul.w	r1, r1, r2
 8003e66:	1844      	adds	r4, r0, r1
 8003e68:	4935      	ldr	r1, [pc, #212]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x144>)
 8003e6a:	fba2 0101 	umull	r0, r1, r2, r1
 8003e6e:	1863      	adds	r3, r4, r1
 8003e70:	4619      	mov	r1, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	f7fc f97f 	bl	800017c <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4613      	mov	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e040      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	461c      	mov	r4, r3
 8003e8c:	f04f 0500 	mov.w	r5, #0
 8003e90:	4620      	mov	r0, r4
 8003e92:	4629      	mov	r1, r5
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	014b      	lsls	r3, r1, #5
 8003e9e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ea2:	0142      	lsls	r2, r0, #5
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	1b00      	subs	r0, r0, r4
 8003eaa:	eb61 0105 	sbc.w	r1, r1, r5
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	018b      	lsls	r3, r1, #6
 8003eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ebc:	0182      	lsls	r2, r0, #6
 8003ebe:	1a12      	subs	r2, r2, r0
 8003ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	00d9      	lsls	r1, r3, #3
 8003ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ed2:	00d0      	lsls	r0, r2, #3
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	1912      	adds	r2, r2, r4
 8003eda:	eb45 0303 	adc.w	r3, r5, r3
 8003ede:	f04f 0000 	mov.w	r0, #0
 8003ee2:	f04f 0100 	mov.w	r1, #0
 8003ee6:	0299      	lsls	r1, r3, #10
 8003ee8:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003eec:	0290      	lsls	r0, r2, #10
 8003eee:	4602      	mov	r2, r0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	f7fc f93d 	bl	800017c <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4613      	mov	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	613b      	str	r3, [r7, #16]
      break;
 8003f0e:	e00d      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0b5b      	lsrs	r3, r3, #13
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	613b      	str	r3, [r7, #16]
      break;
 8003f2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2c:	693b      	ldr	r3, [r7, #16]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bdb0      	pop	{r4, r5, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	016e3600 	.word	0x016e3600
 8003f44:	08004c7c 	.word	0x08004c7c

08003f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f4c:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff2 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08004c98 	.word	0x08004c98

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffde 	bl	8003f48 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0adb      	lsrs	r3, r3, #11
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08004c98 	.word	0x08004c98

08003fac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fb8:	4b29      	ldr	r3, [pc, #164]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d12c      	bne.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fc4:	4b26      	ldr	r3, [pc, #152]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e016      	b.n	800400a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6253      	str	r3, [r2, #36]	; 0x24
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003ffc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	4a17      	ldr	r2, [pc, #92]	; (8004060 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004010:	d105      	bne.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004018:	d101      	bne.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800401a:	2301      	movs	r3, #1
 800401c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d105      	bne.n	8004030 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	f043 0304 	orr.w	r3, r3, #4
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f023 0201 	bic.w	r2, r3, #1
 8004038:	490b      	ldr	r1, [pc, #44]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40007000 	.word	0x40007000
 8004068:	40023c00 	.word	0x40023c00

0800406c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e06e      	b.n	800415c <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408e:	d009      	beq.n	80040a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	61da      	str	r2, [r3, #28]
 8004096:	e005      	b.n	80040a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fce4 	bl	8000a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040ec:	431a      	orrs	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	ea42 0103 	orr.w	r1, r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	0c1a      	lsrs	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f002 0204 	and.w	r2, r2, #4
 800414a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10f      	bne.n	80041a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	4798      	blx	r3
    return;
 80041a6:	e0be      	b.n	8004326 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_SPI_IRQHandler+0x66>
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	09db      	lsrs	r3, r3, #7
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d004      	beq.n	80041ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
    return;
 80041c8:	e0ad      	b.n	8004326 <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_SPI_IRQHandler+0x80>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80a1 	beq.w	8004326 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 809a 	beq.w	8004326 <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	099b      	lsrs	r3, r3, #6
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d023      	beq.n	8004246 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b03      	cmp	r3, #3
 8004208:	d011      	beq.n	800422e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420e:	f043 0204 	orr.w	r2, r3, #4
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	e00b      	b.n	8004246 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
        return;
 8004244:	e06f      	b.n	8004326 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d014      	beq.n	800427c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	2b00      	cmp	r3, #0
 8004282:	d04f      	beq.n	8004324 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004292:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <HAL_SPI_IRQHandler+0x14c>
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d034      	beq.n	800431a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0203 	bic.w	r2, r2, #3
 80042be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d011      	beq.n	80042ec <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_SPI_IRQHandler+0x1c8>)
 80042ce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd f941 	bl	800155c <HAL_DMA_Abort_IT>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	4a0c      	ldr	r2, [pc, #48]	; (800432c <HAL_SPI_IRQHandler+0x1c8>)
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	4618      	mov	r0, r3
 8004302:	f7fd f92b 	bl	800155c <HAL_DMA_Abort_IT>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004318:	e003      	b.n	8004322 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f808 	bl	8004330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004320:	e000      	b.n	8004324 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004322:	bf00      	nop
    return;
 8004324:	bf00      	nop
  }
}
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	08004343 	.word	0x08004343

08004330 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff ffe7 	bl	8004330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e03f      	b.n	80043fc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d106      	bne.n	8004396 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fc fbc7 	bl	8000b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	; 0x24
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb48 	bl	8004a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08a      	sub	sp, #40	; 0x28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004424:	2300      	movs	r3, #0
 8004426:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10d      	bne.n	8004456 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_UART_IRQHandler+0x52>
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f003 0320 	and.w	r3, r3, #32
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa4f 	bl	80048f2 <UART_Receive_IT>
      return;
 8004454:	e17b      	b.n	800474e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80b1 	beq.w	80045c0 <HAL_UART_IRQHandler+0x1bc>
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_UART_IRQHandler+0x70>
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80a6 	beq.w	80045c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_UART_IRQHandler+0x90>
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_UART_IRQHandler+0xb0>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f043 0202 	orr.w	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_UART_IRQHandler+0xd0>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f043 0204 	orr.w	r2, r3, #4
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00f      	beq.n	80044fe <HAL_UART_IRQHandler+0xfa>
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <HAL_UART_IRQHandler+0xee>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0208 	orr.w	r2, r3, #8
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 811e 	beq.w	8004744 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_UART_IRQHandler+0x11e>
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9e8 	bl	80048f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_UART_IRQHandler+0x146>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d031      	beq.n	80045ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f92a 	bl	80047a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d123      	bne.n	80045a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800456c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d013      	beq.n	800459e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	4a76      	ldr	r2, [pc, #472]	; (8004754 <HAL_UART_IRQHandler+0x350>)
 800457c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	4618      	mov	r0, r3
 8004584:	f7fc ffea 	bl	800155c <HAL_DMA_Abort_IT>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d016      	beq.n	80045bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004598:	4610      	mov	r0, r2
 800459a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	e00e      	b.n	80045bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8ec 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	e00a      	b.n	80045bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8e8 	bl	800477c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e006      	b.n	80045bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8e4 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045ba:	e0c3      	b.n	8004744 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	bf00      	nop
    return;
 80045be:	e0c1      	b.n	8004744 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	f040 80a1 	bne.w	800470c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 809b 	beq.w	800470c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 8095 	beq.w	800470c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b40      	cmp	r3, #64	; 0x40
 8004604:	d14e      	bne.n	80046a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004610:	8a3b      	ldrh	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8098 	beq.w	8004748 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800461c:	8a3a      	ldrh	r2, [r7, #16]
 800461e:	429a      	cmp	r2, r3
 8004620:	f080 8092 	bcs.w	8004748 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8a3a      	ldrh	r2, [r7, #16]
 8004628:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b20      	cmp	r3, #32
 8004632:	d02b      	beq.n	800468c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004642:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004662:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0210 	bic.w	r2, r2, #16
 8004680:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc ff2b 	bl	80014e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004694:	b29b      	uxth	r3, r3
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	b29b      	uxth	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f876 	bl	800478e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046a2:	e051      	b.n	8004748 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d047      	beq.n	800474c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046bc:	8a7b      	ldrh	r3, [r7, #18]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0210 	bic.w	r2, r2, #16
 80046fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004700:	8a7b      	ldrh	r3, [r7, #18]
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f842 	bl	800478e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800470a:	e01f      	b.n	800474c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_UART_IRQHandler+0x324>
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f87f 	bl	8004824 <UART_Transmit_IT>
    return;
 8004726:	e012      	b.n	800474e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00d      	beq.n	800474e <HAL_UART_IRQHandler+0x34a>
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8c0 	bl	80048c2 <UART_EndTransmit_IT>
    return;
 8004742:	e004      	b.n	800474e <HAL_UART_IRQHandler+0x34a>
    return;
 8004744:	bf00      	nop
 8004746:	e002      	b.n	800474e <HAL_UART_IRQHandler+0x34a>
      return;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_UART_IRQHandler+0x34a>
      return;
 800474c:	bf00      	nop
  }
}
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	080047fd 	.word	0x080047fd

08004758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80047ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d107      	bne.n	80047e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0210 	bic.w	r2, r2, #16
 80047e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f7ff ffb0 	bl	800477c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b21      	cmp	r3, #33	; 0x21
 8004836:	d13e      	bne.n	80048b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d114      	bne.n	800486c <UART_Transmit_IT+0x48>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d110      	bne.n	800486c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800485e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	1c9a      	adds	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]
 800486a:	e008      	b.n	800487e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	1c59      	adds	r1, r3, #1
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6211      	str	r1, [r2, #32]
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29b      	uxth	r3, r3
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4619      	mov	r1, r3
 800488c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e000      	b.n	80048b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
  }
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b082      	sub	sp, #8
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff38 	bl	8004758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b22      	cmp	r3, #34	; 0x22
 8004904:	f040 8099 	bne.w	8004a3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004910:	d117      	bne.n	8004942 <UART_Receive_IT+0x50>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d113      	bne.n	8004942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004930:	b29a      	uxth	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
 8004940:	e026      	b.n	8004990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004954:	d007      	beq.n	8004966 <UART_Receive_IT+0x74>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <UART_Receive_IT+0x82>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d106      	bne.n	8004974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	e008      	b.n	8004986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004980:	b2da      	uxtb	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29b      	uxth	r3, r3
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	4619      	mov	r1, r3
 800499e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d148      	bne.n	8004a36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0220 	bic.w	r2, r2, #32
 80049b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0201 	bic.w	r2, r2, #1
 80049d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d123      	bne.n	8004a2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0210 	bic.w	r2, r2, #16
 80049f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d10a      	bne.n	8004a1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff feb2 	bl	800478e <HAL_UARTEx_RxEventCallback>
 8004a2a:	e002      	b.n	8004a32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7ff fe9c 	bl	800476a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e002      	b.n	8004a3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e000      	b.n	8004a3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
  }
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a84:	f023 030c 	bic.w	r3, r3, #12
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a55      	ldr	r2, [pc, #340]	; (8004c04 <UART_SetConfig+0x1c0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d103      	bne.n	8004aba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ab2:	f7ff fa67 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	e002      	b.n	8004ac0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004aba:	f7ff fa4f 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8004abe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d14c      	bne.n	8004b64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	4a49      	ldr	r2, [pc, #292]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	0119      	lsls	r1, r3, #4
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009a      	lsls	r2, r3, #2
 8004af4:	441a      	add	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b00:	4b41      	ldr	r3, [pc, #260]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b02:	fba3 0302 	umull	r0, r3, r3, r2
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	2064      	movs	r0, #100	; 0x64
 8004b0a:	fb00 f303 	mul.w	r3, r0, r3
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	3332      	adds	r3, #50	; 0x32
 8004b14:	4a3c      	ldr	r2, [pc, #240]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b16:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b22:	4419      	add	r1, r3
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b3a:	4b33      	ldr	r3, [pc, #204]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b3c:	fba3 0302 	umull	r0, r3, r3, r2
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	2064      	movs	r0, #100	; 0x64
 8004b44:	fb00 f303 	mul.w	r3, r0, r3
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3332      	adds	r3, #50	; 0x32
 8004b4e:	4a2e      	ldr	r2, [pc, #184]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	f003 0207 	and.w	r2, r3, #7
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	440a      	add	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b62:	e04a      	b.n	8004bfa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009a      	lsls	r2, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	0119      	lsls	r1, r3, #4
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009a      	lsls	r2, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b9a:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004b9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	2064      	movs	r0, #100	; 0x64
 8004ba4:	fb00 f303 	mul.w	r3, r0, r3
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	3332      	adds	r3, #50	; 0x32
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bba:	4419      	add	r1, r3
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd2:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004bd4:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2064      	movs	r0, #100	; 0x64
 8004bdc:	fb00 f303 	mul.w	r3, r0, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <UART_SetConfig+0x1c4>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 020f 	and.w	r2, r3, #15
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	609a      	str	r2, [r3, #8]
}
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40013800 	.word	0x40013800
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <__libc_init_array>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	2600      	movs	r6, #0
 8004c10:	4d0c      	ldr	r5, [pc, #48]	; (8004c44 <__libc_init_array+0x38>)
 8004c12:	4c0d      	ldr	r4, [pc, #52]	; (8004c48 <__libc_init_array+0x3c>)
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	42a6      	cmp	r6, r4
 8004c1a:	d109      	bne.n	8004c30 <__libc_init_array+0x24>
 8004c1c:	f000 f822 	bl	8004c64 <_init>
 8004c20:	2600      	movs	r6, #0
 8004c22:	4d0a      	ldr	r5, [pc, #40]	; (8004c4c <__libc_init_array+0x40>)
 8004c24:	4c0a      	ldr	r4, [pc, #40]	; (8004c50 <__libc_init_array+0x44>)
 8004c26:	1b64      	subs	r4, r4, r5
 8004c28:	10a4      	asrs	r4, r4, #2
 8004c2a:	42a6      	cmp	r6, r4
 8004c2c:	d105      	bne.n	8004c3a <__libc_init_array+0x2e>
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c34:	4798      	blx	r3
 8004c36:	3601      	adds	r6, #1
 8004c38:	e7ee      	b.n	8004c18 <__libc_init_array+0xc>
 8004c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3e:	4798      	blx	r3
 8004c40:	3601      	adds	r6, #1
 8004c42:	e7f2      	b.n	8004c2a <__libc_init_array+0x1e>
 8004c44:	08004ca8 	.word	0x08004ca8
 8004c48:	08004ca8 	.word	0x08004ca8
 8004c4c:	08004ca8 	.word	0x08004ca8
 8004c50:	08004cac 	.word	0x08004cac

08004c54 <memset>:
 8004c54:	4603      	mov	r3, r0
 8004c56:	4402      	add	r2, r0
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d100      	bne.n	8004c5e <memset+0xa>
 8004c5c:	4770      	bx	lr
 8004c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c62:	e7f9      	b.n	8004c58 <memset+0x4>

08004c64 <_init>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr

08004c70 <_fini>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr
