
DiscoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003834  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003adc  08003adc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08003b54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003b54  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bdb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e20  00000000  00000000  00029c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0002ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000768  00000000  00000000  0002c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000259a  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008dac  00000000  00000000  0002ef92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083509  00000000  00000000  00037d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bb247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b0  00000000  00000000  000bb29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08003958 	.word	0x08003958

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08003958 	.word	0x08003958

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800047c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000480:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d013      	beq.n	80004b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800048c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000490:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000494:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000498:	2b00      	cmp	r3, #0
 800049a:	d00b      	beq.n	80004b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800049c:	e000      	b.n	80004a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800049e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f9      	beq.n	800049e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	b2d2      	uxtb	r2, r2
 80004b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	int i = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
	for (i=0; i < len; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
 80004d4:	e009      	b.n	80004ea <_write+0x2a>
		ITM_SendChar((*ptr++));
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	1c5a      	adds	r2, r3, #1
 80004da:	60ba      	str	r2, [r7, #8]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffc8 	bl	8000474 <ITM_SendChar>
	for (i=0; i < len; i++)
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	3301      	adds	r3, #1
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dbf1      	blt.n	80004d6 <_write+0x16>
	return len;
 80004f2:	687b      	ldr	r3, [r7, #4]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <UART_helper>:
/* USER CODE END 0 */

void UART_helper(uint8_t *msg) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, msg, sizeof(msg), 100);
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	2204      	movs	r2, #4
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <UART_helper+0x24>)
 800050c:	f001 fbdf 	bl	8001cce <HAL_UART_Transmit>
  HAL_Delay(500);
 8000510:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000514:	f000 fac4 	bl	8000aa0 <HAL_Delay>
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000a0 	.word	0x200000a0

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b096      	sub	sp, #88	; 0x58
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fa4a 	bl	80009c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f85f 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8cf 	bl	80006d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000536:	f000 f8a3 	bl	8000680 <MX_USART1_UART_Init>
//  ESP_Init("Cloudwifi-167-504-P", "CWAE1923", "10.20.101.219");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t MSG[35] = {'\0'};
 800053a:	2300      	movs	r3, #0
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
 800053e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000542:	221f      	movs	r2, #31
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f8cc 	bl	80026e4 <memset>
  uint8_t X = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  const char PSWD[] = "CWAE1923\r\n";
 8000552:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <main+0xb0>)
 8000554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000558:	ca07      	ldmia	r2, {r0, r1, r2}
 800055a:	c303      	stmia	r3!, {r0, r1}
 800055c:	801a      	strh	r2, [r3, #0]
 800055e:	3302      	adds	r3, #2
 8000560:	0c12      	lsrs	r2, r2, #16
 8000562:	701a      	strb	r2, [r3, #0]
  const char SSID[] = "Cloudwifi-167-504-P\r\n";
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <main+0xb4>)
 8000566:	f107 0410 	add.w	r4, r7, #16
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000574:	6020      	str	r0, [r4, #0]
 8000576:	3404      	adds	r4, #4
 8000578:	8021      	strh	r1, [r4, #0]
  const char IP[] = "34.135.184.1\r\n";
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <main+0xb8>)
 800057c:	463c      	mov	r4, r7
 800057e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000580:	c407      	stmia	r4!, {r0, r1, r2}
 8000582:	8023      	strh	r3, [r4, #0]
 8000584:	3402      	adds	r4, #2
 8000586:	0c1b      	lsrs	r3, r3, #16
 8000588:	7023      	strb	r3, [r4, #0]

  printf("Trying to establish a connection to %s with SSID %s and password %s\r\n", IP, SSID, PSWD);
 800058a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058e:	f107 0210 	add.w	r2, r7, #16
 8000592:	4639      	mov	r1, r7
 8000594:	4812      	ldr	r0, [pc, #72]	; (80005e0 <main+0xbc>)
 8000596:	f002 f8ad 	bl	80026f4 <iprintf>
  UART_helper("AT+RST\r\n");
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <main+0xc0>)
 800059c:	f7ff ffae 	bl	80004fc <UART_helper>
  // Setup wifi connection

  while (1)
  {
    /* USER CODE END WHILE */
	  sprintf(MSG, "Hello! Tracing X = %d\r\n", X);
 80005a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80005a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005a8:	490f      	ldr	r1, [pc, #60]	; (80005e8 <main+0xc4>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 f8ba 	bl	8002724 <siprintf>
	  UART_helper(MSG);
 80005b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffa1 	bl	80004fc <UART_helper>
	  X++;
 80005ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80005be:	3301      	adds	r3, #1
 80005c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  printf("X: %d\r\n", X);
 80005c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80005c8:	4619      	mov	r1, r3
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0xc8>)
 80005cc:	f002 f892 	bl	80026f4 <iprintf>
	  sprintf(MSG, "Hello! Tracing X = %d\r\n", X);
 80005d0:	e7e6      	b.n	80005a0 <main+0x7c>
 80005d2:	bf00      	nop
 80005d4:	080039e4 	.word	0x080039e4
 80005d8:	080039f0 	.word	0x080039f0
 80005dc:	08003a08 	.word	0x08003a08
 80005e0:	08003970 	.word	0x08003970
 80005e4:	080039b8 	.word	0x080039b8
 80005e8:	080039c4 	.word	0x080039c4
 80005ec:	080039dc 	.word	0x080039dc

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b092      	sub	sp, #72	; 0x48
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2234      	movs	r2, #52	; 0x34
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 f870 	bl	80026e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <SystemClock_Config+0x8c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <SystemClock_Config+0x8c>)
 800061c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000620:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000622:	2310      	movs	r3, #16
 8000624:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000626:	2301      	movs	r3, #1
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800062e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd5d 	bl	80010fc <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000648:	f000 f85a 	bl	8000700 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f001 f879 	bl	800175c <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000670:	f000 f846 	bl	8000700 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3748      	adds	r7, #72	; 0x48
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40007000 	.word	0x40007000

08000680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000686:	4a12      	ldr	r2, [pc, #72]	; (80006d0 <MX_USART1_UART_Init+0x50>)
 8000688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_USART1_UART_Init+0x4c>)
 80006b8:	f001 fabc 	bl	8001c34 <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006c2:	f000 f81d 	bl	8000700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000a0 	.word	0x200000a0
 80006d0:	40013800 	.word	0x40013800

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_GPIO_Init+0x28>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <MX_GPIO_Init+0x28>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <MX_GPIO_Init+0x28>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	40023800 	.word	0x40023800

08000700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000704:	b672      	cpsid	i
}
 8000706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000708:	e7fe      	b.n	8000708 <Error_Handler+0x8>
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <HAL_MspInit+0x58>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	4a13      	ldr	r2, [pc, #76]	; (8000764 <HAL_MspInit+0x58>)
 8000718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800071c:	6253      	str	r3, [r2, #36]	; 0x24
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_MspInit+0x58>)
 8000720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_MspInit+0x58>)
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_MspInit+0x58>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6213      	str	r3, [r2, #32]
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_MspInit+0x58>)
 8000738:	6a1b      	ldr	r3, [r3, #32]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_MspInit+0x58>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_MspInit+0x58>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6253      	str	r3, [r2, #36]	; 0x24
 800074e:	4b05      	ldr	r3, [pc, #20]	; (8000764 <HAL_MspInit+0x58>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <HAL_UART_MspInit+0x8c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d130      	bne.n	80007ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <HAL_UART_MspInit+0x90>)
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	4a1a      	ldr	r2, [pc, #104]	; (80007f8 <HAL_UART_MspInit+0x90>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6213      	str	r3, [r2, #32]
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <HAL_UART_MspInit+0x90>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_MspInit+0x90>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <HAL_UART_MspInit+0x90>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_UART_MspInit+0x90>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|USART1_RX_Pin;
 80007ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007cc:	2307      	movs	r3, #7
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4809      	ldr	r0, [pc, #36]	; (80007fc <HAL_UART_MspInit+0x94>)
 80007d8:	f000 fb10 	bl	8000dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2025      	movs	r0, #37	; 0x25
 80007e2:	f000 fa56 	bl	8000c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007e6:	2025      	movs	r0, #37	; 0x25
 80007e8:	f000 fa6f 	bl	8000cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000

08000800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <NMI_Handler+0x4>

08000806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler+0x4>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000816:	e7fe      	b.n	8000816 <BusFault_Handler+0x4>

08000818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler+0x4>

0800081e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000846:	f000 f90f 	bl	8000a68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <USART1_IRQHandler+0x10>)
 8000856:	f001 facd 	bl	8001df4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200000a0 	.word	0x200000a0

08000864 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e00a      	b.n	800088c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000876:	f3af 8000 	nop.w
 800087a:	4601      	mov	r1, r0
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	b2ca      	uxtb	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf0      	blt.n	8000876 <_read+0x12>
	}

return len;
 8000894:	687b      	ldr	r3, [r7, #4]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <_close>:
	}
	return len;
}

int _close(int file)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
	return -1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c4:	605a      	str	r2, [r3, #4]
	return 0;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <_isatty>:

int _isatty(int file)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	return 1;
 80008da:	2301      	movs	r3, #1
}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
	return 0;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
	...

08000900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <_sbrk+0x5c>)
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <_sbrk+0x60>)
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <_sbrk+0x64>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <_sbrk+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <_sbrk+0x64>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	429a      	cmp	r2, r3
 800092e:	d207      	bcs.n	8000940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000930:	f001 feae 	bl	8002690 <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	220c      	movs	r2, #12
 8000938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	e009      	b.n	8000954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000946:	4b07      	ldr	r3, [pc, #28]	; (8000964 <_sbrk+0x64>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <_sbrk+0x64>)
 8000950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20008000 	.word	0x20008000
 8000960:	00000400 	.word	0x00000400
 8000964:	2000008c 	.word	0x2000008c
 8000968:	200000f8 	.word	0x200000f8

0800096c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	; (80009b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	; (80009bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800099e:	f7ff ffe5 	bl	800096c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f001 fe7b 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fdbd 	bl	8000524 <main>
  bx lr
 80009aa:	4770      	bx	lr
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009b4:	08003ae4 	.word	0x08003ae4
  ldr r2, =_sbss
 80009b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009bc:	200000f8 	.word	0x200000f8

080009c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_IRQHandler>

080009c2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f955 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f80e 	bl	80009f4 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	e001      	b.n	80009e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e4:	f7ff fe92 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_InitTick+0x68>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d022      	beq.n	8000a4e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_InitTick+0x6c>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_InitTick+0x68>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f962 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10f      	bne.n	8000a48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b0f      	cmp	r3, #15
 8000a2c:	d809      	bhi.n	8000a42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	f04f 30ff 	mov.w	r0, #4294967295
 8000a36:	f000 f92c 	bl	8000c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_InitTick+0x70>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e007      	b.n	8000a52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e004      	b.n	8000a52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e001      	b.n	8000a52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000004 	.word	0x20000004

08000a68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x20>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_IncTick+0x1c>)
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000e4 	.word	0x200000e4
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <HAL_GetTick+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	200000e4 	.word	0x200000e4

08000aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa8:	f7ff fff0 	bl	8000a8c <HAL_GetTick>
 8000aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d004      	beq.n	8000ac4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_Delay+0x40>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac4:	bf00      	nop
 8000ac6:	f7ff ffe1 	bl	8000a8c <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d8f7      	bhi.n	8000ac6 <HAL_Delay+0x26>
  {
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_SetPriorityGrouping>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b00:	4013      	ands	r3, r2
 8000b02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <__NVIC_SetPriorityGrouping+0x44>)
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_GetPriorityGrouping>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <__NVIC_GetPriorityGrouping+0x18>)
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	f003 0307 	and.w	r3, r3, #7
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_EnableIRQ>:
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	db0b      	blt.n	8000b72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	f003 021f 	and.w	r2, r3, #31
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <__NVIC_EnableIRQ+0x34>)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	095b      	lsrs	r3, r3, #5
 8000b68:	2001      	movs	r0, #1
 8000b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Config>:
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c48:	d301      	bcc.n	8000c4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00f      	b.n	8000c6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <SysTick_Config+0x40>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c56:	210f      	movs	r1, #15
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f7ff ff90 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SysTick_Config+0x40>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c66:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <SysTick_Config+0x40>)
 8000c68:	2207      	movs	r2, #7
 8000c6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	e000e010 	.word	0xe000e010

08000c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ff2d 	bl	8000ae4 <__NVIC_SetPriorityGrouping>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60b9      	str	r1, [r7, #8]
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff42 	bl	8000b2c <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff90 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5f 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff35 	bl	8000b48 <__NVIC_EnableIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffa2 	bl	8000c38 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d008      	beq.n	8000d28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2204      	movs	r2, #4
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
 8000d26:	e022      	b.n	8000d6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 020e 	bic.w	r2, r2, #14
 8000d36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 021c 	and.w	r2, r3, #28
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d54:	2101      	movs	r1, #1
 8000d56:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d005      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2204      	movs	r2, #4
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	e029      	b.n	8000df0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f022 020e 	bic.w	r2, r2, #14
 8000daa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 021c 	and.w	r2, r3, #28
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc8:	2101      	movs	r1, #1
 8000dca:	fa01 f202 	lsl.w	r2, r1, r2
 8000dce:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	4798      	blx	r3
    }
  }
  return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e12:	e154      	b.n	80010be <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8146 	beq.w	80010b8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f003 0201 	and.w	r2, r3, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0203 	and.w	r2, r3, #3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80a0 	beq.w	80010b8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6213      	str	r3, [r2, #32]
 8000f84:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x2e0>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f90:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d019      	beq.n	8000ff0 <HAL_GPIO_Init+0x1f4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x2ec>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1f0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2f0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1ec>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2f4>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e8>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a47      	ldr	r2, [pc, #284]	; (80010f4 <HAL_GPIO_Init+0x2f8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1e4>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e008      	b.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x1f6>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001002:	4937      	ldr	r1, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x2e4>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b39      	ldr	r3, [pc, #228]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001034:	4a30      	ldr	r2, [pc, #192]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800103a:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800105e:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_GPIO_Init+0x2fc>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f aea3 	bne.w	8000e14 <HAL_GPIO_Init+0x18>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010400 	.word	0x40010400

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e31d      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110e:	4b94      	ldr	r3, [pc, #592]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001118:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001120:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d07b      	beq.n	8001226 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d006      	beq.n	8001142 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d10f      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4b87      	ldr	r3, [pc, #540]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06a      	beq.n	8001224 <HAL_RCC_OscConfig+0x128>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d166      	bne.n	8001224 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e2f7      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d106      	bne.n	8001170 <HAL_RCC_OscConfig+0x74>
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e02d      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x96>
 8001178:	4b79      	ldr	r3, [pc, #484]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a78      	ldr	r2, [pc, #480]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a75      	ldr	r2, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	e01c      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b05      	cmp	r3, #5
 8001198:	d10c      	bne.n	80011b4 <HAL_RCC_OscConfig+0xb8>
 800119a:	4b71      	ldr	r3, [pc, #452]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a70      	ldr	r2, [pc, #448]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b6e      	ldr	r3, [pc, #440]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6d      	ldr	r2, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e00b      	b.n	80011cc <HAL_RCC_OscConfig+0xd0>
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a69      	ldr	r2, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b67      	ldr	r3, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a66      	ldr	r2, [pc, #408]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc5a 	bl	8000a8c <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fc56 	bl	8000a8c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e2ad      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ee:	4b5c      	ldr	r3, [pc, #368]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d0f0      	beq.n	80011dc <HAL_RCC_OscConfig+0xe0>
 80011fa:	e014      	b.n	8001226 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc46 	bl	8000a8c <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001204:	f7ff fc42 	bl	8000a8c <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b64      	cmp	r3, #100	; 0x64
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e299      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001216:	4b52      	ldr	r3, [pc, #328]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x108>
 8001222:	e000      	b.n	8001226 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d05a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	d119      	bne.n	8001272 <HAL_RCC_OscConfig+0x176>
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d116      	bne.n	8001272 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x160>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e276      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	493d      	ldr	r1, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001270:	e03a      	b.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d020      	beq.n	80012bc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_RCC_OscConfig+0x268>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fc04 	bl	8000a8c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc00 	bl	8000a8c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e257      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800129a:	4b31      	ldr	r3, [pc, #196]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	492a      	ldr	r1, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	604b      	str	r3, [r1, #4]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_RCC_OscConfig+0x268>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fbe3 	bl	8000a8c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fbdf 	bl	8000a8c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e236      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80b8 	beq.w	8001466 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d170      	bne.n	80013de <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001304:	2b00      	cmp	r3, #0
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x218>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e21a      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001320:	429a      	cmp	r2, r3
 8001322:	d921      	bls.n	8001368 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fc23 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e208      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	4906      	ldr	r1, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	4901      	ldr	r1, [pc, #4]	; (8001360 <HAL_RCC_OscConfig+0x264>)
 800135a:	4313      	orrs	r3, r2
 800135c:	604b      	str	r3, [r1, #4]
 800135e:	e020      	b.n	80013a2 <HAL_RCC_OscConfig+0x2a6>
 8001360:	40023800 	.word	0x40023800
 8001364:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001368:	4ba4      	ldr	r3, [pc, #656]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	49a1      	ldr	r1, [pc, #644]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137a:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	061b      	lsls	r3, r3, #24
 8001388:	499c      	ldr	r1, [pc, #624]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fbee 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e1d3      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	0b5b      	lsrs	r3, r3, #13
 80013a8:	3301      	adds	r3, #1
 80013aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013b2:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80013b4:	6892      	ldr	r2, [r2, #8]
 80013b6:	0912      	lsrs	r2, r2, #4
 80013b8:	f002 020f 	and.w	r2, r2, #15
 80013bc:	4990      	ldr	r1, [pc, #576]	; (8001600 <HAL_RCC_OscConfig+0x504>)
 80013be:	5c8a      	ldrb	r2, [r1, r2]
 80013c0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013c2:	4a90      	ldr	r2, [pc, #576]	; (8001604 <HAL_RCC_OscConfig+0x508>)
 80013c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013c6:	4b90      	ldr	r3, [pc, #576]	; (8001608 <HAL_RCC_OscConfig+0x50c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fb12 	bl	80009f4 <HAL_InitTick>
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d045      	beq.n	8001466 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	e1b5      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d029      	beq.n	800143a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <HAL_RCC_OscConfig+0x510>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb4e 	bl	8000a8c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f4:	f7ff fb4a 	bl	8000a8c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e1a1      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
 800141e:	4977      	ldr	r1, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001424:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	4972      	ldr	r1, [pc, #456]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800143a:	4b74      	ldr	r3, [pc, #464]	; (800160c <HAL_RCC_OscConfig+0x510>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fb24 	bl	8000a8c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001448:	f7ff fb20 	bl	8000a8c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e177      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d030      	beq.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x514>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fb04 	bl	8000a8c <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fb00 	bl	8000a8c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e157      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149a:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800149c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x38c>
 80014a6:	e015      	b.n	80014d4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_OscConfig+0x514>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff faed 	bl	8000a8c <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fae9 	bl	8000a8c <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e140      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014c8:	4b4c      	ldr	r3, [pc, #304]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80b5 	beq.w	800164c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b45      	ldr	r3, [pc, #276]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6253      	str	r3, [r2, #36]	; 0x24
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b3e      	ldr	r3, [pc, #248]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a3d      	ldr	r2, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fab1 	bl	8000a8c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff faad 	bl	8000a8c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e104      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x518>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x466>
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6353      	str	r3, [r2, #52]	; 0x34
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x488>
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	4a23      	ldr	r2, [pc, #140]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001574:	6353      	str	r3, [r2, #52]	; 0x34
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157a:	4a20      	ldr	r2, [pc, #128]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800157c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001580:	6353      	str	r3, [r2, #52]	; 0x34
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6353      	str	r3, [r2, #52]	; 0x34
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6353      	str	r3, [r2, #52]	; 0x34
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x4c2>
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6353      	str	r3, [r2, #52]	; 0x34
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b6:	4a11      	ldr	r2, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015bc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fa61 	bl	8000a8c <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fa5d 	bl	8000a8c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0b2      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x4d2>
 80015f0:	e023      	b.n	800163a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fa4b 	bl	8000a8c <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f8:	e019      	b.n	800162e <HAL_RCC_OscConfig+0x532>
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	08003a24 	.word	0x08003a24
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004
 800160c:	42470020 	.word	0x42470020
 8001610:	42470680 	.word	0x42470680
 8001614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff fa38 	bl	8000a8c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e08d      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ee      	bne.n	8001618 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001640:	4b44      	ldr	r3, [pc, #272]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	4a43      	ldr	r2, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	2b00      	cmp	r3, #0
 8001652:	d079      	beq.n	8001748 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2b0c      	cmp	r3, #12
 8001658:	d056      	beq.n	8001708 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	2b02      	cmp	r3, #2
 8001660:	d13b      	bne.n	80016da <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b3d      	ldr	r3, [pc, #244]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fa10 	bl	8000a8c <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001670:	f7ff fa0c 	bl	8000a8c <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e063      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001682:	4b34      	ldr	r3, [pc, #208]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	4319      	orrs	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a4:	430b      	orrs	r3, r1
 80016a6:	492b      	ldr	r1, [pc, #172]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f9eb 	bl	8000a8c <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff f9e7 	bl	8000a8c <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e03e      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x5be>
 80016d8:	e036      	b.n	8001748 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x65c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff f9d4 	bl	8000a8c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff f9d0 	bl	8000a8c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e027      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5ec>
 8001706:	e01f      	b.n	8001748 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e01a      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <HAL_RCC_OscConfig+0x658>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001724:	429a      	cmp	r2, r3
 8001726:	d10d      	bne.n	8001744 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d106      	bne.n	8001744 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e11a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d919      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_RCC_ClockConfig+0x34>
 8001784:	4b8a      	ldr	r3, [pc, #552]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a89      	ldr	r2, [pc, #548]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b87      	ldr	r3, [pc, #540]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 0201 	bic.w	r2, r3, #1
 8001798:	4985      	ldr	r1, [pc, #532]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a0:	4b83      	ldr	r3, [pc, #524]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0f9      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017be:	4b7d      	ldr	r3, [pc, #500]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	497a      	ldr	r1, [pc, #488]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 808e 	beq.w	80018fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017e6:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d121      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0d7      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d115      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0cb      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	4b67      	ldr	r3, [pc, #412]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d109      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e0bf      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001826:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0b7      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001836:	4b5f      	ldr	r3, [pc, #380]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 0203 	bic.w	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	495c      	ldr	r1, [pc, #368]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001844:	4313      	orrs	r3, r2
 8001846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f920 	bl	8000a8c <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d112      	bne.n	800187c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff f918 	bl	8000a8c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e09b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d1ee      	bne.n	8001858 <HAL_RCC_ClockConfig+0xfc>
 800187a:	e03e      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d112      	bne.n	80018aa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	e00a      	b.n	800189c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001886:	f7ff f901 	bl	8000a8c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e084      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800189c:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d1ee      	bne.n	8001886 <HAL_RCC_ClockConfig+0x12a>
 80018a8:	e027      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d11d      	bne.n	80018ee <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff f8ea 	bl	8000a8c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e06d      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	d1ee      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x158>
 80018d6:	e010      	b.n	80018fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f8d8 	bl	8000a8c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e05b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1ee      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018fa:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d219      	bcs.n	800193c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_ClockConfig+0x1be>
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a27      	ldr	r2, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0201 	bic.w	r2, r3, #1
 8001922:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_ClockConfig+0x254>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e034      	b.n	80019a6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4917      	ldr	r1, [pc, #92]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490f      	ldr	r1, [pc, #60]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f823 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_ClockConfig+0x258>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490b      	ldr	r1, [pc, #44]	; (80019b8 <HAL_RCC_ClockConfig+0x25c>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_RCC_ClockConfig+0x260>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x264>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f82a 	bl	80009f4 <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	72fb      	strb	r3, [r7, #11]

  return status;
 80019a4:	7afb      	ldrb	r3, [r7, #11]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08003a24 	.word	0x08003a24
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019ca:	4b4d      	ldr	r3, [pc, #308]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x13c>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d00c      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x30>
 80019da:	2b0c      	cmp	r3, #12
 80019dc:	d87c      	bhi.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x114>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x24>
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x2a>
 80019e6:	e077      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x140>)
 80019ea:	613b      	str	r3, [r7, #16]
      break;
 80019ec:	e082      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ee:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x144>)
 80019f0:	613b      	str	r3, [r7, #16]
      break;
 80019f2:	e07f      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	0c9b      	lsrs	r3, r3, #18
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	4a43      	ldr	r2, [pc, #268]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x148>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0d9b      	lsrs	r3, r3, #22
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0e:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01a      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	4939      	ldr	r1, [pc, #228]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a24:	fb01 f003 	mul.w	r0, r1, r3
 8001a28:	2100      	movs	r1, #0
 8001a2a:	fb01 f102 	mul.w	r1, r1, r2
 8001a2e:	1844      	adds	r4, r0, r1
 8001a30:	4935      	ldr	r1, [pc, #212]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a32:	fba2 0101 	umull	r0, r1, r2, r1
 8001a36:	1863      	adds	r3, r4, r1
 8001a38:	4619      	mov	r1, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f7fe fb9b 	bl	800017c <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e040      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	461c      	mov	r4, r3
 8001a54:	f04f 0500 	mov.w	r5, #0
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	014b      	lsls	r3, r1, #5
 8001a66:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a6a:	0142      	lsls	r2, r0, #5
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	4619      	mov	r1, r3
 8001a70:	1b00      	subs	r0, r0, r4
 8001a72:	eb61 0105 	sbc.w	r1, r1, r5
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	018b      	lsls	r3, r1, #6
 8001a80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a84:	0182      	lsls	r2, r0, #6
 8001a86:	1a12      	subs	r2, r2, r0
 8001a88:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	f04f 0100 	mov.w	r1, #0
 8001a94:	00d9      	lsls	r1, r3, #3
 8001a96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a9a:	00d0      	lsls	r0, r2, #3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	1912      	adds	r2, r2, r4
 8001aa2:	eb45 0303 	adc.w	r3, r5, r3
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0299      	lsls	r1, r3, #10
 8001ab0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ab4:	0290      	lsls	r0, r2, #10
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f7fe fb59 	bl	800017c <__aeabi_uldivmod>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4613      	mov	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
      break;
 8001ad6:	e00d      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0b5b      	lsrs	r3, r3, #13
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	613b      	str	r3, [r7, #16]
      break;
 8001af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af4:	693b      	ldr	r3, [r7, #16]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	016e3600 	.word	0x016e3600
 8001b0c:	08003a18 	.word	0x08003a18

08001b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff2 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08003a34 	.word	0x08003a34

08001b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b54:	4602      	mov	r2, r0
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	0adb      	lsrs	r3, r3, #11
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	4903      	ldr	r1, [pc, #12]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b62:	5ccb      	ldrb	r3, [r1, r3]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	08003a34 	.word	0x08003a34

08001b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d12c      	bne.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b98:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	e016      	b.n	8001bd2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6253      	str	r3, [r2, #36]	; 0x24
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001bc4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bd8:	d105      	bne.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001be0:	d101      	bne.n	8001be6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001be2:	2301      	movs	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001bec:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 0201 	bic.w	r2, r3, #1
 8001c00:	490b      	ldr	r1, [pc, #44]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d001      	beq.n	8001c1a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e03f      	b.n	8001cc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fd84 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2224      	movs	r2, #36	; 0x24
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fc25 	bl	80024c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b08a      	sub	sp, #40	; 0x28
 8001cd2:	af02      	add	r7, sp, #8
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b20      	cmp	r3, #32
 8001cec:	d17c      	bne.n	8001de8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_UART_Transmit+0x2c>
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e075      	b.n	8001dea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_UART_Transmit+0x3e>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e06e      	b.n	8001dea <HAL_UART_Transmit+0x11c>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2221      	movs	r2, #33	; 0x21
 8001d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d22:	f7fe feb3 	bl	8000a8c <HAL_GetTick>
 8001d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	88fa      	ldrh	r2, [r7, #6]
 8001d2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	88fa      	ldrh	r2, [r7, #6]
 8001d32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3c:	d108      	bne.n	8001d50 <HAL_UART_Transmit+0x82>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d104      	bne.n	8001d50 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	61bb      	str	r3, [r7, #24]
 8001d4e:	e003      	b.n	8001d58 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d60:	e02a      	b.n	8001db8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fa11 	bl	8002194 <UART_WaitOnFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e036      	b.n	8001dea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	3302      	adds	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	e007      	b.n	8001daa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	3301      	adds	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1cf      	bne.n	8001d62 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2140      	movs	r1, #64	; 0x40
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f9e1 	bl	8002194 <UART_WaitOnFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e006      	b.n	8001dea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10d      	bne.n	8001e46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_UART_IRQHandler+0x52>
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fa99 	bl	8002376 <UART_Receive_IT>
      return;
 8001e44:	e17b      	b.n	800213e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80b1 	beq.w	8001fb0 <HAL_UART_IRQHandler+0x1bc>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_UART_IRQHandler+0x70>
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80a6 	beq.w	8001fb0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_UART_IRQHandler+0x90>
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_UART_IRQHandler+0xb0>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f043 0202 	orr.w	r2, r3, #2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_UART_IRQHandler+0xd0>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebc:	f043 0204 	orr.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00f      	beq.n	8001eee <HAL_UART_IRQHandler+0xfa>
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d104      	bne.n	8001ee2 <HAL_UART_IRQHandler+0xee>
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f043 0208 	orr.w	r2, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 811e 	beq.w	8002134 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_UART_IRQHandler+0x11e>
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fa32 	bl	8002376 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <HAL_UART_IRQHandler+0x146>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d031      	beq.n	8001f9e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 f974 	bl	8002228 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d123      	bne.n	8001f96 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d013      	beq.n	8001f8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	4a76      	ldr	r2, [pc, #472]	; (8002144 <HAL_UART_IRQHandler+0x350>)
 8001f6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff00 	bl	8000d78 <HAL_DMA_Abort_IT>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d016      	beq.n	8001fac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f8c:	e00e      	b.n	8001fac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8ec 	bl	800216c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f94:	e00a      	b.n	8001fac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8e8 	bl	800216c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	e006      	b.n	8001fac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8e4 	bl	800216c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001faa:	e0c3      	b.n	8002134 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fac:	bf00      	nop
    return;
 8001fae:	e0c1      	b.n	8002134 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 80a1 	bne.w	80020fc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 809b 	beq.w	80020fc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8095 	beq.w	80020fc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d14e      	bne.n	8002094 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002000:	8a3b      	ldrh	r3, [r7, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8098 	beq.w	8002138 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800200c:	8a3a      	ldrh	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	f080 8092 	bcs.w	8002138 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8a3a      	ldrh	r2, [r7, #16]
 8002018:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b20      	cmp	r3, #32
 8002022:	d02b      	beq.n	800207c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002032:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002052:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0210 	bic.w	r2, r2, #16
 8002070:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fe41 	bl	8000cfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002084:	b29b      	uxth	r3, r3
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	b29b      	uxth	r3, r3
 800208a:	4619      	mov	r1, r3
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f876 	bl	800217e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002092:	e051      	b.n	8002138 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800209c:	b29b      	uxth	r3, r3
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d047      	beq.n	800213c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80020ac:	8a7b      	ldrh	r3, [r7, #18]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d044      	beq.n	800213c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80020c0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020f0:	8a7b      	ldrh	r3, [r7, #18]
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f842 	bl	800217e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80020fa:	e01f      	b.n	800213c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d008      	beq.n	8002118 <HAL_UART_IRQHandler+0x324>
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8c9 	bl	80022a8 <UART_Transmit_IT>
    return;
 8002116:	e012      	b.n	800213e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00d      	beq.n	800213e <HAL_UART_IRQHandler+0x34a>
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f90a 	bl	8002346 <UART_EndTransmit_IT>
    return;
 8002132:	e004      	b.n	800213e <HAL_UART_IRQHandler+0x34a>
    return;
 8002134:	bf00      	nop
 8002136:	e002      	b.n	800213e <HAL_UART_IRQHandler+0x34a>
      return;
 8002138:	bf00      	nop
 800213a:	e000      	b.n	800213e <HAL_UART_IRQHandler+0x34a>
      return;
 800213c:	bf00      	nop
  }
}
 800213e:	3728      	adds	r7, #40	; 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	08002281 	.word	0x08002281

08002148 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a4:	e02c      	b.n	8002200 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d028      	beq.n	8002200 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80021b4:	f7fe fc6a 	bl	8000a8c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d21d      	bcs.n	8002200 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e00f      	b.n	8002220 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	4013      	ands	r3, r2
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	429a      	cmp	r2, r3
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	429a      	cmp	r2, r3
 800221c:	d0c3      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800223e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695a      	ldr	r2, [r3, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0201 	bic.w	r2, r2, #1
 800224e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0210 	bic.w	r2, r2, #16
 8002266:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff ff66 	bl	800216c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b21      	cmp	r3, #33	; 0x21
 80022ba:	d13e      	bne.n	800233a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c4:	d114      	bne.n	80022f0 <UART_Transmit_IT+0x48>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d110      	bne.n	80022f0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	e008      	b.n	8002302 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6211      	str	r1, [r2, #32]
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	4619      	mov	r1, r3
 8002310:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10f      	bne.n	8002336 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002324:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002334:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800233a:	2302      	movs	r3, #2
  }
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff feee 	bl	8002148 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b22      	cmp	r3, #34	; 0x22
 8002388:	f040 8099 	bne.w	80024be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002394:	d117      	bne.n	80023c6 <UART_Receive_IT+0x50>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d113      	bne.n	80023c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	1c9a      	adds	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
 80023c4:	e026      	b.n	8002414 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d8:	d007      	beq.n	80023ea <UART_Receive_IT+0x74>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10a      	bne.n	80023f8 <UART_Receive_IT+0x82>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	e008      	b.n	800240a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002404:	b2da      	uxtb	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4619      	mov	r1, r3
 8002422:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002424:	2b00      	cmp	r3, #0
 8002426:	d148      	bne.n	80024ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 0220 	bic.w	r2, r2, #32
 8002436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	2b01      	cmp	r3, #1
 8002466:	d123      	bne.n	80024b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0210 	bic.w	r2, r2, #16
 800247c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d10a      	bne.n	80024a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fe68 	bl	800217e <HAL_UARTEx_RxEventCallback>
 80024ae:	e002      	b.n	80024b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fe52 	bl	800215a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e002      	b.n	80024c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002508:	f023 030c 	bic.w	r3, r3, #12
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	430b      	orrs	r3, r1
 8002514:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699a      	ldr	r2, [r3, #24]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a55      	ldr	r2, [pc, #340]	; (8002688 <UART_SetConfig+0x1c0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d103      	bne.n	800253e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002536:	f7ff fb09 	bl	8001b4c <HAL_RCC_GetPCLK2Freq>
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	e002      	b.n	8002544 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800253e:	f7ff faf1 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002542:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254c:	d14c      	bne.n	80025e8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	4a49      	ldr	r2, [pc, #292]	; (800268c <UART_SetConfig+0x1c4>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	0119      	lsls	r1, r3, #4
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009a      	lsls	r2, r3, #2
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	4b41      	ldr	r3, [pc, #260]	; (800268c <UART_SetConfig+0x1c4>)
 8002586:	fba3 0302 	umull	r0, r3, r3, r2
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2064      	movs	r0, #100	; 0x64
 800258e:	fb00 f303 	mul.w	r3, r0, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	3332      	adds	r3, #50	; 0x32
 8002598:	4a3c      	ldr	r2, [pc, #240]	; (800268c <UART_SetConfig+0x1c4>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025a6:	4419      	add	r1, r3
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009a      	lsls	r2, r3, #2
 80025b2:	441a      	add	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80025be:	4b33      	ldr	r3, [pc, #204]	; (800268c <UART_SetConfig+0x1c4>)
 80025c0:	fba3 0302 	umull	r0, r3, r3, r2
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	2064      	movs	r0, #100	; 0x64
 80025c8:	fb00 f303 	mul.w	r3, r0, r3
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3332      	adds	r3, #50	; 0x32
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <UART_SetConfig+0x1c4>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	440a      	add	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025e6:	e04a      	b.n	800267e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <UART_SetConfig+0x1c4>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	0119      	lsls	r1, r3, #4
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009a      	lsls	r2, r3, #2
 8002612:	441a      	add	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	fbb2 f2f3 	udiv	r2, r2, r3
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <UART_SetConfig+0x1c4>)
 8002620:	fba3 0302 	umull	r0, r3, r3, r2
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	2064      	movs	r0, #100	; 0x64
 8002628:	fb00 f303 	mul.w	r3, r0, r3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	3332      	adds	r3, #50	; 0x32
 8002632:	4a16      	ldr	r2, [pc, #88]	; (800268c <UART_SetConfig+0x1c4>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263e:	4419      	add	r1, r3
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	009a      	lsls	r2, r3, #2
 800264a:	441a      	add	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	fbb2 f2f3 	udiv	r2, r2, r3
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <UART_SetConfig+0x1c4>)
 8002658:	fba3 0302 	umull	r0, r3, r3, r2
 800265c:	095b      	lsrs	r3, r3, #5
 800265e:	2064      	movs	r0, #100	; 0x64
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	3332      	adds	r3, #50	; 0x32
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <UART_SetConfig+0x1c4>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	f003 020f 	and.w	r2, r3, #15
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	440a      	add	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40013800 	.word	0x40013800
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <__errno>:
 8002690:	4b01      	ldr	r3, [pc, #4]	; (8002698 <__errno+0x8>)
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000000c 	.word	0x2000000c

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	2600      	movs	r6, #0
 80026a0:	4d0c      	ldr	r5, [pc, #48]	; (80026d4 <__libc_init_array+0x38>)
 80026a2:	4c0d      	ldr	r4, [pc, #52]	; (80026d8 <__libc_init_array+0x3c>)
 80026a4:	1b64      	subs	r4, r4, r5
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	42a6      	cmp	r6, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	f001 f954 	bl	8003958 <_init>
 80026b0:	2600      	movs	r6, #0
 80026b2:	4d0a      	ldr	r5, [pc, #40]	; (80026dc <__libc_init_array+0x40>)
 80026b4:	4c0a      	ldr	r4, [pc, #40]	; (80026e0 <__libc_init_array+0x44>)
 80026b6:	1b64      	subs	r4, r4, r5
 80026b8:	10a4      	asrs	r4, r4, #2
 80026ba:	42a6      	cmp	r6, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c4:	4798      	blx	r3
 80026c6:	3601      	adds	r6, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ce:	4798      	blx	r3
 80026d0:	3601      	adds	r6, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	08003adc 	.word	0x08003adc
 80026d8:	08003adc 	.word	0x08003adc
 80026dc:	08003adc 	.word	0x08003adc
 80026e0:	08003ae0 	.word	0x08003ae0

080026e4 <memset>:
 80026e4:	4603      	mov	r3, r0
 80026e6:	4402      	add	r2, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <iprintf>:
 80026f4:	b40f      	push	{r0, r1, r2, r3}
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <iprintf+0x2c>)
 80026f8:	b513      	push	{r0, r1, r4, lr}
 80026fa:	681c      	ldr	r4, [r3, #0]
 80026fc:	b124      	cbz	r4, 8002708 <iprintf+0x14>
 80026fe:	69a3      	ldr	r3, [r4, #24]
 8002700:	b913      	cbnz	r3, 8002708 <iprintf+0x14>
 8002702:	4620      	mov	r0, r4
 8002704:	f000 f886 	bl	8002814 <__sinit>
 8002708:	ab05      	add	r3, sp, #20
 800270a:	4620      	mov	r0, r4
 800270c:	9a04      	ldr	r2, [sp, #16]
 800270e:	68a1      	ldr	r1, [r4, #8]
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	f000 fafd 	bl	8002d10 <_vfiprintf_r>
 8002716:	b002      	add	sp, #8
 8002718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271c:	b004      	add	sp, #16
 800271e:	4770      	bx	lr
 8002720:	2000000c 	.word	0x2000000c

08002724 <siprintf>:
 8002724:	b40e      	push	{r1, r2, r3}
 8002726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800272a:	b500      	push	{lr}
 800272c:	b09c      	sub	sp, #112	; 0x70
 800272e:	ab1d      	add	r3, sp, #116	; 0x74
 8002730:	9002      	str	r0, [sp, #8]
 8002732:	9006      	str	r0, [sp, #24]
 8002734:	9107      	str	r1, [sp, #28]
 8002736:	9104      	str	r1, [sp, #16]
 8002738:	4808      	ldr	r0, [pc, #32]	; (800275c <siprintf+0x38>)
 800273a:	4909      	ldr	r1, [pc, #36]	; (8002760 <siprintf+0x3c>)
 800273c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002740:	9105      	str	r1, [sp, #20]
 8002742:	6800      	ldr	r0, [r0, #0]
 8002744:	a902      	add	r1, sp, #8
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	f000 f9ba 	bl	8002ac0 <_svfiprintf_r>
 800274c:	2200      	movs	r2, #0
 800274e:	9b02      	ldr	r3, [sp, #8]
 8002750:	701a      	strb	r2, [r3, #0]
 8002752:	b01c      	add	sp, #112	; 0x70
 8002754:	f85d eb04 	ldr.w	lr, [sp], #4
 8002758:	b003      	add	sp, #12
 800275a:	4770      	bx	lr
 800275c:	2000000c 	.word	0x2000000c
 8002760:	ffff0208 	.word	0xffff0208

08002764 <std>:
 8002764:	2300      	movs	r3, #0
 8002766:	b510      	push	{r4, lr}
 8002768:	4604      	mov	r4, r0
 800276a:	e9c0 3300 	strd	r3, r3, [r0]
 800276e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002772:	6083      	str	r3, [r0, #8]
 8002774:	8181      	strh	r1, [r0, #12]
 8002776:	6643      	str	r3, [r0, #100]	; 0x64
 8002778:	81c2      	strh	r2, [r0, #14]
 800277a:	6183      	str	r3, [r0, #24]
 800277c:	4619      	mov	r1, r3
 800277e:	2208      	movs	r2, #8
 8002780:	305c      	adds	r0, #92	; 0x5c
 8002782:	f7ff ffaf 	bl	80026e4 <memset>
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <std+0x38>)
 8002788:	6224      	str	r4, [r4, #32]
 800278a:	6263      	str	r3, [r4, #36]	; 0x24
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <std+0x3c>)
 800278e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <std+0x40>)
 8002792:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <std+0x44>)
 8002796:	6323      	str	r3, [r4, #48]	; 0x30
 8002798:	bd10      	pop	{r4, pc}
 800279a:	bf00      	nop
 800279c:	080032bd 	.word	0x080032bd
 80027a0:	080032df 	.word	0x080032df
 80027a4:	08003317 	.word	0x08003317
 80027a8:	0800333b 	.word	0x0800333b

080027ac <_cleanup_r>:
 80027ac:	4901      	ldr	r1, [pc, #4]	; (80027b4 <_cleanup_r+0x8>)
 80027ae:	f000 b8af 	b.w	8002910 <_fwalk_reent>
 80027b2:	bf00      	nop
 80027b4:	08003615 	.word	0x08003615

080027b8 <__sfmoreglue>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	2568      	movs	r5, #104	; 0x68
 80027bc:	1e4a      	subs	r2, r1, #1
 80027be:	4355      	muls	r5, r2
 80027c0:	460e      	mov	r6, r1
 80027c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027c6:	f000 f8c5 	bl	8002954 <_malloc_r>
 80027ca:	4604      	mov	r4, r0
 80027cc:	b140      	cbz	r0, 80027e0 <__sfmoreglue+0x28>
 80027ce:	2100      	movs	r1, #0
 80027d0:	e9c0 1600 	strd	r1, r6, [r0]
 80027d4:	300c      	adds	r0, #12
 80027d6:	60a0      	str	r0, [r4, #8]
 80027d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027dc:	f7ff ff82 	bl	80026e4 <memset>
 80027e0:	4620      	mov	r0, r4
 80027e2:	bd70      	pop	{r4, r5, r6, pc}

080027e4 <__sfp_lock_acquire>:
 80027e4:	4801      	ldr	r0, [pc, #4]	; (80027ec <__sfp_lock_acquire+0x8>)
 80027e6:	f000 b8b3 	b.w	8002950 <__retarget_lock_acquire_recursive>
 80027ea:	bf00      	nop
 80027ec:	200000f0 	.word	0x200000f0

080027f0 <__sfp_lock_release>:
 80027f0:	4801      	ldr	r0, [pc, #4]	; (80027f8 <__sfp_lock_release+0x8>)
 80027f2:	f000 b8ae 	b.w	8002952 <__retarget_lock_release_recursive>
 80027f6:	bf00      	nop
 80027f8:	200000f0 	.word	0x200000f0

080027fc <__sinit_lock_acquire>:
 80027fc:	4801      	ldr	r0, [pc, #4]	; (8002804 <__sinit_lock_acquire+0x8>)
 80027fe:	f000 b8a7 	b.w	8002950 <__retarget_lock_acquire_recursive>
 8002802:	bf00      	nop
 8002804:	200000eb 	.word	0x200000eb

08002808 <__sinit_lock_release>:
 8002808:	4801      	ldr	r0, [pc, #4]	; (8002810 <__sinit_lock_release+0x8>)
 800280a:	f000 b8a2 	b.w	8002952 <__retarget_lock_release_recursive>
 800280e:	bf00      	nop
 8002810:	200000eb 	.word	0x200000eb

08002814 <__sinit>:
 8002814:	b510      	push	{r4, lr}
 8002816:	4604      	mov	r4, r0
 8002818:	f7ff fff0 	bl	80027fc <__sinit_lock_acquire>
 800281c:	69a3      	ldr	r3, [r4, #24]
 800281e:	b11b      	cbz	r3, 8002828 <__sinit+0x14>
 8002820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002824:	f7ff bff0 	b.w	8002808 <__sinit_lock_release>
 8002828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800282c:	6523      	str	r3, [r4, #80]	; 0x50
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <__sinit+0x68>)
 8002830:	4a13      	ldr	r2, [pc, #76]	; (8002880 <__sinit+0x6c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	62a2      	str	r2, [r4, #40]	; 0x28
 8002836:	42a3      	cmp	r3, r4
 8002838:	bf08      	it	eq
 800283a:	2301      	moveq	r3, #1
 800283c:	4620      	mov	r0, r4
 800283e:	bf08      	it	eq
 8002840:	61a3      	streq	r3, [r4, #24]
 8002842:	f000 f81f 	bl	8002884 <__sfp>
 8002846:	6060      	str	r0, [r4, #4]
 8002848:	4620      	mov	r0, r4
 800284a:	f000 f81b 	bl	8002884 <__sfp>
 800284e:	60a0      	str	r0, [r4, #8]
 8002850:	4620      	mov	r0, r4
 8002852:	f000 f817 	bl	8002884 <__sfp>
 8002856:	2200      	movs	r2, #0
 8002858:	2104      	movs	r1, #4
 800285a:	60e0      	str	r0, [r4, #12]
 800285c:	6860      	ldr	r0, [r4, #4]
 800285e:	f7ff ff81 	bl	8002764 <std>
 8002862:	2201      	movs	r2, #1
 8002864:	2109      	movs	r1, #9
 8002866:	68a0      	ldr	r0, [r4, #8]
 8002868:	f7ff ff7c 	bl	8002764 <std>
 800286c:	2202      	movs	r2, #2
 800286e:	2112      	movs	r1, #18
 8002870:	68e0      	ldr	r0, [r4, #12]
 8002872:	f7ff ff77 	bl	8002764 <std>
 8002876:	2301      	movs	r3, #1
 8002878:	61a3      	str	r3, [r4, #24]
 800287a:	e7d1      	b.n	8002820 <__sinit+0xc>
 800287c:	08003a3c 	.word	0x08003a3c
 8002880:	080027ad 	.word	0x080027ad

08002884 <__sfp>:
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002886:	4607      	mov	r7, r0
 8002888:	f7ff ffac 	bl	80027e4 <__sfp_lock_acquire>
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <__sfp+0x84>)
 800288e:	681e      	ldr	r6, [r3, #0]
 8002890:	69b3      	ldr	r3, [r6, #24]
 8002892:	b913      	cbnz	r3, 800289a <__sfp+0x16>
 8002894:	4630      	mov	r0, r6
 8002896:	f7ff ffbd 	bl	8002814 <__sinit>
 800289a:	3648      	adds	r6, #72	; 0x48
 800289c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	d503      	bpl.n	80028ac <__sfp+0x28>
 80028a4:	6833      	ldr	r3, [r6, #0]
 80028a6:	b30b      	cbz	r3, 80028ec <__sfp+0x68>
 80028a8:	6836      	ldr	r6, [r6, #0]
 80028aa:	e7f7      	b.n	800289c <__sfp+0x18>
 80028ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028b0:	b9d5      	cbnz	r5, 80028e8 <__sfp+0x64>
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <__sfp+0x88>)
 80028b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028b8:	60e3      	str	r3, [r4, #12]
 80028ba:	6665      	str	r5, [r4, #100]	; 0x64
 80028bc:	f000 f847 	bl	800294e <__retarget_lock_init_recursive>
 80028c0:	f7ff ff96 	bl	80027f0 <__sfp_lock_release>
 80028c4:	2208      	movs	r2, #8
 80028c6:	4629      	mov	r1, r5
 80028c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028d0:	6025      	str	r5, [r4, #0]
 80028d2:	61a5      	str	r5, [r4, #24]
 80028d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028d8:	f7ff ff04 	bl	80026e4 <memset>
 80028dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028e4:	4620      	mov	r0, r4
 80028e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e8:	3468      	adds	r4, #104	; 0x68
 80028ea:	e7d9      	b.n	80028a0 <__sfp+0x1c>
 80028ec:	2104      	movs	r1, #4
 80028ee:	4638      	mov	r0, r7
 80028f0:	f7ff ff62 	bl	80027b8 <__sfmoreglue>
 80028f4:	4604      	mov	r4, r0
 80028f6:	6030      	str	r0, [r6, #0]
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d1d5      	bne.n	80028a8 <__sfp+0x24>
 80028fc:	f7ff ff78 	bl	80027f0 <__sfp_lock_release>
 8002900:	230c      	movs	r3, #12
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	e7ee      	b.n	80028e4 <__sfp+0x60>
 8002906:	bf00      	nop
 8002908:	08003a3c 	.word	0x08003a3c
 800290c:	ffff0001 	.word	0xffff0001

08002910 <_fwalk_reent>:
 8002910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002914:	4606      	mov	r6, r0
 8002916:	4688      	mov	r8, r1
 8002918:	2700      	movs	r7, #0
 800291a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800291e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002922:	f1b9 0901 	subs.w	r9, r9, #1
 8002926:	d505      	bpl.n	8002934 <_fwalk_reent+0x24>
 8002928:	6824      	ldr	r4, [r4, #0]
 800292a:	2c00      	cmp	r4, #0
 800292c:	d1f7      	bne.n	800291e <_fwalk_reent+0xe>
 800292e:	4638      	mov	r0, r7
 8002930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002934:	89ab      	ldrh	r3, [r5, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d907      	bls.n	800294a <_fwalk_reent+0x3a>
 800293a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800293e:	3301      	adds	r3, #1
 8002940:	d003      	beq.n	800294a <_fwalk_reent+0x3a>
 8002942:	4629      	mov	r1, r5
 8002944:	4630      	mov	r0, r6
 8002946:	47c0      	blx	r8
 8002948:	4307      	orrs	r7, r0
 800294a:	3568      	adds	r5, #104	; 0x68
 800294c:	e7e9      	b.n	8002922 <_fwalk_reent+0x12>

0800294e <__retarget_lock_init_recursive>:
 800294e:	4770      	bx	lr

08002950 <__retarget_lock_acquire_recursive>:
 8002950:	4770      	bx	lr

08002952 <__retarget_lock_release_recursive>:
 8002952:	4770      	bx	lr

08002954 <_malloc_r>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	1ccd      	adds	r5, r1, #3
 8002958:	f025 0503 	bic.w	r5, r5, #3
 800295c:	3508      	adds	r5, #8
 800295e:	2d0c      	cmp	r5, #12
 8002960:	bf38      	it	cc
 8002962:	250c      	movcc	r5, #12
 8002964:	2d00      	cmp	r5, #0
 8002966:	4606      	mov	r6, r0
 8002968:	db01      	blt.n	800296e <_malloc_r+0x1a>
 800296a:	42a9      	cmp	r1, r5
 800296c:	d903      	bls.n	8002976 <_malloc_r+0x22>
 800296e:	230c      	movs	r3, #12
 8002970:	6033      	str	r3, [r6, #0]
 8002972:	2000      	movs	r0, #0
 8002974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002976:	f000 ff35 	bl	80037e4 <__malloc_lock>
 800297a:	4921      	ldr	r1, [pc, #132]	; (8002a00 <_malloc_r+0xac>)
 800297c:	680a      	ldr	r2, [r1, #0]
 800297e:	4614      	mov	r4, r2
 8002980:	b99c      	cbnz	r4, 80029aa <_malloc_r+0x56>
 8002982:	4f20      	ldr	r7, [pc, #128]	; (8002a04 <_malloc_r+0xb0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b923      	cbnz	r3, 8002992 <_malloc_r+0x3e>
 8002988:	4621      	mov	r1, r4
 800298a:	4630      	mov	r0, r6
 800298c:	f000 fc86 	bl	800329c <_sbrk_r>
 8002990:	6038      	str	r0, [r7, #0]
 8002992:	4629      	mov	r1, r5
 8002994:	4630      	mov	r0, r6
 8002996:	f000 fc81 	bl	800329c <_sbrk_r>
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	d123      	bne.n	80029e6 <_malloc_r+0x92>
 800299e:	230c      	movs	r3, #12
 80029a0:	4630      	mov	r0, r6
 80029a2:	6033      	str	r3, [r6, #0]
 80029a4:	f000 ff24 	bl	80037f0 <__malloc_unlock>
 80029a8:	e7e3      	b.n	8002972 <_malloc_r+0x1e>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	1b5b      	subs	r3, r3, r5
 80029ae:	d417      	bmi.n	80029e0 <_malloc_r+0x8c>
 80029b0:	2b0b      	cmp	r3, #11
 80029b2:	d903      	bls.n	80029bc <_malloc_r+0x68>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	441c      	add	r4, r3
 80029b8:	6025      	str	r5, [r4, #0]
 80029ba:	e004      	b.n	80029c6 <_malloc_r+0x72>
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	42a2      	cmp	r2, r4
 80029c0:	bf0c      	ite	eq
 80029c2:	600b      	streq	r3, [r1, #0]
 80029c4:	6053      	strne	r3, [r2, #4]
 80029c6:	4630      	mov	r0, r6
 80029c8:	f000 ff12 	bl	80037f0 <__malloc_unlock>
 80029cc:	f104 000b 	add.w	r0, r4, #11
 80029d0:	1d23      	adds	r3, r4, #4
 80029d2:	f020 0007 	bic.w	r0, r0, #7
 80029d6:	1ac2      	subs	r2, r0, r3
 80029d8:	d0cc      	beq.n	8002974 <_malloc_r+0x20>
 80029da:	1a1b      	subs	r3, r3, r0
 80029dc:	50a3      	str	r3, [r4, r2]
 80029de:	e7c9      	b.n	8002974 <_malloc_r+0x20>
 80029e0:	4622      	mov	r2, r4
 80029e2:	6864      	ldr	r4, [r4, #4]
 80029e4:	e7cc      	b.n	8002980 <_malloc_r+0x2c>
 80029e6:	1cc4      	adds	r4, r0, #3
 80029e8:	f024 0403 	bic.w	r4, r4, #3
 80029ec:	42a0      	cmp	r0, r4
 80029ee:	d0e3      	beq.n	80029b8 <_malloc_r+0x64>
 80029f0:	1a21      	subs	r1, r4, r0
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 fc52 	bl	800329c <_sbrk_r>
 80029f8:	3001      	adds	r0, #1
 80029fa:	d1dd      	bne.n	80029b8 <_malloc_r+0x64>
 80029fc:	e7cf      	b.n	800299e <_malloc_r+0x4a>
 80029fe:	bf00      	nop
 8002a00:	20000090 	.word	0x20000090
 8002a04:	20000094 	.word	0x20000094

08002a08 <__ssputs_r>:
 8002a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	688e      	ldr	r6, [r1, #8]
 8002a0e:	4682      	mov	sl, r0
 8002a10:	429e      	cmp	r6, r3
 8002a12:	460c      	mov	r4, r1
 8002a14:	4690      	mov	r8, r2
 8002a16:	461f      	mov	r7, r3
 8002a18:	d838      	bhi.n	8002a8c <__ssputs_r+0x84>
 8002a1a:	898a      	ldrh	r2, [r1, #12]
 8002a1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a20:	d032      	beq.n	8002a88 <__ssputs_r+0x80>
 8002a22:	6825      	ldr	r5, [r4, #0]
 8002a24:	6909      	ldr	r1, [r1, #16]
 8002a26:	3301      	adds	r3, #1
 8002a28:	eba5 0901 	sub.w	r9, r5, r1
 8002a2c:	6965      	ldr	r5, [r4, #20]
 8002a2e:	444b      	add	r3, r9
 8002a30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a38:	106d      	asrs	r5, r5, #1
 8002a3a:	429d      	cmp	r5, r3
 8002a3c:	bf38      	it	cc
 8002a3e:	461d      	movcc	r5, r3
 8002a40:	0553      	lsls	r3, r2, #21
 8002a42:	d531      	bpl.n	8002aa8 <__ssputs_r+0xa0>
 8002a44:	4629      	mov	r1, r5
 8002a46:	f7ff ff85 	bl	8002954 <_malloc_r>
 8002a4a:	4606      	mov	r6, r0
 8002a4c:	b950      	cbnz	r0, 8002a64 <__ssputs_r+0x5c>
 8002a4e:	230c      	movs	r3, #12
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f8ca 3000 	str.w	r3, [sl]
 8002a58:	89a3      	ldrh	r3, [r4, #12]
 8002a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a64:	464a      	mov	r2, r9
 8002a66:	6921      	ldr	r1, [r4, #16]
 8002a68:	f000 fe94 	bl	8003794 <memcpy>
 8002a6c:	89a3      	ldrh	r3, [r4, #12]
 8002a6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a76:	81a3      	strh	r3, [r4, #12]
 8002a78:	6126      	str	r6, [r4, #16]
 8002a7a:	444e      	add	r6, r9
 8002a7c:	6026      	str	r6, [r4, #0]
 8002a7e:	463e      	mov	r6, r7
 8002a80:	6165      	str	r5, [r4, #20]
 8002a82:	eba5 0509 	sub.w	r5, r5, r9
 8002a86:	60a5      	str	r5, [r4, #8]
 8002a88:	42be      	cmp	r6, r7
 8002a8a:	d900      	bls.n	8002a8e <__ssputs_r+0x86>
 8002a8c:	463e      	mov	r6, r7
 8002a8e:	4632      	mov	r2, r6
 8002a90:	4641      	mov	r1, r8
 8002a92:	6820      	ldr	r0, [r4, #0]
 8002a94:	f000 fe8c 	bl	80037b0 <memmove>
 8002a98:	68a3      	ldr	r3, [r4, #8]
 8002a9a:	6822      	ldr	r2, [r4, #0]
 8002a9c:	1b9b      	subs	r3, r3, r6
 8002a9e:	4432      	add	r2, r6
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	60a3      	str	r3, [r4, #8]
 8002aa4:	6022      	str	r2, [r4, #0]
 8002aa6:	e7db      	b.n	8002a60 <__ssputs_r+0x58>
 8002aa8:	462a      	mov	r2, r5
 8002aaa:	f000 fef3 	bl	8003894 <_realloc_r>
 8002aae:	4606      	mov	r6, r0
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d1e1      	bne.n	8002a78 <__ssputs_r+0x70>
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	6921      	ldr	r1, [r4, #16]
 8002ab8:	f000 fea0 	bl	80037fc <_free_r>
 8002abc:	e7c7      	b.n	8002a4e <__ssputs_r+0x46>
	...

08002ac0 <_svfiprintf_r>:
 8002ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac4:	4698      	mov	r8, r3
 8002ac6:	898b      	ldrh	r3, [r1, #12]
 8002ac8:	4607      	mov	r7, r0
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	460d      	mov	r5, r1
 8002ace:	4614      	mov	r4, r2
 8002ad0:	b09d      	sub	sp, #116	; 0x74
 8002ad2:	d50e      	bpl.n	8002af2 <_svfiprintf_r+0x32>
 8002ad4:	690b      	ldr	r3, [r1, #16]
 8002ad6:	b963      	cbnz	r3, 8002af2 <_svfiprintf_r+0x32>
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	f7ff ff3b 	bl	8002954 <_malloc_r>
 8002ade:	6028      	str	r0, [r5, #0]
 8002ae0:	6128      	str	r0, [r5, #16]
 8002ae2:	b920      	cbnz	r0, 8002aee <_svfiprintf_r+0x2e>
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	e0d1      	b.n	8002c92 <_svfiprintf_r+0x1d2>
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	616b      	str	r3, [r5, #20]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9309      	str	r3, [sp, #36]	; 0x24
 8002af6:	2320      	movs	r3, #32
 8002af8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002afc:	2330      	movs	r3, #48	; 0x30
 8002afe:	f04f 0901 	mov.w	r9, #1
 8002b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002cac <_svfiprintf_r+0x1ec>
 8002b0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b0e:	4623      	mov	r3, r4
 8002b10:	469a      	mov	sl, r3
 8002b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b16:	b10a      	cbz	r2, 8002b1c <_svfiprintf_r+0x5c>
 8002b18:	2a25      	cmp	r2, #37	; 0x25
 8002b1a:	d1f9      	bne.n	8002b10 <_svfiprintf_r+0x50>
 8002b1c:	ebba 0b04 	subs.w	fp, sl, r4
 8002b20:	d00b      	beq.n	8002b3a <_svfiprintf_r+0x7a>
 8002b22:	465b      	mov	r3, fp
 8002b24:	4622      	mov	r2, r4
 8002b26:	4629      	mov	r1, r5
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f7ff ff6d 	bl	8002a08 <__ssputs_r>
 8002b2e:	3001      	adds	r0, #1
 8002b30:	f000 80aa 	beq.w	8002c88 <_svfiprintf_r+0x1c8>
 8002b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b36:	445a      	add	r2, fp
 8002b38:	9209      	str	r2, [sp, #36]	; 0x24
 8002b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a2 	beq.w	8002c88 <_svfiprintf_r+0x1c8>
 8002b44:	2300      	movs	r3, #0
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b4e:	f10a 0a01 	add.w	sl, sl, #1
 8002b52:	9304      	str	r3, [sp, #16]
 8002b54:	9307      	str	r3, [sp, #28]
 8002b56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b5a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b5c:	4654      	mov	r4, sl
 8002b5e:	2205      	movs	r2, #5
 8002b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b64:	4851      	ldr	r0, [pc, #324]	; (8002cac <_svfiprintf_r+0x1ec>)
 8002b66:	f000 fe07 	bl	8003778 <memchr>
 8002b6a:	9a04      	ldr	r2, [sp, #16]
 8002b6c:	b9d8      	cbnz	r0, 8002ba6 <_svfiprintf_r+0xe6>
 8002b6e:	06d0      	lsls	r0, r2, #27
 8002b70:	bf44      	itt	mi
 8002b72:	2320      	movmi	r3, #32
 8002b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b78:	0711      	lsls	r1, r2, #28
 8002b7a:	bf44      	itt	mi
 8002b7c:	232b      	movmi	r3, #43	; 0x2b
 8002b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b82:	f89a 3000 	ldrb.w	r3, [sl]
 8002b86:	2b2a      	cmp	r3, #42	; 0x2a
 8002b88:	d015      	beq.n	8002bb6 <_svfiprintf_r+0xf6>
 8002b8a:	4654      	mov	r4, sl
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f04f 0c0a 	mov.w	ip, #10
 8002b92:	9a07      	ldr	r2, [sp, #28]
 8002b94:	4621      	mov	r1, r4
 8002b96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b9a:	3b30      	subs	r3, #48	; 0x30
 8002b9c:	2b09      	cmp	r3, #9
 8002b9e:	d94e      	bls.n	8002c3e <_svfiprintf_r+0x17e>
 8002ba0:	b1b0      	cbz	r0, 8002bd0 <_svfiprintf_r+0x110>
 8002ba2:	9207      	str	r2, [sp, #28]
 8002ba4:	e014      	b.n	8002bd0 <_svfiprintf_r+0x110>
 8002ba6:	eba0 0308 	sub.w	r3, r0, r8
 8002baa:	fa09 f303 	lsl.w	r3, r9, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	46a2      	mov	sl, r4
 8002bb2:	9304      	str	r3, [sp, #16]
 8002bb4:	e7d2      	b.n	8002b5c <_svfiprintf_r+0x9c>
 8002bb6:	9b03      	ldr	r3, [sp, #12]
 8002bb8:	1d19      	adds	r1, r3, #4
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	9103      	str	r1, [sp, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bfbb      	ittet	lt
 8002bc2:	425b      	neglt	r3, r3
 8002bc4:	f042 0202 	orrlt.w	r2, r2, #2
 8002bc8:	9307      	strge	r3, [sp, #28]
 8002bca:	9307      	strlt	r3, [sp, #28]
 8002bcc:	bfb8      	it	lt
 8002bce:	9204      	strlt	r2, [sp, #16]
 8002bd0:	7823      	ldrb	r3, [r4, #0]
 8002bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd4:	d10c      	bne.n	8002bf0 <_svfiprintf_r+0x130>
 8002bd6:	7863      	ldrb	r3, [r4, #1]
 8002bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bda:	d135      	bne.n	8002c48 <_svfiprintf_r+0x188>
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	3402      	adds	r4, #2
 8002be0:	1d1a      	adds	r2, r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	9203      	str	r2, [sp, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bfb8      	it	lt
 8002bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bee:	9305      	str	r3, [sp, #20]
 8002bf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cbc <_svfiprintf_r+0x1fc>
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	4650      	mov	r0, sl
 8002bf8:	7821      	ldrb	r1, [r4, #0]
 8002bfa:	f000 fdbd 	bl	8003778 <memchr>
 8002bfe:	b140      	cbz	r0, 8002c12 <_svfiprintf_r+0x152>
 8002c00:	2340      	movs	r3, #64	; 0x40
 8002c02:	eba0 000a 	sub.w	r0, r0, sl
 8002c06:	fa03 f000 	lsl.w	r0, r3, r0
 8002c0a:	9b04      	ldr	r3, [sp, #16]
 8002c0c:	3401      	adds	r4, #1
 8002c0e:	4303      	orrs	r3, r0
 8002c10:	9304      	str	r3, [sp, #16]
 8002c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c16:	2206      	movs	r2, #6
 8002c18:	4825      	ldr	r0, [pc, #148]	; (8002cb0 <_svfiprintf_r+0x1f0>)
 8002c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c1e:	f000 fdab 	bl	8003778 <memchr>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d038      	beq.n	8002c98 <_svfiprintf_r+0x1d8>
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <_svfiprintf_r+0x1f4>)
 8002c28:	bb1b      	cbnz	r3, 8002c72 <_svfiprintf_r+0x1b2>
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	3307      	adds	r3, #7
 8002c2e:	f023 0307 	bic.w	r3, r3, #7
 8002c32:	3308      	adds	r3, #8
 8002c34:	9303      	str	r3, [sp, #12]
 8002c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c38:	4433      	add	r3, r6
 8002c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c3c:	e767      	b.n	8002b0e <_svfiprintf_r+0x4e>
 8002c3e:	460c      	mov	r4, r1
 8002c40:	2001      	movs	r0, #1
 8002c42:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c46:	e7a5      	b.n	8002b94 <_svfiprintf_r+0xd4>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f04f 0c0a 	mov.w	ip, #10
 8002c4e:	4619      	mov	r1, r3
 8002c50:	3401      	adds	r4, #1
 8002c52:	9305      	str	r3, [sp, #20]
 8002c54:	4620      	mov	r0, r4
 8002c56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c5a:	3a30      	subs	r2, #48	; 0x30
 8002c5c:	2a09      	cmp	r2, #9
 8002c5e:	d903      	bls.n	8002c68 <_svfiprintf_r+0x1a8>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0c5      	beq.n	8002bf0 <_svfiprintf_r+0x130>
 8002c64:	9105      	str	r1, [sp, #20]
 8002c66:	e7c3      	b.n	8002bf0 <_svfiprintf_r+0x130>
 8002c68:	4604      	mov	r4, r0
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c70:	e7f0      	b.n	8002c54 <_svfiprintf_r+0x194>
 8002c72:	ab03      	add	r3, sp, #12
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	462a      	mov	r2, r5
 8002c78:	4638      	mov	r0, r7
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <_svfiprintf_r+0x1f8>)
 8002c7c:	a904      	add	r1, sp, #16
 8002c7e:	f3af 8000 	nop.w
 8002c82:	1c42      	adds	r2, r0, #1
 8002c84:	4606      	mov	r6, r0
 8002c86:	d1d6      	bne.n	8002c36 <_svfiprintf_r+0x176>
 8002c88:	89ab      	ldrh	r3, [r5, #12]
 8002c8a:	065b      	lsls	r3, r3, #25
 8002c8c:	f53f af2c 	bmi.w	8002ae8 <_svfiprintf_r+0x28>
 8002c90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c92:	b01d      	add	sp, #116	; 0x74
 8002c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c98:	ab03      	add	r3, sp, #12
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <_svfiprintf_r+0x1f8>)
 8002ca2:	a904      	add	r1, sp, #16
 8002ca4:	f000 f9d4 	bl	8003050 <_printf_i>
 8002ca8:	e7eb      	b.n	8002c82 <_svfiprintf_r+0x1c2>
 8002caa:	bf00      	nop
 8002cac:	08003aa0 	.word	0x08003aa0
 8002cb0:	08003aaa 	.word	0x08003aaa
 8002cb4:	00000000 	.word	0x00000000
 8002cb8:	08002a09 	.word	0x08002a09
 8002cbc:	08003aa6 	.word	0x08003aa6

08002cc0 <__sfputc_r>:
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	b410      	push	{r4}
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	6093      	str	r3, [r2, #8]
 8002cca:	da07      	bge.n	8002cdc <__sfputc_r+0x1c>
 8002ccc:	6994      	ldr	r4, [r2, #24]
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	db01      	blt.n	8002cd6 <__sfputc_r+0x16>
 8002cd2:	290a      	cmp	r1, #10
 8002cd4:	d102      	bne.n	8002cdc <__sfputc_r+0x1c>
 8002cd6:	bc10      	pop	{r4}
 8002cd8:	f000 bb34 	b.w	8003344 <__swbuf_r>
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	1c58      	adds	r0, r3, #1
 8002ce0:	6010      	str	r0, [r2, #0]
 8002ce2:	7019      	strb	r1, [r3, #0]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	bc10      	pop	{r4}
 8002ce8:	4770      	bx	lr

08002cea <__sfputs_r>:
 8002cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cec:	4606      	mov	r6, r0
 8002cee:	460f      	mov	r7, r1
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	18d5      	adds	r5, r2, r3
 8002cf4:	42ac      	cmp	r4, r5
 8002cf6:	d101      	bne.n	8002cfc <__sfputs_r+0x12>
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e007      	b.n	8002d0c <__sfputs_r+0x22>
 8002cfc:	463a      	mov	r2, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d04:	f7ff ffdc 	bl	8002cc0 <__sfputc_r>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d1f3      	bne.n	8002cf4 <__sfputs_r+0xa>
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d10 <_vfiprintf_r>:
 8002d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d14:	460d      	mov	r5, r1
 8002d16:	4614      	mov	r4, r2
 8002d18:	4698      	mov	r8, r3
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	b09d      	sub	sp, #116	; 0x74
 8002d1e:	b118      	cbz	r0, 8002d28 <_vfiprintf_r+0x18>
 8002d20:	6983      	ldr	r3, [r0, #24]
 8002d22:	b90b      	cbnz	r3, 8002d28 <_vfiprintf_r+0x18>
 8002d24:	f7ff fd76 	bl	8002814 <__sinit>
 8002d28:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <_vfiprintf_r+0x240>)
 8002d2a:	429d      	cmp	r5, r3
 8002d2c:	d11b      	bne.n	8002d66 <_vfiprintf_r+0x56>
 8002d2e:	6875      	ldr	r5, [r6, #4]
 8002d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d32:	07d9      	lsls	r1, r3, #31
 8002d34:	d405      	bmi.n	8002d42 <_vfiprintf_r+0x32>
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	059a      	lsls	r2, r3, #22
 8002d3a:	d402      	bmi.n	8002d42 <_vfiprintf_r+0x32>
 8002d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3e:	f7ff fe07 	bl	8002950 <__retarget_lock_acquire_recursive>
 8002d42:	89ab      	ldrh	r3, [r5, #12]
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	d501      	bpl.n	8002d4c <_vfiprintf_r+0x3c>
 8002d48:	692b      	ldr	r3, [r5, #16]
 8002d4a:	b9eb      	cbnz	r3, 8002d88 <_vfiprintf_r+0x78>
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4630      	mov	r0, r6
 8002d50:	f000 fb5c 	bl	800340c <__swsetup_r>
 8002d54:	b1c0      	cbz	r0, 8002d88 <_vfiprintf_r+0x78>
 8002d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d58:	07dc      	lsls	r4, r3, #31
 8002d5a:	d50e      	bpl.n	8002d7a <_vfiprintf_r+0x6a>
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	b01d      	add	sp, #116	; 0x74
 8002d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d66:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <_vfiprintf_r+0x244>)
 8002d68:	429d      	cmp	r5, r3
 8002d6a:	d101      	bne.n	8002d70 <_vfiprintf_r+0x60>
 8002d6c:	68b5      	ldr	r5, [r6, #8]
 8002d6e:	e7df      	b.n	8002d30 <_vfiprintf_r+0x20>
 8002d70:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <_vfiprintf_r+0x248>)
 8002d72:	429d      	cmp	r5, r3
 8002d74:	bf08      	it	eq
 8002d76:	68f5      	ldreq	r5, [r6, #12]
 8002d78:	e7da      	b.n	8002d30 <_vfiprintf_r+0x20>
 8002d7a:	89ab      	ldrh	r3, [r5, #12]
 8002d7c:	0598      	lsls	r0, r3, #22
 8002d7e:	d4ed      	bmi.n	8002d5c <_vfiprintf_r+0x4c>
 8002d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d82:	f7ff fde6 	bl	8002952 <__retarget_lock_release_recursive>
 8002d86:	e7e9      	b.n	8002d5c <_vfiprintf_r+0x4c>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d92:	2330      	movs	r3, #48	; 0x30
 8002d94:	f04f 0901 	mov.w	r9, #1
 8002d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f5c <_vfiprintf_r+0x24c>
 8002da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da4:	4623      	mov	r3, r4
 8002da6:	469a      	mov	sl, r3
 8002da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dac:	b10a      	cbz	r2, 8002db2 <_vfiprintf_r+0xa2>
 8002dae:	2a25      	cmp	r2, #37	; 0x25
 8002db0:	d1f9      	bne.n	8002da6 <_vfiprintf_r+0x96>
 8002db2:	ebba 0b04 	subs.w	fp, sl, r4
 8002db6:	d00b      	beq.n	8002dd0 <_vfiprintf_r+0xc0>
 8002db8:	465b      	mov	r3, fp
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7ff ff93 	bl	8002cea <__sfputs_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	f000 80aa 	beq.w	8002f1e <_vfiprintf_r+0x20e>
 8002dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dcc:	445a      	add	r2, fp
 8002dce:	9209      	str	r2, [sp, #36]	; 0x24
 8002dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a2 	beq.w	8002f1e <_vfiprintf_r+0x20e>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de4:	f10a 0a01 	add.w	sl, sl, #1
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	9307      	str	r3, [sp, #28]
 8002dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002df0:	931a      	str	r3, [sp, #104]	; 0x68
 8002df2:	4654      	mov	r4, sl
 8002df4:	2205      	movs	r2, #5
 8002df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfa:	4858      	ldr	r0, [pc, #352]	; (8002f5c <_vfiprintf_r+0x24c>)
 8002dfc:	f000 fcbc 	bl	8003778 <memchr>
 8002e00:	9a04      	ldr	r2, [sp, #16]
 8002e02:	b9d8      	cbnz	r0, 8002e3c <_vfiprintf_r+0x12c>
 8002e04:	06d1      	lsls	r1, r2, #27
 8002e06:	bf44      	itt	mi
 8002e08:	2320      	movmi	r3, #32
 8002e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e0e:	0713      	lsls	r3, r2, #28
 8002e10:	bf44      	itt	mi
 8002e12:	232b      	movmi	r3, #43	; 0x2b
 8002e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e18:	f89a 3000 	ldrb.w	r3, [sl]
 8002e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e1e:	d015      	beq.n	8002e4c <_vfiprintf_r+0x13c>
 8002e20:	4654      	mov	r4, sl
 8002e22:	2000      	movs	r0, #0
 8002e24:	f04f 0c0a 	mov.w	ip, #10
 8002e28:	9a07      	ldr	r2, [sp, #28]
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e30:	3b30      	subs	r3, #48	; 0x30
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d94e      	bls.n	8002ed4 <_vfiprintf_r+0x1c4>
 8002e36:	b1b0      	cbz	r0, 8002e66 <_vfiprintf_r+0x156>
 8002e38:	9207      	str	r2, [sp, #28]
 8002e3a:	e014      	b.n	8002e66 <_vfiprintf_r+0x156>
 8002e3c:	eba0 0308 	sub.w	r3, r0, r8
 8002e40:	fa09 f303 	lsl.w	r3, r9, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	46a2      	mov	sl, r4
 8002e48:	9304      	str	r3, [sp, #16]
 8002e4a:	e7d2      	b.n	8002df2 <_vfiprintf_r+0xe2>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	1d19      	adds	r1, r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	9103      	str	r1, [sp, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfbb      	ittet	lt
 8002e58:	425b      	neglt	r3, r3
 8002e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e5e:	9307      	strge	r3, [sp, #28]
 8002e60:	9307      	strlt	r3, [sp, #28]
 8002e62:	bfb8      	it	lt
 8002e64:	9204      	strlt	r2, [sp, #16]
 8002e66:	7823      	ldrb	r3, [r4, #0]
 8002e68:	2b2e      	cmp	r3, #46	; 0x2e
 8002e6a:	d10c      	bne.n	8002e86 <_vfiprintf_r+0x176>
 8002e6c:	7863      	ldrb	r3, [r4, #1]
 8002e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e70:	d135      	bne.n	8002ede <_vfiprintf_r+0x1ce>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	3402      	adds	r4, #2
 8002e76:	1d1a      	adds	r2, r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	9203      	str	r2, [sp, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bfb8      	it	lt
 8002e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002f6c <_vfiprintf_r+0x25c>
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	7821      	ldrb	r1, [r4, #0]
 8002e90:	f000 fc72 	bl	8003778 <memchr>
 8002e94:	b140      	cbz	r0, 8002ea8 <_vfiprintf_r+0x198>
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	eba0 000a 	sub.w	r0, r0, sl
 8002e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8002ea0:	9b04      	ldr	r3, [sp, #16]
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	4303      	orrs	r3, r0
 8002ea6:	9304      	str	r3, [sp, #16]
 8002ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eac:	2206      	movs	r2, #6
 8002eae:	482c      	ldr	r0, [pc, #176]	; (8002f60 <_vfiprintf_r+0x250>)
 8002eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eb4:	f000 fc60 	bl	8003778 <memchr>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d03f      	beq.n	8002f3c <_vfiprintf_r+0x22c>
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <_vfiprintf_r+0x254>)
 8002ebe:	bb1b      	cbnz	r3, 8002f08 <_vfiprintf_r+0x1f8>
 8002ec0:	9b03      	ldr	r3, [sp, #12]
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	f023 0307 	bic.w	r3, r3, #7
 8002ec8:	3308      	adds	r3, #8
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ece:	443b      	add	r3, r7
 8002ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed2:	e767      	b.n	8002da4 <_vfiprintf_r+0x94>
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002edc:	e7a5      	b.n	8002e2a <_vfiprintf_r+0x11a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f04f 0c0a 	mov.w	ip, #10
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	3401      	adds	r4, #1
 8002ee8:	9305      	str	r3, [sp, #20]
 8002eea:	4620      	mov	r0, r4
 8002eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ef0:	3a30      	subs	r2, #48	; 0x30
 8002ef2:	2a09      	cmp	r2, #9
 8002ef4:	d903      	bls.n	8002efe <_vfiprintf_r+0x1ee>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0c5      	beq.n	8002e86 <_vfiprintf_r+0x176>
 8002efa:	9105      	str	r1, [sp, #20]
 8002efc:	e7c3      	b.n	8002e86 <_vfiprintf_r+0x176>
 8002efe:	4604      	mov	r4, r0
 8002f00:	2301      	movs	r3, #1
 8002f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f06:	e7f0      	b.n	8002eea <_vfiprintf_r+0x1da>
 8002f08:	ab03      	add	r3, sp, #12
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	462a      	mov	r2, r5
 8002f0e:	4630      	mov	r0, r6
 8002f10:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <_vfiprintf_r+0x258>)
 8002f12:	a904      	add	r1, sp, #16
 8002f14:	f3af 8000 	nop.w
 8002f18:	4607      	mov	r7, r0
 8002f1a:	1c78      	adds	r0, r7, #1
 8002f1c:	d1d6      	bne.n	8002ecc <_vfiprintf_r+0x1bc>
 8002f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f20:	07d9      	lsls	r1, r3, #31
 8002f22:	d405      	bmi.n	8002f30 <_vfiprintf_r+0x220>
 8002f24:	89ab      	ldrh	r3, [r5, #12]
 8002f26:	059a      	lsls	r2, r3, #22
 8002f28:	d402      	bmi.n	8002f30 <_vfiprintf_r+0x220>
 8002f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f2c:	f7ff fd11 	bl	8002952 <__retarget_lock_release_recursive>
 8002f30:	89ab      	ldrh	r3, [r5, #12]
 8002f32:	065b      	lsls	r3, r3, #25
 8002f34:	f53f af12 	bmi.w	8002d5c <_vfiprintf_r+0x4c>
 8002f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f3a:	e711      	b.n	8002d60 <_vfiprintf_r+0x50>
 8002f3c:	ab03      	add	r3, sp, #12
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	462a      	mov	r2, r5
 8002f42:	4630      	mov	r0, r6
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_vfiprintf_r+0x258>)
 8002f46:	a904      	add	r1, sp, #16
 8002f48:	f000 f882 	bl	8003050 <_printf_i>
 8002f4c:	e7e4      	b.n	8002f18 <_vfiprintf_r+0x208>
 8002f4e:	bf00      	nop
 8002f50:	08003a60 	.word	0x08003a60
 8002f54:	08003a80 	.word	0x08003a80
 8002f58:	08003a40 	.word	0x08003a40
 8002f5c:	08003aa0 	.word	0x08003aa0
 8002f60:	08003aaa 	.word	0x08003aaa
 8002f64:	00000000 	.word	0x00000000
 8002f68:	08002ceb 	.word	0x08002ceb
 8002f6c:	08003aa6 	.word	0x08003aa6

08002f70 <_printf_common>:
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	4616      	mov	r6, r2
 8002f76:	4699      	mov	r9, r3
 8002f78:	688a      	ldr	r2, [r1, #8]
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	bfb8      	it	lt
 8002f82:	4613      	movlt	r3, r2
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f90:	b10a      	cbz	r2, 8002f96 <_printf_common+0x26>
 8002f92:	3301      	adds	r3, #1
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	0699      	lsls	r1, r3, #26
 8002f9a:	bf42      	ittt	mi
 8002f9c:	6833      	ldrmi	r3, [r6, #0]
 8002f9e:	3302      	addmi	r3, #2
 8002fa0:	6033      	strmi	r3, [r6, #0]
 8002fa2:	6825      	ldr	r5, [r4, #0]
 8002fa4:	f015 0506 	ands.w	r5, r5, #6
 8002fa8:	d106      	bne.n	8002fb8 <_printf_common+0x48>
 8002faa:	f104 0a19 	add.w	sl, r4, #25
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	6832      	ldr	r2, [r6, #0]
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	42ab      	cmp	r3, r5
 8002fb6:	dc28      	bgt.n	800300a <_printf_common+0x9a>
 8002fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fbc:	1e13      	subs	r3, r2, #0
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	bf18      	it	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	0692      	lsls	r2, r2, #26
 8002fc6:	d42d      	bmi.n	8003024 <_printf_common+0xb4>
 8002fc8:	4649      	mov	r1, r9
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd0:	47c0      	blx	r8
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d020      	beq.n	8003018 <_printf_common+0xa8>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	68e5      	ldr	r5, [r4, #12]
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf18      	it	ne
 8002fe2:	2500      	movne	r5, #0
 8002fe4:	6832      	ldr	r2, [r6, #0]
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	68a3      	ldr	r3, [r4, #8]
 8002fec:	bf08      	it	eq
 8002fee:	1aad      	subeq	r5, r5, r2
 8002ff0:	6922      	ldr	r2, [r4, #16]
 8002ff2:	bf08      	it	eq
 8002ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfc4      	itt	gt
 8002ffc:	1a9b      	subgt	r3, r3, r2
 8002ffe:	18ed      	addgt	r5, r5, r3
 8003000:	341a      	adds	r4, #26
 8003002:	42b5      	cmp	r5, r6
 8003004:	d11a      	bne.n	800303c <_printf_common+0xcc>
 8003006:	2000      	movs	r0, #0
 8003008:	e008      	b.n	800301c <_printf_common+0xac>
 800300a:	2301      	movs	r3, #1
 800300c:	4652      	mov	r2, sl
 800300e:	4649      	mov	r1, r9
 8003010:	4638      	mov	r0, r7
 8003012:	47c0      	blx	r8
 8003014:	3001      	adds	r0, #1
 8003016:	d103      	bne.n	8003020 <_printf_common+0xb0>
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003020:	3501      	adds	r5, #1
 8003022:	e7c4      	b.n	8002fae <_printf_common+0x3e>
 8003024:	2030      	movs	r0, #48	; 0x30
 8003026:	18e1      	adds	r1, r4, r3
 8003028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003032:	4422      	add	r2, r4
 8003034:	3302      	adds	r3, #2
 8003036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800303a:	e7c5      	b.n	8002fc8 <_printf_common+0x58>
 800303c:	2301      	movs	r3, #1
 800303e:	4622      	mov	r2, r4
 8003040:	4649      	mov	r1, r9
 8003042:	4638      	mov	r0, r7
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d0e6      	beq.n	8003018 <_printf_common+0xa8>
 800304a:	3601      	adds	r6, #1
 800304c:	e7d9      	b.n	8003002 <_printf_common+0x92>
	...

08003050 <_printf_i>:
 8003050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	460c      	mov	r4, r1
 8003056:	7e27      	ldrb	r7, [r4, #24]
 8003058:	4691      	mov	r9, r2
 800305a:	2f78      	cmp	r7, #120	; 0x78
 800305c:	4680      	mov	r8, r0
 800305e:	469a      	mov	sl, r3
 8003060:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003062:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003066:	d807      	bhi.n	8003078 <_printf_i+0x28>
 8003068:	2f62      	cmp	r7, #98	; 0x62
 800306a:	d80a      	bhi.n	8003082 <_printf_i+0x32>
 800306c:	2f00      	cmp	r7, #0
 800306e:	f000 80d9 	beq.w	8003224 <_printf_i+0x1d4>
 8003072:	2f58      	cmp	r7, #88	; 0x58
 8003074:	f000 80a4 	beq.w	80031c0 <_printf_i+0x170>
 8003078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800307c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003080:	e03a      	b.n	80030f8 <_printf_i+0xa8>
 8003082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003086:	2b15      	cmp	r3, #21
 8003088:	d8f6      	bhi.n	8003078 <_printf_i+0x28>
 800308a:	a001      	add	r0, pc, #4	; (adr r0, 8003090 <_printf_i+0x40>)
 800308c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003079 	.word	0x08003079
 800309c:	08003079 	.word	0x08003079
 80030a0:	08003079 	.word	0x08003079
 80030a4:	08003079 	.word	0x08003079
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003079 	.word	0x08003079
 80030b0:	08003079 	.word	0x08003079
 80030b4:	08003079 	.word	0x08003079
 80030b8:	08003079 	.word	0x08003079
 80030bc:	0800320b 	.word	0x0800320b
 80030c0:	0800312d 	.word	0x0800312d
 80030c4:	080031ed 	.word	0x080031ed
 80030c8:	08003079 	.word	0x08003079
 80030cc:	08003079 	.word	0x08003079
 80030d0:	0800322d 	.word	0x0800322d
 80030d4:	08003079 	.word	0x08003079
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	08003079 	.word	0x08003079
 80030e0:	08003079 	.word	0x08003079
 80030e4:	080031f5 	.word	0x080031f5
 80030e8:	680b      	ldr	r3, [r1, #0]
 80030ea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	600a      	str	r2, [r1, #0]
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0a4      	b.n	8003246 <_printf_i+0x1f6>
 80030fc:	6825      	ldr	r5, [r4, #0]
 80030fe:	6808      	ldr	r0, [r1, #0]
 8003100:	062e      	lsls	r6, r5, #24
 8003102:	f100 0304 	add.w	r3, r0, #4
 8003106:	d50a      	bpl.n	800311e <_printf_i+0xce>
 8003108:	6805      	ldr	r5, [r0, #0]
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	2d00      	cmp	r5, #0
 800310e:	da03      	bge.n	8003118 <_printf_i+0xc8>
 8003110:	232d      	movs	r3, #45	; 0x2d
 8003112:	426d      	negs	r5, r5
 8003114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003118:	230a      	movs	r3, #10
 800311a:	485e      	ldr	r0, [pc, #376]	; (8003294 <_printf_i+0x244>)
 800311c:	e019      	b.n	8003152 <_printf_i+0x102>
 800311e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003122:	6805      	ldr	r5, [r0, #0]
 8003124:	600b      	str	r3, [r1, #0]
 8003126:	bf18      	it	ne
 8003128:	b22d      	sxthne	r5, r5
 800312a:	e7ef      	b.n	800310c <_printf_i+0xbc>
 800312c:	680b      	ldr	r3, [r1, #0]
 800312e:	6825      	ldr	r5, [r4, #0]
 8003130:	1d18      	adds	r0, r3, #4
 8003132:	6008      	str	r0, [r1, #0]
 8003134:	0628      	lsls	r0, r5, #24
 8003136:	d501      	bpl.n	800313c <_printf_i+0xec>
 8003138:	681d      	ldr	r5, [r3, #0]
 800313a:	e002      	b.n	8003142 <_printf_i+0xf2>
 800313c:	0669      	lsls	r1, r5, #25
 800313e:	d5fb      	bpl.n	8003138 <_printf_i+0xe8>
 8003140:	881d      	ldrh	r5, [r3, #0]
 8003142:	2f6f      	cmp	r7, #111	; 0x6f
 8003144:	bf0c      	ite	eq
 8003146:	2308      	moveq	r3, #8
 8003148:	230a      	movne	r3, #10
 800314a:	4852      	ldr	r0, [pc, #328]	; (8003294 <_printf_i+0x244>)
 800314c:	2100      	movs	r1, #0
 800314e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003152:	6866      	ldr	r6, [r4, #4]
 8003154:	2e00      	cmp	r6, #0
 8003156:	bfa8      	it	ge
 8003158:	6821      	ldrge	r1, [r4, #0]
 800315a:	60a6      	str	r6, [r4, #8]
 800315c:	bfa4      	itt	ge
 800315e:	f021 0104 	bicge.w	r1, r1, #4
 8003162:	6021      	strge	r1, [r4, #0]
 8003164:	b90d      	cbnz	r5, 800316a <_printf_i+0x11a>
 8003166:	2e00      	cmp	r6, #0
 8003168:	d04d      	beq.n	8003206 <_printf_i+0x1b6>
 800316a:	4616      	mov	r6, r2
 800316c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003170:	fb03 5711 	mls	r7, r3, r1, r5
 8003174:	5dc7      	ldrb	r7, [r0, r7]
 8003176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800317a:	462f      	mov	r7, r5
 800317c:	42bb      	cmp	r3, r7
 800317e:	460d      	mov	r5, r1
 8003180:	d9f4      	bls.n	800316c <_printf_i+0x11c>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d10b      	bne.n	800319e <_printf_i+0x14e>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	07df      	lsls	r7, r3, #31
 800318a:	d508      	bpl.n	800319e <_printf_i+0x14e>
 800318c:	6923      	ldr	r3, [r4, #16]
 800318e:	6861      	ldr	r1, [r4, #4]
 8003190:	4299      	cmp	r1, r3
 8003192:	bfde      	ittt	le
 8003194:	2330      	movle	r3, #48	; 0x30
 8003196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800319a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800319e:	1b92      	subs	r2, r2, r6
 80031a0:	6122      	str	r2, [r4, #16]
 80031a2:	464b      	mov	r3, r9
 80031a4:	4621      	mov	r1, r4
 80031a6:	4640      	mov	r0, r8
 80031a8:	f8cd a000 	str.w	sl, [sp]
 80031ac:	aa03      	add	r2, sp, #12
 80031ae:	f7ff fedf 	bl	8002f70 <_printf_common>
 80031b2:	3001      	adds	r0, #1
 80031b4:	d14c      	bne.n	8003250 <_printf_i+0x200>
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ba:	b004      	add	sp, #16
 80031bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c0:	4834      	ldr	r0, [pc, #208]	; (8003294 <_printf_i+0x244>)
 80031c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80031c6:	680e      	ldr	r6, [r1, #0]
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80031ce:	061f      	lsls	r7, r3, #24
 80031d0:	600e      	str	r6, [r1, #0]
 80031d2:	d514      	bpl.n	80031fe <_printf_i+0x1ae>
 80031d4:	07d9      	lsls	r1, r3, #31
 80031d6:	bf44      	itt	mi
 80031d8:	f043 0320 	orrmi.w	r3, r3, #32
 80031dc:	6023      	strmi	r3, [r4, #0]
 80031de:	b91d      	cbnz	r5, 80031e8 <_printf_i+0x198>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	f023 0320 	bic.w	r3, r3, #32
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	2310      	movs	r3, #16
 80031ea:	e7af      	b.n	800314c <_printf_i+0xfc>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	2378      	movs	r3, #120	; 0x78
 80031f6:	4828      	ldr	r0, [pc, #160]	; (8003298 <_printf_i+0x248>)
 80031f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031fc:	e7e3      	b.n	80031c6 <_printf_i+0x176>
 80031fe:	065e      	lsls	r6, r3, #25
 8003200:	bf48      	it	mi
 8003202:	b2ad      	uxthmi	r5, r5
 8003204:	e7e6      	b.n	80031d4 <_printf_i+0x184>
 8003206:	4616      	mov	r6, r2
 8003208:	e7bb      	b.n	8003182 <_printf_i+0x132>
 800320a:	680b      	ldr	r3, [r1, #0]
 800320c:	6826      	ldr	r6, [r4, #0]
 800320e:	1d1d      	adds	r5, r3, #4
 8003210:	6960      	ldr	r0, [r4, #20]
 8003212:	600d      	str	r5, [r1, #0]
 8003214:	0635      	lsls	r5, r6, #24
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	d501      	bpl.n	800321e <_printf_i+0x1ce>
 800321a:	6018      	str	r0, [r3, #0]
 800321c:	e002      	b.n	8003224 <_printf_i+0x1d4>
 800321e:	0671      	lsls	r1, r6, #25
 8003220:	d5fb      	bpl.n	800321a <_printf_i+0x1ca>
 8003222:	8018      	strh	r0, [r3, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	4616      	mov	r6, r2
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	e7ba      	b.n	80031a2 <_printf_i+0x152>
 800322c:	680b      	ldr	r3, [r1, #0]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	600a      	str	r2, [r1, #0]
 8003232:	681e      	ldr	r6, [r3, #0]
 8003234:	2100      	movs	r1, #0
 8003236:	4630      	mov	r0, r6
 8003238:	6862      	ldr	r2, [r4, #4]
 800323a:	f000 fa9d 	bl	8003778 <memchr>
 800323e:	b108      	cbz	r0, 8003244 <_printf_i+0x1f4>
 8003240:	1b80      	subs	r0, r0, r6
 8003242:	6060      	str	r0, [r4, #4]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	6123      	str	r3, [r4, #16]
 8003248:	2300      	movs	r3, #0
 800324a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324e:	e7a8      	b.n	80031a2 <_printf_i+0x152>
 8003250:	4632      	mov	r2, r6
 8003252:	4649      	mov	r1, r9
 8003254:	4640      	mov	r0, r8
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	47d0      	blx	sl
 800325a:	3001      	adds	r0, #1
 800325c:	d0ab      	beq.n	80031b6 <_printf_i+0x166>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	079b      	lsls	r3, r3, #30
 8003262:	d413      	bmi.n	800328c <_printf_i+0x23c>
 8003264:	68e0      	ldr	r0, [r4, #12]
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	4298      	cmp	r0, r3
 800326a:	bfb8      	it	lt
 800326c:	4618      	movlt	r0, r3
 800326e:	e7a4      	b.n	80031ba <_printf_i+0x16a>
 8003270:	2301      	movs	r3, #1
 8003272:	4632      	mov	r2, r6
 8003274:	4649      	mov	r1, r9
 8003276:	4640      	mov	r0, r8
 8003278:	47d0      	blx	sl
 800327a:	3001      	adds	r0, #1
 800327c:	d09b      	beq.n	80031b6 <_printf_i+0x166>
 800327e:	3501      	adds	r5, #1
 8003280:	68e3      	ldr	r3, [r4, #12]
 8003282:	9903      	ldr	r1, [sp, #12]
 8003284:	1a5b      	subs	r3, r3, r1
 8003286:	42ab      	cmp	r3, r5
 8003288:	dcf2      	bgt.n	8003270 <_printf_i+0x220>
 800328a:	e7eb      	b.n	8003264 <_printf_i+0x214>
 800328c:	2500      	movs	r5, #0
 800328e:	f104 0619 	add.w	r6, r4, #25
 8003292:	e7f5      	b.n	8003280 <_printf_i+0x230>
 8003294:	08003ab1 	.word	0x08003ab1
 8003298:	08003ac2 	.word	0x08003ac2

0800329c <_sbrk_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	; (80032b8 <_sbrk_r+0x1c>)
 80032a2:	4604      	mov	r4, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	f7fd fb2a 	bl	8000900 <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_sbrk_r+0x1a>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_sbrk_r+0x1a>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	200000f4 	.word	0x200000f4

080032bc <__sread>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	460c      	mov	r4, r1
 80032c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c4:	f000 fb0c 	bl	80038e0 <_read_r>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	bfab      	itete	ge
 80032cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032ce:	89a3      	ldrhlt	r3, [r4, #12]
 80032d0:	181b      	addge	r3, r3, r0
 80032d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032d6:	bfac      	ite	ge
 80032d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80032da:	81a3      	strhlt	r3, [r4, #12]
 80032dc:	bd10      	pop	{r4, pc}

080032de <__swrite>:
 80032de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e2:	461f      	mov	r7, r3
 80032e4:	898b      	ldrh	r3, [r1, #12]
 80032e6:	4605      	mov	r5, r0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	460c      	mov	r4, r1
 80032ec:	4616      	mov	r6, r2
 80032ee:	d505      	bpl.n	80032fc <__swrite+0x1e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	2200      	movs	r2, #0
 80032f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f8:	f000 f9c8 	bl	800368c <_lseek_r>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	4632      	mov	r2, r6
 8003300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	4628      	mov	r0, r5
 8003308:	463b      	mov	r3, r7
 800330a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	f000 b869 	b.w	80033e8 <_write_r>

08003316 <__sseek>:
 8003316:	b510      	push	{r4, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331e:	f000 f9b5 	bl	800368c <_lseek_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	bf15      	itete	ne
 8003328:	6560      	strne	r0, [r4, #84]	; 0x54
 800332a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800332e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003332:	81a3      	strheq	r3, [r4, #12]
 8003334:	bf18      	it	ne
 8003336:	81a3      	strhne	r3, [r4, #12]
 8003338:	bd10      	pop	{r4, pc}

0800333a <__sclose>:
 800333a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333e:	f000 b8d3 	b.w	80034e8 <_close_r>
	...

08003344 <__swbuf_r>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	460e      	mov	r6, r1
 8003348:	4614      	mov	r4, r2
 800334a:	4605      	mov	r5, r0
 800334c:	b118      	cbz	r0, 8003356 <__swbuf_r+0x12>
 800334e:	6983      	ldr	r3, [r0, #24]
 8003350:	b90b      	cbnz	r3, 8003356 <__swbuf_r+0x12>
 8003352:	f7ff fa5f 	bl	8002814 <__sinit>
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <__swbuf_r+0x98>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d12b      	bne.n	80033b4 <__swbuf_r+0x70>
 800335c:	686c      	ldr	r4, [r5, #4]
 800335e:	69a3      	ldr	r3, [r4, #24]
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	071a      	lsls	r2, r3, #28
 8003366:	d52f      	bpl.n	80033c8 <__swbuf_r+0x84>
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	b36b      	cbz	r3, 80033c8 <__swbuf_r+0x84>
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	b2f6      	uxtb	r6, r6
 8003372:	1ac0      	subs	r0, r0, r3
 8003374:	6963      	ldr	r3, [r4, #20]
 8003376:	4637      	mov	r7, r6
 8003378:	4283      	cmp	r3, r0
 800337a:	dc04      	bgt.n	8003386 <__swbuf_r+0x42>
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f000 f948 	bl	8003614 <_fflush_r>
 8003384:	bb30      	cbnz	r0, 80033d4 <__swbuf_r+0x90>
 8003386:	68a3      	ldr	r3, [r4, #8]
 8003388:	3001      	adds	r0, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	60a3      	str	r3, [r4, #8]
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	6022      	str	r2, [r4, #0]
 8003394:	701e      	strb	r6, [r3, #0]
 8003396:	6963      	ldr	r3, [r4, #20]
 8003398:	4283      	cmp	r3, r0
 800339a:	d004      	beq.n	80033a6 <__swbuf_r+0x62>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	07db      	lsls	r3, r3, #31
 80033a0:	d506      	bpl.n	80033b0 <__swbuf_r+0x6c>
 80033a2:	2e0a      	cmp	r6, #10
 80033a4:	d104      	bne.n	80033b0 <__swbuf_r+0x6c>
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f000 f933 	bl	8003614 <_fflush_r>
 80033ae:	b988      	cbnz	r0, 80033d4 <__swbuf_r+0x90>
 80033b0:	4638      	mov	r0, r7
 80033b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <__swbuf_r+0x9c>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	d101      	bne.n	80033be <__swbuf_r+0x7a>
 80033ba:	68ac      	ldr	r4, [r5, #8]
 80033bc:	e7cf      	b.n	800335e <__swbuf_r+0x1a>
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <__swbuf_r+0xa0>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	bf08      	it	eq
 80033c4:	68ec      	ldreq	r4, [r5, #12]
 80033c6:	e7ca      	b.n	800335e <__swbuf_r+0x1a>
 80033c8:	4621      	mov	r1, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 f81e 	bl	800340c <__swsetup_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0cb      	beq.n	800336c <__swbuf_r+0x28>
 80033d4:	f04f 37ff 	mov.w	r7, #4294967295
 80033d8:	e7ea      	b.n	80033b0 <__swbuf_r+0x6c>
 80033da:	bf00      	nop
 80033dc:	08003a60 	.word	0x08003a60
 80033e0:	08003a80 	.word	0x08003a80
 80033e4:	08003a40 	.word	0x08003a40

080033e8 <_write_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	4d05      	ldr	r5, [pc, #20]	; (8003408 <_write_r+0x20>)
 80033f4:	602a      	str	r2, [r5, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f7fd f862 	bl	80004c0 <_write>
 80033fc:	1c43      	adds	r3, r0, #1
 80033fe:	d102      	bne.n	8003406 <_write_r+0x1e>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	b103      	cbz	r3, 8003406 <_write_r+0x1e>
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	200000f4 	.word	0x200000f4

0800340c <__swsetup_r>:
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <__swsetup_r+0xcc>)
 800340e:	b570      	push	{r4, r5, r6, lr}
 8003410:	681d      	ldr	r5, [r3, #0]
 8003412:	4606      	mov	r6, r0
 8003414:	460c      	mov	r4, r1
 8003416:	b125      	cbz	r5, 8003422 <__swsetup_r+0x16>
 8003418:	69ab      	ldr	r3, [r5, #24]
 800341a:	b913      	cbnz	r3, 8003422 <__swsetup_r+0x16>
 800341c:	4628      	mov	r0, r5
 800341e:	f7ff f9f9 	bl	8002814 <__sinit>
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <__swsetup_r+0xd0>)
 8003424:	429c      	cmp	r4, r3
 8003426:	d10f      	bne.n	8003448 <__swsetup_r+0x3c>
 8003428:	686c      	ldr	r4, [r5, #4]
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003430:	0719      	lsls	r1, r3, #28
 8003432:	d42c      	bmi.n	800348e <__swsetup_r+0x82>
 8003434:	06dd      	lsls	r5, r3, #27
 8003436:	d411      	bmi.n	800345c <__swsetup_r+0x50>
 8003438:	2309      	movs	r3, #9
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	e03e      	b.n	80034c6 <__swsetup_r+0xba>
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <__swsetup_r+0xd4>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d101      	bne.n	8003452 <__swsetup_r+0x46>
 800344e:	68ac      	ldr	r4, [r5, #8]
 8003450:	e7eb      	b.n	800342a <__swsetup_r+0x1e>
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <__swsetup_r+0xd8>)
 8003454:	429c      	cmp	r4, r3
 8003456:	bf08      	it	eq
 8003458:	68ec      	ldreq	r4, [r5, #12]
 800345a:	e7e6      	b.n	800342a <__swsetup_r+0x1e>
 800345c:	0758      	lsls	r0, r3, #29
 800345e:	d512      	bpl.n	8003486 <__swsetup_r+0x7a>
 8003460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003462:	b141      	cbz	r1, 8003476 <__swsetup_r+0x6a>
 8003464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003468:	4299      	cmp	r1, r3
 800346a:	d002      	beq.n	8003472 <__swsetup_r+0x66>
 800346c:	4630      	mov	r0, r6
 800346e:	f000 f9c5 	bl	80037fc <_free_r>
 8003472:	2300      	movs	r3, #0
 8003474:	6363      	str	r3, [r4, #52]	; 0x34
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	2300      	movs	r3, #0
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	b94b      	cbnz	r3, 80034a6 <__swsetup_r+0x9a>
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d003      	beq.n	80034a6 <__swsetup_r+0x9a>
 800349e:	4621      	mov	r1, r4
 80034a0:	4630      	mov	r0, r6
 80034a2:	f000 f929 	bl	80036f8 <__smakebuf_r>
 80034a6:	89a0      	ldrh	r0, [r4, #12]
 80034a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ac:	f010 0301 	ands.w	r3, r0, #1
 80034b0:	d00a      	beq.n	80034c8 <__swsetup_r+0xbc>
 80034b2:	2300      	movs	r3, #0
 80034b4:	60a3      	str	r3, [r4, #8]
 80034b6:	6963      	ldr	r3, [r4, #20]
 80034b8:	425b      	negs	r3, r3
 80034ba:	61a3      	str	r3, [r4, #24]
 80034bc:	6923      	ldr	r3, [r4, #16]
 80034be:	b943      	cbnz	r3, 80034d2 <__swsetup_r+0xc6>
 80034c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034c4:	d1ba      	bne.n	800343c <__swsetup_r+0x30>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	0781      	lsls	r1, r0, #30
 80034ca:	bf58      	it	pl
 80034cc:	6963      	ldrpl	r3, [r4, #20]
 80034ce:	60a3      	str	r3, [r4, #8]
 80034d0:	e7f4      	b.n	80034bc <__swsetup_r+0xb0>
 80034d2:	2000      	movs	r0, #0
 80034d4:	e7f7      	b.n	80034c6 <__swsetup_r+0xba>
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	08003a60 	.word	0x08003a60
 80034e0:	08003a80 	.word	0x08003a80
 80034e4:	08003a40 	.word	0x08003a40

080034e8 <_close_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	2300      	movs	r3, #0
 80034ec:	4d05      	ldr	r5, [pc, #20]	; (8003504 <_close_r+0x1c>)
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	f7fd f9d3 	bl	800089e <_close>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_close_r+0x1a>
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_close_r+0x1a>
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	200000f4 	.word	0x200000f4

08003508 <__sflush_r>:
 8003508:	898a      	ldrh	r2, [r1, #12]
 800350a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	4605      	mov	r5, r0
 8003510:	0710      	lsls	r0, r2, #28
 8003512:	460c      	mov	r4, r1
 8003514:	d458      	bmi.n	80035c8 <__sflush_r+0xc0>
 8003516:	684b      	ldr	r3, [r1, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	dc05      	bgt.n	8003528 <__sflush_r+0x20>
 800351c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	dc02      	bgt.n	8003528 <__sflush_r+0x20>
 8003522:	2000      	movs	r0, #0
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800352a:	2e00      	cmp	r6, #0
 800352c:	d0f9      	beq.n	8003522 <__sflush_r+0x1a>
 800352e:	2300      	movs	r3, #0
 8003530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003534:	682f      	ldr	r7, [r5, #0]
 8003536:	602b      	str	r3, [r5, #0]
 8003538:	d032      	beq.n	80035a0 <__sflush_r+0x98>
 800353a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	075a      	lsls	r2, r3, #29
 8003540:	d505      	bpl.n	800354e <__sflush_r+0x46>
 8003542:	6863      	ldr	r3, [r4, #4]
 8003544:	1ac0      	subs	r0, r0, r3
 8003546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003548:	b10b      	cbz	r3, 800354e <__sflush_r+0x46>
 800354a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800354c:	1ac0      	subs	r0, r0, r3
 800354e:	2300      	movs	r3, #0
 8003550:	4602      	mov	r2, r0
 8003552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003554:	4628      	mov	r0, r5
 8003556:	6a21      	ldr	r1, [r4, #32]
 8003558:	47b0      	blx	r6
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	d106      	bne.n	800356e <__sflush_r+0x66>
 8003560:	6829      	ldr	r1, [r5, #0]
 8003562:	291d      	cmp	r1, #29
 8003564:	d82c      	bhi.n	80035c0 <__sflush_r+0xb8>
 8003566:	4a2a      	ldr	r2, [pc, #168]	; (8003610 <__sflush_r+0x108>)
 8003568:	40ca      	lsrs	r2, r1
 800356a:	07d6      	lsls	r6, r2, #31
 800356c:	d528      	bpl.n	80035c0 <__sflush_r+0xb8>
 800356e:	2200      	movs	r2, #0
 8003570:	6062      	str	r2, [r4, #4]
 8003572:	6922      	ldr	r2, [r4, #16]
 8003574:	04d9      	lsls	r1, r3, #19
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	d504      	bpl.n	8003584 <__sflush_r+0x7c>
 800357a:	1c42      	adds	r2, r0, #1
 800357c:	d101      	bne.n	8003582 <__sflush_r+0x7a>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	b903      	cbnz	r3, 8003584 <__sflush_r+0x7c>
 8003582:	6560      	str	r0, [r4, #84]	; 0x54
 8003584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003586:	602f      	str	r7, [r5, #0]
 8003588:	2900      	cmp	r1, #0
 800358a:	d0ca      	beq.n	8003522 <__sflush_r+0x1a>
 800358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003590:	4299      	cmp	r1, r3
 8003592:	d002      	beq.n	800359a <__sflush_r+0x92>
 8003594:	4628      	mov	r0, r5
 8003596:	f000 f931 	bl	80037fc <_free_r>
 800359a:	2000      	movs	r0, #0
 800359c:	6360      	str	r0, [r4, #52]	; 0x34
 800359e:	e7c1      	b.n	8003524 <__sflush_r+0x1c>
 80035a0:	6a21      	ldr	r1, [r4, #32]
 80035a2:	2301      	movs	r3, #1
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b0      	blx	r6
 80035a8:	1c41      	adds	r1, r0, #1
 80035aa:	d1c7      	bne.n	800353c <__sflush_r+0x34>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0c4      	beq.n	800353c <__sflush_r+0x34>
 80035b2:	2b1d      	cmp	r3, #29
 80035b4:	d001      	beq.n	80035ba <__sflush_r+0xb2>
 80035b6:	2b16      	cmp	r3, #22
 80035b8:	d101      	bne.n	80035be <__sflush_r+0xb6>
 80035ba:	602f      	str	r7, [r5, #0]
 80035bc:	e7b1      	b.n	8003522 <__sflush_r+0x1a>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	e7ad      	b.n	8003524 <__sflush_r+0x1c>
 80035c8:	690f      	ldr	r7, [r1, #16]
 80035ca:	2f00      	cmp	r7, #0
 80035cc:	d0a9      	beq.n	8003522 <__sflush_r+0x1a>
 80035ce:	0793      	lsls	r3, r2, #30
 80035d0:	bf18      	it	ne
 80035d2:	2300      	movne	r3, #0
 80035d4:	680e      	ldr	r6, [r1, #0]
 80035d6:	bf08      	it	eq
 80035d8:	694b      	ldreq	r3, [r1, #20]
 80035da:	eba6 0807 	sub.w	r8, r6, r7
 80035de:	600f      	str	r7, [r1, #0]
 80035e0:	608b      	str	r3, [r1, #8]
 80035e2:	f1b8 0f00 	cmp.w	r8, #0
 80035e6:	dd9c      	ble.n	8003522 <__sflush_r+0x1a>
 80035e8:	4643      	mov	r3, r8
 80035ea:	463a      	mov	r2, r7
 80035ec:	4628      	mov	r0, r5
 80035ee:	6a21      	ldr	r1, [r4, #32]
 80035f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035f2:	47b0      	blx	r6
 80035f4:	2800      	cmp	r0, #0
 80035f6:	dc06      	bgt.n	8003606 <__sflush_r+0xfe>
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	e78e      	b.n	8003524 <__sflush_r+0x1c>
 8003606:	4407      	add	r7, r0
 8003608:	eba8 0800 	sub.w	r8, r8, r0
 800360c:	e7e9      	b.n	80035e2 <__sflush_r+0xda>
 800360e:	bf00      	nop
 8003610:	20400001 	.word	0x20400001

08003614 <_fflush_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	690b      	ldr	r3, [r1, #16]
 8003618:	4605      	mov	r5, r0
 800361a:	460c      	mov	r4, r1
 800361c:	b913      	cbnz	r3, 8003624 <_fflush_r+0x10>
 800361e:	2500      	movs	r5, #0
 8003620:	4628      	mov	r0, r5
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	b118      	cbz	r0, 800362e <_fflush_r+0x1a>
 8003626:	6983      	ldr	r3, [r0, #24]
 8003628:	b90b      	cbnz	r3, 800362e <_fflush_r+0x1a>
 800362a:	f7ff f8f3 	bl	8002814 <__sinit>
 800362e:	4b14      	ldr	r3, [pc, #80]	; (8003680 <_fflush_r+0x6c>)
 8003630:	429c      	cmp	r4, r3
 8003632:	d11b      	bne.n	800366c <_fflush_r+0x58>
 8003634:	686c      	ldr	r4, [r5, #4]
 8003636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0ef      	beq.n	800361e <_fflush_r+0xa>
 800363e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003640:	07d0      	lsls	r0, r2, #31
 8003642:	d404      	bmi.n	800364e <_fflush_r+0x3a>
 8003644:	0599      	lsls	r1, r3, #22
 8003646:	d402      	bmi.n	800364e <_fflush_r+0x3a>
 8003648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800364a:	f7ff f981 	bl	8002950 <__retarget_lock_acquire_recursive>
 800364e:	4628      	mov	r0, r5
 8003650:	4621      	mov	r1, r4
 8003652:	f7ff ff59 	bl	8003508 <__sflush_r>
 8003656:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003658:	4605      	mov	r5, r0
 800365a:	07da      	lsls	r2, r3, #31
 800365c:	d4e0      	bmi.n	8003620 <_fflush_r+0xc>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	059b      	lsls	r3, r3, #22
 8003662:	d4dd      	bmi.n	8003620 <_fflush_r+0xc>
 8003664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003666:	f7ff f974 	bl	8002952 <__retarget_lock_release_recursive>
 800366a:	e7d9      	b.n	8003620 <_fflush_r+0xc>
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <_fflush_r+0x70>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d101      	bne.n	8003676 <_fflush_r+0x62>
 8003672:	68ac      	ldr	r4, [r5, #8]
 8003674:	e7df      	b.n	8003636 <_fflush_r+0x22>
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <_fflush_r+0x74>)
 8003678:	429c      	cmp	r4, r3
 800367a:	bf08      	it	eq
 800367c:	68ec      	ldreq	r4, [r5, #12]
 800367e:	e7da      	b.n	8003636 <_fflush_r+0x22>
 8003680:	08003a60 	.word	0x08003a60
 8003684:	08003a80 	.word	0x08003a80
 8003688:	08003a40 	.word	0x08003a40

0800368c <_lseek_r>:
 800368c:	b538      	push	{r3, r4, r5, lr}
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	2200      	movs	r2, #0
 8003696:	4d05      	ldr	r5, [pc, #20]	; (80036ac <_lseek_r+0x20>)
 8003698:	602a      	str	r2, [r5, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f7fd f923 	bl	80008e6 <_lseek>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_lseek_r+0x1e>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_lseek_r+0x1e>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	200000f4 	.word	0x200000f4

080036b0 <__swhatbuf_r>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	460e      	mov	r6, r1
 80036b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b8:	4614      	mov	r4, r2
 80036ba:	2900      	cmp	r1, #0
 80036bc:	461d      	mov	r5, r3
 80036be:	b096      	sub	sp, #88	; 0x58
 80036c0:	da07      	bge.n	80036d2 <__swhatbuf_r+0x22>
 80036c2:	2300      	movs	r3, #0
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	89b3      	ldrh	r3, [r6, #12]
 80036c8:	061a      	lsls	r2, r3, #24
 80036ca:	d410      	bmi.n	80036ee <__swhatbuf_r+0x3e>
 80036cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d0:	e00e      	b.n	80036f0 <__swhatbuf_r+0x40>
 80036d2:	466a      	mov	r2, sp
 80036d4:	f000 f916 	bl	8003904 <_fstat_r>
 80036d8:	2800      	cmp	r0, #0
 80036da:	dbf2      	blt.n	80036c2 <__swhatbuf_r+0x12>
 80036dc:	9a01      	ldr	r2, [sp, #4]
 80036de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e6:	425a      	negs	r2, r3
 80036e8:	415a      	adcs	r2, r3
 80036ea:	602a      	str	r2, [r5, #0]
 80036ec:	e7ee      	b.n	80036cc <__swhatbuf_r+0x1c>
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	2000      	movs	r0, #0
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	b016      	add	sp, #88	; 0x58
 80036f6:	bd70      	pop	{r4, r5, r6, pc}

080036f8 <__smakebuf_r>:
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	079d      	lsls	r5, r3, #30
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	d507      	bpl.n	8003714 <__smakebuf_r+0x1c>
 8003704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2301      	movs	r3, #1
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	466a      	mov	r2, sp
 8003716:	ab01      	add	r3, sp, #4
 8003718:	f7ff ffca 	bl	80036b0 <__swhatbuf_r>
 800371c:	9900      	ldr	r1, [sp, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff f917 	bl	8002954 <_malloc_r>
 8003726:	b948      	cbnz	r0, 800373c <__smakebuf_r+0x44>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	059a      	lsls	r2, r3, #22
 800372e:	d4ef      	bmi.n	8003710 <__smakebuf_r+0x18>
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e7e3      	b.n	8003704 <__smakebuf_r+0xc>
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <__smakebuf_r+0x7c>)
 800373e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	6020      	str	r0, [r4, #0]
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	6120      	str	r0, [r4, #16]
 800374e:	6163      	str	r3, [r4, #20]
 8003750:	9b01      	ldr	r3, [sp, #4]
 8003752:	b15b      	cbz	r3, 800376c <__smakebuf_r+0x74>
 8003754:	4630      	mov	r0, r6
 8003756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375a:	f000 f8e5 	bl	8003928 <_isatty_r>
 800375e:	b128      	cbz	r0, 800376c <__smakebuf_r+0x74>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	89a0      	ldrh	r0, [r4, #12]
 800376e:	4305      	orrs	r5, r0
 8003770:	81a5      	strh	r5, [r4, #12]
 8003772:	e7cd      	b.n	8003710 <__smakebuf_r+0x18>
 8003774:	080027ad 	.word	0x080027ad

08003778 <memchr>:
 8003778:	4603      	mov	r3, r0
 800377a:	b510      	push	{r4, lr}
 800377c:	b2c9      	uxtb	r1, r1
 800377e:	4402      	add	r2, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	d101      	bne.n	800378a <memchr+0x12>
 8003786:	2000      	movs	r0, #0
 8003788:	e003      	b.n	8003792 <memchr+0x1a>
 800378a:	7804      	ldrb	r4, [r0, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	428c      	cmp	r4, r1
 8003790:	d1f6      	bne.n	8003780 <memchr+0x8>
 8003792:	bd10      	pop	{r4, pc}

08003794 <memcpy>:
 8003794:	440a      	add	r2, r1
 8003796:	4291      	cmp	r1, r2
 8003798:	f100 33ff 	add.w	r3, r0, #4294967295
 800379c:	d100      	bne.n	80037a0 <memcpy+0xc>
 800379e:	4770      	bx	lr
 80037a0:	b510      	push	{r4, lr}
 80037a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ac:	d1f9      	bne.n	80037a2 <memcpy+0xe>
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <memmove>:
 80037b0:	4288      	cmp	r0, r1
 80037b2:	b510      	push	{r4, lr}
 80037b4:	eb01 0402 	add.w	r4, r1, r2
 80037b8:	d902      	bls.n	80037c0 <memmove+0x10>
 80037ba:	4284      	cmp	r4, r0
 80037bc:	4623      	mov	r3, r4
 80037be:	d807      	bhi.n	80037d0 <memmove+0x20>
 80037c0:	1e43      	subs	r3, r0, #1
 80037c2:	42a1      	cmp	r1, r4
 80037c4:	d008      	beq.n	80037d8 <memmove+0x28>
 80037c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ce:	e7f8      	b.n	80037c2 <memmove+0x12>
 80037d0:	4601      	mov	r1, r0
 80037d2:	4402      	add	r2, r0
 80037d4:	428a      	cmp	r2, r1
 80037d6:	d100      	bne.n	80037da <memmove+0x2a>
 80037d8:	bd10      	pop	{r4, pc}
 80037da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037e2:	e7f7      	b.n	80037d4 <memmove+0x24>

080037e4 <__malloc_lock>:
 80037e4:	4801      	ldr	r0, [pc, #4]	; (80037ec <__malloc_lock+0x8>)
 80037e6:	f7ff b8b3 	b.w	8002950 <__retarget_lock_acquire_recursive>
 80037ea:	bf00      	nop
 80037ec:	200000ec 	.word	0x200000ec

080037f0 <__malloc_unlock>:
 80037f0:	4801      	ldr	r0, [pc, #4]	; (80037f8 <__malloc_unlock+0x8>)
 80037f2:	f7ff b8ae 	b.w	8002952 <__retarget_lock_release_recursive>
 80037f6:	bf00      	nop
 80037f8:	200000ec 	.word	0x200000ec

080037fc <_free_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4605      	mov	r5, r0
 8003800:	2900      	cmp	r1, #0
 8003802:	d043      	beq.n	800388c <_free_r+0x90>
 8003804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003808:	1f0c      	subs	r4, r1, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	bfb8      	it	lt
 800380e:	18e4      	addlt	r4, r4, r3
 8003810:	f7ff ffe8 	bl	80037e4 <__malloc_lock>
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <_free_r+0x94>)
 8003816:	6813      	ldr	r3, [r2, #0]
 8003818:	4610      	mov	r0, r2
 800381a:	b933      	cbnz	r3, 800382a <_free_r+0x2e>
 800381c:	6063      	str	r3, [r4, #4]
 800381e:	6014      	str	r4, [r2, #0]
 8003820:	4628      	mov	r0, r5
 8003822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003826:	f7ff bfe3 	b.w	80037f0 <__malloc_unlock>
 800382a:	42a3      	cmp	r3, r4
 800382c:	d90a      	bls.n	8003844 <_free_r+0x48>
 800382e:	6821      	ldr	r1, [r4, #0]
 8003830:	1862      	adds	r2, r4, r1
 8003832:	4293      	cmp	r3, r2
 8003834:	bf01      	itttt	eq
 8003836:	681a      	ldreq	r2, [r3, #0]
 8003838:	685b      	ldreq	r3, [r3, #4]
 800383a:	1852      	addeq	r2, r2, r1
 800383c:	6022      	streq	r2, [r4, #0]
 800383e:	6063      	str	r3, [r4, #4]
 8003840:	6004      	str	r4, [r0, #0]
 8003842:	e7ed      	b.n	8003820 <_free_r+0x24>
 8003844:	461a      	mov	r2, r3
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	b10b      	cbz	r3, 800384e <_free_r+0x52>
 800384a:	42a3      	cmp	r3, r4
 800384c:	d9fa      	bls.n	8003844 <_free_r+0x48>
 800384e:	6811      	ldr	r1, [r2, #0]
 8003850:	1850      	adds	r0, r2, r1
 8003852:	42a0      	cmp	r0, r4
 8003854:	d10b      	bne.n	800386e <_free_r+0x72>
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	4401      	add	r1, r0
 800385a:	1850      	adds	r0, r2, r1
 800385c:	4283      	cmp	r3, r0
 800385e:	6011      	str	r1, [r2, #0]
 8003860:	d1de      	bne.n	8003820 <_free_r+0x24>
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4401      	add	r1, r0
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	e7d8      	b.n	8003820 <_free_r+0x24>
 800386e:	d902      	bls.n	8003876 <_free_r+0x7a>
 8003870:	230c      	movs	r3, #12
 8003872:	602b      	str	r3, [r5, #0]
 8003874:	e7d4      	b.n	8003820 <_free_r+0x24>
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	1821      	adds	r1, r4, r0
 800387a:	428b      	cmp	r3, r1
 800387c:	bf01      	itttt	eq
 800387e:	6819      	ldreq	r1, [r3, #0]
 8003880:	685b      	ldreq	r3, [r3, #4]
 8003882:	1809      	addeq	r1, r1, r0
 8003884:	6021      	streq	r1, [r4, #0]
 8003886:	6063      	str	r3, [r4, #4]
 8003888:	6054      	str	r4, [r2, #4]
 800388a:	e7c9      	b.n	8003820 <_free_r+0x24>
 800388c:	bd38      	pop	{r3, r4, r5, pc}
 800388e:	bf00      	nop
 8003890:	20000090 	.word	0x20000090

08003894 <_realloc_r>:
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003896:	4607      	mov	r7, r0
 8003898:	4614      	mov	r4, r2
 800389a:	460e      	mov	r6, r1
 800389c:	b921      	cbnz	r1, 80038a8 <_realloc_r+0x14>
 800389e:	4611      	mov	r1, r2
 80038a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80038a4:	f7ff b856 	b.w	8002954 <_malloc_r>
 80038a8:	b922      	cbnz	r2, 80038b4 <_realloc_r+0x20>
 80038aa:	f7ff ffa7 	bl	80037fc <_free_r>
 80038ae:	4625      	mov	r5, r4
 80038b0:	4628      	mov	r0, r5
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b4:	f000 f848 	bl	8003948 <_malloc_usable_size_r>
 80038b8:	42a0      	cmp	r0, r4
 80038ba:	d20f      	bcs.n	80038dc <_realloc_r+0x48>
 80038bc:	4621      	mov	r1, r4
 80038be:	4638      	mov	r0, r7
 80038c0:	f7ff f848 	bl	8002954 <_malloc_r>
 80038c4:	4605      	mov	r5, r0
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0f2      	beq.n	80038b0 <_realloc_r+0x1c>
 80038ca:	4631      	mov	r1, r6
 80038cc:	4622      	mov	r2, r4
 80038ce:	f7ff ff61 	bl	8003794 <memcpy>
 80038d2:	4631      	mov	r1, r6
 80038d4:	4638      	mov	r0, r7
 80038d6:	f7ff ff91 	bl	80037fc <_free_r>
 80038da:	e7e9      	b.n	80038b0 <_realloc_r+0x1c>
 80038dc:	4635      	mov	r5, r6
 80038de:	e7e7      	b.n	80038b0 <_realloc_r+0x1c>

080038e0 <_read_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4604      	mov	r4, r0
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	2200      	movs	r2, #0
 80038ea:	4d05      	ldr	r5, [pc, #20]	; (8003900 <_read_r+0x20>)
 80038ec:	602a      	str	r2, [r5, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f7fc ffb8 	bl	8000864 <_read>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_read_r+0x1e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_read_r+0x1e>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	200000f4 	.word	0x200000f4

08003904 <_fstat_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	2300      	movs	r3, #0
 8003908:	4d06      	ldr	r5, [pc, #24]	; (8003924 <_fstat_r+0x20>)
 800390a:	4604      	mov	r4, r0
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	602b      	str	r3, [r5, #0]
 8003912:	f7fc ffcf 	bl	80008b4 <_fstat>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	d102      	bne.n	8003920 <_fstat_r+0x1c>
 800391a:	682b      	ldr	r3, [r5, #0]
 800391c:	b103      	cbz	r3, 8003920 <_fstat_r+0x1c>
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	200000f4 	.word	0x200000f4

08003928 <_isatty_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	2300      	movs	r3, #0
 800392c:	4d05      	ldr	r5, [pc, #20]	; (8003944 <_isatty_r+0x1c>)
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fc ffcd 	bl	80008d2 <_isatty>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_isatty_r+0x1a>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_isatty_r+0x1a>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	200000f4 	.word	0x200000f4

08003948 <_malloc_usable_size_r>:
 8003948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800394c:	1f18      	subs	r0, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	bfbc      	itt	lt
 8003952:	580b      	ldrlt	r3, [r1, r0]
 8003954:	18c0      	addlt	r0, r0, r3
 8003956:	4770      	bx	lr

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr
