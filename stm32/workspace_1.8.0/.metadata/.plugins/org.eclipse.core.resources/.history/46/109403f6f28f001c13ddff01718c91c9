/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "string.h"
#include "UartRingbuffer.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define ITM_Port32(n)   (*((volatile unsigned long *)(0xE0000000+4*n)))
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

extern void Uart_isr (UART_HandleTypeDef *huart);

//uint16_t Loop = 0;
//uint16_t Data = 0;

char SSID[] = "Cloudwifi-167-504-P";
char PASSWD[] = "CWAE1923";
char buffer[20];

void wifi_initialization() {
	// Tutorial: https://controllerstech.com/esp8266-webserver-using-stm32-hal/
	// Basic AT commands: https://www.electronicshub.org/esp8266-at-commands/

	char rx_buffer[100];

	/********* Reset WIFI module **********/
	char command[] = "AT+RST\r\n";

	int transmit_val = HAL_UART_Transmit_IT(&huart2, (uint8_t *)command,  sizeof(command));
	printf("transmit_val: %d\n", transmit_val);

//	HAL_UART_Receive(&huart2, (uint8_t *)in, 8, 1000);
	int return_val = HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buffer,  sizeof(rx_buffer));
	printf("return_val: %d\n", return_val);


//	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
//	printf("AT+RST---->OK\n\n");

	/********* AT**********/
////	Uart_sendstring("AT\r\n");
//	char command[] = "AT\r\n";
////	HAL_UART_Transmit(&huart2, command,  sizeof(command), 1000);
//	int transmit_val = HAL_UART_Transmit_IT(&huart2, (uint8_t *)command,  sizeof(command));
//
////	HAL_UART_Receive(&huart2, (uint8_t *)in, 8, 1000);
//	int return_val = HAL_UART_Receive_IT(&huart2, (uint8_t *)in,  sizeof(in));
//	printf("%d", return_val);
//
////	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
//	printf("AT---->OK\n\n");

//	/********* AT+CWMODE=1 (station mode) **********/
//	Uart_sendstring("AT+CWMODE=1\r\n");
//	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
//	printf("CW MODE---->1\n\n");
//
//	/********* AT+CWJAP="SSID","PASSWD" - connect to AP **********/
//	printf("connecting... to the provided AP\n");
//	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
//	Uart_sendstring(data);
//	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));
//	printf ("Connected to,\"%s\"\n\n", SSID);
//
//
//	/********* AT+CIFSR - obtain ip of esp8266 **********/
//	Uart_sendstring("AT+CIFSR\r\n");
//	while (!(Wait_for("CIFSR:STAIP,\"")));
//	while (!(Copy_upto("\"",buffer)));
//	while (!(Wait_for("OK\r\n")));
//	int len = strlen (buffer);
//	buffer[len-1] = '\0';
//	printf ("ESP8266 IP ADDR: %s\n\n", buffer);



}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
  wifi_initialization();
  printf("Initialization Completed\r\n");
  ITM_Port32(31) = 2; // change value of same port from 1 to 2
//  ESP_Init("Cloudwifi-167-504-P", "CWAE1923", "10.20.101.219");
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("I'm in the main loop!\r\n");
//	  HAL_Delay(500);
//	  printf("Loop counter = %i\r\n", Loop);
//	  Loop++;
//	  if (Loop > 100){
//		  Loop = 0;
//	  }
//	  HAL_Delay(50);
//	  if (Loop < 25) {
//		  Data +=5;
//	  } else {
//		  Data -=1000;
//	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

}

/* USER CODE BEGIN 4 */
// Use GCC for printf
// Avoid wasting a UART terminal just for writing
int _write(int file, char *ptr, int len) {
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
		ITM_SendChar(*ptr++);
	}
	return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

