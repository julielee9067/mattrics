
STM32L152RBT6A_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ff4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006224  08006224  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800622c  0800622c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800622c  0800622c  0001622c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08006234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000b8  080062ec  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080062ec  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef83  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002303  00000000  00000000  0002f064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  000320d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003023  00000000  00000000  00032d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecbf  00000000  00000000  00035dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082bfa  00000000  00000000  00044a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f08  00000000  00000000  000c76c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000b8 	.word	0x200000b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08006118 	.word	0x08006118

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000bc 	.word	0x200000bc
 8000178:	08006118 	.word	0x08006118

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_frsub>:
 80002e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e8:	e002      	b.n	80002f0 <__addsf3>
 80002ea:	bf00      	nop

080002ec <__aeabi_fsub>:
 80002ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002f0 <__addsf3>:
 80002f0:	0042      	lsls	r2, r0, #1
 80002f2:	bf1f      	itttt	ne
 80002f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f8:	ea92 0f03 	teqne	r2, r3
 80002fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000300:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000304:	d06a      	beq.n	80003dc <__addsf3+0xec>
 8000306:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800030a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030e:	bfc1      	itttt	gt
 8000310:	18d2      	addgt	r2, r2, r3
 8000312:	4041      	eorgt	r1, r0
 8000314:	4048      	eorgt	r0, r1
 8000316:	4041      	eorgt	r1, r0
 8000318:	bfb8      	it	lt
 800031a:	425b      	neglt	r3, r3
 800031c:	2b19      	cmp	r3, #25
 800031e:	bf88      	it	hi
 8000320:	4770      	bxhi	lr
 8000322:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032e:	bf18      	it	ne
 8000330:	4240      	negne	r0, r0
 8000332:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000336:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800033a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033e:	bf18      	it	ne
 8000340:	4249      	negne	r1, r1
 8000342:	ea92 0f03 	teq	r2, r3
 8000346:	d03f      	beq.n	80003c8 <__addsf3+0xd8>
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
 800034c:	fa41 fc03 	asr.w	ip, r1, r3
 8000350:	eb10 000c 	adds.w	r0, r0, ip
 8000354:	f1c3 0320 	rsb	r3, r3, #32
 8000358:	fa01 f103 	lsl.w	r1, r1, r3
 800035c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000360:	d502      	bpl.n	8000368 <__addsf3+0x78>
 8000362:	4249      	negs	r1, r1
 8000364:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800036c:	d313      	bcc.n	8000396 <__addsf3+0xa6>
 800036e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000372:	d306      	bcc.n	8000382 <__addsf3+0x92>
 8000374:	0840      	lsrs	r0, r0, #1
 8000376:	ea4f 0131 	mov.w	r1, r1, rrx
 800037a:	f102 0201 	add.w	r2, r2, #1
 800037e:	2afe      	cmp	r2, #254	; 0xfe
 8000380:	d251      	bcs.n	8000426 <__addsf3+0x136>
 8000382:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000386:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800038a:	bf08      	it	eq
 800038c:	f020 0001 	biceq.w	r0, r0, #1
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	4770      	bx	lr
 8000396:	0049      	lsls	r1, r1, #1
 8000398:	eb40 0000 	adc.w	r0, r0, r0
 800039c:	3a01      	subs	r2, #1
 800039e:	bf28      	it	cs
 80003a0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a4:	d2ed      	bcs.n	8000382 <__addsf3+0x92>
 80003a6:	fab0 fc80 	clz	ip, r0
 80003aa:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ae:	ebb2 020c 	subs.w	r2, r2, ip
 80003b2:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b6:	bfaa      	itet	ge
 80003b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003bc:	4252      	neglt	r2, r2
 80003be:	4318      	orrge	r0, r3
 80003c0:	bfbc      	itt	lt
 80003c2:	40d0      	lsrlt	r0, r2
 80003c4:	4318      	orrlt	r0, r3
 80003c6:	4770      	bx	lr
 80003c8:	f092 0f00 	teq	r2, #0
 80003cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003d0:	bf06      	itte	eq
 80003d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d6:	3201      	addeq	r2, #1
 80003d8:	3b01      	subne	r3, #1
 80003da:	e7b5      	b.n	8000348 <__addsf3+0x58>
 80003dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e4:	bf18      	it	ne
 80003e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ea:	d021      	beq.n	8000430 <__addsf3+0x140>
 80003ec:	ea92 0f03 	teq	r2, r3
 80003f0:	d004      	beq.n	80003fc <__addsf3+0x10c>
 80003f2:	f092 0f00 	teq	r2, #0
 80003f6:	bf08      	it	eq
 80003f8:	4608      	moveq	r0, r1
 80003fa:	4770      	bx	lr
 80003fc:	ea90 0f01 	teq	r0, r1
 8000400:	bf1c      	itt	ne
 8000402:	2000      	movne	r0, #0
 8000404:	4770      	bxne	lr
 8000406:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800040a:	d104      	bne.n	8000416 <__addsf3+0x126>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	bf28      	it	cs
 8000410:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000414:	4770      	bx	lr
 8000416:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800041a:	bf3c      	itt	cc
 800041c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000420:	4770      	bxcc	lr
 8000422:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000426:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800042a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042e:	4770      	bx	lr
 8000430:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000434:	bf16      	itet	ne
 8000436:	4608      	movne	r0, r1
 8000438:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800043c:	4601      	movne	r1, r0
 800043e:	0242      	lsls	r2, r0, #9
 8000440:	bf06      	itte	eq
 8000442:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000446:	ea90 0f01 	teqeq	r0, r1
 800044a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044e:	4770      	bx	lr

08000450 <__aeabi_ui2f>:
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e004      	b.n	8000460 <__aeabi_i2f+0x8>
 8000456:	bf00      	nop

08000458 <__aeabi_i2f>:
 8000458:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800045c:	bf48      	it	mi
 800045e:	4240      	negmi	r0, r0
 8000460:	ea5f 0c00 	movs.w	ip, r0
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800046c:	4601      	mov	r1, r0
 800046e:	f04f 0000 	mov.w	r0, #0
 8000472:	e01c      	b.n	80004ae <__aeabi_l2f+0x2a>

08000474 <__aeabi_ul2f>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	e00a      	b.n	8000498 <__aeabi_l2f+0x14>
 8000482:	bf00      	nop

08000484 <__aeabi_l2f>:
 8000484:	ea50 0201 	orrs.w	r2, r0, r1
 8000488:	bf08      	it	eq
 800048a:	4770      	bxeq	lr
 800048c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000490:	d502      	bpl.n	8000498 <__aeabi_l2f+0x14>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	ea5f 0c01 	movs.w	ip, r1
 800049c:	bf02      	ittt	eq
 800049e:	4684      	moveq	ip, r0
 80004a0:	4601      	moveq	r1, r0
 80004a2:	2000      	moveq	r0, #0
 80004a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a8:	bf08      	it	eq
 80004aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004b2:	fabc f28c 	clz	r2, ip
 80004b6:	3a08      	subs	r2, #8
 80004b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004bc:	db10      	blt.n	80004e0 <__aeabi_l2f+0x5c>
 80004be:	fa01 fc02 	lsl.w	ip, r1, r2
 80004c2:	4463      	add	r3, ip
 80004c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c8:	f1c2 0220 	rsb	r2, r2, #32
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	fa20 f202 	lsr.w	r2, r0, r2
 80004d4:	eb43 0002 	adc.w	r0, r3, r2
 80004d8:	bf08      	it	eq
 80004da:	f020 0001 	biceq.w	r0, r0, #1
 80004de:	4770      	bx	lr
 80004e0:	f102 0220 	add.w	r2, r2, #32
 80004e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e8:	f1c2 0220 	rsb	r2, r2, #32
 80004ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004f0:	fa21 f202 	lsr.w	r2, r1, r2
 80004f4:	eb43 0002 	adc.w	r0, r3, r2
 80004f8:	bf08      	it	eq
 80004fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fe:	4770      	bx	lr

08000500 <__aeabi_uldivmod>:
 8000500:	b953      	cbnz	r3, 8000518 <__aeabi_uldivmod+0x18>
 8000502:	b94a      	cbnz	r2, 8000518 <__aeabi_uldivmod+0x18>
 8000504:	2900      	cmp	r1, #0
 8000506:	bf08      	it	eq
 8000508:	2800      	cmpeq	r0, #0
 800050a:	bf1c      	itt	ne
 800050c:	f04f 31ff 	movne.w	r1, #4294967295
 8000510:	f04f 30ff 	movne.w	r0, #4294967295
 8000514:	f000 b96e 	b.w	80007f4 <__aeabi_idiv0>
 8000518:	f1ad 0c08 	sub.w	ip, sp, #8
 800051c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000520:	f000 f806 	bl	8000530 <__udivmoddi4>
 8000524:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000528:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800052c:	b004      	add	sp, #16
 800052e:	4770      	bx	lr

08000530 <__udivmoddi4>:
 8000530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000534:	9e08      	ldr	r6, [sp, #32]
 8000536:	460d      	mov	r5, r1
 8000538:	4604      	mov	r4, r0
 800053a:	468e      	mov	lr, r1
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 8083 	bne.w	8000648 <__udivmoddi4+0x118>
 8000542:	428a      	cmp	r2, r1
 8000544:	4617      	mov	r7, r2
 8000546:	d947      	bls.n	80005d8 <__udivmoddi4+0xa8>
 8000548:	fab2 f382 	clz	r3, r2
 800054c:	b14b      	cbz	r3, 8000562 <__udivmoddi4+0x32>
 800054e:	f1c3 0120 	rsb	r1, r3, #32
 8000552:	fa05 fe03 	lsl.w	lr, r5, r3
 8000556:	fa20 f101 	lsr.w	r1, r0, r1
 800055a:	409f      	lsls	r7, r3
 800055c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000560:	409c      	lsls	r4, r3
 8000562:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000566:	fbbe fcf8 	udiv	ip, lr, r8
 800056a:	fa1f f987 	uxth.w	r9, r7
 800056e:	fb08 e21c 	mls	r2, r8, ip, lr
 8000572:	fb0c f009 	mul.w	r0, ip, r9
 8000576:	0c21      	lsrs	r1, r4, #16
 8000578:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800057c:	4290      	cmp	r0, r2
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x66>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000586:	f080 8118 	bcs.w	80007ba <__udivmoddi4+0x28a>
 800058a:	4290      	cmp	r0, r2
 800058c:	f240 8115 	bls.w	80007ba <__udivmoddi4+0x28a>
 8000590:	f1ac 0c02 	sub.w	ip, ip, #2
 8000594:	443a      	add	r2, r7
 8000596:	1a12      	subs	r2, r2, r0
 8000598:	fbb2 f0f8 	udiv	r0, r2, r8
 800059c:	fb08 2210 	mls	r2, r8, r0, r2
 80005a0:	fb00 f109 	mul.w	r1, r0, r9
 80005a4:	b2a4      	uxth	r4, r4
 80005a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	d909      	bls.n	80005c2 <__udivmoddi4+0x92>
 80005ae:	193c      	adds	r4, r7, r4
 80005b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80005b4:	f080 8103 	bcs.w	80007be <__udivmoddi4+0x28e>
 80005b8:	42a1      	cmp	r1, r4
 80005ba:	f240 8100 	bls.w	80007be <__udivmoddi4+0x28e>
 80005be:	3802      	subs	r0, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	1a64      	subs	r4, r4, r1
 80005c4:	2100      	movs	r1, #0
 80005c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005ca:	b11e      	cbz	r6, 80005d4 <__udivmoddi4+0xa4>
 80005cc:	2200      	movs	r2, #0
 80005ce:	40dc      	lsrs	r4, r3
 80005d0:	e9c6 4200 	strd	r4, r2, [r6]
 80005d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d8:	b902      	cbnz	r2, 80005dc <__udivmoddi4+0xac>
 80005da:	deff      	udf	#255	; 0xff
 80005dc:	fab2 f382 	clz	r3, r2
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d14f      	bne.n	8000684 <__udivmoddi4+0x154>
 80005e4:	1a8d      	subs	r5, r1, r2
 80005e6:	2101      	movs	r1, #1
 80005e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80005ec:	fa1f f882 	uxth.w	r8, r2
 80005f0:	fbb5 fcfe 	udiv	ip, r5, lr
 80005f4:	fb0e 551c 	mls	r5, lr, ip, r5
 80005f8:	fb08 f00c 	mul.w	r0, r8, ip
 80005fc:	0c22      	lsrs	r2, r4, #16
 80005fe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000602:	42a8      	cmp	r0, r5
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0xe6>
 8000606:	197d      	adds	r5, r7, r5
 8000608:	f10c 32ff 	add.w	r2, ip, #4294967295
 800060c:	d202      	bcs.n	8000614 <__udivmoddi4+0xe4>
 800060e:	42a8      	cmp	r0, r5
 8000610:	f200 80e9 	bhi.w	80007e6 <__udivmoddi4+0x2b6>
 8000614:	4694      	mov	ip, r2
 8000616:	1a2d      	subs	r5, r5, r0
 8000618:	fbb5 f0fe 	udiv	r0, r5, lr
 800061c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000620:	fb08 f800 	mul.w	r8, r8, r0
 8000624:	b2a4      	uxth	r4, r4
 8000626:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800062a:	45a0      	cmp	r8, r4
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x10e>
 800062e:	193c      	adds	r4, r7, r4
 8000630:	f100 32ff 	add.w	r2, r0, #4294967295
 8000634:	d202      	bcs.n	800063c <__udivmoddi4+0x10c>
 8000636:	45a0      	cmp	r8, r4
 8000638:	f200 80d9 	bhi.w	80007ee <__udivmoddi4+0x2be>
 800063c:	4610      	mov	r0, r2
 800063e:	eba4 0408 	sub.w	r4, r4, r8
 8000642:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000646:	e7c0      	b.n	80005ca <__udivmoddi4+0x9a>
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x12e>
 800064c:	2e00      	cmp	r6, #0
 800064e:	f000 80b1 	beq.w	80007b4 <__udivmoddi4+0x284>
 8000652:	2100      	movs	r1, #0
 8000654:	e9c6 0500 	strd	r0, r5, [r6]
 8000658:	4608      	mov	r0, r1
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	fab3 f183 	clz	r1, r3
 8000662:	2900      	cmp	r1, #0
 8000664:	d14b      	bne.n	80006fe <__udivmoddi4+0x1ce>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d302      	bcc.n	8000670 <__udivmoddi4+0x140>
 800066a:	4282      	cmp	r2, r0
 800066c:	f200 80b9 	bhi.w	80007e2 <__udivmoddi4+0x2b2>
 8000670:	1a84      	subs	r4, r0, r2
 8000672:	eb65 0303 	sbc.w	r3, r5, r3
 8000676:	2001      	movs	r0, #1
 8000678:	469e      	mov	lr, r3
 800067a:	2e00      	cmp	r6, #0
 800067c:	d0aa      	beq.n	80005d4 <__udivmoddi4+0xa4>
 800067e:	e9c6 4e00 	strd	r4, lr, [r6]
 8000682:	e7a7      	b.n	80005d4 <__udivmoddi4+0xa4>
 8000684:	409f      	lsls	r7, r3
 8000686:	f1c3 0220 	rsb	r2, r3, #32
 800068a:	40d1      	lsrs	r1, r2
 800068c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000690:	fbb1 f0fe 	udiv	r0, r1, lr
 8000694:	fa1f f887 	uxth.w	r8, r7
 8000698:	fb0e 1110 	mls	r1, lr, r0, r1
 800069c:	fa24 f202 	lsr.w	r2, r4, r2
 80006a0:	409d      	lsls	r5, r3
 80006a2:	fb00 fc08 	mul.w	ip, r0, r8
 80006a6:	432a      	orrs	r2, r5
 80006a8:	0c15      	lsrs	r5, r2, #16
 80006aa:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80006ae:	45ac      	cmp	ip, r5
 80006b0:	fa04 f403 	lsl.w	r4, r4, r3
 80006b4:	d909      	bls.n	80006ca <__udivmoddi4+0x19a>
 80006b6:	197d      	adds	r5, r7, r5
 80006b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80006bc:	f080 808f 	bcs.w	80007de <__udivmoddi4+0x2ae>
 80006c0:	45ac      	cmp	ip, r5
 80006c2:	f240 808c 	bls.w	80007de <__udivmoddi4+0x2ae>
 80006c6:	3802      	subs	r0, #2
 80006c8:	443d      	add	r5, r7
 80006ca:	eba5 050c 	sub.w	r5, r5, ip
 80006ce:	fbb5 f1fe 	udiv	r1, r5, lr
 80006d2:	fb0e 5c11 	mls	ip, lr, r1, r5
 80006d6:	fb01 f908 	mul.w	r9, r1, r8
 80006da:	b295      	uxth	r5, r2
 80006dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80006e0:	45a9      	cmp	r9, r5
 80006e2:	d907      	bls.n	80006f4 <__udivmoddi4+0x1c4>
 80006e4:	197d      	adds	r5, r7, r5
 80006e6:	f101 32ff 	add.w	r2, r1, #4294967295
 80006ea:	d274      	bcs.n	80007d6 <__udivmoddi4+0x2a6>
 80006ec:	45a9      	cmp	r9, r5
 80006ee:	d972      	bls.n	80007d6 <__udivmoddi4+0x2a6>
 80006f0:	3902      	subs	r1, #2
 80006f2:	443d      	add	r5, r7
 80006f4:	eba5 0509 	sub.w	r5, r5, r9
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e778      	b.n	80005f0 <__udivmoddi4+0xc0>
 80006fe:	f1c1 0720 	rsb	r7, r1, #32
 8000702:	408b      	lsls	r3, r1
 8000704:	fa22 fc07 	lsr.w	ip, r2, r7
 8000708:	ea4c 0c03 	orr.w	ip, ip, r3
 800070c:	fa25 f407 	lsr.w	r4, r5, r7
 8000710:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000714:	fbb4 f9fe 	udiv	r9, r4, lr
 8000718:	fa1f f88c 	uxth.w	r8, ip
 800071c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000720:	fa20 f307 	lsr.w	r3, r0, r7
 8000724:	fb09 fa08 	mul.w	sl, r9, r8
 8000728:	408d      	lsls	r5, r1
 800072a:	431d      	orrs	r5, r3
 800072c:	0c2b      	lsrs	r3, r5, #16
 800072e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000732:	45a2      	cmp	sl, r4
 8000734:	fa02 f201 	lsl.w	r2, r2, r1
 8000738:	fa00 f301 	lsl.w	r3, r0, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0x222>
 800073e:	eb1c 0404 	adds.w	r4, ip, r4
 8000742:	f109 30ff 	add.w	r0, r9, #4294967295
 8000746:	d248      	bcs.n	80007da <__udivmoddi4+0x2aa>
 8000748:	45a2      	cmp	sl, r4
 800074a:	d946      	bls.n	80007da <__udivmoddi4+0x2aa>
 800074c:	f1a9 0902 	sub.w	r9, r9, #2
 8000750:	4464      	add	r4, ip
 8000752:	eba4 040a 	sub.w	r4, r4, sl
 8000756:	fbb4 f0fe 	udiv	r0, r4, lr
 800075a:	fb0e 4410 	mls	r4, lr, r0, r4
 800075e:	fb00 fa08 	mul.w	sl, r0, r8
 8000762:	b2ad      	uxth	r5, r5
 8000764:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000768:	45a2      	cmp	sl, r4
 800076a:	d908      	bls.n	800077e <__udivmoddi4+0x24e>
 800076c:	eb1c 0404 	adds.w	r4, ip, r4
 8000770:	f100 35ff 	add.w	r5, r0, #4294967295
 8000774:	d22d      	bcs.n	80007d2 <__udivmoddi4+0x2a2>
 8000776:	45a2      	cmp	sl, r4
 8000778:	d92b      	bls.n	80007d2 <__udivmoddi4+0x2a2>
 800077a:	3802      	subs	r0, #2
 800077c:	4464      	add	r4, ip
 800077e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000782:	fba0 8902 	umull	r8, r9, r0, r2
 8000786:	eba4 040a 	sub.w	r4, r4, sl
 800078a:	454c      	cmp	r4, r9
 800078c:	46c6      	mov	lr, r8
 800078e:	464d      	mov	r5, r9
 8000790:	d319      	bcc.n	80007c6 <__udivmoddi4+0x296>
 8000792:	d016      	beq.n	80007c2 <__udivmoddi4+0x292>
 8000794:	b15e      	cbz	r6, 80007ae <__udivmoddi4+0x27e>
 8000796:	ebb3 020e 	subs.w	r2, r3, lr
 800079a:	eb64 0405 	sbc.w	r4, r4, r5
 800079e:	fa04 f707 	lsl.w	r7, r4, r7
 80007a2:	fa22 f301 	lsr.w	r3, r2, r1
 80007a6:	431f      	orrs	r7, r3
 80007a8:	40cc      	lsrs	r4, r1
 80007aa:	e9c6 7400 	strd	r7, r4, [r6]
 80007ae:	2100      	movs	r1, #0
 80007b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b4:	4631      	mov	r1, r6
 80007b6:	4630      	mov	r0, r6
 80007b8:	e70c      	b.n	80005d4 <__udivmoddi4+0xa4>
 80007ba:	468c      	mov	ip, r1
 80007bc:	e6eb      	b.n	8000596 <__udivmoddi4+0x66>
 80007be:	4610      	mov	r0, r2
 80007c0:	e6ff      	b.n	80005c2 <__udivmoddi4+0x92>
 80007c2:	4543      	cmp	r3, r8
 80007c4:	d2e6      	bcs.n	8000794 <__udivmoddi4+0x264>
 80007c6:	ebb8 0e02 	subs.w	lr, r8, r2
 80007ca:	eb69 050c 	sbc.w	r5, r9, ip
 80007ce:	3801      	subs	r0, #1
 80007d0:	e7e0      	b.n	8000794 <__udivmoddi4+0x264>
 80007d2:	4628      	mov	r0, r5
 80007d4:	e7d3      	b.n	800077e <__udivmoddi4+0x24e>
 80007d6:	4611      	mov	r1, r2
 80007d8:	e78c      	b.n	80006f4 <__udivmoddi4+0x1c4>
 80007da:	4681      	mov	r9, r0
 80007dc:	e7b9      	b.n	8000752 <__udivmoddi4+0x222>
 80007de:	4608      	mov	r0, r1
 80007e0:	e773      	b.n	80006ca <__udivmoddi4+0x19a>
 80007e2:	4608      	mov	r0, r1
 80007e4:	e749      	b.n	800067a <__udivmoddi4+0x14a>
 80007e6:	f1ac 0c02 	sub.w	ip, ip, #2
 80007ea:	443d      	add	r5, r7
 80007ec:	e713      	b.n	8000616 <__udivmoddi4+0xe6>
 80007ee:	3802      	subs	r0, #2
 80007f0:	443c      	add	r4, r7
 80007f2:	e724      	b.n	800063e <__udivmoddi4+0x10e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000800:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000804:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d013      	beq.n	8000838 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000814:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000818:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00b      	beq.n	8000838 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000820:	e000      	b.n	8000824 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000822:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000824:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f9      	beq.n	8000822 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800082e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <selectMux>:
GPIO_TypeDef * senseMuxType[8] = {GPIOC, GPIOC, GPIOA, GPIOB, GPIOB, GPIOC, GPIOC, GPIOC};

/**
  * @brief  Sets to S0, S1, and S2 select pins
  */
void selectMux(int pin, int array[], int array_size) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e01f      	b.n	8000896 <selectMux+0x52>
		if (pin & (i << 1)) {
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	005a      	lsls	r2, r3, #1
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4013      	ands	r3, r2
 800085e:	2b00      	cmp	r3, #0
 8000860:	d00b      	beq.n	800087a <selectMux+0x36>
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_SET);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	b29b      	uxth	r3, r3
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <selectMux+0x64>)
 8000874:	f001 fdd2 	bl	800241c <HAL_GPIO_WritePin>
 8000878:	e00a      	b.n	8000890 <selectMux+0x4c>
		} else {
			HAL_GPIO_WritePin(GPIOA, array[i], GPIO_PIN_RESET);
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b29b      	uxth	r3, r3
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <selectMux+0x64>)
 800088c:	f001 fdc6 	bl	800241c <HAL_GPIO_WritePin>
	for (int i = 0; i < 3; i++) {
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	3301      	adds	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	2b02      	cmp	r3, #2
 800089a:	dddc      	ble.n	8000856 <selectMux+0x12>
		}
	}
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40020000 	.word	0x40020000

080008ac <enableMux>:


void enableMux(GPIO_TypeDef *type, int pin) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(type,  pin,  GPIO_PIN_SET);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f001 fdac 	bl	800241c <HAL_GPIO_WritePin>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <readPressure>:
	// TODO
}



int readPressure() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ADC_CHANNEL_3;
 80008dc:	2303      	movs	r3, #3
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <readPressure+0x54>)
 80008ee:	f001 f8d1 	bl	8001a94 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <readPressure+0x30>
  {
	Error_Handler();
 80008f8:	f000 fb7a 	bl	8000ff0 <Error_Handler>
  }

  HAL_ADC_Start(&hadc);
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <readPressure+0x54>)
 80008fe:	f000 ffcd 	bl	800189c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000902:	f04f 31ff 	mov.w	r1, #4294967295
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <readPressure+0x54>)
 8000908:	f001 f828 	bl	800195c <HAL_ADC_PollForConversion>
  int data = HAL_ADC_GetValue(&hadc);
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <readPressure+0x54>)
 800090e:	f001 f8b5 	bl	8001a7c <HAL_ADC_GetValue>
 8000912:	4603      	mov	r3, r0
 8000914:	60fb      	str	r3, [r7, #12]
  return data;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001d0 	.word	0x200001d0

08000924 <read3V3>:

float read3V3() {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
  sConfig.Channel = ADC_CHANNEL_9;
 8000934:	2309      	movs	r3, #9
 8000936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000938:	2302      	movs	r3, #2
 800093a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000940:	463b      	mov	r3, r7
 8000942:	4619      	mov	r1, r3
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <read3V3+0x68>)
 8000946:	f001 f8a5 	bl	8001a94 <HAL_ADC_ConfigChannel>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <read3V3+0x30>
  {
    Error_Handler();
 8000950:	f000 fb4e 	bl	8000ff0 <Error_Handler>
  }

  HAL_ADC_Start(&hadc);
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <read3V3+0x68>)
 8000956:	f000 ffa1 	bl	800189c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800095a:	f04f 31ff 	mov.w	r1, #4294967295
 800095e:	480b      	ldr	r0, [pc, #44]	; (800098c <read3V3+0x68>)
 8000960:	f000 fffc 	bl	800195c <HAL_ADC_PollForConversion>
  float data = HAL_ADC_GetValue(&hadc) * ADC_VOLTAGE_CONVERSION;
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <read3V3+0x68>)
 8000966:	f001 f889 	bl	8001a7c <HAL_ADC_GetValue>
 800096a:	4603      	mov	r3, r0
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fd6f 	bl	8000450 <__aeabi_ui2f>
 8000972:	4603      	mov	r3, r0
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <read3V3+0x6c>)
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fbff 	bl	800017c <__aeabi_fmul>
 800097e:	4603      	mov	r3, r0
 8000980:	60fb      	str	r3, [r7, #12]
  return data;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200001d0 	.word	0x200001d0
 8000990:	3a533334 	.word	0x3a533334

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fdc8 	bl	8001532 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f909 	bl	8000bb8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  ITM_Port32(31) = 1;
 80009a6:	4b7b      	ldr	r3, [pc, #492]	; (8000b94 <main+0x200>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ac:	f000 fa44 	bl	8000e38 <MX_GPIO_Init>
  MX_ADC_Init();
 80009b0:	f000 f94e 	bl	8000c50 <MX_ADC_Init>
  MX_I2C1_Init();
 80009b4:	f000 f9b2 	bl	8000d1c <MX_I2C1_Init>
  MX_SPI2_Init();
 80009b8:	f000 f9de 	bl	8000d78 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80009bc:	f000 fa12 	bl	8000de4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  // TODO: Initialize Wifi + database
//  wifi_init();
  HAL_GPIO_WritePin(GPIOC, PWR_MUX_IN_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4874      	ldr	r0, [pc, #464]	; (8000b98 <main+0x204>)
 80009c6:	f001 fd29 	bl	800241c <HAL_GPIO_WritePin>
  printf("Initialization complete \r\n");
 80009ca:	4874      	ldr	r0, [pc, #464]	; (8000b9c <main+0x208>)
 80009cc:	f004 ff50 	bl	8005870 <puts>
  ITM_Port32(31) = 2;
 80009d0:	4b70      	ldr	r3, [pc, #448]	; (8000b94 <main+0x200>)
 80009d2:	2202      	movs	r2, #2
 80009d4:	601a      	str	r2, [r3, #0]

//  int voltage_thresh_count = 0;
  int pressure_data[NUM_NODES] = {0};
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	3b18      	subs	r3, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e2:	461a      	mov	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	f004 fecd 	bl	8005784 <memset>
  int array_cnt = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80009f0:	f102 0214 	add.w	r2, r2, #20
 80009f4:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	read3V3();
 80009f6:	f7ff ff95 	bl	8000924 <read3V3>
//		  exit(EXIT_SUCCESS);
//	}

	// TODO: setup timer to read from SD card and send to database

	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 80009fa:	2300      	movs	r3, #0
 80009fc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000a00:	f102 0210 	add.w	r2, r2, #16
 8000a04:	6013      	str	r3, [r2, #0]
 8000a06:	e0ad      	b.n	8000b64 <main+0x1d0>
		enableMux(pwrMuxType[pwr_mux], pwrMuxEnable[pwr_mux]);
 8000a08:	4a65      	ldr	r2, [pc, #404]	; (8000ba0 <main+0x20c>)
 8000a0a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a0e:	f103 0310 	add.w	r3, r3, #16
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a18:	4962      	ldr	r1, [pc, #392]	; (8000ba4 <main+0x210>)
 8000a1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a1e:	f103 0310 	add.w	r3, r3, #16
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	f7ff ff3e 	bl	80008ac <enableMux>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000a36:	f102 020c 	add.w	r2, r2, #12
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e07f      	b.n	8000b3e <main+0x1aa>
			selectMux(pwr_sel, pwrMuxSelect, 4);
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4959      	ldr	r1, [pc, #356]	; (8000ba8 <main+0x214>)
 8000a42:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a46:	f103 030c 	add.w	r3, r3, #12
 8000a4a:	6818      	ldr	r0, [r3, #0]
 8000a4c:	f7ff fefa 	bl	8000844 <selectMux>
			// TODO: Timer for 3v3 checking
//			if (belowVoltageThresh()) { // ADC channel for 3v3 sense
//				voltage_thresh_count++;
//			}

			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000a56:	f102 0208 	add.w	r2, r2, #8
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e05d      	b.n	8000b1a <main+0x186>
				enableMux(senseMuxType[sense_mux], senseMuxEnable[sense_mux]);
 8000a5e:	4a53      	ldr	r2, [pc, #332]	; (8000bac <main+0x218>)
 8000a60:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a64:	f103 0308 	add.w	r3, r3, #8
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6e:	4950      	ldr	r1, [pc, #320]	; (8000bb0 <main+0x21c>)
 8000a70:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a74:	f103 0308 	add.w	r3, r3, #8
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f7ff ff13 	bl	80008ac <enableMux>
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000a8c:	f102 0204 	add.w	r2, r2, #4
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e030      	b.n	8000af6 <main+0x162>
					selectMux(sense_sel, senseMuxSelect, 8);
 8000a94:	2208      	movs	r2, #8
 8000a96:	4947      	ldr	r1, [pc, #284]	; (8000bb4 <main+0x220>)
 8000a98:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a9c:	f103 0304 	add.w	r3, r3, #4
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	f7ff fecf 	bl	8000844 <selectMux>

					// Read voltage sense
					int raw_pressure_voltage = readPressure(); // ADC channel for voltage
 8000aa6:	f7ff ff11 	bl	80008cc <readPressure>
 8000aaa:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000aae:	6018      	str	r0, [r3, #0]
//					printf("raw pressure voltage: %d", raw_pressure_voltage);
					array_cnt++;
 8000ab0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ab4:	f103 0314 	add.w	r3, r3, #20
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ac0:	f102 0214 	add.w	r2, r2, #20
 8000ac4:	6013      	str	r3, [r2, #0]
					pressure_data[array_cnt] = raw_pressure_voltage;
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	3b18      	subs	r3, #24
 8000acc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000ad0:	f102 0214 	add.w	r2, r2, #20
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	f507 5100 	add.w	r1, r7, #8192	; 0x2000
 8000ada:	6809      	ldr	r1, [r1, #0]
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int sense_sel = 0; sense_sel < 8; sense_sel++) {
 8000ae0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000ae4:	f103 0304 	add.w	r3, r3, #4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3301      	adds	r3, #1
 8000aec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000af0:	f102 0204 	add.w	r2, r2, #4
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000afa:	f103 0304 	add.w	r3, r3, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b07      	cmp	r3, #7
 8000b02:	ddc7      	ble.n	8000a94 <main+0x100>
			for (int sense_mux = 0; sense_mux < 8; sense_mux++) {
 8000b04:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b08:	f103 0308 	add.w	r3, r3, #8
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b14:	f102 0208 	add.w	r2, r2, #8
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b1e:	f103 0308 	add.w	r3, r3, #8
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	dd9a      	ble.n	8000a5e <main+0xca>
		for (int pwr_sel = 0; pwr_sel < 8; pwr_sel++) {
 8000b28:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b2c:	f103 030c 	add.w	r3, r3, #12
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b38:	f102 020c 	add.w	r2, r2, #12
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b42:	f103 030c 	add.w	r3, r3, #12
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b07      	cmp	r3, #7
 8000b4a:	f77f af78 	ble.w	8000a3e <main+0xaa>
	for (int pwr_mux = 0; pwr_mux < 4; pwr_mux++) {
 8000b4e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b52:	f103 0310 	add.w	r3, r3, #16
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b5e:	f102 0210 	add.w	r2, r2, #16
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000b68:	f103 0310 	add.w	r3, r3, #16
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	f77f af4a 	ble.w	8000a08 <main+0x74>
				}
			}
		}
	 }
//	printf("array cnt: %d", array_cnt);
	array_cnt = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000b7a:	f102 0214 	add.w	r2, r2, #20
 8000b7e:	6013      	str	r3, [r2, #0]
	memset(pressure_data, 0, sizeof(pressure_data));
 8000b80:	f107 0318 	add.w	r3, r7, #24
 8000b84:	3b18      	subs	r3, #24
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f004 fdf9 	bl	8005784 <memset>
	read3V3();
 8000b92:	e730      	b.n	80009f6 <main+0x62>
 8000b94:	e000007c 	.word	0xe000007c
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	08006150 	.word	0x08006150
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	0800616c 	.word	0x0800616c
 8000ba8:	2000001c 	.word	0x2000001c
 8000bac:	20000028 	.word	0x20000028
 8000bb0:	0800617c 	.word	0x0800617c
 8000bb4:	20000010 	.word	0x20000010

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	2234      	movs	r2, #52	; 0x34
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f004 fddc 	bl	8005784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <SystemClock_Config+0x94>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000be2:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <SystemClock_Config+0x94>)
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000bea:	2312      	movs	r3, #18
 8000bec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000bfe:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fa23 	bl	8004058 <HAL_RCC_OscConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000c18:	f000 f9ea 	bl	8000ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fd3f 	bl	80046b8 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c40:	f000 f9d6 	bl	8000ff0 <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3748      	adds	r7, #72	; 0x48
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <MX_ADC_Init+0xc8>)
 8000c64:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c78:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 2;
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000cae:	2210      	movs	r2, #16
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cc0:	4814      	ldr	r0, [pc, #80]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000cc2:	f000 fca5 	bl	8001610 <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000ccc:	f000 f990 	bl	8000ff0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480c      	ldr	r0, [pc, #48]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000ce2:	f000 fed7 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000cec:	f000 f980 	bl	8000ff0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_ADC_Init+0xc4>)
 8000cfe:	f000 fec9 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8000d08:	f000 f972 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200001d0 	.word	0x200001d0
 8000d18:	40012400 	.word	0x40012400

08000d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <MX_I2C1_Init+0x54>)
 8000d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d28:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_I2C1_Init+0x58>)
 8000d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_I2C1_Init+0x50>)
 8000d5a:	f001 fb77 	bl	800244c <HAL_I2C_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d64:	f000 f944 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000017c 	.word	0x2000017c
 8000d70:	40005400 	.word	0x40005400
 8000d74:	000186a0 	.word	0x000186a0

08000d78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d7e:	4a18      	ldr	r2, [pc, #96]	; (8000de0 <MX_SPI2_Init+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_SPI2_Init+0x64>)
 8000dca:	f003 fee1 	bl	8004b90 <HAL_SPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000dd4:	f000 f90c 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000e0 	.word	0x200000e0
 8000de0:	40003800 	.word	0x40003800

08000de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART3_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART3_UART_Init+0x4c>)
 8000e1c:	f004 f837 	bl	8004e8e <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f000 f8e3 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000138 	.word	0x20000138
 8000e34:	40004800 	.word	0x40004800

08000e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b55      	ldr	r3, [pc, #340]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	4a54      	ldr	r2, [pc, #336]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	61d3      	str	r3, [r2, #28]
 8000e5a:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e66:	4b4f      	ldr	r3, [pc, #316]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b49      	ldr	r3, [pc, #292]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	4b43      	ldr	r3, [pc, #268]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a42      	ldr	r2, [pc, #264]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b40      	ldr	r3, [pc, #256]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MX_GPIO_Init+0x16c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
 8000ecc:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000ece:	f001 faa5 	bl	800241c <HAL_GPIO_WritePin>
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f241 01f7 	movw	r1, #4343	; 0x10f7
 8000ed8:	4834      	ldr	r0, [pc, #208]	; (8000fac <MX_GPIO_Init+0x174>)
 8000eda:	f001 fa9f 	bl	800241c <HAL_GPIO_WritePin>
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f641 4165 	movw	r1, #7269	; 0x1c65
 8000ee4:	4832      	ldr	r0, [pc, #200]	; (8000fb0 <MX_GPIO_Init+0x178>)
 8000ee6:	f001 fa99 	bl	800241c <HAL_GPIO_WritePin>
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4831      	ldr	r0, [pc, #196]	; (8000fb4 <MX_GPIO_Init+0x17c>)
 8000ef0:	f001 fa94 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_EN6_L_Pin SENSE_EN7_L_Pin SENSE_EN8_L_Pin PWR_MUX_IN_Pin
                           SENSE_EN2_L_Pin SENSE_EN1_L_Pin PWR_EN3_L_Pin PWR_EN2_L_Pin
                           GPIO_RGB_B_Pin GPIO_RGB_G_Pin GPIO_RGB_R_Pin WIFI_EN_Pin */
  GPIO_InitStruct.Pin = SENSE_EN6_L_Pin|SENSE_EN7_L_Pin|SENSE_EN8_L_Pin|PWR_MUX_IN_Pin
 8000ef4:	f24f 33bb 	movw	r3, #62395	; 0xf3bb
 8000ef8:	617b      	str	r3, [r7, #20]
                          |SENSE_EN2_L_Pin|SENSE_EN1_L_Pin|PWR_EN3_L_Pin|PWR_EN2_L_Pin
                          |GPIO_RGB_B_Pin|GPIO_RGB_G_Pin|GPIO_RGB_R_Pin|WIFI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4826      	ldr	r0, [pc, #152]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000f0e:	f001 f905 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSE_S1_Pin SENSE_S2_Pin SENSE_S3_Pin PWR_S1_Pin
                           PWR_S2_Pin PWR_S3_Pin PWR_EN4_L_Pin MCU_PA12_Pin */
  GPIO_InitStruct.Pin = SENSE_S1_Pin|SENSE_S2_Pin|SENSE_S3_Pin|PWR_S1_Pin
 8000f12:	f241 03f7 	movw	r3, #4343	; 0x10f7
 8000f16:	617b      	str	r3, [r7, #20]
                          |PWR_S2_Pin|PWR_S3_Pin|PWR_EN4_L_Pin|MCU_PA12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <MX_GPIO_Init+0x174>)
 8000f2c:	f001 f8f6 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_EN1_L_Pin MCU_BOOT1_Pin SENSE_EN3_L_Pin SENSE_EN4_L_Pin
                           SENSE_EN5_L_Pin SPI_CS2_L_Pin SD_CS_L_Pin */
  GPIO_InitStruct.Pin = PWR_EN1_L_Pin|MCU_BOOT1_Pin|SENSE_EN3_L_Pin|SENSE_EN4_L_Pin
 8000f30:	f641 4365 	movw	r3, #7269	; 0x1c65
 8000f34:	617b      	str	r3, [r7, #20]
                          |SENSE_EN5_L_Pin|SPI_CS2_L_Pin|SD_CS_L_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <MX_GPIO_Init+0x178>)
 8000f4a:	f001 f8e7 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_TEST_Pin */
  GPIO_InitStruct.Pin = BTN_TEST_Pin;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_TEST_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0x170>)
 8000f62:	f001 f8db 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_FLAG_Pin */
  GPIO_InitStruct.Pin = LS_FLAG_Pin;
 8000f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS_FLAG_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x174>)
 8000f7c:	f001 f8ce 	bl	800211c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 8000f80:	2304      	movs	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <MX_GPIO_Init+0x17c>)
 8000f98:	f001 f8c0 	bl	800211c <HAL_GPIO_Init>

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	40020c00 	.word	0x40020c00

08000fb8 <_write>:

/* USER CODE BEGIN 4 */
// Use GCC for printf
// Avoid wasting a UART terminal just for writing
int _write(int file, char *ptr, int len) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e009      	b.n	8000fde <_write+0x26>
		ITM_SendChar(*ptr++);
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1c5a      	adds	r2, r3, #1
 8000fce:	60ba      	str	r2, [r7, #8]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fc10 	bl	80007f8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dbf1      	blt.n	8000fca <_write+0x12>
	}
	return len;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <Error_Handler+0x8>
	...

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_MspInit+0x68>)
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <HAL_MspInit+0x68>)
 8001008:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800100c:	6253      	str	r3, [r2, #36]	; 0x24
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_MspInit+0x68>)
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001012:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_MspInit+0x68>)
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a11      	ldr	r2, [pc, #68]	; (8001064 <HAL_MspInit+0x68>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6213      	str	r3, [r2, #32]
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_MspInit+0x68>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_MspInit+0x68>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_MspInit+0x68>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6253      	str	r3, [r2, #36]	; 0x24
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_MspInit+0x68>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2005      	movs	r0, #5
 8001050:	f000 ffa3 	bl	8001f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001054:	2005      	movs	r0, #5
 8001056:	f000 ffbc 	bl	8001fd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a2d      	ldr	r2, [pc, #180]	; (800113c <HAL_ADC_MspInit+0xd4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d153      	bne.n	8001132 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 8001090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800109e:	61bb      	str	r3, [r7, #24]
 80010a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a26      	ldr	r2, [pc, #152]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010a8:	f043 0304 	orr.w	r3, r3, #4
 80010ac:	61d3      	str	r3, [r2, #28]
 80010ae:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_ADC_MspInit+0xd8>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PC2     ------> ADC_IN12
    PA3     ------> ADC_IN3
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AUDIO_OUT_Pin;
 80010ea:	2304      	movs	r3, #4
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_OUT_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	4811      	ldr	r0, [pc, #68]	; (8001144 <HAL_ADC_MspInit+0xdc>)
 80010fe:	f001 f80d 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_3V3_Pin;
 8001102:	2308      	movs	r3, #8
 8001104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	2303      	movs	r3, #3
 8001108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_3V3_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <HAL_ADC_MspInit+0xe0>)
 8001116:	f001 f801 	bl	800211c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_OUT_Pin;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_OUT_GPIO_Port, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <HAL_ADC_MspInit+0xe4>)
 800112e:	f000 fff5 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	; 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012400 	.word	0x40012400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <HAL_I2C_MspInit+0x9c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d138      	bne.n	80011e4 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	61d3      	str	r3, [r2, #28]
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin|I2C_SCL_Pin;
 800118a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001190:	2312      	movs	r3, #18
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800119c:	2304      	movs	r3, #4
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4813      	ldr	r0, [pc, #76]	; (80011f4 <HAL_I2C_MspInit+0xa4>)
 80011a8:	f000 ffb8 	bl	800211c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 80011b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b6:	6253      	str	r3, [r2, #36]	; 0x24
 80011b8:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_I2C_MspInit+0xa0>)
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2100      	movs	r1, #0
 80011c8:	201f      	movs	r0, #31
 80011ca:	f000 fee6 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ce:	201f      	movs	r0, #31
 80011d0:	f000 feff 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2020      	movs	r0, #32
 80011da:	f000 fede 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011de:	2020      	movs	r0, #32
 80011e0:	f000 fef7 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3728      	adds	r7, #40	; 0x28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40005400 	.word	0x40005400
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40020400 	.word	0x40020400

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_SPI_MspInit+0x8c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d130      	bne.n	800127c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121a:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <HAL_SPI_MspInit+0x90>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_SPI_MspInit+0x90>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001224:	6253      	str	r3, [r2, #36]	; 0x24
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_SPI_MspInit+0x90>)
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_SPI_MspInit+0x90>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_SPI_MspInit+0x90>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_SPI_MspInit+0x90>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800124a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800125c:	2305      	movs	r3, #5
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_SPI_MspInit+0x94>)
 8001268:	f000 ff58 	bl	800211c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	2024      	movs	r0, #36	; 0x24
 8001272:	f000 fe92 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001276:	2024      	movs	r0, #36	; 0x24
 8001278:	f000 feab 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40003800 	.word	0x40003800
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <HAL_UART_MspInit+0x8c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d130      	bne.n	8001314 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6253      	str	r3, [r2, #36]	; 0x24
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_UART_MspInit+0x90>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin|UART_TX_Pin;
 80012e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f4:	2307      	movs	r3, #7
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_UART_MspInit+0x94>)
 8001300:	f000 ff0c 	bl	800211c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f000 fe46 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800130e:	2027      	movs	r0, #39	; 0x27
 8001310:	f000 fe5f 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40004800 	.word	0x40004800
 8001320:	40023800 	.word	0x40023800
 8001324:	40020800 	.word	0x40020800

08001328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800132c:	e7fe      	b.n	800132c <NMI_Handler+0x4>

0800132e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001332:	e7fe      	b.n	8001332 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <MemManage_Handler+0x4>

0800133a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <UsageFault_Handler+0x4>

08001346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f933 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
	...

08001384 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <I2C1_EV_IRQHandler+0x10>)
 800138a:	f001 f9a3 	bl	80026d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000017c 	.word	0x2000017c

08001398 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <I2C1_ER_IRQHandler+0x10>)
 800139e:	f001 fb0a 	bl	80029b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000017c 	.word	0x2000017c

080013ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013b0:	4802      	ldr	r0, [pc, #8]	; (80013bc <SPI2_IRQHandler+0x10>)
 80013b2:	f003 fc69 	bl	8004c88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000e0 	.word	0x200000e0

080013c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <USART3_IRQHandler+0x10>)
 80013c6:	f003 fdaf 	bl	8004f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000138 	.word	0x20000138

080013d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e00a      	b.n	80013fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e6:	f3af 8000 	nop.w
 80013ea:	4601      	mov	r1, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	b2ca      	uxtb	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf0      	blt.n	80013e6 <_read+0x12>
	}

return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_close>:
	}
	return len;
}

int _close(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return -1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001434:	605a      	str	r2, [r3, #4]
	return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <_isatty>:

int _isatty(int file)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
	return 1;
 800144a:	2301      	movs	r3, #1
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001456:	b480      	push	{r7}
 8001458:	b085      	sub	sp, #20
 800145a:	af00      	add	r7, sp, #0
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	return 0;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f004 f946 	bl	8005730 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20004000 	.word	0x20004000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	200000d4 	.word	0x200000d4
 80014d8:	20000238 	.word	0x20000238

080014dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800150e:	f7ff ffe5 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f004 f913 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fa3d 	bl	8000994 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001524:	08006234 	.word	0x08006234
  ldr r2, =_sbss
 8001528:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800152c:	20000238 	.word	0x20000238

08001530 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_IRQHandler>

08001532 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153c:	2003      	movs	r0, #3
 800153e:	f000 fd21 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001542:	200f      	movs	r0, #15
 8001544:	f000 f80e 	bl	8001564 <HAL_InitTick>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	71fb      	strb	r3, [r7, #7]
 8001552:	e001      	b.n	8001558 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001554:	f7ff fd52 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001558:	79fb      	ldrb	r3, [r7, #7]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_InitTick+0x68>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d022      	beq.n	80015be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_InitTick+0x6c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_InitTick+0x68>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001584:	fbb1 f3f3 	udiv	r3, r1, r3
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fd2e 	bl	8001fee <HAL_SYSTICK_Config>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10f      	bne.n	80015b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	d809      	bhi.n	80015b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159e:	2200      	movs	r2, #0
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	f04f 30ff 	mov.w	r0, #4294967295
 80015a6:	f000 fcf8 	bl	8001f9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_InitTick+0x70>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e007      	b.n	80015c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e004      	b.n	80015c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000050 	.word	0x20000050
 80015d0:	20000048 	.word	0x20000048
 80015d4:	2000004c 	.word	0x2000004c

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <HAL_IncTick+0x1c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_IncTick+0x20>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_IncTick+0x1c>)
 80015e8:	6013      	str	r3, [r2, #0]
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000224 	.word	0x20000224
 80015f8:	20000050 	.word	0x20000050

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_GetTick+0x10>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000224 	.word	0x20000224

08001610 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e127      	b.n	8001880 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d115      	bne.n	800166a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <HAL_ADC_Init+0x278>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a8d      	ldr	r2, [pc, #564]	; (8001888 <HAL_ADC_Init+0x278>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b8b      	ldr	r3, [pc, #556]	; (8001888 <HAL_ADC_Init+0x278>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fcff 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 80ff 	bne.w	8001876 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	f043 0202 	orr.w	r2, r3, #2
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 800168c:	4b7f      	ldr	r3, [pc, #508]	; (800188c <HAL_ADC_Init+0x27c>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	497c      	ldr	r1, [pc, #496]	; (800188c <HAL_ADC_Init+0x27c>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016a6:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ae:	4619      	mov	r1, r3
 80016b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b4:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80016ca:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	fa93 f3a3 	rbit	r3, r3
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80016f2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80016f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f6:	4313      	orrs	r3, r2
 80016f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d007      	beq.n	8001712 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800170a:	4313      	orrs	r3, r2
 800170c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170e:	4313      	orrs	r3, r2
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800171c:	2b40      	cmp	r3, #64	; 0x40
 800171e:	d04f      	beq.n	80017c0 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001726:	4313      	orrs	r3, r2
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001732:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6912      	ldr	r2, [r2, #16]
 8001738:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800173c:	d003      	beq.n	8001746 <HAL_ADC_Init+0x136>
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6912      	ldr	r2, [r2, #16]
 8001742:	2a01      	cmp	r2, #1
 8001744:	d102      	bne.n	800174c <HAL_ADC_Init+0x13c>
 8001746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800174a:	e000      	b.n	800174e <HAL_ADC_Init+0x13e>
 800174c:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800174e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001752:	4313      	orrs	r3, r2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800175c:	2b01      	cmp	r3, #1
 800175e:	d125      	bne.n	80017ac <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001766:	2b00      	cmp	r3, #0
 8001768:	d114      	bne.n	8001794 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	3b01      	subs	r3, #1
 8001770:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001774:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	fa92 f2a2 	rbit	r2, r2
 800177c:	617a      	str	r2, [r7, #20]
  return result;
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	fab2 f282 	clz	r2, r2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	4093      	lsls	r3, r2
 8001788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800178e:	4313      	orrs	r3, r2
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
 8001792:	e00b      	b.n	80017ac <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001798:	f043 0220 	orr.w	r2, r3, #32
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4b37      	ldr	r3, [pc, #220]	; (8001890 <HAL_ADC_Init+0x280>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017bc:	430b      	orrs	r3, r1
 80017be:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_ADC_Init+0x284>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017d0:	430b      	orrs	r3, r1
 80017d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_Init+0x1d6>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d119      	bne.n	800181a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80017fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	fa92 f2a2 	rbit	r2, r2
 8001802:	60fa      	str	r2, [r7, #12]
  return result;
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	fab2 f282 	clz	r2, r2
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	fa03 f202 	lsl.w	r2, r3, r2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
 8001818:	e007      	b.n	800182a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_ADC_Init+0x288>)
 8001832:	4013      	ands	r3, r2
 8001834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001836:	429a      	cmp	r2, r3
 8001838:	d10b      	bne.n	8001852 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001850:	e014      	b.n	800187c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f023 0312 	bic.w	r3, r3, #18
 800185a:	f043 0210 	orr.w	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001874:	e002      	b.n	800187c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 800187c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001880:	4618      	mov	r0, r3
 8001882:	3738      	adds	r7, #56	; 0x38
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40012700 	.word	0x40012700
 8001890:	fcfc16ff 	.word	0xfcfc16ff
 8001894:	c0fff18d 	.word	0xc0fff18d
 8001898:	bf80fffe 	.word	0xbf80fffe

0800189c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Start+0x1a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e04e      	b.n	8001954 <HAL_ADC_Start+0xb8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2201      	movs	r2, #1
 80018ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fa38 	bl	8001d34 <ADC_Enable>
 80018c4:	4603      	mov	r3, r0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d141      	bne.n	8001952 <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190c:	d106      	bne.n	800191c <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001912:	f023 0206 	bic.w	r2, r3, #6
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	651a      	str	r2, [r3, #80]	; 0x50
 800191a:	e002      	b.n	8001922 <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001932:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001950:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d113      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d10b      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	f043 0220 	orr.w	r2, r3, #32
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e068      	b.n	8001a74 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019a2:	f7ff fe2b 	bl	80015fc <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019a8:	e021      	b.n	80019ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d01d      	beq.n	80019ee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x6c>
 80019b8:	f7ff fe20 	bl	80015fc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d212      	bcs.n	80019ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10b      	bne.n	80019ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f043 0204 	orr.w	r2, r3, #4
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e042      	b.n	8001a74 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0d6      	beq.n	80019aa <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d104      	bne.n	8001a0e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0212 	mvn.w	r2, #18
 8001a0c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d124      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11f      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d111      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	f043 0201 	orr.w	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x20>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e134      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x28a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d81c      	bhi.n	8001afe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b05      	subs	r3, #5
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b05      	subs	r3, #5
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
 8001afc:	e07e      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d81c      	bhi.n	8001b40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b23      	subs	r3, #35	; 0x23
 8001b18:	221f      	movs	r2, #31
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4019      	ands	r1, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b23      	subs	r3, #35	; 0x23
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b3e:	e05d      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d81c      	bhi.n	8001b82 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	3b41      	subs	r3, #65	; 0x41
 8001b5a:	221f      	movs	r2, #31
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	4019      	ands	r1, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	3b41      	subs	r3, #65	; 0x41
 8001b74:	fa00 f203 	lsl.w	r2, r0, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b80:	e03c      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	d81c      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b5f      	subs	r3, #95	; 0x5f
 8001b9c:	221f      	movs	r2, #31
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4019      	ands	r1, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b5f      	subs	r3, #95	; 0x5f
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	e01b      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3b7d      	subs	r3, #125	; 0x7d
 8001bd6:	221f      	movs	r2, #31
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	3b7d      	subs	r3, #125	; 0x7d
 8001bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d81a      	bhi.n	8001c3a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6959      	ldr	r1, [r3, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6898      	ldr	r0, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	e042      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b13      	cmp	r3, #19
 8001c40:	d81c      	bhi.n	8001c7c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6919      	ldr	r1, [r3, #16]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	3b1e      	subs	r3, #30
 8001c54:	2207      	movs	r2, #7
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4019      	ands	r1, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6898      	ldr	r0, [r3, #8]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b1e      	subs	r3, #30
 8001c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	e021      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b1a      	cmp	r3, #26
 8001c82:	d81c      	bhi.n	8001cbe <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68d9      	ldr	r1, [r3, #12]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	3b3c      	subs	r3, #60	; 0x3c
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4019      	ands	r1, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	6898      	ldr	r0, [r3, #8]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	3b3c      	subs	r3, #60	; 0x3c
 8001cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d003      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ccc:	2b11      	cmp	r3, #17
 8001cce:	d121      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001cd0:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_ADC_ConfigChannel+0x294>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11b      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_ADC_ConfigChannel+0x294>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_ADC_ConfigChannel+0x294>)
 8001ce2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce6:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d111      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_ADC_ConfigChannel+0x298>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <HAL_ADC_ConfigChannel+0x29c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0c9a      	lsrs	r2, r3, #18
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr
 8001d28:	40012700 	.word	0x40012700
 8001d2c:	20000048 	.word	0x20000048
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b40      	cmp	r3, #64	; 0x40
 8001d50:	d043      	beq.n	8001dda <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <ADC_Enable+0xb0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <ADC_Enable+0xb4>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	0c9a      	lsrs	r2, r3, #18
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d76:	e002      	b.n	8001d7e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001d84:	f7ff fc3a 	bl	80015fc <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d8a:	e01f      	b.n	8001dcc <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001d8c:	f7ff fc36 	bl	80015fc <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d918      	bls.n	8001dcc <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da4:	2b40      	cmp	r3, #64	; 0x40
 8001da6:	d011      	beq.n	8001dcc <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e007      	b.n	8001ddc <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d1d8      	bne.n	8001d8c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000048 	.word	0x20000048
 8001de8:	431bde83 	.word	0x431bde83

08001dec <__NVIC_SetPriorityGrouping>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x44>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_GetPriorityGrouping>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e38:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <__NVIC_GetPriorityGrouping+0x18>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	0a1b      	lsrs	r3, r3, #8
 8001e3e:	f003 0307 	and.w	r3, r3, #7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_EnableIRQ>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	db0b      	blt.n	8001e7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	f003 021f 	and.w	r2, r3, #31
 8001e68:	4906      	ldr	r1, [pc, #24]	; (8001e84 <__NVIC_EnableIRQ+0x34>)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	2001      	movs	r0, #1
 8001e72:	fa00 f202 	lsl.w	r2, r0, r2
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <SysTick_Config>:
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff90 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff2d 	bl	8001dec <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff42 	bl	8001e34 <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff90 	bl	8001edc <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5f 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff35 	bl	8001e50 <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa2 	bl	8001f40 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d008      	beq.n	8002030 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2204      	movs	r2, #4
 8002022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e022      	b.n	8002076 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 020e 	bic.w	r2, r2, #14
 800203e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f003 021c 	and.w	r2, r3, #28
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002074:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d005      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2204      	movs	r2, #4
 800209c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
 80020a2:	e029      	b.n	80020f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 020e 	bic.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f003 021c 	and.w	r2, r3, #28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
    }
  }
  return status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002110:	b2db      	uxtb	r3, r3
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002132:	e154      	b.n	80023de <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8146 	beq.w	80023d8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d005      	beq.n	8002164 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002160:	2b02      	cmp	r3, #2
 8002162:	d130      	bne.n	80021c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800219a:	2201      	movs	r2, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 0201 	and.w	r2, r3, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d017      	beq.n	8002202 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2203      	movs	r2, #3
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d123      	bne.n	8002256 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	08da      	lsrs	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3208      	adds	r2, #8
 8002216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4013      	ands	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	08da      	lsrs	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3208      	adds	r2, #8
 8002250:	6939      	ldr	r1, [r7, #16]
 8002252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0203 	and.w	r2, r3, #3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a0 	beq.w	80023d8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	4b58      	ldr	r3, [pc, #352]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b55      	ldr	r3, [pc, #340]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80022b0:	4a53      	ldr	r2, [pc, #332]	; (8002400 <HAL_GPIO_Init+0x2e4>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	220f      	movs	r2, #15
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_GPIO_Init+0x2e8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d019      	beq.n	8002310 <HAL_GPIO_Init+0x1f4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a4a      	ldr	r2, [pc, #296]	; (8002408 <HAL_GPIO_Init+0x2ec>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d013      	beq.n	800230c <HAL_GPIO_Init+0x1f0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a49      	ldr	r2, [pc, #292]	; (800240c <HAL_GPIO_Init+0x2f0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00d      	beq.n	8002308 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a48      	ldr	r2, [pc, #288]	; (8002410 <HAL_GPIO_Init+0x2f4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d007      	beq.n	8002304 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a47      	ldr	r2, [pc, #284]	; (8002414 <HAL_GPIO_Init+0x2f8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_GPIO_Init+0x1e4>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e008      	b.n	8002312 <HAL_GPIO_Init+0x1f6>
 8002300:	2305      	movs	r3, #5
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x1f6>
 8002304:	2303      	movs	r3, #3
 8002306:	e004      	b.n	8002312 <HAL_GPIO_Init+0x1f6>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x1f6>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_Init+0x1f6>
 8002310:	2300      	movs	r3, #0
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002322:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_GPIO_Init+0x2e4>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b39      	ldr	r3, [pc, #228]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002354:	4a30      	ldr	r2, [pc, #192]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800235a:	4b2f      	ldr	r3, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800237e:	4a26      	ldr	r2, [pc, #152]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_GPIO_Init+0x2fc>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f aea3 	bne.w	8002134 <HAL_GPIO_Init+0x18>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40010000 	.word	0x40010000
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40010400 	.word	0x40010400

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12b      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fe6c 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800249e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024b0:	f002 fae6 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	4a81      	ldr	r2, [pc, #516]	; (80026c0 <HAL_I2C_Init+0x274>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d807      	bhi.n	80024d0 <HAL_I2C_Init+0x84>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a80      	ldr	r2, [pc, #512]	; (80026c4 <HAL_I2C_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	bf94      	ite	ls
 80024c8:	2301      	movls	r3, #1
 80024ca:	2300      	movhi	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e006      	b.n	80024de <HAL_I2C_Init+0x92>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a7d      	ldr	r2, [pc, #500]	; (80026c8 <HAL_I2C_Init+0x27c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	bf94      	ite	ls
 80024d8:	2301      	movls	r3, #1
 80024da:	2300      	movhi	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e0e7      	b.n	80026b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4a78      	ldr	r2, [pc, #480]	; (80026cc <HAL_I2C_Init+0x280>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	0c9b      	lsrs	r3, r3, #18
 80024f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	430a      	orrs	r2, r1
 8002504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a6a      	ldr	r2, [pc, #424]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d802      	bhi.n	8002520 <HAL_I2C_Init+0xd4>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3301      	adds	r3, #1
 800251e:	e009      	b.n	8002534 <HAL_I2C_Init+0xe8>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	4a69      	ldr	r2, [pc, #420]	; (80026d0 <HAL_I2C_Init+0x284>)
 800252c:	fba2 2303 	umull	r2, r3, r2, r3
 8002530:	099b      	lsrs	r3, r3, #6
 8002532:	3301      	adds	r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	495c      	ldr	r1, [pc, #368]	; (80026c0 <HAL_I2C_Init+0x274>)
 8002550:	428b      	cmp	r3, r1
 8002552:	d819      	bhi.n	8002588 <HAL_I2C_Init+0x13c>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e59      	subs	r1, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_I2C_Init+0x138>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e59      	subs	r1, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fbb1 f3f3 	udiv	r3, r1, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002582:	e051      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002584:	2304      	movs	r3, #4
 8002586:	e04f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_I2C_Init+0x168>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1e58      	subs	r0, r3, #1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6859      	ldr	r1, [r3, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	440b      	add	r3, r1
 800259e:	fbb0 f3f3 	udiv	r3, r0, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf0c      	ite	eq
 80025ac:	2301      	moveq	r3, #1
 80025ae:	2300      	movne	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e012      	b.n	80025da <HAL_I2C_Init+0x18e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1e58      	subs	r0, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6859      	ldr	r1, [r3, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	0099      	lsls	r1, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Init+0x196>
 80025de:	2301      	movs	r3, #1
 80025e0:	e022      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <HAL_I2C_Init+0x1bc>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e58      	subs	r0, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002606:	e00f      	b.n	8002628 <HAL_I2C_Init+0x1dc>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e58      	subs	r0, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	0099      	lsls	r1, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	fbb0 f3f3 	udiv	r3, r0, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	6809      	ldr	r1, [r1, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6911      	ldr	r1, [r2, #16]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	68d2      	ldr	r2, [r2, #12]
 8002662:	4311      	orrs	r1, r2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	000186a0 	.word	0x000186a0
 80026c4:	001e847f 	.word	0x001e847f
 80026c8:	003d08ff 	.word	0x003d08ff
 80026cc:	431bde83 	.word	0x431bde83
 80026d0:	10624dd3 	.word	0x10624dd3

080026d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b10      	cmp	r3, #16
 8002702:	d003      	beq.n	800270c <HAL_I2C_EV_IRQHandler+0x38>
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	f040 80c1 	bne.w	800288e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10d      	bne.n	8002742 <HAL_I2C_EV_IRQHandler+0x6e>
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800272c:	d003      	beq.n	8002736 <HAL_I2C_EV_IRQHandler+0x62>
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002734:	d101      	bne.n	800273a <HAL_I2C_EV_IRQHandler+0x66>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_I2C_EV_IRQHandler+0x68>
 800273a:	2300      	movs	r3, #0
 800273c:	2b01      	cmp	r3, #1
 800273e:	f000 8132 	beq.w	80029a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_I2C_EV_IRQHandler+0x92>
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	0a5b      	lsrs	r3, r3, #9
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 fc63 	bl	8004024 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fd6f 	bl	8003242 <I2C_Master_SB>
 8002764:	e092      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	08db      	lsrs	r3, r3, #3
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_I2C_EV_IRQHandler+0xb2>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	0a5b      	lsrs	r3, r3, #9
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fde4 	bl	800334c <I2C_Master_ADD10>
 8002784:	e082      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	085b      	lsrs	r3, r3, #1
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	0a5b      	lsrs	r3, r3, #9
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fdfd 	bl	800339e <I2C_Master_ADDR>
 80027a4:	e072      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d03b      	beq.n	800282a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c0:	f000 80f3 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	09db      	lsrs	r3, r3, #7
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00f      	beq.n	80027f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	0a9b      	lsrs	r3, r3, #10
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d009      	beq.n	80027f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d103      	bne.n	80027f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f9e9 	bl	8002bc0 <I2C_MasterTransmit_TXE>
 80027ee:	e04d      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80d6 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	0a5b      	lsrs	r3, r3, #9
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80cf 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	2b21      	cmp	r3, #33	; 0x21
 8002810:	d103      	bne.n	800281a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa70 	bl	8002cf8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002818:	e0c7      	b.n	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	f040 80c4 	bne.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fade 	bl	8002de4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002828:	e0bf      	b.n	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	f000 80b7 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	099b      	lsrs	r3, r3, #6
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00f      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x194>
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d009      	beq.n	8002868 <HAL_I2C_EV_IRQHandler+0x194>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fb53 	bl	8002f0c <I2C_MasterReceive_RXNE>
 8002866:	e011      	b.n	800288c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 809a 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	0a5b      	lsrs	r3, r3, #9
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8093 	beq.w	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fbf2 	bl	800306e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800288a:	e08e      	b.n	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800288c:	e08d      	b.n	80029aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e007      	b.n	80028b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	0a5b      	lsrs	r3, r3, #9
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80028d8:	69b9      	ldr	r1, [r7, #24]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 ffab 	bl	8003836 <I2C_Slave_ADDR>
 80028e0:	e066      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_I2C_EV_IRQHandler+0x22e>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	0a5b      	lsrs	r3, r3, #9
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 ffe6 	bl	80038cc <I2C_Slave_STOPF>
 8002900:	e056      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002902:	7bbb      	ldrb	r3, [r7, #14]
 8002904:	2b21      	cmp	r3, #33	; 0x21
 8002906:	d002      	beq.n	800290e <HAL_I2C_EV_IRQHandler+0x23a>
 8002908:	7bbb      	ldrb	r3, [r7, #14]
 800290a:	2b29      	cmp	r3, #41	; 0x29
 800290c:	d125      	bne.n	800295a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	09db      	lsrs	r3, r3, #7
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00f      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0x266>
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	0a9b      	lsrs	r3, r3, #10
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_I2C_EV_IRQHandler+0x266>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fec3 	bl	80036be <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002938:	e039      	b.n	80029ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d033      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0x2da>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	0a5b      	lsrs	r3, r3, #9
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02d      	beq.n	80029ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fef0 	bl	8003738 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002958:	e029      	b.n	80029ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00f      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	0a9b      	lsrs	r3, r3, #10
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fefa 	bl	8003778 <I2C_SlaveReceive_RXNE>
 8002984:	e014      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	089b      	lsrs	r3, r3, #2
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	0a5b      	lsrs	r3, r3, #9
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 ff28 	bl	80037f4 <I2C_SlaveReceive_BTF>
 80029a4:	e004      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80029a6:	bf00      	nop
 80029a8:	e002      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029aa:	bf00      	nop
 80029ac:	e000      	b.n	80029b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b08a      	sub	sp, #40	; 0x28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <HAL_I2C_ER_IRQHandler+0x4e>
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	0a5b      	lsrs	r3, r3, #9
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <HAL_I2C_ER_IRQHandler+0x78>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002a2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	0a9b      	lsrs	r3, r3, #10
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d03f      	beq.n	8002aba <HAL_I2C_ER_IRQHandler+0x104>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d039      	beq.n	8002aba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002a46:	7efb      	ldrb	r3, [r7, #27]
 8002a48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002a60:	7ebb      	ldrb	r3, [r7, #26]
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d112      	bne.n	8002a8c <HAL_I2C_ER_IRQHandler+0xd6>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_I2C_ER_IRQHandler+0xd6>
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b21      	cmp	r3, #33	; 0x21
 8002a70:	d008      	beq.n	8002a84 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b29      	cmp	r3, #41	; 0x29
 8002a76:	d005      	beq.n	8002a84 <HAL_I2C_ER_IRQHandler+0xce>
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b28      	cmp	r3, #40	; 0x28
 8002a7c:	d106      	bne.n	8002a8c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b21      	cmp	r3, #33	; 0x21
 8002a82:	d103      	bne.n	8002a8c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f001 f851 	bl	8003b2c <I2C_Slave_AF>
 8002a8a:	e016      	b.n	8002aba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002a9e:	7efb      	ldrb	r3, [r7, #27]
 8002aa0:	2b10      	cmp	r3, #16
 8002aa2:	d002      	beq.n	8002aaa <HAL_I2C_ER_IRQHandler+0xf4>
 8002aa4:	7efb      	ldrb	r3, [r7, #27]
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d107      	bne.n	8002aba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	0adb      	lsrs	r3, r3, #11
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x12e>
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	f043 0308 	orr.w	r3, r3, #8
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002ae2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f001 f888 	bl	8003c0c <I2C_ITError>
  }
}
 8002afc:	bf00      	nop
 8002afe:	3728      	adds	r7, #40	; 0x28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d150      	bne.n	8002c88 <I2C_MasterTransmit_TXE+0xc8>
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b21      	cmp	r3, #33	; 0x21
 8002bea:	d14d      	bne.n	8002c88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d01d      	beq.n	8002c2e <I2C_MasterTransmit_TXE+0x6e>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d01a      	beq.n	8002c2e <I2C_MasterTransmit_TXE+0x6e>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bfe:	d016      	beq.n	8002c2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2211      	movs	r2, #17
 8002c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ff6c 	bl	8002b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c2c:	e060      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d107      	bne.n	8002c78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f7ff ff81 	bl	8002b78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c76:	e03b      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff3f 	bl	8002b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c86:	e033      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b21      	cmp	r3, #33	; 0x21
 8002c8c:	d005      	beq.n	8002c9a <I2C_MasterTransmit_TXE+0xda>
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d12d      	bne.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b22      	cmp	r3, #34	; 0x22
 8002c98:	d12a      	bne.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d108      	bne.n	8002cb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002cb4:	e01c      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d103      	bne.n	8002cca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f88e 	bl	8002de4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002cc8:	e012      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002cee:	e7ff      	b.n	8002cf0 <I2C_MasterTransmit_TXE+0x130>
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b21      	cmp	r3, #33	; 0x21
 8002d10:	d164      	bne.n	8002ddc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d012      	beq.n	8002d42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	781a      	ldrb	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002d40:	e04c      	b.n	8002ddc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d01d      	beq.n	8002d84 <I2C_MasterTransmit_BTF+0x8c>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d01a      	beq.n	8002d84 <I2C_MasterTransmit_BTF+0x8c>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d54:	d016      	beq.n	8002d84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2211      	movs	r2, #17
 8002d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff fec1 	bl	8002b04 <HAL_I2C_MasterTxCpltCallback>
}
 8002d82:	e02b      	b.n	8002ddc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d107      	bne.n	8002dce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fed6 	bl	8002b78 <HAL_I2C_MemTxCpltCallback>
}
 8002dcc:	e006      	b.n	8002ddc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7ff fe94 	bl	8002b04 <HAL_I2C_MasterTxCpltCallback>
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d11d      	bne.n	8002e38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10b      	bne.n	8002e1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002e1a:	e073      	b.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	121b      	asrs	r3, r3, #8
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e36:	e065      	b.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10b      	bne.n	8002e58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e56:	e055      	b.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d151      	bne.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
 8002e62:	2b22      	cmp	r3, #34	; 0x22
 8002e64:	d10d      	bne.n	8002e82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e80:	e040      	b.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b21      	cmp	r3, #33	; 0x21
 8002e90:	d112      	bne.n	8002eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002eb6:	e025      	b.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d120      	bne.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b21      	cmp	r3, #33	; 0x21
 8002ec6:	d11d      	bne.n	8002f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ed6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fe3a 	bl	8002b78 <HAL_I2C_MemTxCpltCallback>
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b22      	cmp	r3, #34	; 0x22
 8002f1e:	f040 80a2 	bne.w	8003066 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d921      	bls.n	8002f74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	f040 8082 	bne.w	8003066 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f70:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002f72:	e078      	b.n	8003066 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d074      	beq.n	8003066 <I2C_MasterReceive_RXNE+0x15a>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d002      	beq.n	8002f88 <I2C_MasterReceive_RXNE+0x7c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d16e      	bne.n	8003066 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f001 f819 	bl	8003fc0 <I2C_WaitOnSTOPRequestThroughIT>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d142      	bne.n	800301a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fa2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691a      	ldr	r2, [r3, #16]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b40      	cmp	r3, #64	; 0x40
 8002fec:	d10a      	bne.n	8003004 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fdc4 	bl	8002b8a <HAL_I2C_MemRxCpltCallback>
}
 8003002:	e030      	b.n	8003066 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2212      	movs	r2, #18
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fd7f 	bl	8002b16 <HAL_I2C_MasterRxCpltCallback>
}
 8003018:	e025      	b.n	8003066 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003028:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff fd9b 	bl	8002b9c <HAL_I2C_ErrorCallback>
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b04      	cmp	r3, #4
 8003084:	d11b      	bne.n	80030be <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003094:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80030bc:	e0bd      	b.n	800323a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d129      	bne.n	800311c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d00a      	beq.n	80030f4 <I2C_MasterReceive_BTF+0x86>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d007      	beq.n	80030f4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29a      	uxth	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800311a:	e08e      	b.n	800323a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d176      	bne.n	8003214 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <I2C_MasterReceive_BTF+0xc4>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d108      	bne.n	8003144 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e019      	b.n	8003178 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b04      	cmp	r3, #4
 8003148:	d002      	beq.n	8003150 <I2C_MasterReceive_BTF+0xe2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d108      	bne.n	8003162 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e00a      	b.n	8003178 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b10      	cmp	r3, #16
 8003166:	d007      	beq.n	8003178 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80031d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d10a      	bne.n	80031fe <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fcc7 	bl	8002b8a <HAL_I2C_MemRxCpltCallback>
}
 80031fc:	e01d      	b.n	800323a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2212      	movs	r2, #18
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fc82 	bl	8002b16 <HAL_I2C_MasterRxCpltCallback>
}
 8003212:	e012      	b.n	800323a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d117      	bne.n	8003286 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800326e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003270:	e067      	b.n	8003342 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	b2da      	uxtb	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
}
 8003284:	e05d      	b.n	8003342 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800328e:	d133      	bne.n	80032f8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b21      	cmp	r3, #33	; 0x21
 800329a:	d109      	bne.n	80032b0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	e008      	b.n	80032c2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <I2C_Master_SB+0x92>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d032      	beq.n	8003342 <I2C_Master_SB+0x100>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d02d      	beq.n	8003342 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f4:	605a      	str	r2, [r3, #4]
}
 80032f6:	e024      	b.n	8003342 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10e      	bne.n	800331e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003304:	b29b      	uxth	r3, r3
 8003306:	11db      	asrs	r3, r3, #7
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f003 0306 	and.w	r3, r3, #6
 800330e:	b2db      	uxtb	r3, r3
 8003310:	f063 030f 	orn	r3, r3, #15
 8003314:	b2da      	uxtb	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	611a      	str	r2, [r3, #16]
}
 800331c:	e011      	b.n	8003342 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10d      	bne.n	8003342 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	b29b      	uxth	r3, r3
 800332c:	11db      	asrs	r3, r3, #7
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 0306 	and.w	r3, r3, #6
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f063 030e 	orn	r3, r3, #14
 800333a:	b2da      	uxtb	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	611a      	str	r2, [r3, #16]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	b2da      	uxtb	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	2b00      	cmp	r3, #0
 8003366:	d004      	beq.n	8003372 <I2C_Master_ADD10+0x26>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <I2C_Master_ADD10+0x48>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003392:	605a      	str	r2, [r3, #4]
  }
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800339e:	b480      	push	{r7}
 80033a0:	b091      	sub	sp, #68	; 0x44
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b22      	cmp	r3, #34	; 0x22
 80033c6:	f040 8169 	bne.w	800369c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <I2C_Master_ADDR+0x54>
 80033d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d10b      	bne.n	80033f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033da:	2300      	movs	r3, #0
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
 80033ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f0:	e160      	b.n	80036b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11d      	bne.n	8003436 <I2C_Master_ADDR+0x98>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003402:	d118      	bne.n	8003436 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003404:	2300      	movs	r3, #0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003428:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	651a      	str	r2, [r3, #80]	; 0x50
 8003434:	e13e      	b.n	80036b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003440:	2300      	movs	r3, #0
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	e115      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 808a 	bne.w	8003588 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800347a:	d137      	bne.n	80034ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800348a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349a:	d113      	bne.n	80034c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ac:	2300      	movs	r3, #0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	e0e7      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e0d3      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	2b08      	cmp	r3, #8
 80034f0:	d02e      	beq.n	8003550 <I2C_Master_ADDR+0x1b2>
 80034f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d02b      	beq.n	8003550 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d102      	bne.n	8003504 <I2C_Master_ADDR+0x166>
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	2b01      	cmp	r3, #1
 8003502:	d125      	bne.n	8003550 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00e      	beq.n	8003528 <I2C_Master_ADDR+0x18a>
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b02      	cmp	r3, #2
 800350e:	d00b      	beq.n	8003528 <I2C_Master_ADDR+0x18a>
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2b10      	cmp	r3, #16
 8003514:	d008      	beq.n	8003528 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e007      	b.n	8003538 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	e0a1      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	2300      	movs	r3, #0
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	61bb      	str	r3, [r7, #24]
 8003574:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e085      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d14d      	bne.n	800362e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b04      	cmp	r3, #4
 8003596:	d016      	beq.n	80035c6 <I2C_Master_ADDR+0x228>
 8003598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359a:	2b02      	cmp	r3, #2
 800359c:	d013      	beq.n	80035c6 <I2C_Master_ADDR+0x228>
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d010      	beq.n	80035c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e007      	b.n	80035d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e4:	d117      	bne.n	8003616 <I2C_Master_ADDR+0x278>
 80035e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ec:	d00b      	beq.n	8003606 <I2C_Master_ADDR+0x268>
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d008      	beq.n	8003606 <I2C_Master_ADDR+0x268>
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d005      	beq.n	8003606 <I2C_Master_ADDR+0x268>
 80035fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d002      	beq.n	8003606 <I2C_Master_ADDR+0x268>
 8003600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003602:	2b20      	cmp	r3, #32
 8003604:	d107      	bne.n	8003616 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003614:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	e032      	b.n	8003694 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800363c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364c:	d117      	bne.n	800367e <I2C_Master_ADDR+0x2e0>
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003654:	d00b      	beq.n	800366e <I2C_Master_ADDR+0x2d0>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b01      	cmp	r3, #1
 800365a:	d008      	beq.n	800366e <I2C_Master_ADDR+0x2d0>
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b08      	cmp	r3, #8
 8003660:	d005      	beq.n	800366e <I2C_Master_ADDR+0x2d0>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b10      	cmp	r3, #16
 8003666:	d002      	beq.n	800366e <I2C_Master_ADDR+0x2d0>
 8003668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366a:	2b20      	cmp	r3, #32
 800366c:	d107      	bne.n	800367e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800367c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800369a:	e00b      	b.n	80036b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
}
 80036b2:	e7ff      	b.n	80036b4 <I2C_Master_ADDR+0x316>
 80036b4:	bf00      	nop
 80036b6:	3744      	adds	r7, #68	; 0x44
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d02b      	beq.n	8003730 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d114      	bne.n	8003730 <I2C_SlaveTransmit_TXE+0x72>
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b29      	cmp	r3, #41	; 0x29
 800370a:	d111      	bne.n	8003730 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2221      	movs	r2, #33	; 0x21
 8003720:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2228      	movs	r2, #40	; 0x28
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff f9fc 	bl	8002b28 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003786:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02c      	beq.n	80037ec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	b2d2      	uxtb	r2, r2
 800379e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d114      	bne.n	80037ec <I2C_SlaveReceive_RXNE+0x74>
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	2b2a      	cmp	r3, #42	; 0x2a
 80037c6:	d111      	bne.n	80037ec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2222      	movs	r2, #34	; 0x22
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2228      	movs	r2, #40	; 0x28
 80037e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f9a7 	bl	8002b3a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003850:	2b28      	cmp	r3, #40	; 0x28
 8003852:	d127      	bne.n	80038a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003862:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	09db      	lsrs	r3, r3, #7
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	d103      	bne.n	8003888 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	81bb      	strh	r3, [r7, #12]
 8003886:	e002      	b.n	800388e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003896:	89ba      	ldrh	r2, [r7, #12]
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff f955 	bl	8002b4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038a2:	e00e      	b.n	80038c2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038da:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038ec:	2300      	movs	r3, #0
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0201 	orr.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003928:	d172      	bne.n	8003a10 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b22      	cmp	r3, #34	; 0x22
 800392e:	d002      	beq.n	8003936 <I2C_Slave_STOPF+0x6a>
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b2a      	cmp	r3, #42	; 0x2a
 8003934:	d135      	bne.n	80039a2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f043 0204 	orr.w	r2, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003968:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fbc7 	bl	8002102 <HAL_DMA_GetState>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d049      	beq.n	8003a0e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4a69      	ldr	r2, [pc, #420]	; (8003b24 <I2C_Slave_STOPF+0x258>)
 8003980:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fb7a 	bl	8002080 <HAL_DMA_Abort_IT>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d03d      	beq.n	8003a0e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800399c:	4610      	mov	r0, r2
 800399e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039a0:	e035      	b.n	8003a0e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe fb91 	bl	8002102 <HAL_DMA_GetState>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d014      	beq.n	8003a10 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ea:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <I2C_Slave_STOPF+0x258>)
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fb44 	bl	8002080 <HAL_DMA_Abort_IT>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d008      	beq.n	8003a10 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4798      	blx	r3
 8003a0c:	e000      	b.n	8003a10 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a0e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d03e      	beq.n	8003a98 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d112      	bne.n	8003a4e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	b2d2      	uxtb	r2, r2
 8003a34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d112      	bne.n	8003a82 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8b3 	bl	8003c0c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003aa6:	e039      	b.n	8003b1c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003aac:	d109      	bne.n	8003ac2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2228      	movs	r2, #40	; 0x28
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7ff f83c 	bl	8002b3a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b28      	cmp	r3, #40	; 0x28
 8003acc:	d111      	bne.n	8003af2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <I2C_Slave_STOPF+0x25c>)
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff f83b 	bl	8002b66 <HAL_I2C_ListenCpltCallback>
}
 8003af0:	e014      	b.n	8003b1c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	2b22      	cmp	r3, #34	; 0x22
 8003af8:	d002      	beq.n	8003b00 <I2C_Slave_STOPF+0x234>
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	d10d      	bne.n	8003b1c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff f80f 	bl	8002b3a <HAL_I2C_SlaveRxCpltCallback>
}
 8003b1c:	bf00      	nop
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	08003e71 	.word	0x08003e71
 8003b28:	ffff0000 	.word	0xffff0000

08003b2c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d002      	beq.n	8003b4e <I2C_Slave_AF+0x22>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d129      	bne.n	8003ba2 <I2C_Slave_AF+0x76>
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b28      	cmp	r3, #40	; 0x28
 8003b52:	d126      	bne.n	8003ba2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a2c      	ldr	r2, [pc, #176]	; (8003c08 <I2C_Slave_AF+0xdc>)
 8003b58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b68:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b72:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fe ffe3 	bl	8002b66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003ba0:	e02e      	b.n	8003c00 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b21      	cmp	r3, #33	; 0x21
 8003ba6:	d126      	bne.n	8003bf6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <I2C_Slave_AF+0xdc>)
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2221      	movs	r2, #33	; 0x21
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bd2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bdc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fe ff9a 	bl	8002b28 <HAL_I2C_SlaveTxCpltCallback>
}
 8003bf4:	e004      	b.n	8003c00 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bfe:	615a      	str	r2, [r3, #20]
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	ffff0000 	.word	0xffff0000

08003c0c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d002      	beq.n	8003c30 <I2C_ITError+0x24>
 8003c2a:	7bbb      	ldrb	r3, [r7, #14]
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d10a      	bne.n	8003c46 <I2C_ITError+0x3a>
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b22      	cmp	r3, #34	; 0x22
 8003c34:	d107      	bne.n	8003c46 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c44:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c4c:	2b28      	cmp	r3, #40	; 0x28
 8003c4e:	d107      	bne.n	8003c60 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2228      	movs	r2, #40	; 0x28
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c5e:	e015      	b.n	8003c8c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6e:	d00a      	beq.n	8003c86 <I2C_ITError+0x7a>
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b60      	cmp	r3, #96	; 0x60
 8003c74:	d007      	beq.n	8003c86 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d162      	bne.n	8003d62 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003caa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d020      	beq.n	8003cfc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	4a6a      	ldr	r2, [pc, #424]	; (8003e68 <I2C_ITError+0x25c>)
 8003cc0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f9da 	bl	8002080 <HAL_DMA_Abort_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8089 	beq.w	8003de6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0201 	bic.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4798      	blx	r3
 8003cfa:	e074      	b.n	8003de6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	4a59      	ldr	r2, [pc, #356]	; (8003e68 <I2C_ITError+0x25c>)
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fe f9b9 	bl	8002080 <HAL_DMA_Abort_IT>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d068      	beq.n	8003de6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d10b      	bne.n	8003d3a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4798      	blx	r3
 8003d60:	e041      	b.n	8003de6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b60      	cmp	r3, #96	; 0x60
 8003d6c:	d125      	bne.n	8003dba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d10b      	bne.n	8003da2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe fefb 	bl	8002bae <HAL_I2C_AbortCpltCallback>
 8003db8:	e015      	b.n	8003de6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d10b      	bne.n	8003de0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fe fedb 	bl	8002b9c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10e      	bne.n	8003e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d007      	beq.n	8003e24 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e22:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d113      	bne.n	8003e60 <I2C_ITError+0x254>
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	2b28      	cmp	r3, #40	; 0x28
 8003e3c:	d110      	bne.n	8003e60 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <I2C_ITError+0x260>)
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe fe83 	bl	8002b66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	08003e71 	.word	0x08003e71
 8003e6c:	ffff0000 	.word	0xffff0000

08003e70 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e8a:	4b4b      	ldr	r3, [pc, #300]	; (8003fb8 <I2C_DMAAbort+0x148>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	08db      	lsrs	r3, r3, #3
 8003e90:	4a4a      	ldr	r2, [pc, #296]	; (8003fbc <I2C_DMAAbort+0x14c>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0a1a      	lsrs	r2, r3, #8
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	00da      	lsls	r2, r3, #3
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003eb6:	e00a      	b.n	8003ece <I2C_DMAAbort+0x5e>
    }
    count--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ecc:	d0ea      	beq.n	8003ea4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	2200      	movs	r2, #0
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	2200      	movs	r2, #0
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003efc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2200      	movs	r2, #0
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	2200      	movs	r2, #0
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d10e      	bne.n	8003f5e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f7fe fe29 	bl	8002bae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f5c:	e027      	b.n	8003fae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f64:	2b28      	cmp	r3, #40	; 0x28
 8003f66:	d117      	bne.n	8003f98 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0201 	orr.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f86:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2228      	movs	r2, #40	; 0x28
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f96:	e007      	b.n	8003fa8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003fa8:	6978      	ldr	r0, [r7, #20]
 8003faa:	f7fe fdf7 	bl	8002b9c <HAL_I2C_ErrorCallback>
}
 8003fae:	bf00      	nop
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000048 	.word	0x20000048
 8003fbc:	14f8b589 	.word	0x14f8b589

08003fc0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	08db      	lsrs	r3, r3, #3
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	0a1a      	lsrs	r2, r3, #8
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d107      	bne.n	8003ffe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e008      	b.n	8004010 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400c:	d0e9      	beq.n	8003fe2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000048 	.word	0x20000048
 8004020:	14f8b589 	.word	0x14f8b589

08004024 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004034:	d103      	bne.n	800403e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800403c:	e007      	b.n	800404e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004046:	d102      	bne.n	800404e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2208      	movs	r2, #8
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e31d      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b94      	ldr	r3, [pc, #592]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004074:	4b91      	ldr	r3, [pc, #580]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d07b      	beq.n	8004182 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d006      	beq.n	800409e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d10f      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d10b      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409e:	4b87      	ldr	r3, [pc, #540]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06a      	beq.n	8004180 <HAL_RCC_OscConfig+0x128>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d166      	bne.n	8004180 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e2f7      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d106      	bne.n	80040cc <HAL_RCC_OscConfig+0x74>
 80040be:	4b7f      	ldr	r3, [pc, #508]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7e      	ldr	r2, [pc, #504]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e02d      	b.n	8004128 <HAL_RCC_OscConfig+0xd0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <HAL_RCC_OscConfig+0x96>
 80040d4:	4b79      	ldr	r3, [pc, #484]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a78      	ldr	r2, [pc, #480]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a75      	ldr	r2, [pc, #468]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e01c      	b.n	8004128 <HAL_RCC_OscConfig+0xd0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d10c      	bne.n	8004110 <HAL_RCC_OscConfig+0xb8>
 80040f6:	4b71      	ldr	r3, [pc, #452]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a70      	ldr	r2, [pc, #448]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b6e      	ldr	r3, [pc, #440]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6d      	ldr	r2, [pc, #436]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	e00b      	b.n	8004128 <HAL_RCC_OscConfig+0xd0>
 8004110:	4b6a      	ldr	r3, [pc, #424]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a69      	ldr	r2, [pc, #420]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b67      	ldr	r3, [pc, #412]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a66      	ldr	r2, [pc, #408]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fa64 	bl	80015fc <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fa60 	bl	80015fc <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e2ad      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0xe0>
 8004156:	e014      	b.n	8004182 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fa50 	bl	80015fc <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fd fa4c 	bl	80015fc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	; 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e299      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004172:	4b52      	ldr	r3, [pc, #328]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x108>
 800417e:	e000      	b.n	8004182 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d05a      	beq.n	8004244 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d119      	bne.n	80041ce <HAL_RCC_OscConfig+0x176>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d116      	bne.n	80041ce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_OscConfig+0x160>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e276      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b40      	ldr	r3, [pc, #256]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	493d      	ldr	r1, [pc, #244]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041cc:	e03a      	b.n	8004244 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d020      	beq.n	8004218 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d6:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <HAL_RCC_OscConfig+0x268>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fa0e 	bl	80015fc <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fd fa0a 	bl	80015fc <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e257      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	492a      	ldr	r1, [pc, #168]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004212:	4313      	orrs	r3, r2
 8004214:	604b      	str	r3, [r1, #4]
 8004216:	e015      	b.n	8004244 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCC_OscConfig+0x268>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421e:	f7fd f9ed 	bl	80015fc <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004226:	f7fd f9e9 	bl	80015fc <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e236      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004238:	4b20      	ldr	r3, [pc, #128]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f0      	bne.n	8004226 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 80b8 	beq.w	80043c2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d170      	bne.n	800433a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_OscConfig+0x218>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e21a      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800427c:	429a      	cmp	r2, r3
 800427e:	d921      	bls.n	80042c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fc23 	bl	8004ad0 <RCC_SetFlashLatencyFromMSIRange>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e208      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	4906      	ldr	r1, [pc, #24]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	061b      	lsls	r3, r3, #24
 80042b4:	4901      	ldr	r1, [pc, #4]	; (80042bc <HAL_RCC_OscConfig+0x264>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	604b      	str	r3, [r1, #4]
 80042ba:	e020      	b.n	80042fe <HAL_RCC_OscConfig+0x2a6>
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c4:	4ba4      	ldr	r3, [pc, #656]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	49a1      	ldr	r1, [pc, #644]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042d6:	4ba0      	ldr	r3, [pc, #640]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	061b      	lsls	r3, r3, #24
 80042e4:	499c      	ldr	r1, [pc, #624]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fbee 	bl	8004ad0 <RCC_SetFlashLatencyFromMSIRange>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1d3      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	3301      	adds	r3, #1
 8004306:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800430e:	4a92      	ldr	r2, [pc, #584]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004310:	6892      	ldr	r2, [r2, #8]
 8004312:	0912      	lsrs	r2, r2, #4
 8004314:	f002 020f 	and.w	r2, r2, #15
 8004318:	4990      	ldr	r1, [pc, #576]	; (800455c <HAL_RCC_OscConfig+0x504>)
 800431a:	5c8a      	ldrb	r2, [r1, r2]
 800431c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800431e:	4a90      	ldr	r2, [pc, #576]	; (8004560 <HAL_RCC_OscConfig+0x508>)
 8004320:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004322:	4b90      	ldr	r3, [pc, #576]	; (8004564 <HAL_RCC_OscConfig+0x50c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd f91c 	bl	8001564 <HAL_InitTick>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d045      	beq.n	80043c2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	e1b5      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d029      	beq.n	8004396 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004342:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_OscConfig+0x510>)
 8004344:	2201      	movs	r2, #1
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd f958 	bl	80015fc <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004350:	f7fd f954 	bl	80015fc <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1a1      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004362:	4b7d      	ldr	r3, [pc, #500]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436e:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4977      	ldr	r1, [pc, #476]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004380:	4b75      	ldr	r3, [pc, #468]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	4972      	ldr	r1, [pc, #456]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
 8004394:	e015      	b.n	80043c2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004396:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_RCC_OscConfig+0x510>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7fd f92e 	bl	80015fc <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a4:	f7fd f92a 	bl	80015fc <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e177      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80043b6:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d030      	beq.n	8004430 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d016      	beq.n	8004404 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d6:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_OscConfig+0x514>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043dc:	f7fd f90e 	bl	80015fc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fd f90a 	bl	80015fc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e157      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043f6:	4b58      	ldr	r3, [pc, #352]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80043f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0x38c>
 8004402:	e015      	b.n	8004430 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004404:	4b59      	ldr	r3, [pc, #356]	; (800456c <HAL_RCC_OscConfig+0x514>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440a:	f7fd f8f7 	bl	80015fc <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004412:	f7fd f8f3 	bl	80015fc <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e140      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80b5 	beq.w	80045a8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b45      	ldr	r3, [pc, #276]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	4b42      	ldr	r3, [pc, #264]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	4a41      	ldr	r2, [pc, #260]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6253      	str	r3, [r2, #36]	; 0x24
 800445a:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004466:	2301      	movs	r3, #1
 8004468:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x518>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d118      	bne.n	80044a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004476:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <HAL_RCC_OscConfig+0x518>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x518>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd f8bb 	bl	80015fc <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fd f8b7 	bl	80015fc <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b64      	cmp	r3, #100	; 0x64
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e104      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <HAL_RCC_OscConfig+0x518>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d106      	bne.n	80044be <HAL_RCC_OscConfig+0x466>
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	4a28      	ldr	r2, [pc, #160]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6353      	str	r3, [r2, #52]	; 0x34
 80044bc:	e02d      	b.n	800451a <HAL_RCC_OscConfig+0x4c2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x488>
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ca:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	6353      	str	r3, [r2, #52]	; 0x34
 80044d2:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044dc:	6353      	str	r3, [r2, #52]	; 0x34
 80044de:	e01c      	b.n	800451a <HAL_RCC_OscConfig+0x4c2>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b05      	cmp	r3, #5
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_OscConfig+0x4aa>
 80044e8:	4b1b      	ldr	r3, [pc, #108]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f2:	6353      	str	r3, [r2, #52]	; 0x34
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	4a17      	ldr	r2, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6353      	str	r3, [r2, #52]	; 0x34
 8004500:	e00b      	b.n	800451a <HAL_RCC_OscConfig+0x4c2>
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	4a14      	ldr	r2, [pc, #80]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	6353      	str	r3, [r2, #52]	; 0x34
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004514:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004518:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d015      	beq.n	800454e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004522:	f7fd f86b 	bl	80015fc <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd f867 	bl	80015fc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	; 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0b2      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_OscConfig+0x500>)
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0ee      	beq.n	800452a <HAL_RCC_OscConfig+0x4d2>
 800454c:	e023      	b.n	8004596 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454e:	f7fd f855 	bl	80015fc <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004554:	e019      	b.n	800458a <HAL_RCC_OscConfig+0x532>
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	080061a8 	.word	0x080061a8
 8004560:	20000048 	.word	0x20000048
 8004564:	2000004c 	.word	0x2000004c
 8004568:	42470020 	.word	0x42470020
 800456c:	42470680 	.word	0x42470680
 8004570:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004574:	f7fd f842 	bl	80015fc <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e08d      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800458a:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ee      	bne.n	8004574 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004596:	7ffb      	ldrb	r3, [r7, #31]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459c:	4b44      	ldr	r3, [pc, #272]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	4a43      	ldr	r2, [pc, #268]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d079      	beq.n	80046a4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	2b0c      	cmp	r3, #12
 80045b4:	d056      	beq.n	8004664 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d13b      	bne.n	8004636 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045be:	4b3d      	ldr	r3, [pc, #244]	; (80046b4 <HAL_RCC_OscConfig+0x65c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd f81a 	bl	80015fc <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045cc:	f7fd f816 	bl	80015fc <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e063      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ea:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4319      	orrs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	430b      	orrs	r3, r1
 8004602:	492b      	ldr	r1, [pc, #172]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 8004604:	4313      	orrs	r3, r2
 8004606:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004608:	4b2a      	ldr	r3, [pc, #168]	; (80046b4 <HAL_RCC_OscConfig+0x65c>)
 800460a:	2201      	movs	r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460e:	f7fc fff5 	bl	80015fc <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004616:	f7fc fff1 	bl	80015fc <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e03e      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x5be>
 8004634:	e036      	b.n	80046a4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004636:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <HAL_RCC_OscConfig+0x65c>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7fc ffde 	bl	80015fc <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004644:	f7fc ffda 	bl	80015fc <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e027      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x5ec>
 8004662:	e01f      	b.n	80046a4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01a      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HAL_RCC_OscConfig+0x658>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004680:	429a      	cmp	r2, r3
 8004682:	d10d      	bne.n	80046a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470060 	.word	0x42470060

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e11a      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b8f      	ldr	r3, [pc, #572]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d919      	bls.n	800470e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_ClockConfig+0x34>
 80046e0:	4b8a      	ldr	r3, [pc, #552]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a89      	ldr	r2, [pc, #548]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046e6:	f043 0304 	orr.w	r3, r3, #4
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b87      	ldr	r3, [pc, #540]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 0201 	bic.w	r2, r3, #1
 80046f4:	4985      	ldr	r1, [pc, #532]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fc:	4b83      	ldr	r3, [pc, #524]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d001      	beq.n	800470e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e0f9      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800471a:	4b7d      	ldr	r3, [pc, #500]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	497a      	ldr	r1, [pc, #488]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004728:	4313      	orrs	r3, r2
 800472a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 808e 	beq.w	8004856 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d107      	bne.n	8004752 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004742:	4b73      	ldr	r3, [pc, #460]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d121      	bne.n	8004792 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e0d7      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800475a:	4b6d      	ldr	r3, [pc, #436]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d115      	bne.n	8004792 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0cb      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004772:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e0bf      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004782:	4b63      	ldr	r3, [pc, #396]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0b7      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	495c      	ldr	r1, [pc, #368]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fc ff2a 	bl	80015fc <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d112      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fc ff22 	bl	80015fc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e09b      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ca:	4b51      	ldr	r3, [pc, #324]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d1ee      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xfc>
 80047d6:	e03e      	b.n	8004856 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b03      	cmp	r3, #3
 80047de:	d112      	bne.n	8004806 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e2:	f7fc ff0b 	bl	80015fc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e084      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b0c      	cmp	r3, #12
 8004802:	d1ee      	bne.n	80047e2 <HAL_RCC_ClockConfig+0x12a>
 8004804:	e027      	b.n	8004856 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d11d      	bne.n	800484a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fc fef4 	bl	80015fc <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e06d      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004826:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
 800482e:	2b04      	cmp	r3, #4
 8004830:	d1ee      	bne.n	8004810 <HAL_RCC_ClockConfig+0x158>
 8004832:	e010      	b.n	8004856 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004834:	f7fc fee2 	bl	80015fc <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e05b      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800484a:	4b31      	ldr	r3, [pc, #196]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004856:	4b2d      	ldr	r3, [pc, #180]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d219      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <HAL_RCC_ClockConfig+0x1be>
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a27      	ldr	r2, [pc, #156]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 8004870:	f043 0304 	orr.w	r3, r3, #4
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	4b25      	ldr	r3, [pc, #148]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	4923      	ldr	r1, [pc, #140]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <HAL_RCC_ClockConfig+0x254>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e034      	b.n	8004902 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a4:	4b1a      	ldr	r3, [pc, #104]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4917      	ldr	r1, [pc, #92]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	490f      	ldr	r1, [pc, #60]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d6:	f000 f823 	bl	8004920 <HAL_RCC_GetSysClockFreq>
 80048da:	4602      	mov	r2, r0
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCC_ClockConfig+0x258>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	490b      	ldr	r1, [pc, #44]	; (8004914 <HAL_RCC_ClockConfig+0x25c>)
 80048e8:	5ccb      	ldrb	r3, [r1, r3]
 80048ea:	fa22 f303 	lsr.w	r3, r2, r3
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x260>)
 80048f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_RCC_ClockConfig+0x264>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fc fe34 	bl	8001564 <HAL_InitTick>
 80048fc:	4603      	mov	r3, r0
 80048fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8004900:	7afb      	ldrb	r3, [r7, #11]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40023c00 	.word	0x40023c00
 8004910:	40023800 	.word	0x40023800
 8004914:	080061a8 	.word	0x080061a8
 8004918:	20000048 	.word	0x20000048
 800491c:	2000004c 	.word	0x2000004c

08004920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004920:	b5b0      	push	{r4, r5, r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004926:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_GetSysClockFreq+0x30>
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d87c      	bhi.n	8004a34 <HAL_RCC_GetSysClockFreq+0x114>
 800493a:	2b04      	cmp	r3, #4
 800493c:	d002      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x24>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d003      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x2a>
 8004942:	e077      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004944:	4b46      	ldr	r3, [pc, #280]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x140>)
 8004946:	613b      	str	r3, [r7, #16]
      break;
 8004948:	e082      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800494a:	4b46      	ldr	r3, [pc, #280]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x144>)
 800494c:	613b      	str	r3, [r7, #16]
      break;
 800494e:	e07f      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	0c9b      	lsrs	r3, r3, #18
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	4a43      	ldr	r2, [pc, #268]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x148>)
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	0d9b      	lsrs	r3, r3, #22
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	3301      	adds	r3, #1
 8004968:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496a:	4b3c      	ldr	r3, [pc, #240]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x13c>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01a      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	461a      	mov	r2, r3
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	4939      	ldr	r1, [pc, #228]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x144>)
 8004980:	fb01 f003 	mul.w	r0, r1, r3
 8004984:	2100      	movs	r1, #0
 8004986:	fb01 f102 	mul.w	r1, r1, r2
 800498a:	1844      	adds	r4, r0, r1
 800498c:	4935      	ldr	r1, [pc, #212]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x144>)
 800498e:	fba2 0101 	umull	r0, r1, r2, r1
 8004992:	1863      	adds	r3, r4, r1
 8004994:	4619      	mov	r1, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	461a      	mov	r2, r3
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	f7fb fdaf 	bl	8000500 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4613      	mov	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e040      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	461c      	mov	r4, r3
 80049b0:	f04f 0500 	mov.w	r5, #0
 80049b4:	4620      	mov	r0, r4
 80049b6:	4629      	mov	r1, r5
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	014b      	lsls	r3, r1, #5
 80049c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049c6:	0142      	lsls	r2, r0, #5
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	1b00      	subs	r0, r0, r4
 80049ce:	eb61 0105 	sbc.w	r1, r1, r5
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049e0:	0182      	lsls	r2, r0, #6
 80049e2:	1a12      	subs	r2, r2, r0
 80049e4:	eb63 0301 	sbc.w	r3, r3, r1
 80049e8:	f04f 0000 	mov.w	r0, #0
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	00d9      	lsls	r1, r3, #3
 80049f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049f6:	00d0      	lsls	r0, r2, #3
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	1912      	adds	r2, r2, r4
 80049fe:	eb45 0303 	adc.w	r3, r5, r3
 8004a02:	f04f 0000 	mov.w	r0, #0
 8004a06:	f04f 0100 	mov.w	r1, #0
 8004a0a:	0299      	lsls	r1, r3, #10
 8004a0c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a10:	0290      	lsls	r0, r2, #10
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4610      	mov	r0, r2
 8004a18:	4619      	mov	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	f7fb fd6d 	bl	8000500 <__aeabi_uldivmod>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	613b      	str	r3, [r7, #16]
      break;
 8004a32:	e00d      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0b5b      	lsrs	r3, r3, #13
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	613b      	str	r3, [r7, #16]
      break;
 8004a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a50:	693b      	ldr	r3, [r7, #16]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bdb0      	pop	{r4, r5, r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	016e3600 	.word	0x016e3600
 8004a68:	0800619c 	.word	0x0800619c

08004a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a70:	4b02      	ldr	r3, [pc, #8]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a72:	681b      	ldr	r3, [r3, #0]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000048 	.word	0x20000048

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff2 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a1b      	lsrs	r3, r3, #8
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4903      	ldr	r1, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	080061b8 	.word	0x080061b8

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffde 	bl	8004a6c <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0adb      	lsrs	r3, r3, #11
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	080061b8 	.word	0x080061b8

08004ad0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004adc:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d12c      	bne.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ae8:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004af4:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	e016      	b.n	8004b2e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	6253      	str	r3, [r2, #36]	; 0x24
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004b18:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004b20:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004b34:	d105      	bne.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b3c:	d101      	bne.n	8004b42 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b3e:	2301      	movs	r3, #1
 8004b40:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d105      	bne.n	8004b54 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f023 0201 	bic.w	r2, r3, #1
 8004b5c:	490b      	ldr	r1, [pc, #44]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	40023c00 	.word	0x40023c00

08004b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06e      	b.n	8004c80 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d009      	beq.n	8004bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	61da      	str	r2, [r3, #28]
 8004bba:	e005      	b.n	8004bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d106      	bne.n	8004be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fb08 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c10:	431a      	orrs	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4c:	ea42 0103 	orr.w	r1, r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	0c1a      	lsrs	r2, r3, #16
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f002 0204 	and.w	r2, r2, #4
 8004c6e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10f      	bne.n	8004ccc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	099b      	lsrs	r3, r3, #6
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
    return;
 8004cca:	e0be      	b.n	8004e4a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_SPI_IRQHandler+0x66>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	09db      	lsrs	r3, r3, #7
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d004      	beq.n	8004cee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4798      	blx	r3
    return;
 8004cec:	e0ad      	b.n	8004e4a <HAL_SPI_IRQHandler+0x1c2>
  /* SPI in Error Treatment --------------------------------------------------*/
#if defined(SPI_CR2_FRF)
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
#else
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	095b      	lsrs	r3, r3, #5
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_SPI_IRQHandler+0x80>
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80a1 	beq.w	8004e4a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 809a 	beq.w	8004e4a <HAL_SPI_IRQHandler+0x1c2>
#endif
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d023      	beq.n	8004d6a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d011      	beq.n	8004d52 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 0204 	orr.w	r2, r3, #4
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	617b      	str	r3, [r7, #20]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	e00b      	b.n	8004d6a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	693b      	ldr	r3, [r7, #16]
        return;
 8004d68:	e06f      	b.n	8004e4a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d014      	beq.n	8004da0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f043 0201 	orr.w	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
      __HAL_SPI_CLEAR_FREFLAG(hspi);
    }
#endif

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d04f      	beq.n	8004e48 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_SPI_IRQHandler+0x14c>
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d034      	beq.n	8004e3e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0203 	bic.w	r2, r2, #3
 8004de2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d011      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <HAL_SPI_IRQHandler+0x1c8>)
 8004df2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fd f941 	bl	8002080 <HAL_DMA_Abort_IT>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d016      	beq.n	8004e46 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <HAL_SPI_IRQHandler+0x1c8>)
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fd f92b 	bl	8002080 <HAL_DMA_Abort_IT>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004e3c:	e003      	b.n	8004e46 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f808 	bl	8004e54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e44:	e000      	b.n	8004e48 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004e46:	bf00      	nop
    return;
 8004e48:	bf00      	nop
  }
}
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	08004e67 	.word	0x08004e67

08004e54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff ffe7 	bl	8004e54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e03f      	b.n	8004f20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7fc f9eb 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2224      	movs	r2, #36	; 0x24
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fb48 	bl	8005568 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695a      	ldr	r2, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	; 0x28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	f003 030f 	and.w	r3, r3, #15
 8004f56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10d      	bne.n	8004f7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa4f 	bl	8005416 <UART_Receive_IT>
      return;
 8004f78:	e17b      	b.n	8005272 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b1 	beq.w	80050e4 <HAL_UART_IRQHandler+0x1bc>
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_UART_IRQHandler+0x70>
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f000 80a6 	beq.w	80050e4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f043 0204 	orr.w	r2, r3, #4
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00f      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_UART_IRQHandler+0xee>
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0208 	orr.w	r2, r3, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 811e 	beq.w	8005268 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_UART_IRQHandler+0x11e>
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f9e8 	bl	8005416 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <HAL_UART_IRQHandler+0x146>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d031      	beq.n	80050d2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f92a 	bl	80052c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d123      	bne.n	80050ca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695a      	ldr	r2, [r3, #20]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005090:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d013      	beq.n	80050c2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	4a76      	ldr	r2, [pc, #472]	; (8005278 <HAL_UART_IRQHandler+0x350>)
 80050a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc ffea 	bl	8002080 <HAL_DMA_Abort_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050bc:	4610      	mov	r0, r2
 80050be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c0:	e00e      	b.n	80050e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8ec 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c8:	e00a      	b.n	80050e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8e8 	bl	80052a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d0:	e006      	b.n	80050e0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8e4 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050de:	e0c3      	b.n	8005268 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	bf00      	nop
    return;
 80050e2:	e0c1      	b.n	8005268 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f040 80a1 	bne.w	8005230 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 809b 	beq.w	8005230 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8095 	beq.w	8005230 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b40      	cmp	r3, #64	; 0x40
 8005128:	d14e      	bne.n	80051c8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005134:	8a3b      	ldrh	r3, [r7, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 8098 	beq.w	800526c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005140:	8a3a      	ldrh	r2, [r7, #16]
 8005142:	429a      	cmp	r2, r3
 8005144:	f080 8092 	bcs.w	800526c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	8a3a      	ldrh	r2, [r7, #16]
 800514c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b20      	cmp	r3, #32
 8005156:	d02b      	beq.n	80051b0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005166:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695a      	ldr	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f022 0210 	bic.w	r2, r2, #16
 80051a4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc ff2b 	bl	8002006 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	b29b      	uxth	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f876 	bl	80052b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80051c6:	e051      	b.n	800526c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d047      	beq.n	8005270 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80051e0:	8a7b      	ldrh	r3, [r7, #18]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d044      	beq.n	8005270 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051f4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0210 	bic.w	r2, r2, #16
 8005222:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005224:	8a7b      	ldrh	r3, [r7, #18]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f842 	bl	80052b2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800522e:	e01f      	b.n	8005270 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_UART_IRQHandler+0x324>
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f87f 	bl	8005348 <UART_Transmit_IT>
    return;
 800524a:	e012      	b.n	8005272 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00d      	beq.n	8005272 <HAL_UART_IRQHandler+0x34a>
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f8c0 	bl	80053e6 <UART_EndTransmit_IT>
    return;
 8005266:	e004      	b.n	8005272 <HAL_UART_IRQHandler+0x34a>
    return;
 8005268:	bf00      	nop
 800526a:	e002      	b.n	8005272 <HAL_UART_IRQHandler+0x34a>
      return;
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HAL_UART_IRQHandler+0x34a>
      return;
 8005270:	bf00      	nop
  }
}
 8005272:	3728      	adds	r7, #40	; 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	08005321 	.word	0x08005321

0800527c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0210 	bic.w	r2, r2, #16
 8005306:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ffb0 	bl	80052a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b21      	cmp	r3, #33	; 0x21
 800535a:	d13e      	bne.n	80053da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d114      	bne.n	8005390 <UART_Transmit_IT+0x48>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d110      	bne.n	8005390 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	e008      	b.n	80053a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	1c59      	adds	r1, r3, #1
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6211      	str	r1, [r2, #32]
 800539a:	781a      	ldrb	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ff38 	bl	800527c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	f040 8099 	bne.w	800555e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d117      	bne.n	8005466 <UART_Receive_IT+0x50>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d113      	bne.n	8005466 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005454:	b29a      	uxth	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	1c9a      	adds	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28
 8005464:	e026      	b.n	80054b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005478:	d007      	beq.n	800548a <UART_Receive_IT+0x74>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <UART_Receive_IT+0x82>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e008      	b.n	80054aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4619      	mov	r1, r3
 80054c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d148      	bne.n	800555a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0220 	bic.w	r2, r2, #32
 80054d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	2b01      	cmp	r3, #1
 8005506:	d123      	bne.n	8005550 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0210 	bic.w	r2, r2, #16
 800551c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b10      	cmp	r3, #16
 800552a:	d10a      	bne.n	8005542 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff feb2 	bl	80052b2 <HAL_UARTEx_RxEventCallback>
 800554e:	e002      	b.n	8005556 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fe9c 	bl	800528e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	e002      	b.n	8005560 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	4313      	orrs	r3, r2
 800559c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80055a8:	f023 030c 	bic.w	r3, r3, #12
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699a      	ldr	r2, [r3, #24]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a55      	ldr	r2, [pc, #340]	; (8005728 <UART_SetConfig+0x1c0>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d103      	bne.n	80055de <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055d6:	f7ff fa67 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	e002      	b.n	80055e4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055de:	f7ff fa4f 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 80055e2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ec:	d14c      	bne.n	8005688 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009a      	lsls	r2, r3, #2
 80055f8:	441a      	add	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	4a49      	ldr	r2, [pc, #292]	; (800572c <UART_SetConfig+0x1c4>)
 8005606:	fba2 2303 	umull	r2, r3, r2, r3
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	0119      	lsls	r1, r3, #4
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009a      	lsls	r2, r3, #2
 8005618:	441a      	add	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fbb2 f2f3 	udiv	r2, r2, r3
 8005624:	4b41      	ldr	r3, [pc, #260]	; (800572c <UART_SetConfig+0x1c4>)
 8005626:	fba3 0302 	umull	r0, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2064      	movs	r0, #100	; 0x64
 800562e:	fb00 f303 	mul.w	r3, r0, r3
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	3332      	adds	r3, #50	; 0x32
 8005638:	4a3c      	ldr	r2, [pc, #240]	; (800572c <UART_SetConfig+0x1c4>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005646:	4419      	add	r1, r3
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	009a      	lsls	r2, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	fbb2 f2f3 	udiv	r2, r2, r3
 800565e:	4b33      	ldr	r3, [pc, #204]	; (800572c <UART_SetConfig+0x1c4>)
 8005660:	fba3 0302 	umull	r0, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	2064      	movs	r0, #100	; 0x64
 8005668:	fb00 f303 	mul.w	r3, r0, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	3332      	adds	r3, #50	; 0x32
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <UART_SetConfig+0x1c4>)
 8005674:	fba2 2303 	umull	r2, r3, r2, r3
 8005678:	095b      	lsrs	r3, r3, #5
 800567a:	f003 0207 	and.w	r2, r3, #7
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	440a      	add	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005686:	e04a      	b.n	800571e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	009a      	lsls	r2, r3, #2
 8005692:	441a      	add	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	4a23      	ldr	r2, [pc, #140]	; (800572c <UART_SetConfig+0x1c4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	0119      	lsls	r1, r3, #4
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009a      	lsls	r2, r3, #2
 80056b2:	441a      	add	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <UART_SetConfig+0x1c4>)
 80056c0:	fba3 0302 	umull	r0, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	2064      	movs	r0, #100	; 0x64
 80056c8:	fb00 f303 	mul.w	r3, r0, r3
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	011b      	lsls	r3, r3, #4
 80056d0:	3332      	adds	r3, #50	; 0x32
 80056d2:	4a16      	ldr	r2, [pc, #88]	; (800572c <UART_SetConfig+0x1c4>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056de:	4419      	add	r1, r3
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	009a      	lsls	r2, r3, #2
 80056ea:	441a      	add	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <UART_SetConfig+0x1c4>)
 80056f8:	fba3 0302 	umull	r0, r3, r3, r2
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	2064      	movs	r0, #100	; 0x64
 8005700:	fb00 f303 	mul.w	r3, r0, r3
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	3332      	adds	r3, #50	; 0x32
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <UART_SetConfig+0x1c4>)
 800570c:	fba2 2303 	umull	r2, r3, r2, r3
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	f003 020f 	and.w	r2, r3, #15
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	440a      	add	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
}
 800571e:	bf00      	nop
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40013800 	.word	0x40013800
 800572c:	51eb851f 	.word	0x51eb851f

08005730 <__errno>:
 8005730:	4b01      	ldr	r3, [pc, #4]	; (8005738 <__errno+0x8>)
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000054 	.word	0x20000054

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	2600      	movs	r6, #0
 8005740:	4d0c      	ldr	r5, [pc, #48]	; (8005774 <__libc_init_array+0x38>)
 8005742:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005744:	1b64      	subs	r4, r4, r5
 8005746:	10a4      	asrs	r4, r4, #2
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	f000 fce4 	bl	8006118 <_init>
 8005750:	2600      	movs	r6, #0
 8005752:	4d0a      	ldr	r5, [pc, #40]	; (800577c <__libc_init_array+0x40>)
 8005754:	4c0a      	ldr	r4, [pc, #40]	; (8005780 <__libc_init_array+0x44>)
 8005756:	1b64      	subs	r4, r4, r5
 8005758:	10a4      	asrs	r4, r4, #2
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	0800622c 	.word	0x0800622c
 8005778:	0800622c 	.word	0x0800622c
 800577c:	0800622c 	.word	0x0800622c
 8005780:	08006230 	.word	0x08006230

08005784 <memset>:
 8005784:	4603      	mov	r3, r0
 8005786:	4402      	add	r2, r0
 8005788:	4293      	cmp	r3, r2
 800578a:	d100      	bne.n	800578e <memset+0xa>
 800578c:	4770      	bx	lr
 800578e:	f803 1b01 	strb.w	r1, [r3], #1
 8005792:	e7f9      	b.n	8005788 <memset+0x4>

08005794 <_puts_r>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	460e      	mov	r6, r1
 8005798:	4605      	mov	r5, r0
 800579a:	b118      	cbz	r0, 80057a4 <_puts_r+0x10>
 800579c:	6983      	ldr	r3, [r0, #24]
 800579e:	b90b      	cbnz	r3, 80057a4 <_puts_r+0x10>
 80057a0:	f000 fa48 	bl	8005c34 <__sinit>
 80057a4:	69ab      	ldr	r3, [r5, #24]
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	b913      	cbnz	r3, 80057b0 <_puts_r+0x1c>
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fa42 	bl	8005c34 <__sinit>
 80057b0:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <_puts_r+0xd0>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d120      	bne.n	80057f8 <_puts_r+0x64>
 80057b6:	686c      	ldr	r4, [r5, #4]
 80057b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057ba:	07db      	lsls	r3, r3, #31
 80057bc:	d405      	bmi.n	80057ca <_puts_r+0x36>
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	0598      	lsls	r0, r3, #22
 80057c2:	d402      	bmi.n	80057ca <_puts_r+0x36>
 80057c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057c6:	f000 fad3 	bl	8005d70 <__retarget_lock_acquire_recursive>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	0719      	lsls	r1, r3, #28
 80057ce:	d51d      	bpl.n	800580c <_puts_r+0x78>
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	b1db      	cbz	r3, 800580c <_puts_r+0x78>
 80057d4:	3e01      	subs	r6, #1
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057dc:	3b01      	subs	r3, #1
 80057de:	60a3      	str	r3, [r4, #8]
 80057e0:	bb39      	cbnz	r1, 8005832 <_puts_r+0x9e>
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da38      	bge.n	8005858 <_puts_r+0xc4>
 80057e6:	4622      	mov	r2, r4
 80057e8:	210a      	movs	r1, #10
 80057ea:	4628      	mov	r0, r5
 80057ec:	f000 f848 	bl	8005880 <__swbuf_r>
 80057f0:	3001      	adds	r0, #1
 80057f2:	d011      	beq.n	8005818 <_puts_r+0x84>
 80057f4:	250a      	movs	r5, #10
 80057f6:	e011      	b.n	800581c <_puts_r+0x88>
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <_puts_r+0xd4>)
 80057fa:	429c      	cmp	r4, r3
 80057fc:	d101      	bne.n	8005802 <_puts_r+0x6e>
 80057fe:	68ac      	ldr	r4, [r5, #8]
 8005800:	e7da      	b.n	80057b8 <_puts_r+0x24>
 8005802:	4b1a      	ldr	r3, [pc, #104]	; (800586c <_puts_r+0xd8>)
 8005804:	429c      	cmp	r4, r3
 8005806:	bf08      	it	eq
 8005808:	68ec      	ldreq	r4, [r5, #12]
 800580a:	e7d5      	b.n	80057b8 <_puts_r+0x24>
 800580c:	4621      	mov	r1, r4
 800580e:	4628      	mov	r0, r5
 8005810:	f000 f888 	bl	8005924 <__swsetup_r>
 8005814:	2800      	cmp	r0, #0
 8005816:	d0dd      	beq.n	80057d4 <_puts_r+0x40>
 8005818:	f04f 35ff 	mov.w	r5, #4294967295
 800581c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800581e:	07da      	lsls	r2, r3, #31
 8005820:	d405      	bmi.n	800582e <_puts_r+0x9a>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	059b      	lsls	r3, r3, #22
 8005826:	d402      	bmi.n	800582e <_puts_r+0x9a>
 8005828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582a:	f000 faa2 	bl	8005d72 <__retarget_lock_release_recursive>
 800582e:	4628      	mov	r0, r5
 8005830:	bd70      	pop	{r4, r5, r6, pc}
 8005832:	2b00      	cmp	r3, #0
 8005834:	da04      	bge.n	8005840 <_puts_r+0xac>
 8005836:	69a2      	ldr	r2, [r4, #24]
 8005838:	429a      	cmp	r2, r3
 800583a:	dc06      	bgt.n	800584a <_puts_r+0xb6>
 800583c:	290a      	cmp	r1, #10
 800583e:	d004      	beq.n	800584a <_puts_r+0xb6>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	6022      	str	r2, [r4, #0]
 8005846:	7019      	strb	r1, [r3, #0]
 8005848:	e7c5      	b.n	80057d6 <_puts_r+0x42>
 800584a:	4622      	mov	r2, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f817 	bl	8005880 <__swbuf_r>
 8005852:	3001      	adds	r0, #1
 8005854:	d1bf      	bne.n	80057d6 <_puts_r+0x42>
 8005856:	e7df      	b.n	8005818 <_puts_r+0x84>
 8005858:	250a      	movs	r5, #10
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	701d      	strb	r5, [r3, #0]
 8005862:	e7db      	b.n	800581c <_puts_r+0x88>
 8005864:	080061e4 	.word	0x080061e4
 8005868:	08006204 	.word	0x08006204
 800586c:	080061c4 	.word	0x080061c4

08005870 <puts>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <puts+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f7ff bf8d 	b.w	8005794 <_puts_r>
 800587a:	bf00      	nop
 800587c:	20000054 	.word	0x20000054

08005880 <__swbuf_r>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	460e      	mov	r6, r1
 8005884:	4614      	mov	r4, r2
 8005886:	4605      	mov	r5, r0
 8005888:	b118      	cbz	r0, 8005892 <__swbuf_r+0x12>
 800588a:	6983      	ldr	r3, [r0, #24]
 800588c:	b90b      	cbnz	r3, 8005892 <__swbuf_r+0x12>
 800588e:	f000 f9d1 	bl	8005c34 <__sinit>
 8005892:	4b21      	ldr	r3, [pc, #132]	; (8005918 <__swbuf_r+0x98>)
 8005894:	429c      	cmp	r4, r3
 8005896:	d12b      	bne.n	80058f0 <__swbuf_r+0x70>
 8005898:	686c      	ldr	r4, [r5, #4]
 800589a:	69a3      	ldr	r3, [r4, #24]
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	071a      	lsls	r2, r3, #28
 80058a2:	d52f      	bpl.n	8005904 <__swbuf_r+0x84>
 80058a4:	6923      	ldr	r3, [r4, #16]
 80058a6:	b36b      	cbz	r3, 8005904 <__swbuf_r+0x84>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	b2f6      	uxtb	r6, r6
 80058ae:	1ac0      	subs	r0, r0, r3
 80058b0:	6963      	ldr	r3, [r4, #20]
 80058b2:	4637      	mov	r7, r6
 80058b4:	4283      	cmp	r3, r0
 80058b6:	dc04      	bgt.n	80058c2 <__swbuf_r+0x42>
 80058b8:	4621      	mov	r1, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f926 	bl	8005b0c <_fflush_r>
 80058c0:	bb30      	cbnz	r0, 8005910 <__swbuf_r+0x90>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	3001      	adds	r0, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	701e      	strb	r6, [r3, #0]
 80058d2:	6963      	ldr	r3, [r4, #20]
 80058d4:	4283      	cmp	r3, r0
 80058d6:	d004      	beq.n	80058e2 <__swbuf_r+0x62>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	07db      	lsls	r3, r3, #31
 80058dc:	d506      	bpl.n	80058ec <__swbuf_r+0x6c>
 80058de:	2e0a      	cmp	r6, #10
 80058e0:	d104      	bne.n	80058ec <__swbuf_r+0x6c>
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 f911 	bl	8005b0c <_fflush_r>
 80058ea:	b988      	cbnz	r0, 8005910 <__swbuf_r+0x90>
 80058ec:	4638      	mov	r0, r7
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <__swbuf_r+0x9c>)
 80058f2:	429c      	cmp	r4, r3
 80058f4:	d101      	bne.n	80058fa <__swbuf_r+0x7a>
 80058f6:	68ac      	ldr	r4, [r5, #8]
 80058f8:	e7cf      	b.n	800589a <__swbuf_r+0x1a>
 80058fa:	4b09      	ldr	r3, [pc, #36]	; (8005920 <__swbuf_r+0xa0>)
 80058fc:	429c      	cmp	r4, r3
 80058fe:	bf08      	it	eq
 8005900:	68ec      	ldreq	r4, [r5, #12]
 8005902:	e7ca      	b.n	800589a <__swbuf_r+0x1a>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 f80c 	bl	8005924 <__swsetup_r>
 800590c:	2800      	cmp	r0, #0
 800590e:	d0cb      	beq.n	80058a8 <__swbuf_r+0x28>
 8005910:	f04f 37ff 	mov.w	r7, #4294967295
 8005914:	e7ea      	b.n	80058ec <__swbuf_r+0x6c>
 8005916:	bf00      	nop
 8005918:	080061e4 	.word	0x080061e4
 800591c:	08006204 	.word	0x08006204
 8005920:	080061c4 	.word	0x080061c4

08005924 <__swsetup_r>:
 8005924:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <__swsetup_r+0xcc>)
 8005926:	b570      	push	{r4, r5, r6, lr}
 8005928:	681d      	ldr	r5, [r3, #0]
 800592a:	4606      	mov	r6, r0
 800592c:	460c      	mov	r4, r1
 800592e:	b125      	cbz	r5, 800593a <__swsetup_r+0x16>
 8005930:	69ab      	ldr	r3, [r5, #24]
 8005932:	b913      	cbnz	r3, 800593a <__swsetup_r+0x16>
 8005934:	4628      	mov	r0, r5
 8005936:	f000 f97d 	bl	8005c34 <__sinit>
 800593a:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <__swsetup_r+0xd0>)
 800593c:	429c      	cmp	r4, r3
 800593e:	d10f      	bne.n	8005960 <__swsetup_r+0x3c>
 8005940:	686c      	ldr	r4, [r5, #4]
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005948:	0719      	lsls	r1, r3, #28
 800594a:	d42c      	bmi.n	80059a6 <__swsetup_r+0x82>
 800594c:	06dd      	lsls	r5, r3, #27
 800594e:	d411      	bmi.n	8005974 <__swsetup_r+0x50>
 8005950:	2309      	movs	r3, #9
 8005952:	6033      	str	r3, [r6, #0]
 8005954:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	81a3      	strh	r3, [r4, #12]
 800595e:	e03e      	b.n	80059de <__swsetup_r+0xba>
 8005960:	4b25      	ldr	r3, [pc, #148]	; (80059f8 <__swsetup_r+0xd4>)
 8005962:	429c      	cmp	r4, r3
 8005964:	d101      	bne.n	800596a <__swsetup_r+0x46>
 8005966:	68ac      	ldr	r4, [r5, #8]
 8005968:	e7eb      	b.n	8005942 <__swsetup_r+0x1e>
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <__swsetup_r+0xd8>)
 800596c:	429c      	cmp	r4, r3
 800596e:	bf08      	it	eq
 8005970:	68ec      	ldreq	r4, [r5, #12]
 8005972:	e7e6      	b.n	8005942 <__swsetup_r+0x1e>
 8005974:	0758      	lsls	r0, r3, #29
 8005976:	d512      	bpl.n	800599e <__swsetup_r+0x7a>
 8005978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800597a:	b141      	cbz	r1, 800598e <__swsetup_r+0x6a>
 800597c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005980:	4299      	cmp	r1, r3
 8005982:	d002      	beq.n	800598a <__swsetup_r+0x66>
 8005984:	4630      	mov	r0, r6
 8005986:	f000 fa59 	bl	8005e3c <_free_r>
 800598a:	2300      	movs	r3, #0
 800598c:	6363      	str	r3, [r4, #52]	; 0x34
 800598e:	89a3      	ldrh	r3, [r4, #12]
 8005990:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005994:	81a3      	strh	r3, [r4, #12]
 8005996:	2300      	movs	r3, #0
 8005998:	6063      	str	r3, [r4, #4]
 800599a:	6923      	ldr	r3, [r4, #16]
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	89a3      	ldrh	r3, [r4, #12]
 80059a0:	f043 0308 	orr.w	r3, r3, #8
 80059a4:	81a3      	strh	r3, [r4, #12]
 80059a6:	6923      	ldr	r3, [r4, #16]
 80059a8:	b94b      	cbnz	r3, 80059be <__swsetup_r+0x9a>
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b4:	d003      	beq.n	80059be <__swsetup_r+0x9a>
 80059b6:	4621      	mov	r1, r4
 80059b8:	4630      	mov	r0, r6
 80059ba:	f000 f9ff 	bl	8005dbc <__smakebuf_r>
 80059be:	89a0      	ldrh	r0, [r4, #12]
 80059c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059c4:	f010 0301 	ands.w	r3, r0, #1
 80059c8:	d00a      	beq.n	80059e0 <__swsetup_r+0xbc>
 80059ca:	2300      	movs	r3, #0
 80059cc:	60a3      	str	r3, [r4, #8]
 80059ce:	6963      	ldr	r3, [r4, #20]
 80059d0:	425b      	negs	r3, r3
 80059d2:	61a3      	str	r3, [r4, #24]
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	b943      	cbnz	r3, 80059ea <__swsetup_r+0xc6>
 80059d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059dc:	d1ba      	bne.n	8005954 <__swsetup_r+0x30>
 80059de:	bd70      	pop	{r4, r5, r6, pc}
 80059e0:	0781      	lsls	r1, r0, #30
 80059e2:	bf58      	it	pl
 80059e4:	6963      	ldrpl	r3, [r4, #20]
 80059e6:	60a3      	str	r3, [r4, #8]
 80059e8:	e7f4      	b.n	80059d4 <__swsetup_r+0xb0>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e7f7      	b.n	80059de <__swsetup_r+0xba>
 80059ee:	bf00      	nop
 80059f0:	20000054 	.word	0x20000054
 80059f4:	080061e4 	.word	0x080061e4
 80059f8:	08006204 	.word	0x08006204
 80059fc:	080061c4 	.word	0x080061c4

08005a00 <__sflush_r>:
 8005a00:	898a      	ldrh	r2, [r1, #12]
 8005a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	4605      	mov	r5, r0
 8005a08:	0710      	lsls	r0, r2, #28
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	d458      	bmi.n	8005ac0 <__sflush_r+0xc0>
 8005a0e:	684b      	ldr	r3, [r1, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	dc05      	bgt.n	8005a20 <__sflush_r+0x20>
 8005a14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	dc02      	bgt.n	8005a20 <__sflush_r+0x20>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d0f9      	beq.n	8005a1a <__sflush_r+0x1a>
 8005a26:	2300      	movs	r3, #0
 8005a28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a2c:	682f      	ldr	r7, [r5, #0]
 8005a2e:	602b      	str	r3, [r5, #0]
 8005a30:	d032      	beq.n	8005a98 <__sflush_r+0x98>
 8005a32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	075a      	lsls	r2, r3, #29
 8005a38:	d505      	bpl.n	8005a46 <__sflush_r+0x46>
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	1ac0      	subs	r0, r0, r3
 8005a3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a40:	b10b      	cbz	r3, 8005a46 <__sflush_r+0x46>
 8005a42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a44:	1ac0      	subs	r0, r0, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	4602      	mov	r2, r0
 8005a4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	6a21      	ldr	r1, [r4, #32]
 8005a50:	47b0      	blx	r6
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	d106      	bne.n	8005a66 <__sflush_r+0x66>
 8005a58:	6829      	ldr	r1, [r5, #0]
 8005a5a:	291d      	cmp	r1, #29
 8005a5c:	d82c      	bhi.n	8005ab8 <__sflush_r+0xb8>
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <__sflush_r+0x108>)
 8005a60:	40ca      	lsrs	r2, r1
 8005a62:	07d6      	lsls	r6, r2, #31
 8005a64:	d528      	bpl.n	8005ab8 <__sflush_r+0xb8>
 8005a66:	2200      	movs	r2, #0
 8005a68:	6062      	str	r2, [r4, #4]
 8005a6a:	6922      	ldr	r2, [r4, #16]
 8005a6c:	04d9      	lsls	r1, r3, #19
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	d504      	bpl.n	8005a7c <__sflush_r+0x7c>
 8005a72:	1c42      	adds	r2, r0, #1
 8005a74:	d101      	bne.n	8005a7a <__sflush_r+0x7a>
 8005a76:	682b      	ldr	r3, [r5, #0]
 8005a78:	b903      	cbnz	r3, 8005a7c <__sflush_r+0x7c>
 8005a7a:	6560      	str	r0, [r4, #84]	; 0x54
 8005a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a7e:	602f      	str	r7, [r5, #0]
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d0ca      	beq.n	8005a1a <__sflush_r+0x1a>
 8005a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a88:	4299      	cmp	r1, r3
 8005a8a:	d002      	beq.n	8005a92 <__sflush_r+0x92>
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	f000 f9d5 	bl	8005e3c <_free_r>
 8005a92:	2000      	movs	r0, #0
 8005a94:	6360      	str	r0, [r4, #52]	; 0x34
 8005a96:	e7c1      	b.n	8005a1c <__sflush_r+0x1c>
 8005a98:	6a21      	ldr	r1, [r4, #32]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b0      	blx	r6
 8005aa0:	1c41      	adds	r1, r0, #1
 8005aa2:	d1c7      	bne.n	8005a34 <__sflush_r+0x34>
 8005aa4:	682b      	ldr	r3, [r5, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0c4      	beq.n	8005a34 <__sflush_r+0x34>
 8005aaa:	2b1d      	cmp	r3, #29
 8005aac:	d001      	beq.n	8005ab2 <__sflush_r+0xb2>
 8005aae:	2b16      	cmp	r3, #22
 8005ab0:	d101      	bne.n	8005ab6 <__sflush_r+0xb6>
 8005ab2:	602f      	str	r7, [r5, #0]
 8005ab4:	e7b1      	b.n	8005a1a <__sflush_r+0x1a>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	e7ad      	b.n	8005a1c <__sflush_r+0x1c>
 8005ac0:	690f      	ldr	r7, [r1, #16]
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	d0a9      	beq.n	8005a1a <__sflush_r+0x1a>
 8005ac6:	0793      	lsls	r3, r2, #30
 8005ac8:	bf18      	it	ne
 8005aca:	2300      	movne	r3, #0
 8005acc:	680e      	ldr	r6, [r1, #0]
 8005ace:	bf08      	it	eq
 8005ad0:	694b      	ldreq	r3, [r1, #20]
 8005ad2:	eba6 0807 	sub.w	r8, r6, r7
 8005ad6:	600f      	str	r7, [r1, #0]
 8005ad8:	608b      	str	r3, [r1, #8]
 8005ada:	f1b8 0f00 	cmp.w	r8, #0
 8005ade:	dd9c      	ble.n	8005a1a <__sflush_r+0x1a>
 8005ae0:	4643      	mov	r3, r8
 8005ae2:	463a      	mov	r2, r7
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	6a21      	ldr	r1, [r4, #32]
 8005ae8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aea:	47b0      	blx	r6
 8005aec:	2800      	cmp	r0, #0
 8005aee:	dc06      	bgt.n	8005afe <__sflush_r+0xfe>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	e78e      	b.n	8005a1c <__sflush_r+0x1c>
 8005afe:	4407      	add	r7, r0
 8005b00:	eba8 0800 	sub.w	r8, r8, r0
 8005b04:	e7e9      	b.n	8005ada <__sflush_r+0xda>
 8005b06:	bf00      	nop
 8005b08:	20400001 	.word	0x20400001

08005b0c <_fflush_r>:
 8005b0c:	b538      	push	{r3, r4, r5, lr}
 8005b0e:	690b      	ldr	r3, [r1, #16]
 8005b10:	4605      	mov	r5, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	b913      	cbnz	r3, 8005b1c <_fflush_r+0x10>
 8005b16:	2500      	movs	r5, #0
 8005b18:	4628      	mov	r0, r5
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	b118      	cbz	r0, 8005b26 <_fflush_r+0x1a>
 8005b1e:	6983      	ldr	r3, [r0, #24]
 8005b20:	b90b      	cbnz	r3, 8005b26 <_fflush_r+0x1a>
 8005b22:	f000 f887 	bl	8005c34 <__sinit>
 8005b26:	4b14      	ldr	r3, [pc, #80]	; (8005b78 <_fflush_r+0x6c>)
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d11b      	bne.n	8005b64 <_fflush_r+0x58>
 8005b2c:	686c      	ldr	r4, [r5, #4]
 8005b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0ef      	beq.n	8005b16 <_fflush_r+0xa>
 8005b36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d404      	bmi.n	8005b46 <_fflush_r+0x3a>
 8005b3c:	0599      	lsls	r1, r3, #22
 8005b3e:	d402      	bmi.n	8005b46 <_fflush_r+0x3a>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f915 	bl	8005d70 <__retarget_lock_acquire_recursive>
 8005b46:	4628      	mov	r0, r5
 8005b48:	4621      	mov	r1, r4
 8005b4a:	f7ff ff59 	bl	8005a00 <__sflush_r>
 8005b4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b50:	4605      	mov	r5, r0
 8005b52:	07da      	lsls	r2, r3, #31
 8005b54:	d4e0      	bmi.n	8005b18 <_fflush_r+0xc>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	059b      	lsls	r3, r3, #22
 8005b5a:	d4dd      	bmi.n	8005b18 <_fflush_r+0xc>
 8005b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b5e:	f000 f908 	bl	8005d72 <__retarget_lock_release_recursive>
 8005b62:	e7d9      	b.n	8005b18 <_fflush_r+0xc>
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <_fflush_r+0x70>)
 8005b66:	429c      	cmp	r4, r3
 8005b68:	d101      	bne.n	8005b6e <_fflush_r+0x62>
 8005b6a:	68ac      	ldr	r4, [r5, #8]
 8005b6c:	e7df      	b.n	8005b2e <_fflush_r+0x22>
 8005b6e:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <_fflush_r+0x74>)
 8005b70:	429c      	cmp	r4, r3
 8005b72:	bf08      	it	eq
 8005b74:	68ec      	ldreq	r4, [r5, #12]
 8005b76:	e7da      	b.n	8005b2e <_fflush_r+0x22>
 8005b78:	080061e4 	.word	0x080061e4
 8005b7c:	08006204 	.word	0x08006204
 8005b80:	080061c4 	.word	0x080061c4

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b92:	6083      	str	r3, [r0, #8]
 8005b94:	8181      	strh	r1, [r0, #12]
 8005b96:	6643      	str	r3, [r0, #100]	; 0x64
 8005b98:	81c2      	strh	r2, [r0, #14]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	; 0x5c
 8005ba2:	f7ff fdef 	bl	8005784 <memset>
 8005ba6:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <std+0x38>)
 8005ba8:	6224      	str	r4, [r4, #32]
 8005baa:	6263      	str	r3, [r4, #36]	; 0x24
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <std+0x3c>)
 8005bae:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bb0:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <std+0x40>)
 8005bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <std+0x44>)
 8005bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb8:	bd10      	pop	{r4, pc}
 8005bba:	bf00      	nop
 8005bbc:	08005fa9 	.word	0x08005fa9
 8005bc0:	08005fcb 	.word	0x08005fcb
 8005bc4:	08006003 	.word	0x08006003
 8005bc8:	08006027 	.word	0x08006027

08005bcc <_cleanup_r>:
 8005bcc:	4901      	ldr	r1, [pc, #4]	; (8005bd4 <_cleanup_r+0x8>)
 8005bce:	f000 b8af 	b.w	8005d30 <_fwalk_reent>
 8005bd2:	bf00      	nop
 8005bd4:	08005b0d 	.word	0x08005b0d

08005bd8 <__sfmoreglue>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	2568      	movs	r5, #104	; 0x68
 8005bdc:	1e4a      	subs	r2, r1, #1
 8005bde:	4355      	muls	r5, r2
 8005be0:	460e      	mov	r6, r1
 8005be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005be6:	f000 f975 	bl	8005ed4 <_malloc_r>
 8005bea:	4604      	mov	r4, r0
 8005bec:	b140      	cbz	r0, 8005c00 <__sfmoreglue+0x28>
 8005bee:	2100      	movs	r1, #0
 8005bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bf4:	300c      	adds	r0, #12
 8005bf6:	60a0      	str	r0, [r4, #8]
 8005bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bfc:	f7ff fdc2 	bl	8005784 <memset>
 8005c00:	4620      	mov	r0, r4
 8005c02:	bd70      	pop	{r4, r5, r6, pc}

08005c04 <__sfp_lock_acquire>:
 8005c04:	4801      	ldr	r0, [pc, #4]	; (8005c0c <__sfp_lock_acquire+0x8>)
 8005c06:	f000 b8b3 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 8005c0a:	bf00      	nop
 8005c0c:	20000230 	.word	0x20000230

08005c10 <__sfp_lock_release>:
 8005c10:	4801      	ldr	r0, [pc, #4]	; (8005c18 <__sfp_lock_release+0x8>)
 8005c12:	f000 b8ae 	b.w	8005d72 <__retarget_lock_release_recursive>
 8005c16:	bf00      	nop
 8005c18:	20000230 	.word	0x20000230

08005c1c <__sinit_lock_acquire>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sinit_lock_acquire+0x8>)
 8005c1e:	f000 b8a7 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 8005c22:	bf00      	nop
 8005c24:	2000022b 	.word	0x2000022b

08005c28 <__sinit_lock_release>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__sinit_lock_release+0x8>)
 8005c2a:	f000 b8a2 	b.w	8005d72 <__retarget_lock_release_recursive>
 8005c2e:	bf00      	nop
 8005c30:	2000022b 	.word	0x2000022b

08005c34 <__sinit>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	f7ff fff0 	bl	8005c1c <__sinit_lock_acquire>
 8005c3c:	69a3      	ldr	r3, [r4, #24]
 8005c3e:	b11b      	cbz	r3, 8005c48 <__sinit+0x14>
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f7ff bff0 	b.w	8005c28 <__sinit_lock_release>
 8005c48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c4c:	6523      	str	r3, [r4, #80]	; 0x50
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <__sinit+0x68>)
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <__sinit+0x6c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	bf08      	it	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	bf08      	it	eq
 8005c60:	61a3      	streq	r3, [r4, #24]
 8005c62:	f000 f81f 	bl	8005ca4 <__sfp>
 8005c66:	6060      	str	r0, [r4, #4]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f81b 	bl	8005ca4 <__sfp>
 8005c6e:	60a0      	str	r0, [r4, #8]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 f817 	bl	8005ca4 <__sfp>
 8005c76:	2200      	movs	r2, #0
 8005c78:	2104      	movs	r1, #4
 8005c7a:	60e0      	str	r0, [r4, #12]
 8005c7c:	6860      	ldr	r0, [r4, #4]
 8005c7e:	f7ff ff81 	bl	8005b84 <std>
 8005c82:	2201      	movs	r2, #1
 8005c84:	2109      	movs	r1, #9
 8005c86:	68a0      	ldr	r0, [r4, #8]
 8005c88:	f7ff ff7c 	bl	8005b84 <std>
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	2112      	movs	r1, #18
 8005c90:	68e0      	ldr	r0, [r4, #12]
 8005c92:	f7ff ff77 	bl	8005b84 <std>
 8005c96:	2301      	movs	r3, #1
 8005c98:	61a3      	str	r3, [r4, #24]
 8005c9a:	e7d1      	b.n	8005c40 <__sinit+0xc>
 8005c9c:	080061c0 	.word	0x080061c0
 8005ca0:	08005bcd 	.word	0x08005bcd

08005ca4 <__sfp>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	f7ff ffac 	bl	8005c04 <__sfp_lock_acquire>
 8005cac:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <__sfp+0x84>)
 8005cae:	681e      	ldr	r6, [r3, #0]
 8005cb0:	69b3      	ldr	r3, [r6, #24]
 8005cb2:	b913      	cbnz	r3, 8005cba <__sfp+0x16>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff ffbd 	bl	8005c34 <__sinit>
 8005cba:	3648      	adds	r6, #72	; 0x48
 8005cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	d503      	bpl.n	8005ccc <__sfp+0x28>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	b30b      	cbz	r3, 8005d0c <__sfp+0x68>
 8005cc8:	6836      	ldr	r6, [r6, #0]
 8005cca:	e7f7      	b.n	8005cbc <__sfp+0x18>
 8005ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cd0:	b9d5      	cbnz	r5, 8005d08 <__sfp+0x64>
 8005cd2:	4b16      	ldr	r3, [pc, #88]	; (8005d2c <__sfp+0x88>)
 8005cd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cd8:	60e3      	str	r3, [r4, #12]
 8005cda:	6665      	str	r5, [r4, #100]	; 0x64
 8005cdc:	f000 f847 	bl	8005d6e <__retarget_lock_init_recursive>
 8005ce0:	f7ff ff96 	bl	8005c10 <__sfp_lock_release>
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cf0:	6025      	str	r5, [r4, #0]
 8005cf2:	61a5      	str	r5, [r4, #24]
 8005cf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cf8:	f7ff fd44 	bl	8005784 <memset>
 8005cfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d04:	4620      	mov	r0, r4
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	3468      	adds	r4, #104	; 0x68
 8005d0a:	e7d9      	b.n	8005cc0 <__sfp+0x1c>
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff ff62 	bl	8005bd8 <__sfmoreglue>
 8005d14:	4604      	mov	r4, r0
 8005d16:	6030      	str	r0, [r6, #0]
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1d5      	bne.n	8005cc8 <__sfp+0x24>
 8005d1c:	f7ff ff78 	bl	8005c10 <__sfp_lock_release>
 8005d20:	230c      	movs	r3, #12
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	e7ee      	b.n	8005d04 <__sfp+0x60>
 8005d26:	bf00      	nop
 8005d28:	080061c0 	.word	0x080061c0
 8005d2c:	ffff0001 	.word	0xffff0001

08005d30 <_fwalk_reent>:
 8005d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d34:	4606      	mov	r6, r0
 8005d36:	4688      	mov	r8, r1
 8005d38:	2700      	movs	r7, #0
 8005d3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d42:	f1b9 0901 	subs.w	r9, r9, #1
 8005d46:	d505      	bpl.n	8005d54 <_fwalk_reent+0x24>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	d1f7      	bne.n	8005d3e <_fwalk_reent+0xe>
 8005d4e:	4638      	mov	r0, r7
 8005d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d54:	89ab      	ldrh	r3, [r5, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d907      	bls.n	8005d6a <_fwalk_reent+0x3a>
 8005d5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	d003      	beq.n	8005d6a <_fwalk_reent+0x3a>
 8005d62:	4629      	mov	r1, r5
 8005d64:	4630      	mov	r0, r6
 8005d66:	47c0      	blx	r8
 8005d68:	4307      	orrs	r7, r0
 8005d6a:	3568      	adds	r5, #104	; 0x68
 8005d6c:	e7e9      	b.n	8005d42 <_fwalk_reent+0x12>

08005d6e <__retarget_lock_init_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <__retarget_lock_acquire_recursive>:
 8005d70:	4770      	bx	lr

08005d72 <__retarget_lock_release_recursive>:
 8005d72:	4770      	bx	lr

08005d74 <__swhatbuf_r>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	460e      	mov	r6, r1
 8005d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	461d      	mov	r5, r3
 8005d82:	b096      	sub	sp, #88	; 0x58
 8005d84:	da07      	bge.n	8005d96 <__swhatbuf_r+0x22>
 8005d86:	2300      	movs	r3, #0
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	89b3      	ldrh	r3, [r6, #12]
 8005d8c:	061a      	lsls	r2, r3, #24
 8005d8e:	d410      	bmi.n	8005db2 <__swhatbuf_r+0x3e>
 8005d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d94:	e00e      	b.n	8005db4 <__swhatbuf_r+0x40>
 8005d96:	466a      	mov	r2, sp
 8005d98:	f000 f96c 	bl	8006074 <_fstat_r>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	dbf2      	blt.n	8005d86 <__swhatbuf_r+0x12>
 8005da0:	9a01      	ldr	r2, [sp, #4]
 8005da2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005da6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005daa:	425a      	negs	r2, r3
 8005dac:	415a      	adcs	r2, r3
 8005dae:	602a      	str	r2, [r5, #0]
 8005db0:	e7ee      	b.n	8005d90 <__swhatbuf_r+0x1c>
 8005db2:	2340      	movs	r3, #64	; 0x40
 8005db4:	2000      	movs	r0, #0
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	b016      	add	sp, #88	; 0x58
 8005dba:	bd70      	pop	{r4, r5, r6, pc}

08005dbc <__smakebuf_r>:
 8005dbc:	898b      	ldrh	r3, [r1, #12]
 8005dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dc0:	079d      	lsls	r5, r3, #30
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	d507      	bpl.n	8005dd8 <__smakebuf_r+0x1c>
 8005dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	6123      	str	r3, [r4, #16]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	6163      	str	r3, [r4, #20]
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	466a      	mov	r2, sp
 8005dda:	ab01      	add	r3, sp, #4
 8005ddc:	f7ff ffca 	bl	8005d74 <__swhatbuf_r>
 8005de0:	9900      	ldr	r1, [sp, #0]
 8005de2:	4605      	mov	r5, r0
 8005de4:	4630      	mov	r0, r6
 8005de6:	f000 f875 	bl	8005ed4 <_malloc_r>
 8005dea:	b948      	cbnz	r0, 8005e00 <__smakebuf_r+0x44>
 8005dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005df0:	059a      	lsls	r2, r3, #22
 8005df2:	d4ef      	bmi.n	8005dd4 <__smakebuf_r+0x18>
 8005df4:	f023 0303 	bic.w	r3, r3, #3
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	81a3      	strh	r3, [r4, #12]
 8005dfe:	e7e3      	b.n	8005dc8 <__smakebuf_r+0xc>
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <__smakebuf_r+0x7c>)
 8005e02:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	6020      	str	r0, [r4, #0]
 8005e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e0c:	81a3      	strh	r3, [r4, #12]
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	6120      	str	r0, [r4, #16]
 8005e12:	6163      	str	r3, [r4, #20]
 8005e14:	9b01      	ldr	r3, [sp, #4]
 8005e16:	b15b      	cbz	r3, 8005e30 <__smakebuf_r+0x74>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1e:	f000 f93b 	bl	8006098 <_isatty_r>
 8005e22:	b128      	cbz	r0, 8005e30 <__smakebuf_r+0x74>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	89a0      	ldrh	r0, [r4, #12]
 8005e32:	4305      	orrs	r5, r0
 8005e34:	81a5      	strh	r5, [r4, #12]
 8005e36:	e7cd      	b.n	8005dd4 <__smakebuf_r+0x18>
 8005e38:	08005bcd 	.word	0x08005bcd

08005e3c <_free_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4605      	mov	r5, r0
 8005e40:	2900      	cmp	r1, #0
 8005e42:	d043      	beq.n	8005ecc <_free_r+0x90>
 8005e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e48:	1f0c      	subs	r4, r1, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	bfb8      	it	lt
 8005e4e:	18e4      	addlt	r4, r4, r3
 8005e50:	f000 f944 	bl	80060dc <__malloc_lock>
 8005e54:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <_free_r+0x94>)
 8005e56:	6813      	ldr	r3, [r2, #0]
 8005e58:	4610      	mov	r0, r2
 8005e5a:	b933      	cbnz	r3, 8005e6a <_free_r+0x2e>
 8005e5c:	6063      	str	r3, [r4, #4]
 8005e5e:	6014      	str	r4, [r2, #0]
 8005e60:	4628      	mov	r0, r5
 8005e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e66:	f000 b93f 	b.w	80060e8 <__malloc_unlock>
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	d90a      	bls.n	8005e84 <_free_r+0x48>
 8005e6e:	6821      	ldr	r1, [r4, #0]
 8005e70:	1862      	adds	r2, r4, r1
 8005e72:	4293      	cmp	r3, r2
 8005e74:	bf01      	itttt	eq
 8005e76:	681a      	ldreq	r2, [r3, #0]
 8005e78:	685b      	ldreq	r3, [r3, #4]
 8005e7a:	1852      	addeq	r2, r2, r1
 8005e7c:	6022      	streq	r2, [r4, #0]
 8005e7e:	6063      	str	r3, [r4, #4]
 8005e80:	6004      	str	r4, [r0, #0]
 8005e82:	e7ed      	b.n	8005e60 <_free_r+0x24>
 8005e84:	461a      	mov	r2, r3
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	b10b      	cbz	r3, 8005e8e <_free_r+0x52>
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	d9fa      	bls.n	8005e84 <_free_r+0x48>
 8005e8e:	6811      	ldr	r1, [r2, #0]
 8005e90:	1850      	adds	r0, r2, r1
 8005e92:	42a0      	cmp	r0, r4
 8005e94:	d10b      	bne.n	8005eae <_free_r+0x72>
 8005e96:	6820      	ldr	r0, [r4, #0]
 8005e98:	4401      	add	r1, r0
 8005e9a:	1850      	adds	r0, r2, r1
 8005e9c:	4283      	cmp	r3, r0
 8005e9e:	6011      	str	r1, [r2, #0]
 8005ea0:	d1de      	bne.n	8005e60 <_free_r+0x24>
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	4401      	add	r1, r0
 8005ea8:	6011      	str	r1, [r2, #0]
 8005eaa:	6053      	str	r3, [r2, #4]
 8005eac:	e7d8      	b.n	8005e60 <_free_r+0x24>
 8005eae:	d902      	bls.n	8005eb6 <_free_r+0x7a>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	602b      	str	r3, [r5, #0]
 8005eb4:	e7d4      	b.n	8005e60 <_free_r+0x24>
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1821      	adds	r1, r4, r0
 8005eba:	428b      	cmp	r3, r1
 8005ebc:	bf01      	itttt	eq
 8005ebe:	6819      	ldreq	r1, [r3, #0]
 8005ec0:	685b      	ldreq	r3, [r3, #4]
 8005ec2:	1809      	addeq	r1, r1, r0
 8005ec4:	6021      	streq	r1, [r4, #0]
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	6054      	str	r4, [r2, #4]
 8005eca:	e7c9      	b.n	8005e60 <_free_r+0x24>
 8005ecc:	bd38      	pop	{r3, r4, r5, pc}
 8005ece:	bf00      	nop
 8005ed0:	200000d8 	.word	0x200000d8

08005ed4 <_malloc_r>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	1ccd      	adds	r5, r1, #3
 8005ed8:	f025 0503 	bic.w	r5, r5, #3
 8005edc:	3508      	adds	r5, #8
 8005ede:	2d0c      	cmp	r5, #12
 8005ee0:	bf38      	it	cc
 8005ee2:	250c      	movcc	r5, #12
 8005ee4:	2d00      	cmp	r5, #0
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	db01      	blt.n	8005eee <_malloc_r+0x1a>
 8005eea:	42a9      	cmp	r1, r5
 8005eec:	d903      	bls.n	8005ef6 <_malloc_r+0x22>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	6033      	str	r3, [r6, #0]
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef6:	f000 f8f1 	bl	80060dc <__malloc_lock>
 8005efa:	4921      	ldr	r1, [pc, #132]	; (8005f80 <_malloc_r+0xac>)
 8005efc:	680a      	ldr	r2, [r1, #0]
 8005efe:	4614      	mov	r4, r2
 8005f00:	b99c      	cbnz	r4, 8005f2a <_malloc_r+0x56>
 8005f02:	4f20      	ldr	r7, [pc, #128]	; (8005f84 <_malloc_r+0xb0>)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	b923      	cbnz	r3, 8005f12 <_malloc_r+0x3e>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	f000 f83c 	bl	8005f88 <_sbrk_r>
 8005f10:	6038      	str	r0, [r7, #0]
 8005f12:	4629      	mov	r1, r5
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f837 	bl	8005f88 <_sbrk_r>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d123      	bne.n	8005f66 <_malloc_r+0x92>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	4630      	mov	r0, r6
 8005f22:	6033      	str	r3, [r6, #0]
 8005f24:	f000 f8e0 	bl	80060e8 <__malloc_unlock>
 8005f28:	e7e3      	b.n	8005ef2 <_malloc_r+0x1e>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	1b5b      	subs	r3, r3, r5
 8005f2e:	d417      	bmi.n	8005f60 <_malloc_r+0x8c>
 8005f30:	2b0b      	cmp	r3, #11
 8005f32:	d903      	bls.n	8005f3c <_malloc_r+0x68>
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	441c      	add	r4, r3
 8005f38:	6025      	str	r5, [r4, #0]
 8005f3a:	e004      	b.n	8005f46 <_malloc_r+0x72>
 8005f3c:	6863      	ldr	r3, [r4, #4]
 8005f3e:	42a2      	cmp	r2, r4
 8005f40:	bf0c      	ite	eq
 8005f42:	600b      	streq	r3, [r1, #0]
 8005f44:	6053      	strne	r3, [r2, #4]
 8005f46:	4630      	mov	r0, r6
 8005f48:	f000 f8ce 	bl	80060e8 <__malloc_unlock>
 8005f4c:	f104 000b 	add.w	r0, r4, #11
 8005f50:	1d23      	adds	r3, r4, #4
 8005f52:	f020 0007 	bic.w	r0, r0, #7
 8005f56:	1ac2      	subs	r2, r0, r3
 8005f58:	d0cc      	beq.n	8005ef4 <_malloc_r+0x20>
 8005f5a:	1a1b      	subs	r3, r3, r0
 8005f5c:	50a3      	str	r3, [r4, r2]
 8005f5e:	e7c9      	b.n	8005ef4 <_malloc_r+0x20>
 8005f60:	4622      	mov	r2, r4
 8005f62:	6864      	ldr	r4, [r4, #4]
 8005f64:	e7cc      	b.n	8005f00 <_malloc_r+0x2c>
 8005f66:	1cc4      	adds	r4, r0, #3
 8005f68:	f024 0403 	bic.w	r4, r4, #3
 8005f6c:	42a0      	cmp	r0, r4
 8005f6e:	d0e3      	beq.n	8005f38 <_malloc_r+0x64>
 8005f70:	1a21      	subs	r1, r4, r0
 8005f72:	4630      	mov	r0, r6
 8005f74:	f000 f808 	bl	8005f88 <_sbrk_r>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	d1dd      	bne.n	8005f38 <_malloc_r+0x64>
 8005f7c:	e7cf      	b.n	8005f1e <_malloc_r+0x4a>
 8005f7e:	bf00      	nop
 8005f80:	200000d8 	.word	0x200000d8
 8005f84:	200000dc 	.word	0x200000dc

08005f88 <_sbrk_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4d05      	ldr	r5, [pc, #20]	; (8005fa4 <_sbrk_r+0x1c>)
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	f7fb fa6c 	bl	8001470 <_sbrk>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_sbrk_r+0x1a>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_sbrk_r+0x1a>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20000234 	.word	0x20000234

08005fa8 <__sread>:
 8005fa8:	b510      	push	{r4, lr}
 8005faa:	460c      	mov	r4, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	f000 f8a0 	bl	80060f4 <_read_r>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	bfab      	itete	ge
 8005fb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fba:	89a3      	ldrhlt	r3, [r4, #12]
 8005fbc:	181b      	addge	r3, r3, r0
 8005fbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fc2:	bfac      	ite	ge
 8005fc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fc6:	81a3      	strhlt	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__swrite>:
 8005fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fce:	461f      	mov	r7, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	4605      	mov	r5, r0
 8005fd4:	05db      	lsls	r3, r3, #23
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	4616      	mov	r6, r2
 8005fda:	d505      	bpl.n	8005fe8 <__swrite+0x1e>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe4:	f000 f868 	bl	80060b8 <_lseek_r>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	4632      	mov	r2, r6
 8005fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	f000 b817 	b.w	8006030 <_write_r>

08006002 <__sseek>:
 8006002:	b510      	push	{r4, lr}
 8006004:	460c      	mov	r4, r1
 8006006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600a:	f000 f855 	bl	80060b8 <_lseek_r>
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	bf15      	itete	ne
 8006014:	6560      	strne	r0, [r4, #84]	; 0x54
 8006016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800601a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800601e:	81a3      	strheq	r3, [r4, #12]
 8006020:	bf18      	it	ne
 8006022:	81a3      	strhne	r3, [r4, #12]
 8006024:	bd10      	pop	{r4, pc}

08006026 <__sclose>:
 8006026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602a:	f000 b813 	b.w	8006054 <_close_r>
	...

08006030 <_write_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	2200      	movs	r2, #0
 800603a:	4d05      	ldr	r5, [pc, #20]	; (8006050 <_write_r+0x20>)
 800603c:	602a      	str	r2, [r5, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	f7fa ffba 	bl	8000fb8 <_write>
 8006044:	1c43      	adds	r3, r0, #1
 8006046:	d102      	bne.n	800604e <_write_r+0x1e>
 8006048:	682b      	ldr	r3, [r5, #0]
 800604a:	b103      	cbz	r3, 800604e <_write_r+0x1e>
 800604c:	6023      	str	r3, [r4, #0]
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	20000234 	.word	0x20000234

08006054 <_close_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	2300      	movs	r3, #0
 8006058:	4d05      	ldr	r5, [pc, #20]	; (8006070 <_close_r+0x1c>)
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	602b      	str	r3, [r5, #0]
 8006060:	f7fb f9d5 	bl	800140e <_close>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_close_r+0x1a>
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	b103      	cbz	r3, 800606e <_close_r+0x1a>
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20000234 	.word	0x20000234

08006074 <_fstat_r>:
 8006074:	b538      	push	{r3, r4, r5, lr}
 8006076:	2300      	movs	r3, #0
 8006078:	4d06      	ldr	r5, [pc, #24]	; (8006094 <_fstat_r+0x20>)
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	f7fb f9cf 	bl	8001424 <_fstat>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d102      	bne.n	8006090 <_fstat_r+0x1c>
 800608a:	682b      	ldr	r3, [r5, #0]
 800608c:	b103      	cbz	r3, 8006090 <_fstat_r+0x1c>
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	bd38      	pop	{r3, r4, r5, pc}
 8006092:	bf00      	nop
 8006094:	20000234 	.word	0x20000234

08006098 <_isatty_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	2300      	movs	r3, #0
 800609c:	4d05      	ldr	r5, [pc, #20]	; (80060b4 <_isatty_r+0x1c>)
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fb f9cd 	bl	8001442 <_isatty>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_isatty_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_isatty_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000234 	.word	0x20000234

080060b8 <_lseek_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	4611      	mov	r1, r2
 80060c0:	2200      	movs	r2, #0
 80060c2:	4d05      	ldr	r5, [pc, #20]	; (80060d8 <_lseek_r+0x20>)
 80060c4:	602a      	str	r2, [r5, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f7fb f9c5 	bl	8001456 <_lseek>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d102      	bne.n	80060d6 <_lseek_r+0x1e>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	b103      	cbz	r3, 80060d6 <_lseek_r+0x1e>
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
 80060d8:	20000234 	.word	0x20000234

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f7ff be47 	b.w	8005d70 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	2000022c 	.word	0x2000022c

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f7ff be42 	b.w	8005d72 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	2000022c 	.word	0x2000022c

080060f4 <_read_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4604      	mov	r4, r0
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	2200      	movs	r2, #0
 80060fe:	4d05      	ldr	r5, [pc, #20]	; (8006114 <_read_r+0x20>)
 8006100:	602a      	str	r2, [r5, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	f7fb f966 	bl	80013d4 <_read>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d102      	bne.n	8006112 <_read_r+0x1e>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	b103      	cbz	r3, 8006112 <_read_r+0x1e>
 8006110:	6023      	str	r3, [r4, #0]
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	20000234 	.word	0x20000234

08006118 <_init>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	bf00      	nop
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr

08006124 <_fini>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr
