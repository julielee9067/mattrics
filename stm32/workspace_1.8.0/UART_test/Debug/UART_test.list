
UART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023a0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002500  08002500  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002508  08002508  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800251c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800251c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006321  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001523  00000000  00000000  00026356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  00027f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012740  00000000  00000000  00028538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000701c  00000000  00000000  0003ac78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007283d  00000000  00000000  00041c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b44d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f4  00000000  00000000  000b4524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080024c4 	.word	0x080024c4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080024c4 	.word	0x080024c4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 f9da 	bl	8000832 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f825 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f895 	bl	80005b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000486:	f000 f869 	bl	800055c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	480d      	ldr	r0, [pc, #52]	; (80004c4 <main+0x50>)
 8000490:	f000 fd4a 	bl	8000f28 <HAL_GPIO_WritePin>
//  while (1)
//  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t input[1] = "a";
 8000494:	2361      	movs	r3, #97	; 0x61
 8000496:	713b      	strb	r3, [r7, #4]
	  uint8_t output[1];
//	  if (!received) {
		  int send_val = HAL_UART_Transmit_IT(&huart1, input, sizeof(input));
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2201      	movs	r2, #1
 800049c:	4619      	mov	r1, r3
 800049e:	480a      	ldr	r0, [pc, #40]	; (80004c8 <main+0x54>)
 80004a0:	f001 fb43 	bl	8001b2a <HAL_UART_Transmit_IT>
 80004a4:	4603      	mov	r3, r0
 80004a6:	60fb      	str	r3, [r7, #12]
//		  while(HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX || HAL_UART_GetState(&huart1) == HAL_UART_STATE_BUSY_TX_RX) {} // transmitting
		  // finish transmitting
		  int rec_val = HAL_UART_Receive_IT(&huart1, output, sizeof(output));
 80004a8:	463b      	mov	r3, r7
 80004aa:	2201      	movs	r2, #1
 80004ac:	4619      	mov	r1, r3
 80004ae:	4806      	ldr	r0, [pc, #24]	; (80004c8 <main+0x54>)
 80004b0:	f001 fb7f 	bl	8001bb2 <HAL_UART_Receive_IT>
 80004b4:	4603      	mov	r3, r0
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	2300      	movs	r3, #0

//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
//	  HAL_Delay(100);
//	  int ret_val = HAL_UART_Receive(&huart1, output, sizeof(output), 1000);

  }
 80004ba:	4618      	mov	r0, r3
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40020400 	.word	0x40020400
 80004c8:	2000002c 	.word	0x2000002c

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b092      	sub	sp, #72	; 0x48
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2234      	movs	r2, #52	; 0x34
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 ffea 	bl	80024b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <SystemClock_Config+0x8c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004f6:	4a18      	ldr	r2, [pc, #96]	; (8000558 <SystemClock_Config+0x8c>)
 80004f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004fc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004fe:	2310      	movs	r3, #16
 8000500:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000502:	2301      	movs	r3, #1
 8000504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800050a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000510:	2300      	movs	r3, #0
 8000512:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fd1d 	bl	8000f58 <HAL_RCC_OscConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000524:	f000 f8a8 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	230f      	movs	r3, #15
 800052a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f839 	bl	80015b8 <HAL_RCC_ClockConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800054c:	f000 f894 	bl	8000678 <Error_Handler>
  }
}
 8000550:	bf00      	nop
 8000552:	3748      	adds	r7, #72	; 0x48
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40007000 	.word	0x40007000

0800055c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_USART1_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000594:	f001 fa7c 	bl	8001a90 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f86b 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	40013800 	.word	0x40013800

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_GPIO_Init+0x8c>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <MX_GPIO_Init+0x8c>)
 80005cc:	f043 0320 	orr.w	r3, r3, #32
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_GPIO_Init+0x8c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0320 	and.w	r3, r3, #32
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_GPIO_Init+0x8c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_GPIO_Init+0x8c>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	61d3      	str	r3, [r2, #28]
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_GPIO_Init+0x8c>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_GPIO_Init+0x8c>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_GPIO_Init+0x8c>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_GPIO_Init+0x8c>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_GPIO_Init+0x90>)
 8000614:	f000 fc88 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_GPIO_Init+0x90>)
 8000630:	f000 fafa 	bl	8000c28 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40023800 	.word	0x40023800
 8000640:	40020400 	.word	0x40020400

08000644 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
	...

08000658 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <HAL_UART_RxCpltCallback+0x1c>)
 8000666:	f000 fc5f 	bl	8000f28 <HAL_GPIO_WritePin>
//	received = true;
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020400 	.word	0x40020400

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <HAL_MspInit+0x58>)
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_MspInit+0x58>)
 8000690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000694:	6253      	str	r3, [r2, #36]	; 0x24
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <HAL_MspInit+0x58>)
 8000698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <HAL_MspInit+0x58>)
 80006a4:	6a1b      	ldr	r3, [r3, #32]
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_MspInit+0x58>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6213      	str	r3, [r2, #32]
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <HAL_MspInit+0x58>)
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_MspInit+0x58>)
 80006bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006be:	4a07      	ldr	r2, [pc, #28]	; (80006dc <HAL_MspInit+0x58>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6253      	str	r3, [r2, #36]	; 0x24
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_MspInit+0x58>)
 80006c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40023800 	.word	0x40023800

080006e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <HAL_UART_MspInit+0x8c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d130      	bne.n	8000764 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000704:	6a1b      	ldr	r3, [r3, #32]
 8000706:	4a1a      	ldr	r2, [pc, #104]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070c:	6213      	str	r3, [r2, #32]
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000710:	6a1b      	ldr	r3, [r3, #32]
 8000712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_UART_MspInit+0x90>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	61d3      	str	r3, [r2, #28]
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_UART_MspInit+0x90>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000732:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000744:	2307      	movs	r3, #7
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <HAL_UART_MspInit+0x94>)
 8000750:	f000 fa6a 	bl	8000c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	2025      	movs	r0, #37	; 0x25
 800075a:	f000 f9b0 	bl	8000abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800075e:	2025      	movs	r0, #37	; 0x25
 8000760:	f000 f9c9 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40013800 	.word	0x40013800
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr

080007ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007be:	f000 f88b 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART1_IRQHandler+0x10>)
 80007ce:	f001 fa21 	bl	8001c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000002c 	.word	0x2000002c

080007dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ea:	490d      	ldr	r1, [pc, #52]	; (8000820 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000800:	4c0a      	ldr	r4, [pc, #40]	; (800082c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080e:	f7ff ffe5 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000812:	f001 fe2b 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000816:	f7ff fe2d 	bl	8000474 <main>
  bx lr
 800081a:	4770      	bx	lr
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000824:	08002510 	.word	0x08002510
  ldr r2, =_sbss
 8000828:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800082c:	20000074 	.word	0x20000074

08000830 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC1_IRQHandler>

08000832 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000838:	2300      	movs	r3, #0
 800083a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f933 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f80e 	bl	8000864 <HAL_InitTick>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	71fb      	strb	r3, [r7, #7]
 8000852:	e001      	b.n	8000858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000854:	f7ff ff16 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000858:	79fb      	ldrb	r3, [r7, #7]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_InitTick+0x68>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d022      	beq.n	80008be <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_InitTick+0x6c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <HAL_InitTick+0x68>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000884:	fbb1 f3f3 	udiv	r3, r1, r3
 8000888:	fbb2 f3f3 	udiv	r3, r2, r3
 800088c:	4618      	mov	r0, r3
 800088e:	f000 f940 	bl	8000b12 <HAL_SYSTICK_Config>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10f      	bne.n	80008b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b0f      	cmp	r3, #15
 800089c:	d809      	bhi.n	80008b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089e:	2200      	movs	r2, #0
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	f04f 30ff 	mov.w	r0, #4294967295
 80008a6:	f000 f90a 	bl	8000abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_InitTick+0x70>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	e007      	b.n	80008c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e004      	b.n	80008c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	73fb      	strb	r3, [r7, #15]
 80008bc:	e001      	b.n	80008c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000008 	.word	0x20000008
 80008d0:	20000000 	.word	0x20000000
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <HAL_IncTick+0x1c>)
 80008e8:	6013      	str	r3, [r2, #0]
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000070 	.word	0x20000070
 80008f8:	20000008 	.word	0x20000008

080008fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000070 	.word	0x20000070

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <__NVIC_EnableIRQ+0x34>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f7ff ff90 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff2d 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff42 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff35 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa2 	bl	8000a64 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d008      	beq.n	8000b54 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e022      	b.n	8000b9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 020e 	bic.w	r2, r2, #14
 8000b62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f022 0201 	bic.w	r2, r2, #1
 8000b72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 021c 	and.w	r2, r3, #28
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b80:	2101      	movs	r1, #1
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2200      	movs	r2, #0
 8000b94:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d005      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e029      	b.n	8000c1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f022 020e 	bic.w	r2, r2, #14
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f022 0201 	bic.w	r2, r2, #1
 8000be6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 021c 	and.w	r2, r3, #28
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	4798      	blx	r3
    }
  }
  return status;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c3e:	e154      	b.n	8000eea <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8146 	beq.w	8000ee4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0203 	and.w	r2, r3, #3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a0 	beq.w	8000ee4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000da6:	6a1b      	ldr	r3, [r3, #32]
 8000da8:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6213      	str	r3, [r2, #32]
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x2e0>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a4b      	ldr	r2, [pc, #300]	; (8000f10 <HAL_GPIO_Init+0x2e8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x1f4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_GPIO_Init+0x2ec>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1f0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a49      	ldr	r2, [pc, #292]	; (8000f18 <HAL_GPIO_Init+0x2f0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1ec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <HAL_GPIO_Init+0x2f4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a47      	ldr	r2, [pc, #284]	; (8000f20 <HAL_GPIO_Init+0x2f8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1e4>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1f6>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e2e:	4937      	ldr	r1, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x2e4>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a30      	ldr	r2, [pc, #192]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <HAL_GPIO_Init+0x2fc>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea3 	bne.w	8000c40 <HAL_GPIO_Init+0x18>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	619a      	str	r2, [r3, #24]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e31d      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f6a:	4b94      	ldr	r3, [pc, #592]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f74:	4b91      	ldr	r3, [pc, #580]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d07b      	beq.n	8001082 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d006      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2b0c      	cmp	r3, #12
 8000f94:	d10f      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b87      	ldr	r3, [pc, #540]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06a      	beq.n	8001080 <HAL_RCC_OscConfig+0x128>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d166      	bne.n	8001080 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e2f7      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d106      	bne.n	8000fcc <HAL_RCC_OscConfig+0x74>
 8000fbe:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a7e      	ldr	r2, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e02d      	b.n	8001028 <HAL_RCC_OscConfig+0xd0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10c      	bne.n	8000fee <HAL_RCC_OscConfig+0x96>
 8000fd4:	4b79      	ldr	r3, [pc, #484]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a78      	ldr	r2, [pc, #480]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b76      	ldr	r3, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e01c      	b.n	8001028 <HAL_RCC_OscConfig+0xd0>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0xb8>
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a70      	ldr	r2, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6e      	ldr	r3, [pc, #440]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6d      	ldr	r2, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0xd0>
 8001010:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a69      	ldr	r2, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b67      	ldr	r3, [pc, #412]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a66      	ldr	r2, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fc64 	bl	80008fc <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fc60 	bl	80008fc <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e2ad      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0xe0>
 8001056:	e014      	b.n	8001082 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fc50 	bl	80008fc <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fc4c 	bl	80008fc <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e299      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001072:	4b52      	ldr	r3, [pc, #328]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x108>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d05a      	beq.n	8001144 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b04      	cmp	r3, #4
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d119      	bne.n	80010ce <HAL_RCC_OscConfig+0x176>
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d116      	bne.n	80010ce <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a0:	4b46      	ldr	r3, [pc, #280]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_RCC_OscConfig+0x160>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e276      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	493d      	ldr	r1, [pc, #244]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010cc:	e03a      	b.n	8001144 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d020      	beq.n	8001118 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <HAL_RCC_OscConfig+0x268>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fc0e 	bl	80008fc <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc0a 	bl	80008fc <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e257      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	492a      	ldr	r1, [pc, #168]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001112:	4313      	orrs	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
 8001116:	e015      	b.n	8001144 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_RCC_OscConfig+0x268>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fbed 	bl	80008fc <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fbe9 	bl	80008fc <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e236      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f0      	bne.n	8001126 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80b8 	beq.w	80012c2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d170      	bne.n	800123a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001158:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_OscConfig+0x218>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e21a      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1a      	ldr	r2, [r3, #32]
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800117c:	429a      	cmp	r2, r3
 800117e:	d921      	bls.n	80011c4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fc23 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e208      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80011a2:	4313      	orrs	r3, r2
 80011a4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	061b      	lsls	r3, r3, #24
 80011b4:	4901      	ldr	r1, [pc, #4]	; (80011bc <HAL_RCC_OscConfig+0x264>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e020      	b.n	80011fe <HAL_RCC_OscConfig+0x2a6>
 80011bc:	40023800 	.word	0x40023800
 80011c0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c4:	4ba4      	ldr	r3, [pc, #656]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	49a1      	ldr	r1, [pc, #644]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d6:	4ba0      	ldr	r3, [pc, #640]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	499c      	ldr	r1, [pc, #624]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fbee 	bl	80019d0 <RCC_SetFlashLatencyFromMSIRange>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e1d3      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	0b5b      	lsrs	r3, r3, #13
 8001204:	3301      	adds	r3, #1
 8001206:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800120e:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001210:	6892      	ldr	r2, [r2, #8]
 8001212:	0912      	lsrs	r2, r2, #4
 8001214:	f002 020f 	and.w	r2, r2, #15
 8001218:	4990      	ldr	r1, [pc, #576]	; (800145c <HAL_RCC_OscConfig+0x504>)
 800121a:	5c8a      	ldrb	r2, [r1, r2]
 800121c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121e:	4a90      	ldr	r2, [pc, #576]	; (8001460 <HAL_RCC_OscConfig+0x508>)
 8001220:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001222:	4b90      	ldr	r3, [pc, #576]	; (8001464 <HAL_RCC_OscConfig+0x50c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fb1c 	bl	8000864 <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d045      	beq.n	80012c2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	e1b5      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d029      	beq.n	8001296 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <HAL_RCC_OscConfig+0x510>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001248:	f7ff fb58 	bl	80008fc <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001250:	f7ff fb54 	bl	80008fc <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e1a1      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001262:	4b7d      	ldr	r3, [pc, #500]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126e:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	4977      	ldr	r1, [pc, #476]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001280:	4b75      	ldr	r3, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	4972      	ldr	r1, [pc, #456]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
 8001294:	e015      	b.n	80012c2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <HAL_RCC_OscConfig+0x510>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb2e 	bl	80008fc <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb2a 	bl	80008fc <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e177      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012b6:	4b68      	ldr	r3, [pc, #416]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d030      	beq.n	8001330 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d016      	beq.n	8001304 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	4b65      	ldr	r3, [pc, #404]	; (800146c <HAL_RCC_OscConfig+0x514>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fb0e 	bl	80008fc <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e4:	f7ff fb0a 	bl	80008fc <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e157      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80012f6:	4b58      	ldr	r3, [pc, #352]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0f0      	beq.n	80012e4 <HAL_RCC_OscConfig+0x38c>
 8001302:	e015      	b.n	8001330 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_OscConfig+0x514>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7ff faf7 	bl	80008fc <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff faf3 	bl	80008fc <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e140      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f0      	bne.n	8001312 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80b5 	beq.w	80014a8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10d      	bne.n	800136a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	4a41      	ldr	r2, [pc, #260]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6253      	str	r3, [r2, #36]	; 0x24
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001366:	2301      	movs	r3, #1
 8001368:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800136a:	4b41      	ldr	r3, [pc, #260]	; (8001470 <HAL_RCC_OscConfig+0x518>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001372:	2b00      	cmp	r3, #0
 8001374:	d118      	bne.n	80013a8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <HAL_RCC_OscConfig+0x518>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x518>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001382:	f7ff fabb 	bl	80008fc <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800138a:	f7ff fab7 	bl	80008fc <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b64      	cmp	r3, #100	; 0x64
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e104      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	4b34      	ldr	r3, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x518>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_RCC_OscConfig+0x466>
 80013b0:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b4:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6353      	str	r3, [r2, #52]	; 0x34
 80013bc:	e02d      	b.n	800141a <HAL_RCC_OscConfig+0x4c2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0x488>
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ca:	4a23      	ldr	r2, [pc, #140]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d0:	6353      	str	r3, [r2, #52]	; 0x34
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	4a20      	ldr	r2, [pc, #128]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013dc:	6353      	str	r3, [r2, #52]	; 0x34
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x4c2>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x4aa>
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f2:	6353      	str	r3, [r2, #52]	; 0x34
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 80013fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fe:	6353      	str	r3, [r2, #52]	; 0x34
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x4c2>
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800140c:	6353      	str	r3, [r2, #52]	; 0x34
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001414:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001418:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fa6b 	bl	80008fc <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fa67 	bl	80008fc <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0b2      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x4d2>
 800144c:	e023      	b.n	8001496 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fa55 	bl	80008fc <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001454:	e019      	b.n	800148a <HAL_RCC_OscConfig+0x532>
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	080024e8 	.word	0x080024e8
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004
 8001468:	42470020 	.word	0x42470020
 800146c:	42470680 	.word	0x42470680
 8001470:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f7ff fa42 	bl	80008fc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001482:	4293      	cmp	r3, r2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e08d      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1ee      	bne.n	8001474 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001496:	7ffb      	ldrb	r3, [r7, #31]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d079      	beq.n	80015a4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d056      	beq.n	8001564 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d13b      	bne.n	8001536 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014be:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_RCC_OscConfig+0x65c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fa1a 	bl	80008fc <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fa16 	bl	80008fc <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e063      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014de:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	4319      	orrs	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	430b      	orrs	r3, r1
 8001502:	492b      	ldr	r1, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001508:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_RCC_OscConfig+0x65c>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f9f5 	bl	80008fc <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001516:	f7ff f9f1 	bl	80008fc <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e03e      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001528:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x5be>
 8001534:	e036      	b.n	80015a4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_RCC_OscConfig+0x65c>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f9de 	bl	80008fc <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff f9da 	bl	80008fc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e027      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x5ec>
 8001562:	e01f      	b.n	80015a4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e01a      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_OscConfig+0x658>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	429a      	cmp	r2, r3
 8001582:	d10d      	bne.n	80015a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	42470060 	.word	0x42470060

080015b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e11a      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015cc:	4b8f      	ldr	r3, [pc, #572]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d919      	bls.n	800160e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_RCC_ClockConfig+0x34>
 80015e0:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a89      	ldr	r2, [pc, #548]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 0201 	bic.w	r2, r3, #1
 80015f4:	4985      	ldr	r1, [pc, #532]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fc:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0f9      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161a:	4b7d      	ldr	r3, [pc, #500]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	497a      	ldr	r1, [pc, #488]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 808e 	beq.w	8001756 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001642:	4b73      	ldr	r3, [pc, #460]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d121      	bne.n	8001692 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0d7      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800165a:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d115      	bne.n	8001692 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e0cb      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001672:	4b67      	ldr	r3, [pc, #412]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0bf      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0b7      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	495c      	ldr	r1, [pc, #368]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff f92a 	bl	80008fc <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d112      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff f922 	bl	80008fc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e09b      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ca:	4b51      	ldr	r3, [pc, #324]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d1ee      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xfc>
 80016d6:	e03e      	b.n	8001756 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d112      	bne.n	8001706 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016e2:	f7ff f90b 	bl	80008fc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e084      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_ClockConfig+0x12a>
 8001704:	e027      	b.n	8001756 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d11d      	bne.n	800174a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff f8f4 	bl	80008fc <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e06d      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d1ee      	bne.n	8001710 <HAL_RCC_ClockConfig+0x158>
 8001732:	e010      	b.n	8001756 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f8e2 	bl	80008fc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e05b      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ee      	bne.n	8001734 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001756:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d219      	bcs.n	8001798 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d105      	bne.n	8001776 <HAL_RCC_ClockConfig+0x1be>
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a27      	ldr	r2, [pc, #156]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b25      	ldr	r3, [pc, #148]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 0201 	bic.w	r2, r3, #1
 800177e:	4923      	ldr	r1, [pc, #140]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_RCC_ClockConfig+0x254>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e034      	b.n	8001802 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d008      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	4917      	ldr	r1, [pc, #92]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	490f      	ldr	r1, [pc, #60]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017d6:	f000 f823 	bl	8001820 <HAL_RCC_GetSysClockFreq>
 80017da:	4602      	mov	r2, r0
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <HAL_RCC_ClockConfig+0x258>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	490b      	ldr	r1, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x25c>)
 80017e8:	5ccb      	ldrb	r3, [r1, r3]
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x260>)
 80017f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_ClockConfig+0x264>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f834 	bl	8000864 <HAL_InitTick>
 80017fc:	4603      	mov	r3, r0
 80017fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8001800:	7afb      	ldrb	r3, [r7, #11]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00
 8001810:	40023800 	.word	0x40023800
 8001814:	080024e8 	.word	0x080024e8
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001826:	4b4d      	ldr	r3, [pc, #308]	; (800195c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d00c      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x30>
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d87c      	bhi.n	8001934 <HAL_RCC_GetSysClockFreq+0x114>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d002      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x24>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d003      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x2a>
 8001842:	e077      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b46      	ldr	r3, [pc, #280]	; (8001960 <HAL_RCC_GetSysClockFreq+0x140>)
 8001846:	613b      	str	r3, [r7, #16]
      break;
 8001848:	e082      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_GetSysClockFreq+0x144>)
 800184c:	613b      	str	r3, [r7, #16]
      break;
 800184e:	e07f      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	0c9b      	lsrs	r3, r3, #18
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_RCC_GetSysClockFreq+0x148>)
 800185a:	5cd3      	ldrb	r3, [r2, r3]
 800185c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	0d9b      	lsrs	r3, r3, #22
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186a:	4b3c      	ldr	r3, [pc, #240]	; (800195c <HAL_RCC_GetSysClockFreq+0x13c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d01a      	beq.n	80018ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	4939      	ldr	r1, [pc, #228]	; (8001964 <HAL_RCC_GetSysClockFreq+0x144>)
 8001880:	fb01 f003 	mul.w	r0, r1, r3
 8001884:	2100      	movs	r1, #0
 8001886:	fb01 f102 	mul.w	r1, r1, r2
 800188a:	1844      	adds	r4, r0, r1
 800188c:	4935      	ldr	r1, [pc, #212]	; (8001964 <HAL_RCC_GetSysClockFreq+0x144>)
 800188e:	fba2 0101 	umull	r0, r1, r2, r1
 8001892:	1863      	adds	r3, r4, r1
 8001894:	4619      	mov	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	461a      	mov	r2, r3
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	f7fe fc6d 	bl	800017c <__aeabi_uldivmod>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4613      	mov	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e040      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	461c      	mov	r4, r3
 80018b0:	f04f 0500 	mov.w	r5, #0
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	014b      	lsls	r3, r1, #5
 80018c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018c6:	0142      	lsls	r2, r0, #5
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	1b00      	subs	r0, r0, r4
 80018ce:	eb61 0105 	sbc.w	r1, r1, r5
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	018b      	lsls	r3, r1, #6
 80018dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018e0:	0182      	lsls	r2, r0, #6
 80018e2:	1a12      	subs	r2, r2, r0
 80018e4:	eb63 0301 	sbc.w	r3, r3, r1
 80018e8:	f04f 0000 	mov.w	r0, #0
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	00d9      	lsls	r1, r3, #3
 80018f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018f6:	00d0      	lsls	r0, r2, #3
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	1912      	adds	r2, r2, r4
 80018fe:	eb45 0303 	adc.w	r3, r5, r3
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0299      	lsls	r1, r3, #10
 800190c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001910:	0290      	lsls	r0, r2, #10
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	461a      	mov	r2, r3
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f7fe fc2b 	bl	800017c <__aeabi_uldivmod>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4613      	mov	r3, r2
 800192c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e00d      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	0b5b      	lsrs	r3, r3, #13
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	613b      	str	r3, [r7, #16]
      break;
 800194e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001950:	693b      	ldr	r3, [r7, #16]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bdb0      	pop	{r4, r5, r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	00f42400 	.word	0x00f42400
 8001964:	016e3600 	.word	0x016e3600
 8001968:	080024dc 	.word	0x080024dc

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <HAL_RCC_GetHCLKFreq+0x10>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000000 	.word	0x20000000

08001980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001984:	f7ff fff2 	bl	800196c <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080024f8 	.word	0x080024f8

080019a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019ac:	f7ff ffde 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	0adb      	lsrs	r3, r3, #11
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	4903      	ldr	r1, [pc, #12]	; (80019cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	080024f8 	.word	0x080024f8

080019d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d12c      	bne.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80019f4:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e016      	b.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a20:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	4a17      	ldr	r2, [pc, #92]	; (8001a84 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a34:	d105      	bne.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a3c:	d101      	bne.n	8001a42 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 0201 	bic.w	r2, r3, #1
 8001a5c:	490b      	ldr	r1, [pc, #44]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a64:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d001      	beq.n	8001a76 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e03f      	b.n	8001b22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7fe fe12 	bl	80006e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fbe5 	bl	80022a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001af8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d130      	bne.n	8001ba6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_UART_Transmit_IT+0x26>
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e029      	b.n	8001ba8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Transmit_IT+0x38>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e022      	b.n	8001ba8 <HAL_UART_Transmit_IT+0x7e>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	88fa      	ldrh	r2, [r7, #6]
 8001b74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2221      	movs	r2, #33	; 0x21
 8001b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d11d      	bne.n	8001c08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_UART_Receive_IT+0x26>
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e016      	b.n	8001c0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_UART_Receive_IT+0x38>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e00f      	b.n	8001c0a <HAL_UART_Receive_IT+0x58>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f9c6 	bl	8001f90 <UART_Start_Receive_IT>
 8001c04:	4603      	mov	r3, r0
 8001c06:	e000      	b.n	8001c0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001c08:	2302      	movs	r3, #2
  }
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10d      	bne.n	8001c66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_UART_IRQHandler+0x52>
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fa76 	bl	8002150 <UART_Receive_IT>
      return;
 8001c64:	e17b      	b.n	8001f5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80b1 	beq.w	8001dd0 <HAL_UART_IRQHandler+0x1bc>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <HAL_UART_IRQHandler+0x70>
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80a6 	beq.w	8001dd0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_UART_IRQHandler+0x90>
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xb0>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0202 	orr.w	r2, r3, #2
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xd0>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0204 	orr.w	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00f      	beq.n	8001d0e <HAL_UART_IRQHandler+0xfa>
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <HAL_UART_IRQHandler+0xee>
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f043 0208 	orr.w	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 811e 	beq.w	8001f54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_UART_IRQHandler+0x11e>
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	f003 0320 	and.w	r3, r3, #32
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fa0f 	bl	8002150 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3c:	2b40      	cmp	r3, #64	; 0x40
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_UART_IRQHandler+0x146>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d031      	beq.n	8001dbe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f951 	bl	8002002 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b40      	cmp	r3, #64	; 0x40
 8001d6c:	d123      	bne.n	8001db6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d013      	beq.n	8001dae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	4a76      	ldr	r2, [pc, #472]	; (8001f64 <HAL_UART_IRQHandler+0x350>)
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe ff06 	bl	8000ba4 <HAL_DMA_Abort_IT>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d016      	beq.n	8001dcc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da8:	4610      	mov	r0, r2
 8001daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dac:	e00e      	b.n	8001dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8da 	bl	8001f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db4:	e00a      	b.n	8001dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8d6 	bl	8001f68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dbc:	e006      	b.n	8001dcc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8d2 	bl	8001f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001dca:	e0c3      	b.n	8001f54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dcc:	bf00      	nop
    return;
 8001dce:	e0c1      	b.n	8001f54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	f040 80a1 	bne.w	8001f1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 809b 	beq.w	8001f1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001de6:	6a3b      	ldr	r3, [r7, #32]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8095 	beq.w	8001f1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	2b40      	cmp	r3, #64	; 0x40
 8001e14:	d14e      	bne.n	8001eb4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001e20:	8a3b      	ldrh	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 8098 	beq.w	8001f58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e2c:	8a3a      	ldrh	r2, [r7, #16]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	f080 8092 	bcs.w	8001f58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8a3a      	ldrh	r2, [r7, #16]
 8001e38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b20      	cmp	r3, #32
 8001e42:	d02b      	beq.n	8001e9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695a      	ldr	r2, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0201 	bic.w	r2, r2, #1
 8001e62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2220      	movs	r2, #32
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0210 	bic.w	r2, r2, #16
 8001e90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe47 	bl	8000b2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f864 	bl	8001f7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001eb2:	e051      	b.n	8001f58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d047      	beq.n	8001f5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001ecc:	8a7b      	ldrh	r3, [r7, #18]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d044      	beq.n	8001f5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ee0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0210 	bic.w	r2, r2, #16
 8001f0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f10:	8a7b      	ldrh	r3, [r7, #18]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f830 	bl	8001f7a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f1a:	e01f      	b.n	8001f5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d008      	beq.n	8001f38 <HAL_UART_IRQHandler+0x324>
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f8a6 	bl	8002082 <UART_Transmit_IT>
    return;
 8001f36:	e012      	b.n	8001f5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <HAL_UART_IRQHandler+0x34a>
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8e7 	bl	8002120 <UART_EndTransmit_IT>
    return;
 8001f52:	e004      	b.n	8001f5e <HAL_UART_IRQHandler+0x34a>
    return;
 8001f54:	bf00      	nop
 8001f56:	e002      	b.n	8001f5e <HAL_UART_IRQHandler+0x34a>
      return;
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <HAL_UART_IRQHandler+0x34a>
      return;
 8001f5c:	bf00      	nop
  }
}
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0800205b 	.word	0x0800205b

08001f68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	88fa      	ldrh	r2, [r7, #6]
 8001fa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	88fa      	ldrh	r2, [r7, #6]
 8001fae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2222      	movs	r2, #34	; 0x22
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002018:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	2b01      	cmp	r3, #1
 8002030:	d107      	bne.n	8002042 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0210 	bic.w	r2, r2, #16
 8002040:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff ff77 	bl	8001f68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b21      	cmp	r3, #33	; 0x21
 8002094:	d13e      	bne.n	8002114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209e:	d114      	bne.n	80020ca <UART_Transmit_IT+0x48>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d110      	bne.n	80020ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	1c9a      	adds	r2, r3, #2
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	621a      	str	r2, [r3, #32]
 80020c8:	e008      	b.n	80020dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6211      	str	r1, [r2, #32]
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4619      	mov	r1, r3
 80020ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10f      	bne.n	8002110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002136:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7fe fa7f 	bl	8000644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b22      	cmp	r3, #34	; 0x22
 8002162:	f040 8099 	bne.w	8002298 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216e:	d117      	bne.n	80021a0 <UART_Receive_IT+0x50>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d113      	bne.n	80021a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218e:	b29a      	uxth	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	1c9a      	adds	r2, r3, #2
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	629a      	str	r2, [r3, #40]	; 0x28
 800219e:	e026      	b.n	80021ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b2:	d007      	beq.n	80021c4 <UART_Receive_IT+0x74>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <UART_Receive_IT+0x82>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e008      	b.n	80021e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4619      	mov	r1, r3
 80021fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d148      	bne.n	8002294 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0220 	bic.w	r2, r2, #32
 8002210:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	2b01      	cmp	r3, #1
 8002240:	d123      	bne.n	800228a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0210 	bic.w	r2, r2, #16
 8002256:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b10      	cmp	r3, #16
 8002264:	d10a      	bne.n	800227c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fe79 	bl	8001f7a <HAL_UARTEx_RxEventCallback>
 8002288:	e002      	b.n	8002290 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe f9e4 	bl	8000658 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e002      	b.n	800229a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	e000      	b.n	800229a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002298:	2302      	movs	r3, #2
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80022e4:	f023 030c 	bic.w	r3, r3, #12
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	430b      	orrs	r3, r1
 80022f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a55      	ldr	r2, [pc, #340]	; (8002464 <UART_SetConfig+0x1c0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d103      	bne.n	800231a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002312:	f7ff fb49 	bl	80019a8 <HAL_RCC_GetPCLK2Freq>
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	e002      	b.n	8002320 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800231a:	f7ff fb31 	bl	8001980 <HAL_RCC_GetPCLK1Freq>
 800231e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002328:	d14c      	bne.n	80023c4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009a      	lsls	r2, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	4a49      	ldr	r2, [pc, #292]	; (8002468 <UART_SetConfig+0x1c4>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	0119      	lsls	r1, r3, #4
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4613      	mov	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	009a      	lsls	r2, r3, #2
 8002354:	441a      	add	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002360:	4b41      	ldr	r3, [pc, #260]	; (8002468 <UART_SetConfig+0x1c4>)
 8002362:	fba3 0302 	umull	r0, r3, r3, r2
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	fb00 f303 	mul.w	r3, r0, r3
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	3332      	adds	r3, #50	; 0x32
 8002374:	4a3c      	ldr	r2, [pc, #240]	; (8002468 <UART_SetConfig+0x1c4>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002382:	4419      	add	r1, r3
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fbb2 f2f3 	udiv	r2, r2, r3
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <UART_SetConfig+0x1c4>)
 800239c:	fba3 0302 	umull	r0, r3, r3, r2
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	2064      	movs	r0, #100	; 0x64
 80023a4:	fb00 f303 	mul.w	r3, r0, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	3332      	adds	r3, #50	; 0x32
 80023ae:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <UART_SetConfig+0x1c4>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	f003 0207 	and.w	r2, r3, #7
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	440a      	add	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023c2:	e04a      	b.n	800245a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009a      	lsls	r2, r3, #2
 80023ce:	441a      	add	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023da:	4a23      	ldr	r2, [pc, #140]	; (8002468 <UART_SetConfig+0x1c4>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	0119      	lsls	r1, r3, #4
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	009a      	lsls	r2, r3, #2
 80023ee:	441a      	add	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <UART_SetConfig+0x1c4>)
 80023fc:	fba3 0302 	umull	r0, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2064      	movs	r0, #100	; 0x64
 8002404:	fb00 f303 	mul.w	r3, r0, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a16      	ldr	r2, [pc, #88]	; (8002468 <UART_SetConfig+0x1c4>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	4419      	add	r1, r3
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	009a      	lsls	r2, r3, #2
 8002426:	441a      	add	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <UART_SetConfig+0x1c4>)
 8002434:	fba3 0302 	umull	r0, r3, r3, r2
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	2064      	movs	r0, #100	; 0x64
 800243c:	fb00 f303 	mul.w	r3, r0, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	3332      	adds	r3, #50	; 0x32
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <UART_SetConfig+0x1c4>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 020f 	and.w	r2, r3, #15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	440a      	add	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40013800 	.word	0x40013800
 8002468:	51eb851f 	.word	0x51eb851f

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	2600      	movs	r6, #0
 8002470:	4d0c      	ldr	r5, [pc, #48]	; (80024a4 <__libc_init_array+0x38>)
 8002472:	4c0d      	ldr	r4, [pc, #52]	; (80024a8 <__libc_init_array+0x3c>)
 8002474:	1b64      	subs	r4, r4, r5
 8002476:	10a4      	asrs	r4, r4, #2
 8002478:	42a6      	cmp	r6, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	f000 f822 	bl	80024c4 <_init>
 8002480:	2600      	movs	r6, #0
 8002482:	4d0a      	ldr	r5, [pc, #40]	; (80024ac <__libc_init_array+0x40>)
 8002484:	4c0a      	ldr	r4, [pc, #40]	; (80024b0 <__libc_init_array+0x44>)
 8002486:	1b64      	subs	r4, r4, r5
 8002488:	10a4      	asrs	r4, r4, #2
 800248a:	42a6      	cmp	r6, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f855 3b04 	ldr.w	r3, [r5], #4
 8002494:	4798      	blx	r3
 8002496:	3601      	adds	r6, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f855 3b04 	ldr.w	r3, [r5], #4
 800249e:	4798      	blx	r3
 80024a0:	3601      	adds	r6, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	08002508 	.word	0x08002508
 80024a8:	08002508 	.word	0x08002508
 80024ac:	08002508 	.word	0x08002508
 80024b0:	0800250c 	.word	0x0800250c

080024b4 <memset>:
 80024b4:	4603      	mov	r3, r0
 80024b6:	4402      	add	r2, r0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <memset+0xa>
 80024bc:	4770      	bx	lr
 80024be:	f803 1b01 	strb.w	r1, [r3], #1
 80024c2:	e7f9      	b.n	80024b8 <memset+0x4>

080024c4 <_init>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr

080024d0 <_fini>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr
